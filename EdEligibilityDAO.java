package gov.state.nextgen.common.dao.custom;

import gov.state.nextgen.common.bo.BiUtils;
import gov.state.nextgen.common.cargo.custom.BiIssuanceTriggerCargo;
import gov.state.nextgen.common.cargo.custom.BiWcPaymentDetailsCustomCargo;
import gov.state.nextgen.common.cargo.custom.EdEligibilityBatchCustomCargo;
import gov.state.nextgen.common.cargo.custom.EdEligibilityCargo;
import gov.state.nextgen.common.cargo.custom.EdEligibilityCustomCargo;
import gov.state.nextgen.common.cargo.custom.EdIndvEligibilityCargo;
import gov.state.nextgen.common.dao.generated.EdEligibilityGenDAO;
import gov.state.nextgen.common.util.ALSOPUtil;
import gov.state.nextgen.common.util.CoDebugger;
import gov.state.nextgen.common.util.DateFormatter;
import gov.state.nextgen.common.util.EDBCLogger;
import gov.state.nextgen.common.util.RpUtils;
import gov.state.nextgen.common.util.WcUtil;
import gov.state.nextgen.framework.business.bo.ApplicationConnectionFactory;
import gov.state.nextgen.framework.business.entities.cargo.custom.FwDate;
import gov.state.nextgen.framework.business.services.rulesengine.helperclasses.DateComparisons;
import gov.state.nextgen.framework.dao.DAOSqlHelper;
import gov.state.nextgen.framework.dao.Sequence;
import gov.state.nextgen.framework.exception.GenericRunTimeException;
import gov.state.nextgen.framework.util.CargoPropertyMapper;
import gov.state.nextgen.framework.util.DateHandler;
import gov.state.nextgen.framework.util.Debug;
import gov.state.nextgen.framework.util.FwCalendar;
import gov.state.nextgen.framework.util.FwConstants;
import gov.state.nextgen.framework.util.FwDateComparisons;
import gov.state.nextgen.framework.util.FwServiceFactory;
import gov.state.nextgen.framework.util.ILog;
import gov.state.nextgen.ws.lds.LDSConstants;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.chimes.mt.incomeaverage.vos.DateUtilities;
import com.deloitte.common.commands.persistence.SQLCommand;
import com.deloitte.common.objects.DefaultPropertyPopulator;
import com.deloitte.common.objects.ObjectPopulator;
import com.deloitte.common.objects.framework.CheckedApplicationException;

/**
 * The class <code>EdEligibilityDAO</code> is an interface to EdEligibilityDAO
 * table and contains methods to query this table.
 *
 * @author Deloitte
 * @version %Revision%
 */

public class EdEligibilityDAO extends EdEligibilityGenDAO {

	final private String strLiteralMaxRows = " maxRows= ";
	final private String strLiteralAndDeleteSWN = " AND DELETE_SW = 'N' ";
	final private String strLiteralOrderByEdgNum = " ORDER BY EDG_NUM ";
	final private String strLiteralCargo = " cargo=";
	final private String strLiteralANd = " AND ";
	final private String strLiteralMMMyy = "MMM-yy";
	final private String strLiteralEdgNum = "EDG_NUM";
	final private String strLiteralProgarmCd = "PROGRAM_CD";
	final private String strLiteralDeleteSw = "DELETE_SW";
	final private String strLiteralCurrentEliInd = " CURRENT_ELIG_IND = ";
	final private String strLiteralDeleteSw2 = " DELETE_SW = ";
	final private String strLiteralCaseNum = " (CASE_NUM = ";
	final private String strLiteralAndprogramCd = " AND PROGRAM_CD = '";
	final private String strLiteralAndRecEndDt = " AND (REC_END_DT >= ";
	final private String strLiteralAndRecBegindt = " AND REC_BEGIN_DT <= ";
	final private String strLiteralCaseNum1 = "CASE_NUM";
	final private String strLiteralEdgTraceId = "EDG_TRACE_ID";
	final private String strLiteralFromEdEligibiltyA = "from ED_ELIGIBILITY A ";
	final private String strLiteralWhereCaseNum = " Where CASE_NUM = ";
	final private String strLiteralAndEdbcrunDt = " AND EDBC_RUN_DT = ";
	final private String strLiteralAndCurrentEligIndA = " AND CURRENT_ELIG_IND = 'A' ";
	final private String strLiteralOr = " OR ";
	final private String strLiteralCaseNum2 = " CASE_NUM = ";
	final private String strLiteralAndDeleteSwY = " AND DELETE_SW <> 'Y'";
	final private String strLiteralOrPaymentendDt = " OR ( PAYMENT_END_DT >= ";
	final private String strLiteralAndPaymentBegDt = " and PAYMENT_BEG_DT <=";
	final private String strLiteralclparenthesis = ") ) ";
	final private String strLiteralAndCurrentEligIndP = " AND CURRENT_ELIG_IND = 'P' ";
	final private String strLiteralAndCgStatusCd = "' AND CG_STATUS_CD = '";
	final private String strLiteralAndEdgNum = " AND EDG_NUM = ";
	final private String strLiteralDdMMMMyy = "dd-MMM-yy";
	final private String strLiteralAndPaymentBegDt2 = " AND PAYMENT_BEG_DT <= ";
	final private String strLiteralAndPaymentEndDt2 = " AND (PAYMENT_END_DT >= ";
	final private String strLiteralOrPaymentEndDtisNull = " OR PAYMENT_END_DT IS NULL) ";
	final private String strLiteralOrCgStatusCd = "' OR CG_STATUS_CD = '";
	final private String strLiteralAndEdbcRunDt = " AND EDBC_RUN_DT <= ";
	final private String strLiteralAndDeleteSwN = " AND DELETE_SW = 'N'";
	final private String strLiteralAndTypeOfAssistanceCd = "' AND TYPE_OF_ASSISTANCE_CD = '";
	final private String strLiteralclparenthesis1 = "') ";
	final private String strLiteralCaseNum3 = " ((CASE_NUM = ";
	final private String strLiteralAndCgStatusCd2 = "') AND (CG_STATUS_CD = '";
	final private String strLiteralclparenthesis2 = ")) ";
	final private String strLiteralCurrenteligIndA = " and CURRENT_ELIG_IND = 'A' ";
	final private String strLiteralDeleteSwN = " and DELETE_SW = 'N' ";
	final private String strLiteralPaymentenddt = " and (PAYMENT_END_DT is null";
	final private String strLiteralPaymentEndDt2 = " or PAYMENT_END_DT >= ";
	final private String strLiteralPaymentBegDt = " and PAYMENT_BEG_DT <= ";
	final private String strLiteralCurrentEligInd = "CURRENT_ELIG_IND";
	final private String strLiteralTypeOfAssistanceCd = "TYPE_OF_ASSISTANCE_CD";
	final private String strLiteralRecBegindt = " REC_BEGIN_DT <= ";
	final private String strLiteralAndDeleteSw = " AND DELETE_SW = '";
	final private String strLiteralAndEdbcrundt = " AND EDG_NUM = ";
	final private String strLiteralWhereCaseNum2 = " Where CASE_NUM = ? ";
	final private String strLiteralAndProgramCd = " AND PROGRAM_CD = ";
	final private String strLiteralAndEdgTraceIdIn = " AND EDG_TRACE_ID IN (";
	final private String strLiteralAndCgStatusCdAP = " AND CG_STATUS_CD = 'AP' ";
	final private String strLiteralAndEdgTraceId = " AND EDG_TRACE_ID = ";
	final private String strLiteralcastPaymentBegdt = "cast(PAYMENT_BEG_DT as VARCHAR(10))";
	final private String strLiteralOrderby2 = " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT)), PROGRAM_CD desc ";
	final private String strLiteralAndEdgNumIn = " AND EDG_NUM IN (";
	final private String strLiteralCurrentEligIndInA = " CURRENT_ELIG_IND = 'A' AND ";
	final private String strLiteralFindByRecForProgramDenial = "findByRecForProgramDenial";
	final private String strLiteralAndCurrentEligIndInAC = " AND CURRENT_ELIG_IND IN ('A', 'C') ";
	final private String strLiteralOrderby1 = " ORDER BY PAYMENT_BEG_DT DESC, EDG_TRACE_ID DESC ";
	final private String strLiteralWhereAcsenumBcsenum = " WHERE A.CASE_NUM = B.CASE_NUM ";
	final private String strLiteralAndbdelteswy = "	AND B.delete_sw <> 'Y' ";
	final private String strLiteralAndBcurrenteligInd = "	AND B.current_elig_ind in ('C','W') ";
	final private String strLiteralAndPaymentbegdtBpaymentbegdt = "	AND A.payment_beg_dt = B.payment_beg_dt ";
	final private String strLiteralOrApaymentenddt = "	OR ( A.PAYMENT_END_DT >= ";
	final private String strLiteralOrderby3 = "	ORDER BY A.TOA_PRIORITY_NUM, A.EDG_NUM, ( extract(year from A.PAYMENT_BEG_DT)||case when extract(month from A.PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from A.PAYMENT_BEG_DT) || case when extract(day from A.PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(day from A.PAYMENT_BEG_DT) ), A.PROGRAM_CD desc, A.CURRENT_ELIG_IND ";
	final private String strLiteralUpdateCrsamplecasefindings = " UPDATE CR_SAMPLE_CASE_FINDINGS C SET C.REPORT_IND = 'N' ";
	final private String strLiteralWhereCCriteriaId = " WHERE C.CRITERIA_ID = ? ";
	final private String strLiteralAndCsampleId = " AND C.SAMPLE_ID = ? ";
	final private String strLiteralAndCreportIndP = " AND C.REPORT_IND = 'P' ";
	final private String strLiteralBReportIndP = " AND B.REPORT_IND = 'P' ";
	final private String strLiteralResult = "RESULT";
	final private String strLiteralAndPaymentEnddtisnull = " AND PAYMENT_END_DT IS NULL";
	final private String strLiteralAndCgstatuscdinap = " AND CG_STATUS_CD IN ('AP')";
	final private String strLiteraltruncpaymentbegdt = " TRUNC(PAYMENT_BEG_DT) <= TRUNC(";
	final private String strLiteraltruncpaymentenddt = ") AND ( TRUNC(PAYMENT_END_DT) >= TRUNC(";
	final private String strLiteralSelect1 = " SELECT 1";
	final private String strLiteralAndtypeofassistancecd = " AND type_of_assistance_cd = '";
	final private String strLiteralselectfromedeligibility = "select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ";
	final private String strLiteralTargetPersonId = "TARGET_PERSON_ID";
	private final static String strLiteralOrderByPaymentBegDtDesc = " ORDER BY PAYMENT_BEG_DT DESC";
	private final static String strLiteralCurrentEligIndPV = " AND CURRENT_ELIG_IND IN ('P','V')";
	
	private static ILog logger;

	private static ILog getLogger() {
		if (logger == null) {
			logger = (ILog) FwServiceFactory.getInstance().create(ILog.class);
		}

		return logger;
	}

	protected static void log(int level, String message) {
		if (getLogger().isLoggable(EdEligibilityDAO.class, level)) {
			getLogger().log(EdEligibilityDAO.class, level, message);
		}
	}

	/**
	 * Constructor for EdEligibilityDAO.
	 */
	public EdEligibilityDAO() {
	}

	private EdEligibilityCargo[] getReturnCargo(Map map) throws Exception {
		Collection<EdEligibilityCargo> coll = getAll(map);
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
		coll.toArray(colrows);
		return colrows;
	}
/***
 * 
 */
	
			public EdEligibilityCargo[] findByEdgNum(int maxRows,
				long caseNum, String edgNumString) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				String whereClause = "CASE_NUM = "
						+ caseNum + " AND EDG_NUM IN (" + edgNumString +")";

				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		} 

	/**
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumForEligibilityEndDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCaseNumForEligibilityEndDt" + maxRows);
		try {
			String whereClause = strLiteralCaseNum1 + " = "
					+ cargo.getCaseNum() + " AND CG_STATUS_CD = 'TN' "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' "
					+ " AND PAYMENT_END_DT IS NULL";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			Debug.println("Error in findByCaseNumForEligibilityEndDt finder "
					+ e);
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	 public EdEligibilityCargo[] isReasonCodeED0075NoReview(int max, long caseNum)
             throws GenericRunTimeException {
     try {
             String query = "SELECT B.* FROM ed_elig_notice_reasons A JOIN ed_eligibility B ON A.edg_trace_id = B.edg_trace_id "
                             + "WHERE A.case_num=" + caseNum + " AND A.case_num=B.case_num AND B.delete_sw='N' "
                             + "AND B.cg_status_cd = 'TN' AND B.payment_end_dt IS NULL "
                             + "AND B.current_elig_ind = 'A' AND A.failure_reason_code LIKE '%ED0075%' and B.payment_beg_dt >( select max(di_action_dt) from ed_eligibility where case_num ="+ caseNum +"and delete_sw = 'N' and cg_status_cd = 'TN' and current_elig_ind = 'A' and payment_end_dt IS NULL )";

             List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
             SQLCommand command = new SQLCommand(
                             new ApplicationConnectionFactory(), query.toString());
             List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command.execute();
             DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
             cargoPopulator.setMapper(new CargoPropertyMapper());
             for (Map<String, Object> obj : results) {
                     EdEligibilityCargo theObject = new EdEligibilityCargo();
                     ObjectPopulator populator = new ObjectPopulator(obj, theObject,
                                     cargoPopulator);
                     populator.execute();
                     resultList.add(theObject);
             }
             EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
                             .size()];
             resultList.toArray(colrows);
             return colrows;
     } catch (Exception e) {
             throw new GenericRunTimeException(e.getMessage(), e);
     }
}
	
		public EdEligibilityCargo[] findByCaseNumForEligibility(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCaseNumForEligibility" + maxRows);
		try {
			String whereClause = strLiteralCaseNum1 + " = "
					+ cargo.getCaseNum() + " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' " + "AND PROGRAM_CD = '"
					+ cargo.getProgramCd() + "'"
					+ " AND FS_EXPEDITED_SW != 'Y' AND PAYMENT_END_DT IS NULL";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			Debug.println("Error in findByCaseNumForEligibility finder "
					+ e);
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
		
		public EdEligibilityCargo[] findByCaseNumMAForEligibility(int maxRows,
				long caseNum) throws GenericRunTimeException {

			Debug.println("findByCaseNumMAForEligibility" + maxRows);
			try {
				String whereClause = strLiteralCaseNum1 + " = "
						+ caseNum 
						+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' " + "AND PROGRAM_CD = 'MA' "
						+ "  ORDER BY PAYMENT_BEG_DT asc";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				Debug.println("Error in findByCaseNumForEligibility finder "
						+ e);
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
	
		public EdEligibilityCargo[] findByCaseNumForEligibilityLI(int maxRows,
				EdEligibilityCargo cargo) throws GenericRunTimeException {
			
			Timestamp endDate = ALSOPUtil.getLastDayOfMonth(cargo.getPaymentEndDt());			

			Debug.println("findByCaseNumForEligibility" + maxRows);
			try {
				String whereClause = strLiteralCaseNum1 + " = "
						+ cargo.getCaseNum() + " AND CG_STATUS_CD = 'AP' "
						+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' " + "AND PROGRAM_CD in ('LI')"
						+ " AND PAYMENT_END_DT = "
						+ DateFormatter.getDateForWhereClauseAnsi(endDate);

				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				Debug.println("Error in findByCaseNumForEligibility finder "
						+ e);
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}	
	
	/**
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllCaseNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByAllCaseNum" + maxRows);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			//map.put(FwConstants.ORDER_BY_CLAUSE, " ORDER BY DC_INDV.INDV_ID");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
			
	public EdEligibilityCargo[] findIsEligibilityByIndvId(int maxRows,
			EdIndvEligibilityCargo cargo) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		try {			
			/*
			 * 	Select * 
				from ED_ELIGIBILITY EL 
				INNER JOIN ED_INDV_ELIGIBILITY IE 
				ON IE.CASE_NUM = EL.CASE_NUM 
				AND IE.EDG_TRACE_ID = EL.EDG_TRACE_ID 
				AND EL.CURRENT_ELIG_IND='A' 
				AND EL.PROGRAM_CD='MA' 
				AND EL.PAYMENT_END_DT IS NULL 
				AND EL.DELETE_SW='N'
				AND EL.CG_STATUS_CD='TN' 
				AND EL.PAYMENT_BEG_DT > (TO_DATE ('26-JUN-16','DD-MON-YY') - 90)
				AND IE.INDV_ID = cargo.getIndvId();
			 */

			// end date should be 90 day before the sysdate
			Timestamp sysdate = FwDateComparisons.getDate("06/26/2016");
			Timestamp endDate = RpUtils.addDays(sysdate, (-90));
						
			String clause = "Select * from ED_ELIGIBILITY EL "
					+ "INNER JOIN ED_INDV_ELIGIBILITY IE "
					+ "ON IE.CASE_NUM = EL.CASE_NUM "
					+ "AND IE.EDG_TRACE_ID = EL.EDG_TRACE_ID "
					+ "AND EL.CURRENT_ELIG_IND='A' "
					+ "AND EL.PROGRAM_CD='MA' "
					+ "AND EL.PAYMENT_END_DT IS NULL "
					+ "AND EL.DELETE_SW='N' "
					+ "AND EL.CG_STATUS_CD='TN' "
					+ "AND trunc(EL.PAYMENT_BEG_DT) > " 
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ " AND IE.INDV_ID="
					+ cargo.getIndvId();
			
			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();

			SQLCommand command = getSqlCommand(clause);

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return colrows;
	}

	// Requested by Raveenkumar Govindasamy 05-FEB-2007
	/**
	 * Method findByFSCasesComingDue, Query by Pgm Code = 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSCasesComingDue(int maxRows,
			Timestamp beginDate, Timestamp endDate)
			throws GenericRunTimeException {

		Debug.println("findByFSCasesComingDue" + strLiteralMaxRows + maxRows);
		try {
			String clause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'"
					+ " AND PROGRAM_CD = 'TF' AND REC_END_DT IS NULL "
					+ " AND (PAYMENT_END_DT IS NULL OR (PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate)
					+ " AND PAYMENT_END_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ " ))"
					+ strLiteralAndDeleteSWN
					+ " AND TRUNC("
					+ DAOSqlHelper
							.getANSIMonthsBetween(
									"COALESCE(ELIGIBILITY_END_DT,"
											+ DateFormatter
													.getDateForWhereClauseAnsi(beginDate)
											+ ")", "ELIGIBILITY_BEG_DT")
					+ ") >= 22 " + strLiteralOrderByEdgNum;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByFSProgramCode, Query by Pgm Code = 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByFSProgramCode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'"
					+ " AND (TYPE_OF_ASSISTANCE_CD = 'TP06' OR TYPE_OF_ASSISTANCE_CD = 'TP09') "
					+ " AND PROGRAM_CD = 'FS' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ ") AND ESTIMATED_ELIG_END_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND (COMBINED_PAYMENT_SW != 'Y' OR COMBINED_PAYMENT_SW IS NULL) "
					+ " AND DELETE_SW = 'N' AND EDG_NUM > " + cargo.getEdgNum()
					+ strLiteralOrderByEdgNum;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested By Raveenkumar Govindasamy

	/**
	 * Method findByAllFIPProgramCode, Query by Pgm Code = 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllFIPProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAllFIPProgramCode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'"
					+ " AND PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD IN ('RAPC','RAPM')  "
					+ " AND DELETE_SW = 'N' AND REC_END_DT IS NULL"
					+ strLiteralANd
					+ DAOSqlHelper.getANSISubstring(
							"cast(ESTIMATED_ELIG_END_DT as VARCHAR(10))", 4, 6)
					+ " = '"
					+ DateFormatter.getSrcToDestDtAnsi(
							cargo.getEstimatedEligEndDt(), "yyyy-mm-dd",
							strLiteralMMMyy) + "'";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByEdgPgm, query by Edg#, Pgm Cd.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgPgm(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgPgm" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put(strLiteralDeleteSw, cargo.getVoidSw() + "");
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByActiveOrHoldCase, query by Pgm Cd, CgStatusCd.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveOrHoldCase(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByActiveOrHoldCase" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND  CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "' AND  (CURRENT_ELIG_IND='A' OR CURRENT_ELIG_IND='H') AND REC_BEGIN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT is Null) AND DELETE_SW = 'N')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByActiveEDG, query by Edg #, Pgm Cd, Cg Status Cd.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveEDG(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByActiveEDG" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String whereClause = " (EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND  CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "' AND  CURRENT_ELIG_IND = "
					+ cargo.getCurrentEligInd()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT is Null) AND DELETE_SW = 'N')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumber, query by Pgm Code and Edg Trace ID.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumber(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumber" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * @author mbhende Method findByCaseNumber, query by Edg Trace ID.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumTraceIdEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumber" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByUnAuth, query by Un Authorized Record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuth(int maxRows, long lCaseNum,
			Timestamp tsEDBCRunDt) throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND = 'T' "
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt)
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), TOA_PRIORITY_NUM, PROGRAM_CD desc ";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAuth, query by Authorised Record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuth(int maxRows, long lCaseNum,
			Timestamp tsMaxEDM, Timestamp tsMinEDM)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ "Where CASE_NUM = ?"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ " AND REC_BEGIN_DT <=  CAST(? AS DATE)"
					+ " AND (REC_END_DT  >=  CAST(? AS DATE)" 
					+ strLiteralOr
					+ " REC_END_DT  is Null ) "
					+  " ORDER BY  PROGRAM_CD, ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ) desc ";

			
			List<Object> params = new ArrayList<Object>();
			params.add(lCaseNum);
			params.add(DateFormatter.getDateForWhereNoCast(tsMaxEDM));
			params.add(DateFormatter.getDateForWhereNoCast(tsMinEDM));
			
		
            Debug.println(SQL.toString());
            EdEligibilityCargo[] cargo = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
            
			return cargo;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAuth, query by Authorised Record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthOtherThanPandT(int maxRows,
			long lCaseNum, Timestamp tsMaxEDM, Timestamp tsMinEDM)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ " Where CASE_NUM =  "
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND NOT IN ('P','T') "
					+ " AND REC_BEGIN_DT <=   "
					+ DateFormatter.getDateForWhereClauseAnsi(tsMaxEDM)
					+ " AND (REC_END_DT  >=  "
					+ DateFormatter.getDateForWhereClauseAnsi(tsMinEDM)
					+ strLiteralOr
					+ " REC_END_DT  is Null ) "
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), PROGRAM_CD desc ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumViewMode, query by Pgm Code = 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumViewMode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumViewMode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSwY
					+ " AND CURRENT_ELIG_IND <>'T'"
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralOrPaymentendDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ "))"
					+ " AND  PROGRAM_CD='FS' "
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ),  PROGRAM_CD asc";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumRunMode, query by Pgm Code ='FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumRunMode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumRunMode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSwY
					+ " AND CURRENT_ELIG_IND in ('T','S','P', 'A')"
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralOrPaymentendDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ "))"
					+ " AND  PROGRAM_CD='FS' "
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ),  PROGRAM_CD desc, CURRENT_ELIG_IND";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Modified for DI on 06/18/2002
	/**
	 * Method findByAuthRecords, query by Authorized Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND  EDG_NUM= "
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralclparenthesis
					+ " AND PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt());

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByOpenEndedMonths, , query for open ended records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByOpenEndedMonths(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByOpenEndedMonths " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " CASE_NUM ="
					+ cargo.getCaseNum()
					+ " AND DELETE_SW <> 'Y' "
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND  PAYMENT_END_DT is null "
					+ " AND  PROGRAM_CD='"
					+ cargo.getProgramCd()
					+ "' AND  EDG_NUM="
					+ cargo.getEdgNum()
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), PROGRAM_CD desc ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAllUnAuth, query for Un Authorized records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllUnAuth(int maxRows, long lCaseNum)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum + lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND IN ('T' , 'P', 'S') "
					+ " ORDER BY PAYMENT_BEG_DT, PROGRAM_CD desc ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00106732 Id : BRGUS00106734 Method
	 * findBySTFSPotentialEligSW, query for STFS
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// BRGUS00102698 -- padmanabhunip -- changing the where condition
	public EdEligibilityCargo[] findBySTFSPotentialEligSW(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String sqlString = "select distinct(edg_num)AS EDG_NUM,edg_trace_id,type_of_assistance_cd,REQUEST_DT,"
					+ "STFS_POTENTIAL_ELIG_BEGIN_DT,STFS_POTENTIAL_ELIG_END_DT,STFS_POTENTIAL_BENEFIT_AMT,"
					+ "CURRENT_ELIG_IND,PAYMENT_BEG_DT from ed_eligibility where case_num = "
					+ cargo.getCaseNum()
					+ " and PROGRAM_CD = 'TF' and TYPE_OF_ASSISTANCE_CD in ('TP01','TP71') and CURRENT_ELIG_IND IN('P','A') "
					+ " and DELETE_SW = 'N' and ACTIVITY_TYPE = 'IN' and (STFS_POTENTIAL_ELIG_SW = 'Y' "
					+ " or STFS_POTENTIAL_ELIG_BEGIN_DT is not null) order by CURRENT_ELIG_IND DESC,PAYMENT_BEG_DT DESC";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sqlString);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByEDBCProcess, query for Processed Record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDBCProcess(int maxRows, long lCaseNum)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndP
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), PROGRAM_CD desc ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByPriorApplAuth, query by prior Appl Auth.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsApplDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPriorApplAuth(int maxRows, long lCaseNum,
			Timestamp tsApplDt) throws GenericRunTimeException {
		try {
			List<Object> params =  new ArrayList<Object>();
			String SQL = "Select A.*, A.ROWID " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum + " ? "
					+ strLiteralAndDeleteSWN + strLiteralAndCurrentEligIndA
					+ " AND PROGRAM_CD = 'FS'" + " AND REC_BEGIN_DT  < CAST( ? AS DATE) "
//					+ DateFormatter.getDateForWhereClauseAnsi(tsApplDt)
					+ " AND (REC_END_DT  < CAST( ? AS DATE) "
//					+ DateFormatter.getDateForWhereClauseAnsi(tsApplDt)
					+ strLiteralOr + " REC_END_DT  is Null ) ";
			params.add(lCaseNum);
			params.add(DateFormatter.getDateForWhereNoCast(tsApplDt));
			params.add(DateFormatter.getDateForWhereNoCast(tsApplDt));
            return getCargoArray(SQL, params, EdEligibilityCargo.class);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DI
	/**
	 * Method findByEligInd, query by Curr Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEligInd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEligInd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = "  CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ " AND ( CURRENT_ELIG_IND IN ('S', 'P', 'H')  "
					+ "  or (CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL AND CG_STATUS_CD = 'AP') ) ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseProgEdg, query by Edg Num and Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseProgEdg" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByedgNo, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByedgNo(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByedgNo" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByEdgTraceIdCurRow, query by Edg trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgTraceIdCurRow(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgTraceId" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " (EDG_TRACE_ID = "
					+ cargo.getEdgTraceId()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND ELIGIBILITY_END_DT IS NULL )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByProgramCdEdgNumCurRow, query by Pgm Cd and Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProgramCdEdgNumCurRow(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByProgramCdEdgNumCurRow" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = " (PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND  EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND  ELIGIBILITY_END_DT IS NULL )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByProgCd, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProgCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByProgCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// this find by is used by DI and another team, to be careful when changing
	// the findBY
	/**
	 * Method findByCaseProgramCD, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramCD(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseProgramCD" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put("DELETE_SW", 'N');
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByFSPartAPostive,Finder method for Part A FS positive sample.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSPartAPostive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByFSPartAPostive" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = '"
					+ cargo.getCurrentEligInd()
					+ strLiteralAndCgStatusCd
					+ cargo.getCgStatusCd()
					+ "' AND REC_BEGIN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT IS NULL) AND DELETE_SW = '"
					+ cargo.getVoidSw() + "' ORDER BY EDG_NUM ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByFsPartBPostive, Finder method for Part B FS positive sample
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFsPartBPostive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByFsPartBPostive" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD = 'AP' AND PAYMENT_BEG_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ "   AND DELETE_SW = 'N'  ORDER BY EDG_NUM ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Modified for DI on 05/22/2002
	/**
	 * Method findByCaseNumEdgNum, query by Edg Num and Pgm code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumEdgNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSwY
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralOrPaymentendDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + "))" + " AND  PROGRAM_CD= '"
					+ cargo.getProgramCd()
					+ "' ORDER BY PAYMENT_BEG_DT, PROGRAM_CD asc";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumEdgNumSpec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumEdgNumSpec" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		String strLiteralCaseNum2 = " CASE_NUM = ";
		String strLiteralAndEdgNum = " AND EDG_NUM = ";
		try {
			String clause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ strLiteralAndDeleteSwN;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Modified for DI on 05/22/2002
	/**
	 * Method findByCaseNum, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSwY
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralOrPaymentendDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + "))" + " AND  PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' ORDER BY PAYMENT_BEG_DT, PROGRAM_CD asc";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Modified for DI on 05/22/2002
	/**
	 * Method findByEdgNum, query by Edg Num and Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSwY
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralOrPaymentendDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + "))" + " AND  PROGRAM_CD= '"
					+ cargo.getProgramCd()
					+ "' ORDER BY PAYMENT_BEG_DT, PROGRAM_CD asc";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findBySpecialReviewPastDue, FindBy method for - Special review
	 * past due.
	 *
	 * @param maxRows
	 *            int
	 * @param tdAlParams
	 *            String[]
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpecialReviewPastDue(int maxRows,
			String[] tdAlParams) throws GenericRunTimeException {
		try {
			String clause = " (CG_STATUS_CD ='"
					+ tdAlParams[0]
					+ "') AND (CURRENT_ELIG_IND ='"
					+ tdAlParams[1]
					+ "') AND(CAST(SP_REVIEW_DT as VARCHAR(10)) = '"
					+ DateFormatter.getSrcToDestDtAnsi(tdAlParams[2],
							"mm-dd-yyyy", strLiteralDdMMMMyy)
					+ "') AND (REC_END_DT IS NULL) AND (DELETE_SW = '"
					+ tdAlParams[3] + "')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findBySpecialReviewDue, FindBy method for - Special review
	 * scheduled for current month
	 *
	 * @param maxRows
	 *            int
	 * @param tdAlParams
	 *            String[]
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpecialReviewDue(int maxRows,
			String[] tdAlParams) throws GenericRunTimeException {
		try {
			String clause = " (CG_STATUS_CD ='" + tdAlParams[0]
					+ "') AND (CURRENT_ELIG_IND ='" + tdAlParams[1]
					+ "') AND (EXTRACT(MONTH from SP_REVIEW_DT) = '"
					+ tdAlParams[2]
					+ "') AND (REC_END_DT IS NULL) AND (DELETE_SW = '"
					+ tdAlParams[3] + "')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByEdgNumCurRow, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumCurRow(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgNumCurRow" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " (EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND  REC_END_DT IS NULL )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI for pre fetch
	/**
	 * Method findByTANFProgramCode, query by Pgm Code = 'TF'
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTANFProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByTANFProgramCode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' "
					+ " AND PROGRAM_CD = 'TF' "
					+ " AND (TYPE_OF_ASSISTANCE_CD = 'TP01' OR TYPE_OF_ASSISTANCE_CD = 'TP61') "
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralOrPaymentEndDtisNull
					+ " AND DELETE_SW = 'N' AND EDG_NUM > " + cargo.getEdgNum()
					+ strLiteralOrderByEdgNum;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumRunModeProgType, query by all run mode and given Pgm
	 * Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumRunModeProgType(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumRunModeProgType" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSwY
					+ " AND CURRENT_ELIG_IND in ('T','S','P', 'A')"
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ") OR ( PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ "))"
					+ " AND  PROGRAM_CD='"
					+ cargo.getProgramCd()
					+ "' ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT)), PROGRAM_CD desc, CURRENT_ELIG_IND";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	/**
	 * Method findByCurrentFsProgramEdg, query by Pgm Code, CgStatusCd and curr
	 * Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCurrentFsProgramEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCurrentFsProgramEdg" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String whereClause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = '" + cargo.getCurrentEligInd()
					+ "' AND DELETE_SW  = '" + cargo.getVoidSw()
					+ strLiteralAndCgStatusCd + cargo.getCgStatusCd()
					+ "' REC_END_DT IS NULL";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by CO
	/**
	 * Method findByCase, query by case #.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCase(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Debug.println("findByCase " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralDeleteSw, "N");
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by CO
	/**
	 * Method findByCase, query by case #.
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseForSNAP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					// + " AND PAYMENT_BEG_DT <= " +
					// DateFormatter.getDateForWhereClause(currDate)
					+ " AND program_cd = 'FS' "
					+ " AND current_elig_ind = 'A' "
					+ " AND payment_end_dt is null ";
			// + " ORDER BY PAYMENT_BEG_DT DESC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Track 2
	// Modified to include Pending Records -Jai (02/14/03)//changed on
	// 11/25/2003
	/**
	 * Method findByCaseNumEDG, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aCurrEligInd1
	 *            char
	 * @param aCurrEligInd2
	 *            char
	 * @param aCurrEligInd3
	 *            char
	 * @param aCGStatusCD1
	 *            String
	 * @param aCGStatusCD2
	 *            String
	 * @param aCGStatusCD3
	 *            String
	 * @param aCGStatusCD4
	 *            String
	 * @param aBeginDate
	 *            Timestamp
	 * @param aEndDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEDG(int maxRows, long aCaseNum,
			char aCurrEligInd1, char aCurrEligInd2, char aCurrEligInd3,
			String aCGStatusCD1, String aCGStatusCD2, String aCGStatusCD3,
			String aCGStatusCD4, Timestamp aBeginDate, Timestamp aEndDate,
			Timestamp nextMnthEndDate) throws GenericRunTimeException {
		try {
			String whereClause = strLiteralCaseNum
					+ aCaseNum
					+ " AND DELETE_SW = 'N' AND (((((CURRENT_ELIG_IND = '"
					+ aCurrEligInd1
					+ "' OR  (CURRENT_ELIG_IND = '"
					+ aCurrEligInd2
					+ "' AND EDBC_ACTION_CD <> '53')) AND (CG_STATUS_CD = '"
					+ aCGStatusCD1
					+ strLiteralOrCgStatusCd
					+ aCGStatusCD2
					+ strLiteralOrCgStatusCd
					+ aCGStatusCD3
					+ "' )) OR (CURRENT_ELIG_IND = '"
					+ aCurrEligInd3
					+ strLiteralAndCgStatusCd
					+ aCGStatusCD4
					+ "')) AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDate)
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDate)
					+ ") OR (CG_STATUS_CD = '"
					+ aCGStatusCD1
					+ "'  AND CURRENT_ELIG_IND = '"
					+ aCurrEligInd1
					+ "' AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ " OR PAYMENT_END_DT IS NULL)))) ORDER BY EDG_NUM, EDG_TRANSACTION_ID, PAYMENT_BEG_DT,CURRENT_ELIG_IND ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by track2
	// Requested by Tarun / Sugatha for Prefetch (12/12/2002)
	// Modified to include Pending Records -Jai (02/14/03)//Modified on
	// 11/25/2003
	/**
	 * Method findByCasesToBeExtracted, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param currEligInd1
	 *            char
	 * @param currEligInd2
	 *            char
	 * @param currEligInd3
	 *            char
	 * @param CGStatusCD1
	 *            String
	 * @param CGStatusCD2
	 *            String
	 * @param CGStatusCD3
	 *            String
	 * @param cgStatusCD4
	 *            String
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCasesToBeExtracted(int maxRows,
			char currEligInd1, char currEligInd2, char currEligInd3,
			String CGStatusCD1, String CGStatusCD2, String CGStatusCD3,
			String cgStatusCD4, Timestamp beginDate, Timestamp endDate,
			Timestamp nextMnthEndDate) throws GenericRunTimeException {

		try {
			String clause = " (DELETE_SW = 'N' AND (((((CURRENT_ELIG_IND = '"
					+ currEligInd1 + "' OR  CURRENT_ELIG_IND = '"
					+ currEligInd2 + "' ) AND (CG_STATUS_CD = '" + CGStatusCD1
					+ strLiteralOrCgStatusCd + CGStatusCD2
					+ strLiteralOrCgStatusCd + CGStatusCD3
					+ "' )) OR (CURRENT_ELIG_IND = '" + currEligInd3
					+ strLiteralAndCgStatusCd + cgStatusCD4
					+ "')) AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate)
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ ") OR (CG_STATUS_CD = '" + CGStatusCD1
					+ "' AND CURRENT_ELIG_IND = '" + currEligInd1
					+ "' AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ " OR PAYMENT_END_DT IS NULL))))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findBytraceIdProgCd, query by Edg Trace Id and Pgm Cd.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBytraceIdProgCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findBytraceIdProgCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByedgCaseNo.], query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByedgCaseNo(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByedgCaseNo" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByStatusCd, query by CgStatusCode.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByStatusCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByStatusCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " ( ( CG_STATUS_CD = 'A' OR CG_STATUS_CD = 'S') AND (CURRENT_ELIG_IND = 'A' )) OR ((CG_STATUS_CD =  'A' OR CG_STATUS_CD = 'S') AND (CURRENT_ELIG_IND = 'H') AND REC_END_DT IS NULL AND DELETE_SW = 'N')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByCaseNumCurRow, query by case #.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumCurRow(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumCurRow" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND  (REC_END_DT IS NULL OR REC_END_DT >="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " ) )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumEdgNumPaymentBeginDt(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND EDG_NUM = " + cargo.getEdgNum());
            clause.append(" AND EDG_TRACE_ID != " + cargo.getEdgTraceId());
            clause.append(" AND TO_DATE(PAYMENT_BEG_DT) < " + DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())); 
            clause.append(" AND CURRENT_ELIG_IND = 'A'");        
            clause.append(" AND CG_STATUS_CD = 'AP'"); 
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");
            clause.append(")");
            
            clause.append(" ORDER BY PAYMENT_BEG_DT DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
	
    public EdEligibilityCargo[] findByCaseNumEdgNumBenefitStartDt(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND EDG_NUM = " + cargo.getEdgNum());
            clause.append(" AND EDG_TRACE_ID != " + cargo.getEdgTraceId());
            clause.append(" AND TO_DATE(BENEFIT_START_DT) < " + DateFormatter.getDateForWhereClauseAnsi(cargo.getBenefitStartDt())); 
            clause.append(" AND CURRENT_ELIG_IND = 'A'");        
            clause.append(" AND CG_STATUS_CD = 'AP'"); 
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");
            clause.append(")");
            
            clause.append(" ORDER BY BENEFIT_START_DT DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
    
    public EdEligibilityCargo[] findByCaseNumDiActionDtIndvId(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND TO_DATE(DI_ACTION_DT) = " + DateFormatter.getDateForWhereClauseAnsi(cargo.getDiActionDt()));
            clause.append(" AND CURRENT_ELIG_IND = 'A'");        
            clause.append(" AND CG_STATUS_CD IN ('AP', 'TN')"); // Eligible, Terminated
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");
            
            if( cargo.getTargetPersonId() != null && cargo.getTargetPersonId() > 0 ) {
                clause.append(" AND TARGET_PERSON_ID = " + cargo.getTargetPersonId());
            }
            
            if( cargo.getEdgNum() > 0 ) {
                clause.append(" AND EDG_NUM = " + cargo.getEdgNum());
            }
            
            clause.append(")");
            
            clause.append(" ORDER BY PAYMENT_BEG_DT, CG_STATUS_CD DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
    
    public EdEligibilityCargo[] findByCaseNumDiActionDtIndvIdNoEdg(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND TO_DATE(DI_ACTION_DT) = " + DateFormatter.getDateForWhereClauseAnsi(cargo.getDiActionDt()));
            clause.append(" AND CURRENT_ELIG_IND IN ('A','W')  AND DELETE_SW = 'N' ");    
            clause.append(" AND CG_STATUS_CD IN ('AP', 'TN', 'SP')"); // Eligible, Terminated, Suspended
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");
            
            if( cargo.getTargetPersonId() != null && cargo.getTargetPersonId() > 0 ) {
                clause.append(" AND TARGET_PERSON_ID = " + cargo.getTargetPersonId());
            }
            
            clause.append(")");
            
            clause.append(" ORDER BY PAYMENT_BEG_DT, CG_STATUS_CD DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
    
    public EdEligibilityCargo[] findByCaseNumForMMIS(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND CURRENT_ELIG_IND = 'A'");        
            clause.append(" AND CG_STATUS_CD IN ('AP')"); // Eligible
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");            
            
            clause.append(")");
            
            clause.append(" ORDER BY TARGET_PERSON_ID, PAYMENT_BEG_DT DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }

	// requested by correspondence
	/**
	 * Method findByEdgCreateSeq, query by Edg TraceId and Pgm Cd.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	/**
	 * Method findByEdgCreateSeq, query by Case Num and Edg TraceId.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgCreateSeq(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgCreateSeq " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralDeleteSw, 'N');
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by Interfaces
	/**
	 * Method findByNHICSpendDown, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNHICSpendDown(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByNHICSpendDown" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND ='A'"
					+ " AND PAYMENT_BEG_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND PAYMENT_END_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt());
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// added for EDG
	/**
	 * Method findByNextEdgNum, find next Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		long lTRAN_ID = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];
		try {
			String SQL = "select "
					+ getSequenceNextValAsString("ED_ELIGIBILITY_3SQ")
					+ " newEDGNUM " + DAOSqlHelper.getANSIDual();
			// List<EdEligibilityCargo> resultList = new
			// ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			// EdEligibilityCargo theObject = new EdEligibilityCargo();
			lTRAN_ID = ((Long) (results.get(0)).get("newEDGNUM")).longValue();

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		if (lTRAN_ID > 0) {
			colrows[0] = new EdEligibilityCargo();
			colrows[0].setEdgNum(lTRAN_ID);
		}
		return (colrows);
	}

	// added for EDG
	/**
	 * Method findByNextCmaGroupNum, find next CMA Group num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextCmaGroupNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		long lTRAN_ID = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];
		try {
			String SQL = "select "
					+ getSequenceNextValAsString("ED_ELIGIBILITY_7SQ")
					+ " newCMAGROUPNUM " + DAOSqlHelper.getANSIDual();
			// List<EdEligibilityCargo> resultList = new
			// ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			// EdEligibilityCargo theObject = new EdEligibilityCargo();
			lTRAN_ID = ((Long) (results.get(0)).get("newCMAGROUPNUM"))
					.longValue();

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		if (lTRAN_ID > 0) {
			colrows[0] = new EdEligibilityCargo();
			colrows[0].setCmaGroupNum(lTRAN_ID);
		}
		return (colrows);
	}

	// added for EDG
	/**
	 * Method findByNextTraceId, get next trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		long lTRAN_ID = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];
		try {

			// EdEligibilityCargo theObject = new EdEligibilityCargo();
			Sequence dbSequence = new Sequence("ED_ELIGIBILITY_4SQ",
					getDataSource());
			Long nextval = dbSequence.getValue();
			// lTRAN_ID = ((BigDecimal)
			// (results.get(0)).get("NEWTRACEID")).longValue();
			lTRAN_ID = nextval;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		if (lTRAN_ID > 0) {
			colrows[0] = new EdEligibilityCargo();
			colrows[0].setEdgTraceId(lTRAN_ID);
		}
		return (colrows);
	}

	// added for DI
	/**
	 * Method findByNextDiTransId, get next Di Transaction Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextDiTransId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		long lTRAN_ID = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];

		try {
			String SQL = "select  "
					+ getSequenceNextValAsString("ED_ELIGIBILITY_5SQ")
					+ " newDITransId " + DAOSqlHelper.getANSIDual();
			// List<EdEligibilityCargo> resultList = new
			// ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			// EdEligibilityCargo theObject = new EdEligibilityCargo();
			lTRAN_ID = ((Long) (results.get(0)).get("newDITransId"))
					.longValue();

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		if (lTRAN_ID > 0) {
			colrows[0] = new EdEligibilityCargo();
			colrows[0].setDispositionTransId(lTRAN_ID);
		}
		return (colrows);
	}

	// added for EDG
	/**
	 * Method findByNextUniqueTranID, get next Unique Trans Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextUniqueTranID(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		long lTRAN_ID = 0;
		try {
			/*
			 * String SQL =
			 * "select ED_ELIGIBILITY_0SQ.nextval newTRAN_ID from dual";
			 * List<EdEligibilityCargo> resultList = new
			 * ArrayList<EdEligibilityCargo>(); SQLCommand command =
			 * getSqlCommand(SQL); List<Map<String, Object>> results =
			 * (ArrayList<Map<String, Object>>) command .execute();
			 */
			// EdEligibilityCargo theObject = new EdEligibilityCargo();
			Sequence dbSequence = new Sequence("ED_ELIGIBILITY_0SQ",
					getDataSource());
			Long nextval = dbSequence.getValue();
			lTRAN_ID = nextval;
			// lTRAN_ID = ((BigDecimal)
			// (results.get(0)).get("NEWTRAN_ID")).longValue();

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		EdEligibilityCargo[] colrows = new EdEligibilityCargo[1];
		if (lTRAN_ID > 0) {
			colrows[0] = new EdEligibilityCargo();
			colrows[0].setUniqueTransId(lTRAN_ID);
		}
		return (colrows);
	}

	// Requested By DI
	/**
	 * Method findByExistingAuth, query by Auth records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExistingAuth(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExistingAuth" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ strLiteralAndDeleteSwN + " AND CURRENT_ELIG_IND ='A'"
					+ " AND PAYMENT_END_DT is null" + " AND REC_END_DT is null";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Tarun / Sugatha for Prefetch
	// Modififed by Raveenkumar Govindasamy on 30-Mar-2007
	/**
	 * Method findByACFCases, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aProgramCD
	 *            String
	 * @param aTPCD
	 *            String
	 * @param aEligIND
	 *            String
	 * @param aCGCD1
	 *            String
	 * @param aCGCD2
	 *            String
	 * @param aCGCD3
	 *            String
	 * @param aBeginDT
	 *            Timestamp
	 * @param aEndDT
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByACFCases(int maxRows, String aProgramCD,
			String aTPCD, String aEligIND, String aCGCD1, String aCGCD2,
			String aCGCD3, Timestamp aBeginDT, Timestamp aEndDT)
			throws GenericRunTimeException {
		try {
			String clause = " DELETE_SW = 'N' " + " AND PROGRAM_CD =  '"
					+ aProgramCD + strLiteralAndTypeOfAssistanceCd + aTPCD
					+ "' AND CURRENT_ELIG_IND = '" + aEligIND
					+ "' AND (CG_STATUS_CD = '" + aCGCD1
					+ strLiteralOrCgStatusCd + aCGCD2 + strLiteralOrCgStatusCd
					+ aCGCD3 + strLiteralclparenthesis1
					+ " AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDT)
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDT)
					+ " OR PAYMENT_END_DT IS NULL)";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Reporting
	// FindBy method for - Retrives all record disposed for the given EDG during
	// the given month
	/**
	 * Method findByEDBCRunDt, query by EDBC run Date.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEDGNum
	 *            long
	 * @param aBeginDt
	 *            Timestamp
	 * @param aEndDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDBCRunDt(int maxRows, long aCaseNum,
			long aEDGNum, Timestamp aBeginDt, Timestamp aEndDt)
			throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum
					+ aCaseNum
					+ strLiteralAndEdgNum
					+ aEDGNum
					+ " AND CURRENT_ELIG_IND IN ('A','C') AND ACTIVITY_TYPE IN ('IN','PR','RC') AND (EDBC_RUN_DT BETWEEN "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDt)
					+ strLiteralANd
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDt)
					+ ") ) ORDER BY EDBC_RUN_DT ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Reporting
	// Short certification
	/**
	 * Method findByEstEligEndDt, query by Est Elig End Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aProgramCd
	 *            String
	 * @param aEDGNum
	 *            long
	 * @param aEstEligEndDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEstEligEndDt(int maxRows, long aCaseNum,
			String aProgramCd, long aEDGNum, Timestamp aEstEligEndDt)
			throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum
					+ aCaseNum
					+ strLiteralAndprogramCd
					+ aProgramCd
					+ "' AND EDG_NUM = "
					+ aEDGNum
					+ " AND ESTIMATED_ELIG_END_DT  = "
					+ DateFormatter.getDateForWhereClauseAnsi(aEstEligEndDt)
					+ " AND CURRENT_ELIG_IND = 'A' AND ACTIVITY_TYPE = 'IN' AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' ) ORDER BY ELIGIBILITY_BEG_DT DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Reporting

	/**
	 * Method findByFSOpenCloseSameDay, query by Same date record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSOpenCloseSameDay(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByFSOpenCloseSameDay" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum3
					+ cargo.getCaseNum()
					+ ") AND (EDG_NUM = "
					+ cargo.getEdgNum()
					+ ") AND (CURRENT_ELIG_IND = '"
					+ cargo.getCurrentEligInd()
					+ "') AND (EDBC_RUN_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + ") AND  (DELETE_SW  = '"
					+ cargo.getVoidSw() + strLiteralAndCgStatusCd2
					+ cargo.getCgStatusCd() + "')  AND (ACTIVITY_TYPE = '"
					+ cargo.getActivityType() + "'))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Reporting
	/**
	 * Method findByFSPreviousEligibility, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSPreviousEligibility(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByFSPreviousEligibility" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum3
					+ cargo.getCaseNum()
					+ ") AND (EDG_NUM = "
					+ cargo.getEdgNum()
					+ ") AND (CURRENT_ELIG_IND = '"
					+ cargo.getCurrentEligInd()
					+ "') AND (EDBC_RUN_DT < "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + ") AND  (DELETE_SW  = '"
					+ cargo.getVoidSw() + strLiteralAndCgStatusCd2
					+ cargo.getCgStatusCd() + "'))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DI
	/**
	 * Method findByPreviousAuth, query by previous auth.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPreviousAuth(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByPreviousAuth" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSwN
					+ " AND CURRENT_ELIG_IND ='A'"
					+ " AND CG_STATUS_CD in ('TN','DN')"
					+ " AND PAYMENT_BEG_DT<= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt()) + " AND PAYMENT_END_DT is null"
					+ " AND REC_END_DT is null";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	// Requested by BI
	// Requested for modifications by Sudesh on 17-Jun-2003
	/**
	 * Method findByArchivalData, query by Archival date.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo []
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByArchivalData(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(" findByArchivalData " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put("ARCHIVE_DT", DateFormatter.getDateForWhereClauseAnsi(cargo
					.getArchiveDt()));
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested for EDBC Batch
	/**
	 * Method findByEDBCProcessed, query by Processed record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDBCProcessed(int maxRows, long lCaseNum,
			Timestamp tsEDBCRunDt) throws GenericRunTimeException {
		try {
			String clause = " Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('P', 'V') "
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt)
					+ " ORDER BY PROGRAM_CD, EDG_NUM, ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT)) ";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(clause);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// added for DC
	/**
	 * Method findByCaseList, query by case list.
	 *
	 * @param maxRows
	 *            int
	 * @param list
	 *            ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseList(int maxRows, List list)
			throws GenericRunTimeException {
		Long[] caseNum = (Long[]) list.get(0);
		StringBuffer sbClause = new StringBuffer();
		try {
			sbClause.append(" CASE_NUM IN(");
			for (int i = 0; i < caseNum.length; i++) {
				sbClause.append(caseNum[i].longValue());
				if (!((i + 1) == caseNum.length)) {
					sbClause.append(",");
				}
			}
			sbClause.append(")");
			sbClause.append("AND (CG_STATUS_CD = '" + (String) list.get(1)
					+ "') OR ('" + (String) list.get(1)
					+ "' IS NULL) AND DELETE_SW = 'N' ORDER BY CASE_NUM");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sbClause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	// Requested by Interfaces
	/**
	 * Method findByAllTANFRecords, query by Pgm Code = 'TF' or 'MA'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllTANFRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAllTANFRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " CURRENT_ELIG_IND ='A' AND PROGRAM_CD IN ('TF', 'MA') AND DELETE_SW = 'N' "
					+ " AND (((EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " AND EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ ") AND CG_STATUS_CD IN ('AP', 'TN')) OR "
					+ " (PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralclparenthesis2
					+ " ORDER BY CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC, EDBC_RUN_DT DESC ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by EDBC for RM
	/**
	 * Method findByUnAuthForRM, query by Un Auth for RM.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuthForRM(int maxRows, long lCaseNum,
			Timestamp tsEDBCRunDt) throws GenericRunTimeException {
		try {
			String clause = " Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND PROGRAM_CD IN ('FS', 'TF') "
					+ strLiteralAndCurrentEligIndP
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt)
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ) ";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(clause);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Correspondence
	/**
	 * Method findByCaseNumAndTpCode737, query for TP 737.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @param requestedDate
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumAndTpCode737(int maxRows,
			EdEligibilityCargo cargo, String requestedDate)
			throws GenericRunTimeException {
		Debug.println("findByCaseNumAndTpCode737" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND ='A' "
					+ " AND CG_STATUS_CD ='AP' "
					+ " TYPE_OF_ASSISTANCE_CD in ('TP07','TP37') "
					+ " AND cast(cast(REC_BEGIN_DT as varchar(10)) as date) <= "
					+ DateFormatter.getDateForWhereClauseAnsi(requestedDate)
					+ " AND ( REC_END_DT is null or "
					+ " cast(cast(REC_END_DT as varchar(10)) as date) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(requestedDate);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Correspondence for 1822
	// Requested by Correspondence for 1822
	/**
	 * Method findByCaseNumberAndAbawdSw, query by Abawd switch is yes.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberAndAbawdSw(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumberAndAbawdSw" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND DELETE_SW ='N' AND CURRENT_ELIG_IND IN ('A','P') AND CG_STATUS_CD = 'AP' AND REC_END_DT IS NULL AND ABAWD_SW = 'Y')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by EDBC Batch
	/**
	 * Method findByUserEDBCRunDate, query by EDBC run date.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @param sUserID
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUserEDBCRunDate(int maxRows,
			long lCaseNum, Timestamp tsEDBCRunDt, String sUserID)
			throws GenericRunTimeException {
		try {
			String clause = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA + " Where CASE_NUM =  "
					+ lCaseNum + strLiteralAndDeleteSWN
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt)
					+ " AND CREATE_USER_ID like '" + sUserID
					+ "' ORDER by PROGRAM_CD,TYPE_OF_ASSISTANCE_CD ";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(clause);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by track2
	/**
	 * Method findByCaseNumberEdgNum, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumberEdgNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum3
					+ cargo.getCaseNum()
					+ ") AND (PROGRAM_CD = 'FS') AND (EDG_NUM = "
					+ cargo.getEdgNum()
					+ ") AND (CURRENT_ELIG_IND = 'A') AND (CG_STATUS_CD = 'AP')AND(DELETE_SW = 'N')AND(REC_BEGIN_DT<="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ ")AND(REC_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " OR REC_END_DT IS NULL))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by AR not used
	/**
	 * Method findByCaseNumforEmpAssign, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforEmpAssign(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumforEmpAssign" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		java.sql.Timestamp currDate = new java.sql.Timestamp(
				new FwDate().getTimeInMillis());
		try {
			String clause = strLiteralCaseNum3
					+ cargo.getCaseNum()
					+ ") AND (REC_BEGIN_DT <=  "
					+ DateFormatter.getDateForWhereClauseAnsi(currDate)
					+ ") AND (DELETE_SW = 'N') AND  (REC_END_DT IS NULL OR REC_END_DT >= '"
					+ DateFormatter.stringHyphenToDateAnsi(currDate.toString()
							.substring(0, 10)) + "') )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByEdgNumEffDates, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumEffDates(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String whereClause = " (EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND  (REC_END_DT IS NULL OR  REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt()) + " )  )";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByCaseNumEdgTraceIdActive, query by Edg Trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdActive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String whereClause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND  EDG_TRACE_ID = "
					+ cargo.getEdgTraceId()
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND DELETE_SW = 'N' AND  (REC_END_DT IS NULL OR  REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " ) AND CG_STATUS_CD = "
					+ cargo.getCgStatusCd() + " AND CURRENT_ELIG_IND = "
					+ cargo.getCurrentEligInd() + " ) ORDER BY EDG_NUM ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByCaseNumEdgTraceIdHistory, query by Edg Trace ID.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdHistory(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralDeleteSw, 'N');
			map.put(FwConstants.ORDER_BY_CLAUSE, "ORDER BY EDG_NUM ");
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByCaseNumGIJEDGNum, query by Pgm Code = 'TF' or 'MA'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumGIJEDGNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumGIJEDGNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String sql = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " and PROGRAM_CD IN ('TF','MA')"
					+ strLiteralCurrenteligIndA
					+ strLiteralDeleteSwN
					+ strLiteralPaymentenddt
					+ strLiteralPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt());
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sql);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Prasath for Mass Update Convertion compare util
	/**
	 * Method findByAuthEdg, query by Authorizd and Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthEdg" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND  EDG_NUM= "
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_BEG_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt()) + strLiteralclparenthesis;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Correspondence
	/**
	 * Method findByTP07TP37, query by TOA = 'Tp07' or 'TP37'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTP07TP37(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND ='A' AND CG_STATUS_CD ='AP' AND TYPE_OF_ASSISTANCE_CD in ('TP07','TP37') AND REC_END_DT is null AND DELETE_SW = 'N')";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by AR

	/**
	 * Method findByCaseNumforEmpAssign, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param AedgNums
	 *            ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforEmpAssign(int maxRows,
			long caseNum, List AedgNums) throws GenericRunTimeException {
		Debug.println("findByCaseNumforEmpAssign" + strLiteralMaxRows + maxRows
				+ " caseNum=" + caseNum);
		EdEligibilityCargo[] colrows = null;
		try {
			StringBuffer SEARCH_SQL = new StringBuffer(
					"SELECT DISTINCT CASE_NUM,PROGRAM_CD,EDG_NUM FROM ED_ELIGIBILITY WHERE ((CASE_NUM = "
							+ caseNum + " ) AND (DELETE_SW= 'N') ");
			int edgNumSize = AedgNums.size();
			if (edgNumSize != 0) {
				SEARCH_SQL = SEARCH_SQL.append(" AND ( ");
				for (int i = 0; i < edgNumSize; i++) {
					if (i == 0) {
						SEARCH_SQL = SEARCH_SQL.append(" EDG_NUM NOT IN (");
						SEARCH_SQL = SEARCH_SQL.append(AedgNums.get(i));
					} else {
						SEARCH_SQL = SEARCH_SQL.append(" , ").append(
								AedgNums.get(i));
					}
				}
				SEARCH_SQL = SEARCH_SQL.append("))");
			}
			SEARCH_SQL = SEARCH_SQL.append(") ORDER BY EDG_NUM");
			List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SEARCH_SQL.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				row.setCaseNum(((Long) rs.get(strLiteralCaseNum1)).longValue());
				row.setProgramCd(rs.get(strLiteralProgarmCd).toString());
				row.setEdgNum(((Long) rs.get(strLiteralEdgNum)).longValue());
				v.add(row);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByEDGNumGIJPrgCD_TF_MA, query by Pgm Cd = 'TF' or 'MA'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDGNumGIJPrgCD_TF_MA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEDGNumGIJPrgCD_TF_MA" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String sql = " EDG_NUM = "
					+ cargo.getEdgNum()
					+ " and PROGRAM_CD IN ('TF','MA')"
					+ strLiteralCurrenteligIndA
					+ strLiteralDeleteSwN
					+ strLiteralPaymentenddt
					+ strLiteralPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ strLiteralPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt());
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sql);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end findByEDGNumGIJPrgCD_TF_MA()

	// Requested by DI
	/**
	 * Method findByCaseNumOnly, query by Curr Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumOnly(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumOnly" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndDeleteSwY
					+ " AND CURRENT_ELIG_IND in ('P', 'A', 'S')"
					+ " ORDER BY EDG_NUM, PAYMENT_BEG_DT ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	// Requested for modifications by BI on 07-Feb-03
	/**
	 * Method findByActiveEdgProgramCd, query by Edg # and Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo []
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveEdgProgramCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByActiveEdgProgramCd " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND  CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " OR PAYMENT_END_DT IS NULL) AND DELETE_SW='N'";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Correspondence
	/**
	 * Method findByEdgAndTP, query by Edg Num and Toa.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgAndTP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralCurrentEligInd, 'A');
			map.put("CG_STATUS_CD", "AP");
			map.put(strLiteralTypeOfAssistanceCd, cargo.getTypeOfAssistanceCd());
			map.put(strLiteralDeleteSw, 'N');
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI and also used by Correspondence
	/**
	 * Method findByCaseNumEDGES, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEDGES(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumEDGES" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND REC_END_DT IS NULL ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by AR - Mahesh Manjiah
	/**
	 * Method findByCaseNumForTransfer, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumForTransfer(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumForTransfer" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		java.sql.Timestamp currDate = new java.sql.Timestamp(
				new FwDate().getTimeInMillis());
		try {
			String clause = strLiteralRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(currDate)
					+ " and (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(currDate)
					+ "  OR REC_END_DT IS NULL)  and DELETE_SW = 'N' and CASE_NUM = "
					+ cargo.getCaseNum()
					+ " and CASE_NUM not in ( select CASE_NUM from ED_ELIGIBILITY where CURRENT_ELIG_IND not in ( 'A','C'))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * findByOpenCases, query for open ended Edgs.Used By : TimeDependentAlerts.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByOpenCases(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String clause = " (CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL AND DELETE_SW = 'N') ORDER BY CASE_NUM DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested By AL
	// Requested by Track 2
	// Modified to include Performance recommendations -Jai (03/29/04)
	/**
	 * Method findByCaseNumberEdgNumber, query by Edg num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberEdgNumber(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumberEdgNumber" + strLiteralMaxRows + maxRows
				+ " cargo= " + cargo);
		try {
			String clause = strLiteralCaseNum3
					+ cargo.getCaseNum()
					+ ") AND (EDG_NUM = "
					+ cargo.getEdgNum()
					+ ") AND (CURRENT_ELIG_IND = 'A') AND (DELETE_SW = 'N') AND (PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ ") AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + "))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByTfPartAPostive, query for Tanf Part A.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Requested By AL modified on 05/23/04
	// ////////////////////////**********************************************
	// Finder method for Part A TF positive sample
	public EdEligibilityCargo[] findByTfPartAPostive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByTfPartAPostive" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(cargo.getCurrentEligInd())
					+ strLiteralAndCgStatusCd
					+ cargo.getCgStatusCd()
					+ "' AND REC_BEGIN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT IS NULL) AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + strLiteralAndDeleteSw
					+ String.valueOf(cargo.getVoidSw())
					+ strLiteralAndTypeOfAssistanceCd
					+ cargo.getTypeOfAssistanceCd() + "' ORDER BY EDG_NUM ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByTfPartBPostive, query for Tanf part B.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Requested By AL modified on 05/23/04
	// ////////////////////////**********************************************
	// Finder method for Part B TF positive sample
	public EdEligibilityCargo[] findByTfPartBPostive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByTfPartBPostive" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(cargo.getCurrentEligInd())
					+ strLiteralAndCgStatusCd
					+ cargo.getCgStatusCd()
					+ "' AND REC_BEGIN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT IS NULL) AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ " AND EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getCreateDt()) + strLiteralAndDeleteSw
					+ String.valueOf(cargo.getVoidSw())
					+ strLiteralAndTypeOfAssistanceCd
					+ cargo.getTypeOfAssistanceCd() + "' ORDER BY EDG_NUM ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by EDBC for Striker
	/**
	 * Method findByPreStrikeAuth, query by Pre Strike Auth.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsPreStrikeDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPreStrikeAuth(int maxRows, long lCaseNum,
			Timestamp tsPreStrikeDt) throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID from ED_ELIGIBILITY A "
					+ strLiteralWhereCaseNum
					+ lCaseNum
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ " AND PROGRAM_CD = 'FS' "
					+ " AND REC_BEGIN_DT <=  "
					+ DateFormatter.getDateForWhereClauseAnsi(tsPreStrikeDt)
					+ " AND (REC_END_DT  >=  "
					+ DateFormatter.getDateForWhereClauseAnsi(tsPreStrikeDt)
					+ strLiteralOr
					+ " REC_END_DT  is Null ) "
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT))";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method is used to find the Individuals eligible for FSTEA. INTrack
	 * 7: IT6. Sunil Palankar.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPrgCDStatusCDEligIND(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByPrgCDStatusCDEligIND" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' and CURRENT_ELIG_IND = 'A'"
					+ " and CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "' and DELETE_SW = 'N'"
					+ " and REC_BEGIN_DT <=  "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " and (REC_END_DT is null or REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + ") order by EDG_TRACE_ID";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end findByPrgCDStatusCDEligIND()

	// Requested by EDBC for SpendDown
	/**
	 * Method findByAuthSpendDown, query for EDBC spend down.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param lEdgNum
	 *            long
	 * @param tsForEndDt
	 *            Timestamp
	 * @param tsForBegDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthSpendDown(int maxRows, long lCaseNum,
			long lEdgNum, Timestamp tsForEndDt, Timestamp tsForBegDt)
			throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum2 + lCaseNum + " AND  EDG_NUM= "
					+ lEdgNum + strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(tsForEndDt)
					+ strLiteralclparenthesis + " AND PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(tsForBegDt);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by EDBC for SpendDown
	/**
	 * Method findBySpendDown, query for EDBC Spend Down.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param lEdgNum
	 *            long
	 * @param tsPayBegDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpendDown(int maxRows, long lCaseNum,
			long lEdgNum, Timestamp tsPayBegDt) throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum2 + lCaseNum + " AND  EDG_NUM= "
					+ lEdgNum + strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'P' "
					+ " AND PAYMENT_BEG_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(tsPayBegDt);

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DI
	/**
	 * Method findByRecoupRecords, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByRecoupRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByRecoupRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {		
			
			final List params = new ArrayList();
            final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE ");
            sqlString.append(strLiteralCaseNum2);
            sqlString.append("?");                    
            sqlString.append(" AND  EDG_NUM= ?");                    
            sqlString.append(strLiteralAndDeleteSWN);
            sqlString.append(" AND  CURRENT_ELIG_IND = 'R' ");
            sqlString.append(" AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>= CAST( ? AS DATE)");
            sqlString.append(strLiteralclparenthesis);
            sqlString.append(" AND PAYMENT_BEG_DT <= CAST( ? AS DATE) ");                    
                    
            params.add(cargo.getCaseNum());
            params.add(cargo.getEdgNum());
            params.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
            params.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
           
            final EdEligibilityCargo[] cargoArr = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargoArr;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interfaces
	/**
	 * Method findByPRSCasePgmTOACurrRec, query by Pgm Cd and TOA.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPRSCasePgmTOACurrRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String WHERE_SQL = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ strLiteralAndTypeOfAssistanceCd
					+ cargo.getTypeOfAssistanceCd()
					+ "' AND CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL AND DELETE_SW = 'N' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_SQL);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end method findByPRSCasePgmTOACurrRec
	// Requested by DC

	// finder for getting data for ivr. shekar
	/**
	 * CCD CQ Id : BRGUS00036277 Id : BRGUS00036447 Method
	 * findByCaseNumberForIVR, finder for getting data for ivr
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberForIVR(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumberForIVR" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String WHERE_CLAUSE = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD IN('FS','TF') AND CURRENT_ELIG_IND = 'A' AND DELETE_SW='N' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_CLAUSE);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DC
	/**
	 * Method findByCaseNumPrgCdEligInd, query by Pgm Code = 'MA'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumPrgCdEligInd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumPrgCdEligInd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String sql = strLiteralCaseNum2 + cargo.getCaseNum()
					+ " and CURRENT_ELIG_IND = 'A'" + " and PROGRAM_CD = 'MA'"
					+ " and DELETE_SW = 'N'" + " and REC_END_DT is null";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sql);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end findByCaseNumPrgCdEligInd
	// Requested by Conversion
	/**
	 * Method findByCaseNumEdgPayBgnDt, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgPayBgnDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND  EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND PAYMENT_BEG_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND CURRENT_ELIG_IND IN ('A','P','T') AND CREATE_USER_ID not like 'CV%' AND DELETE_SW <> 'Y' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// added by Prasath for Conversion 11/16
	/**
	 * Method findByCaseNumPayBgnDt, query byEdg Num not in.
	 *
	 * @param maxRows
	 *            int
	 * @param edEligibilityCargoList
	 *            ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumPayBgnDt(int maxRows,
			List edEligibilityCargoList) throws GenericRunTimeException {
		try {
			StringBuffer str = new StringBuffer();
			str.append(strLiteralCaseNum2
					+ ((EdEligibilityCargo) edEligibilityCargoList.get(0))
							.getCaseNum() + strLiteralANd);
			str.append(" EDG_NUM NOT IN (");
			int iEdEligSize = edEligibilityCargoList.size();
			for (int i = 0; i < iEdEligSize; i++) {
				if (i != 0) {

					str.append(",");
				}
				str.append(((EdEligibilityCargo) edEligibilityCargoList.get(i))
						.getEdgNum());
			}
			str.append(") AND PAYMENT_BEG_DT = "
					+ DateFormatter
							.getDateForWhereClauseAnsi(((EdEligibilityCargo) edEligibilityCargoList
									.get(0)).getPaymentBegDt())
					+ " AND CREATE_USER_ID not like 'CV%' AND DELETE_SW <> 'Y'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, str.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DC
	// Requested by Anjali (Data Collection)
	/**
	 * Method findByCaseNumForReturnMedId, query by Pgm Cd = 'MA' or 'ME'.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Modification requested by Bhuvane Elangovan (Data Collection) - Thursday,
	// June 23, 2005 11:07 AM
	public EdEligibilityCargo[] findByCaseNumForReturnMedId(int maxRows,
			long caseNum) throws GenericRunTimeException {
		try {
			String sql = strLiteralCaseNum2 + caseNum
					+ " AND CURRENT_ELIG_IND = 'A'"
					+ " AND PROGRAM_CD IN ( 'MA','ME')"
					+ strLiteralAndDeleteSwN
					+ " AND CG_STATUS_CD  = 'AP'  ORDER BY EDG_NUM ASC ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sql);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end findByCaseNumForReturnMedId

	// Requested by DC Vivek Agrawal for One Time TANF Scheduling
	/**
	 * Method findByCaseNumOneTimeTANF.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumOneTimeTANF(int maxRows,
			long caseNum) throws GenericRunTimeException {
		try {
			String whereClause = strLiteralCaseNum2
					+ caseNum
					+ " AND TYPE_OF_ASSISTANCE_CD IN ('TP01','TP61') AND CG_STATUS_CD = 'AP' AND PROGRAM_CD = 'TF' AND ACTIVITY_TYPE = 'IN' AND CURRENT_ELIG_IND = 'P' AND DELETE_SW = 'N' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// end findByCaseNumOneTimeTANF
	// Requested by Track6
	/**
	 * Method findByCaseNumforEmpAssign..
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforEmpAssign(int maxRows,
			long caseNum) throws GenericRunTimeException {
		Debug.println("findByCaseNumforEmpAssign" + strLiteralMaxRows + maxRows
				+ " caseNum=" + caseNum);
		try {
			String SEARCH_SQL = "SELECT DISTINCT CASE_NUM, PROGRAM_CD,EDG_NUM FROM ED_ELIGIBILITY WHERE ((CASE_NUM = "
					+ caseNum + " ) AND (DELETE_SW= 'N') )ORDER BY EDG_NUM ";
			List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SEARCH_SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				row.setCaseNum(((BigDecimal) rs.get(strLiteralCaseNum1))
						.longValue());
				row.setProgramCd((String) rs.get(strLiteralProgarmCd));
				row.setEdgNum(((BigDecimal) rs.get(strLiteralEdgNum))
						.longValue());
				v.add(row);
			}
			EdEligibilityCargo[] colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	/**
	 * Method findByLastEDBCRunDt, query by EDBC run Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo []
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByLastEDBCRunDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLastEDBCRunDt" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " SELECT MAX(EDBC_RUN_DT) maxEDBCRunDt FROM ED_ELIGIBILITY "
					+ " Where EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND ='A' "
					+ " AND DELETE_SW ='N' "
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt());

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(clause);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				theObject.setEdbcRunDt((Timestamp) obj.get("maxEDBCRunDt"));
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	/**
	 * Method findByLastAuthorizedMonth, query by Last auth.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo []
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByLastAuthorizedMonth(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLastAuthorizedMonth" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " SELECT MAX(ELIGIBILITY_BEG_DT) maxEligibilityBegDt FROM ED_ELIGIBILITY "
					+ " Where EDG_NUM =  "
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND ='A' "
					+ " AND DELETE_SW ='N' "
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt());
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(clause);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				theObject.setEdbcRunDt((Timestamp) obj
						.get("maxEligibilityBegDt"));
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by BI
	/**
	 * Method findByLastAuthoriziedRecord, query by Last Auth.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo []
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByLastAuthoriziedRecord(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLastAuthoriziedRecord" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralCurrentEligInd, 'A');
			map.put(strLiteralDeleteSw, 'N');
			map.put("EDBC_RUN_DT", DateFormatter
					.getDateForWhereClauseAnsi(cargo.getEdbcRunDt()));
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Correspondence for 1027-A
	/**
	 * Method findByMAPaymentDt, query by MA Payment date.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMAPaymentDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByMAPaymentDt" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String whereClause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND (PAYMENT_END_DT is null or PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + "))";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DI
	/**
	 * CCD CQ Id : BRGUS00065616 Id : BRGUS00066243 Method
	 * findByUnAuthCaseNumForDates, query by un Auth.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuthCaseNumForDates(int maxRows,
            long lCaseNum) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
            final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"CASE_NUM = ? " + strLiteralAndDeleteSWN + " AND ( (CURRENT_ELIG_IND in ('P', 'T', 'V', 'K', 'S'))  OR (CURRENT_ELIG_IND = 'A' AND REC_END_DT is NULL) OR (CURRENT_ELIG_IND = 'A' AND REC_END_DT=(case when program_cd='LI' then REC_END_DT END)) ) ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), PROGRAM_CD desc" );
            ArrayList<Object> params = new ArrayList <Object> ();
            params.add(lCaseNum);
            
            final EdEligibilityCargo[] cargo = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargo;
            
		} catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(),e);
		}

	}


	// Requested by BI - Ravi
	/**
	 * Method findByEligIndEdg, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEligIndEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEligIndEdg " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = "
					+ String.valueOf(cargo.getCurrentEligInd())
					+ " AND DELETE_SW ='N' "
					+ " AND(REC_BEGIN_DT<="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ ")"
					+ "AND(REC_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt()) + " OR REC_END_DT IS NULL)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/*
	 * RAVI //Requested by track2 for Parallel Run (12/12/2002) public
	 * EdEligibilityCargo[] findByEligibilityCases(int maxRows, long aCaseNum1,
	 * long aCaseNum2, char currEligInd1, char currEligInd2, String CGStatusCD1,
	 * String CGStatusCD2, String CGStatusCD3, Timestamp beginDate, Timestamp
	 * endDate, Timestamp nextMnthEndDate) throws GenericRunTimeException {
	 * ArrayList v = new ArrayList(); Connection conn = null; PreparedStatement
	 * statement = null; ResultSet rs = null; try { conn = getConnection();
	 * statement = conn.prepareStatement( SELECT_SQL + " WHERE (CASE_NUM BETWEEN
	 * ? AND ? AND DELETE_SW = 'N' AND (((CURRENT_ELIG_IND = ? OR
	 * CURRENT_ELIG_IND = ?) AND (CG_STATUS_CD = ? OR CG_STATUS_CD = ? OR
	 * CG_STATUS_CD = ?) AND EDBC_RUN_DT >= ? AND EDBC_RUN_DT <= ?) OR
	 * (CG_STATUS_CD = ? AND CURRENT_ELIG_IND = ? AND PAYMENT_BEG_DT <= ? AND
	 * (PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL))))"); //Parameter
	 * CaseNum1 statement.setLong(1,aCaseNum1); //Parameter CaseNum2
	 * statement.setLong(2,aCaseNum2); //CurrentEligInd = 'A'
	 * statement.setString(3,String.valueOf(currEligInd1));
	 * 
	 * //CurrentEligInd = 'C' statement.setString(4,
	 * String.valueOf(currEligInd2)); //CG Status Cd = 'AP'
	 * statement.setString(5, CGStatusCD1); //CG Status Cd = 'DN'
	 * statement.setString(6, CGStatusCD2); //CG Status Cd = 'TN'
	 * statement.setString(7, CGStatusCD3); //Reprt Begin Date
	 * statement.setTimestamp(8, beginDate); //ReportEndDate
	 * statement.setTimestamp(9, endDate); //CgStatusCd = 'AP'
	 * statement.setString(10, CGStatusCD1); //CurrentEligInd = 'A'
	 * statement.setString(11,String.valueOf(currEligInd1)); //ReportEndDate
	 * statement.setTimestamp(12, nextMnthEndDate); //ReportEndDate
	 * statement.setTimestamp(13, nextMnthEndDate); rs =
	 * statement.executeQuery(); int cnt = 0; //Prefetch Coding(Tiers00040467)
	 * -- modified on 09/25/2002 //while (rs.next() && cnt++ < maxRows) { while
	 * (cnt++ < maxRows && rs.next()) { EdEligibilityCargo row = new
	 * EdEligibilityCargo(); getRowFromResultSet(row, rs); v.add(row); }
	 * EdEligibilityCargo colrows[] = new EdEligibilityCargo[v.size()];
	 * v.toArray(colrows); return colrows; } catch (Exception e) { throw new
	 * GenericRunTimeException(e.getMessage()); } finally { try { //if (rs !=
	 * null) rs.close();
	 * 
	 * //Prefetch Coding(Tiers00040467) -- modified on 09/25/2002 if (rs != null
	 * && getClose()) { rs.close(); } } catch (Exception e) { throw new
	 * GenericRunTimeException(e.getClass().getName() + " " + e.getMessage()); }
	 * try { //if (statement != null) statement.close(); //Prefetch
	 * Coding(Tiers00040467) -- modified on 09/25/2002 if (statement != null) {
	 * closeStatement("findByEligibilityCases", statement,maxRows,v.size()); } }
	 * catch (Exception e) { throw new
	 * GenericRunTimeException(e.getClass().getName() + " " + e.getMessage()); }
	 * try { if (conn != null && getClose()) conn.close(); } catch (Exception e)
	 * { throw new GenericRunTimeException(e.getClass().getName() + " " +
	 * e.getMessage()); } } } RAVI
	 */// Requested by DI
	/**
	 * Method findByCurrentEligInd, query by Curr Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCurrentEligInd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String sql = ("  Select A.*, A.rowid " + " from ED_ELIGIBILITY A  "
					+ strLiteralWhereCaseNum2 + " AND program_cd = ? "
					+ " AND CURRENT_ELIG_IND = 'S' " + strLiteralAndDeleteSWN + " ORDER by payment_beg_dt ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getProgramCd());

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Alerts - Binu
	/**
	 * Method findByExpeditedCases, query for Expedited cases.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpeditedCases(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedCases" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			/*
			 * String WHERE_CLAUSE = "WHERE (PROGRAM_CD ='FS' AND
			 * CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD = 'AP' AND
			 * FS_EXPEDITED_SW = 'Y' AND DELETE_SW = 'N' AND PAYMENT_BEG_DT = ?
			 * AND REC_END_DT IS NOT NULL)";
			 */
			String WHERE_CLAUSE = " E1 WHERE (E1.PROGRAM_CD = 'FS' AND E1.CURRENT_ELIG_IND = 'A' AND"
					+ "    E1.CG_STATUS_CD = 'AP' AND E1.FS_EXPEDITED_SW = 'Y' AND"
					+ "    E1.DELETE_SW = 'N' AND E1.APPLICATION_DT =? AND"
					+ "    E1.REC_END_DT IS NOT NULL"
					+ "    AND NOT EXISTS (SELECT 1  FROM ED_ELIGIBILITY E2 "
					+ "  WHERE E2.CURRENT_ELIG_IND = 'A'"
					+ " AND E2.DELETE_SW = 'N' "
					+ " AND E2.REC_END_DT IS NULL"
					+ " AND E1.CASE_NUM=E2.CASE_NUM"
					+ " AND E1.EDG_NUM=E2.EDG_NUM"
					+ " AND E1.PROGRAM_CD=E2.PROGRAM_CD))"
					+ " AND (CASE_NUM, PROGRAM_CD) IN"
					+ " (SELECT /*+ parallel(dcpb)*/"
					+ " DCPB.CASE_NUM, DCPB.PROG_CD"
					+ " FROM DC_CASE_PROGRAM_B DCPB"
					+ " WHERE DCPB.PROG_CD = 'FS')";

			// statement.setTimestamp(1, cargo.getPaymentBegDt());
			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getPaymentBegDt());
			// parms.add(cargo.getProgramCd();

			SQLCommand command = getSqlCommandForUpdate(
					WHERE_CLAUSE.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Alerts - Binu

	/**
	 * Method findByExpeditedEdgCases, query by Expedited.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpeditedEdgCases(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedEdgCases" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND REC_END_DT IS NULL)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by DI
	/**
	 * Method findByPRecords, query by 'P' Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByPRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = 'P'"
					+ "AND DELETE_SW = 'N'  AND  PROGRAM_CD="
					+ cargo.getProgramCd() + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage()); //ND012740
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Murthy Adireddy on October 16Th, 2002 for EBT Cancellation
	/**
	 * Method findByDeniedEDG, query by Denied Edg.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDeniedEDG(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByDeniedEDG" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(PROGRAM_CD = " + cargo.getProgramCd()
					+ " AND CG_STATUS_CD =  " + cargo.getCgStatusCd() + ""
					+ " AND DELETE_SW = 'N' AND EDG_NUM =  "
					+ cargo.getEdgNum() + " AND REC_END_DT IS NULL)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by DI
	// Requested by DI
	/**
	 * Method findIfAllEDMsAuthorizedForProgram, query by Authorized for given
	 * pgm.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findIfAllEDMsAuthorizedForProgram(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findIfAllEDMsAuthorizedForThisProgram"
				+ strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSWN + strLiteralAndProgramCd
					+ cargo.getProgramCd() + "  "
					+ " AND ( CURRENT_ELIG_IND IN ('S', 'P') ) ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by EDBC
	/**
	 * Method findByForSpendDown, query by spend down.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param lEdgNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByForSpendDown(int maxRows, long lCaseNum,
			long lEdgNum) throws GenericRunTimeException {
		// ArrayList v = new ArrayList();

		try {
			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + " AND EDG_NUM = ? "
					+ strLiteralAndDeleteSWN + strLiteralAndCurrentEligIndP);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			parms.add(lEdgNum);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by correspondance

	/**
	 * Method findByCaseNumAndStatusCd, query by Cg Status Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumAndStatusCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumAndStatusCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "case_num = " + cargo.getCaseNum()
					+ " and cg_status_cd = 'PE' " + "and program_cd = "
					+ cargo.getProgramCd() + " and current_elig_ind = 'P'"
					+ " and DELETE_SW = 'N' order by payment_beg_dt ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Stage3
	// Requested by DI - Suresh Akula - added on 12/17/2002 at 11:00AM
	// public EdEligibilityCargo[] findByPendingEDMs(int maxRows, long
	// bdCaseNum, Timestamp tsRunDate, String sEdgTraceIdList)
	// public EdEligibilityCargo[] findByPendingEDMs(int maxRows, long
	// bdCaseNum, Timestamp tsRunDate)
	/**
	 * Method findByPendingEDMs, query by Pending EDMS.
	 *
	 * @param maxRows
	 *            int
	 * @param bdCaseNum
	 *            long
	 * @param tsRunDate
	 *            Timestamp
	 * @param sEdgTraceIdList
	 *            String
	 * @param edgTraceIds
	 *            Long[]
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPendingEDMs(int maxRows, long bdCaseNum,
			Timestamp tsRunDate, String sEdgTraceIdList, Long[] edgTraceIds)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = strLiteralCaseNum2
					+ bdCaseNum
					+ " "
					+ strLiteralAndDeleteSWN
					+ " AND EDG_TRACE_ID NOT IN ("
					+ sEdgTraceIdList
					+ ") "
					+ " AND (     ( CURRENT_ELIG_IND IN ('S', 'P', 'K', 'V', 'H', 'M', 'X') AND EDBC_RUN_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(tsRunDate)
					+ " ) "
					+ "        or ( CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL AND CG_STATUS_CD = 'AP') "
					+ "     ) ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by DI - Suresh Akula - added on 12/17/2002 at 11:00AM
	/**
	 * Method findByAuthorizableRecords, query by authoriable records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Requested by DI - Suresh Akula - added on 12/17/2002 at 11:00AM
	/**
	 * Method findByAuthorizableRecords, query by authoriable records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Requested by DI - Suresh Akula - added on 12/17/2002 at 11:00AM
	/**
	 * CCD CQ Id : BRGUS00032864 Id : BRGUS00032904 Method
	 * findByAuthorizableRecords, query by authoriable records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByAuthorizableRecords(int maxRows,
			long lCaseNum, Timestamp tsEDBCRunDt)
			throws GenericRunTimeException {

		try {
			/*
			 * statement = conn.prepareStatement ("Select A.*, A.rowid " + "
			 * from ED_ELIGIBILITY A " + " Where A.CASE_NUM = ? " + " AND
			 * A.CG_STATUS_CD <> 'PE' " + " AND A.DELETE_SW = 'N' " + " AND
			 * A.CURRENT_ELIG_IND = 'P' " + " AND to_char(A.EDBC_RUN_DT,
			 * 'YYYY/MM/DD') = to_char(?, 'YYYY/MM/DD') " + " ORDER BY
			 * PROGRAM_CD, EDG_NUM, to_char(PAYMENT_BEG_DT, 'YYYY-MM') " );
			 */
			// read all 'P' and 'S' records for disposition purpose and perform
			// validations in JSP
			// order by to taken from display order..
			/*
			 * statement = conn.prepareStatement ("Select A.*, A.rowid " + "
			 * from ED_ELIGIBILITY A " + " Where A.CASE_NUM = ? " + " AND
			 * A.DELETE_SW = 'N' " + " AND A.CURRENT_ELIG_IND in ('P','S') " + "
			 * ORDER BY TOA_PRIORITY_NUM, PROGRAM_CD, EDG_NUM,
			 * to_char(PAYMENT_BEG_DT, 'YYYY-MM') " );
			 */
			// Historical display changes - read k, v
			String sql = ("Select  A.*, A.rowid "
					+ " from  ED_ELIGIBILITY A "
					+ " Where A.CASE_NUM = ? "
					+ " AND   A.DELETE_SW = 'N' "
					+ " AND   A.CURRENT_ELIG_IND in ('P','S', 'K', 'V') "
					+ " ORDER BY TOA_PRIORITY_NUM, PROGRAM_CD, EDG_NUM, PAYMENT_BEG_DT ");

			// statement.setTimestamp(2, tsEDBCRunDt);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// CHIMESMO-99426 MM_01.01.01 ED Framework Cascade FU & NF by Anubhav START
	/**
	 * Retrieve all 'P' ,'I','S' and 'V' MA records from EdEligibility for given
	 * case and delete switch and update the delete switch to y
	 * 
	 * @param maxRows
	 * @param currentEligInd
	 * @param dcCaseProgramCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getAndRemoveEligibilityPVIIndRecordsMA(
			int maxRows, EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getAndRemoveEligibilityPVIIndRecordsMA START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum() + " AND PROGRAM_CD = '"
					+ edEligibilityCargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND IN ('V','I','P','S') "
					+ " AND DELETE_SW = '" + edEligibilityCargo.getDeleteSw()
					+ "'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getAndRemoveEligibilityPVIIndRecordsMA END");
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Retrieve all 'V' MA records from EdEligibility for given case and delete
	 * switch
	 * 
	 * @param maxRows
	 * @param currentEligInd
	 * @param dcCaseProgramCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getEligibilityVIndRecordsMA(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityVIndRecordsMA START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum() + " AND PROGRAM_CD = '"
					+ edEligibilityCargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND IN ('V') " + " AND DELETE_SW = '"
					+ edEligibilityCargo.getDeleteSw() + "'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getEligibilityVIndRecordsMA END");
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CHIMESMO-99426 MM_01.01.01 ED Framework Cascade FU & NF by Anubhav END
	/**
	 * Method findByTraceIdList, query by Edg Trace Id List.
	 *
	 * @param maxRows
	 *            int
	 * @param bdCaseNum
	 *            long
	 * @param tsRunDate
	 *            Timestamp
	 * @param edgTraceIdList
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTraceIdList(int maxRows, long bdCaseNum,
			Timestamp tsRunDate, String edgTraceIdList)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + bdCaseNum + " "
					+ strLiteralAndDeleteSWN + strLiteralAndEdgTraceIdIn
					+ edgTraceIdList + ")";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByTraceIdList
	/**
	 *
	 * @author knakra
	 * @purpose Method findByTraceIdLists, query by Edg Trace Id List.
	 * @param maxRows
	 *            int
	 * @param bdCaseNum
	 *            long
	 * @param tsRunDate
	 *            Timestamp
	 * @param edgTraceIdList
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTraceIdLists(int maxRows, long bdCaseNum,
			Timestamp tsRunDate, String edgTraceIdList)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + bdCaseNum
					+ strLiteralAndDeleteSWN + " AND trunc(EDBC_RUN_DT) = "
					+ DateFormatter.getDateForWhereClauseAnsi(tsRunDate)
					+ strLiteralAndEdgTraceIdIn + edgTraceIdList + ")";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * @author adbhatnagar
	 * @purpose Used to return old benefit for increase or decrease in benefits
	 *          For Eligibility notice correspondence
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findOldBenefitByCaseNumEdg(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			StringBuffer stringBuffer = new StringBuffer();
			// CH-23203 - Start - Kunal
			stringBuffer.append(strLiteralCaseNum2
					+ eligibilityCargo.getCaseNum());
			stringBuffer.append(strLiteralAndEdgNum
					+ eligibilityCargo.getEdgNum());
			stringBuffer.append(strLiteralAndprogramCd
					+ eligibilityCargo.getProgramCd() + "'");
			stringBuffer.append(" AND CURRENT_ELIG_IND = 'C' ");
			stringBuffer.append(" AND TYPE_OF_ASSISTANCE_CD = '"
					+ eligibilityCargo.getTypeOfAssistanceCd() + "'");
			// CH-24895-Kunal-Start
			stringBuffer
					.append(" ORDER BY EDBC_RUN_DT desc , UPDATE_DT  desc ");
			// CH-24895-Kunal-End
			// stringBuffer.append(" AND PAYMENT_BEG_DT = " +
			// DateFormatter.getDateForWhereClauseAnsi(eligibilityCargo.getPaymentBegDt()));
			/*
			 * stringBuffer.append(
			 * " trunc(EDBC_RUN_DT) = (SELECT MAX(trunc(ED_2.EDBC_RUN_DT)) FROM ED_ELIGIBILITY ED_2 WHERE "
			 * ); stringBuffer.append(" ED_2.CURRENT_ELIG_IND = 'C' ");
			 * stringBuffer.append(" AND trunc(ED_2.EDBC_RUN_DT) < "
			 * +DateFormatter
			 * .getDateForWhereClauseAnsi(eligibilityCargo.getEdbcRunDt()));
			 * stringBuffer.append(" AND ED_2.CASE_NUM = " +
			 * eligibilityCargo.getCaseNum());
			 * stringBuffer.append(" AND ED_2.EDG_NUM = " +
			 * eligibilityCargo.getEdgNum());
			 * stringBuffer.append(" AND ED_2.PROGRAM_CD = '" +
			 * eligibilityCargo.getProgramCd()+"'");
			 * stringBuffer.append(" AND ED_2.PAYMENT_BEG_DT = " +
			 * DateFormatter.
			 * getDateForWhereClauseAnsi(eligibilityCargo.getPaymentBegDt()));
			 * stringBuffer.append(" AND ED_2.TYPE_OF_ASSISTANCE_CD = '" +
			 * eligibilityCargo.getTypeOfAssistanceCd() + "' ) ");
			 * stringBuffer.append(
			 * " AND UPDATE_DT = (SELECT MAX(ED_3.UPDATE_DT) FROM ED_ELIGIBILITY ED_3 WHERE "
			 * ); stringBuffer.append(" ED_3.CURRENT_ELIG_IND = 'C' ");
			 * stringBuffer.append(" AND trunc(ED_3.EDBC_RUN_DT) < " +
			 * DateFormatter
			 * .getDateForWhereClauseAnsi(eligibilityCargo.getEdbcRunDt()));
			 * stringBuffer.append(" AND ED_3.CASE_NUM = " +
			 * eligibilityCargo.getCaseNum());
			 * stringBuffer.append(" AND ED_3.EDG_NUM = " +
			 * eligibilityCargo.getEdgNum());
			 * stringBuffer.append(" AND ED_3.PROGRAM_CD = '" +
			 * eligibilityCargo.getProgramCd()+"'");
			 * stringBuffer.append(" AND ED_3.PAYMENT_BEG_DT = " +
			 * DateFormatter.
			 * getDateForWhereClauseAnsi(eligibilityCargo.getPaymentBegDt()));
			 * stringBuffer.append(" AND ED_3.TYPE_OF_ASSISTANCE_CD = '" +
			 * eligibilityCargo.getTypeOfAssistanceCd() +"' )");
			 */
			// CH-23203 - Start - End
			map.put(FwConstants.READY_WHERE_CLAUSE, stringBuffer);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CHIMESMO-47954-Kunal-Start
	/**
	 *
	 * @author kunals
	 * @purpose Used to return old benefit for increase or decrease in benefits
	 *          For Eligibility notice correspondence
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findOldBenefitByCaseNumEdgV1(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {
		// Map<String, Object> map = new HashMap<String, Object>();
		try {
			StringBuffer sbWhereClause = new StringBuffer();

			CoDebugger.debugMessage("findOldBenefitByCaseNumEdgV1 Entered:");

			CoDebugger.debugMessage("findOldBenefitByCaseNumEdgV1<--CaseNum:"
					+ eligibilityCargo.getCaseNum());
			CoDebugger.debugMessage("findOldBenefitByCaseNumEdgV1<--EdgNum:"
					+ eligibilityCargo.getEdgNum());
			CoDebugger.debugMessage("findOldBenefitByCaseNumEdgV1<--CaseNum:"
					+ eligibilityCargo.getProgramCd());

			sbWhereClause
					.append(" select Case_num,current_elig_ind,edg_num,edbc_run_dt,net_benefit_amt,edg_trace_id,activity_type,benefit_amt,cg_status_cd,");
			sbWhereClause
					.append(" coalesce((select min(payment_beg_dt) from ed_eligibility X where X.case_num = Y.case_num and X.delete_sw = 'N' and X.current_elig_ind in ('A','C') and X.cg_status_cd in ('AP', 'TN') and X.edg_num = Y.edg_num and X.edbc_run_dt = Y.edbc_run_dt and X.net_benefit_amt = Y.net_benefit_amt and X.Payment_Beg_Dt < Y.payment_beg_dt ), Payment_Beg_Dt) Payment_Beg_Dt ");
			sbWhereClause
					.append("   from (select Case_num, current_elig_ind,																														");
			sbWhereClause
					.append("                edg_num,																															");
			sbWhereClause
					.append("                edbc_run_dt,																														");
			sbWhereClause
					.append("                net_benefit_amt,																													");
			sbWhereClause
					.append("                edg_trace_id,																														");
			sbWhereClause
					.append("                activity_type,																													");
			sbWhereClause
					.append("                benefit_amt,																														");
			sbWhereClause
					.append("                cg_status_cd,																														");
			sbWhereClause
					.append("                Payment_Beg_Dt,																													");
			sbWhereClause
					.append("                ROW_NUMBER() OVER(PARTITION BY CASE_NUM, EDG_NUM, edbc_run_dt ORDER BY PAYMENT_BEG_DT DESC, EDG_TRACE_ID DESC, edbc_run_dt desc) rank1  ");
			sbWhereClause
					.append("           from ed_eligibility																													");
			sbWhereClause
					.append("          where delete_sw = 'N'																													");
			sbWhereClause
					.append("            and current_elig_ind in ('A','C')																									");
			sbWhereClause
					.append("            and cg_status_cd in ('AP', 'TN')																										");
			sbWhereClause.append("            and CASE_NUM = ").append(
					eligibilityCargo.getCaseNum());
			sbWhereClause.append("            AND EDG_NUM = ").append(
					eligibilityCargo.getEdgNum());
			sbWhereClause
					.append("            AND PROGRAM_CD = '")
					.append(eligibilityCargo.getProgramCd())
					.append("'order by PAYMENT_BEG_DT desc, CURRENT_ELIG_IND asc ) Y");
			sbWhereClause
					.append("  where rank1 = 1 and rownum <= 2																													");
			sbWhereClause
					.append("  order by PAYMENT_BEG_DT desc																														");

			CoDebugger.debugMessage("The query  for fetching old record is  "
					+ sbWhereClause.toString());

			List<Object> parms = new ArrayList<Object>();
			SQLCommand command = getSqlCommandForUpdate(
					sbWhereClause.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CHIMESMO-47954-Kunal-End

	// findByTraceIdList
	/**
	 * Method findBySASReceive, query by Curr Elig Ind = 'M' and Disposition Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySASReceive(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSWN + " AND CURRENT_ELIG_IND = 'M' "
					+ " AND DISPOSITION_TRANS_ID ="
					+ cargo.getDispositionTransId() + "";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findBySASReceive
	/**
	 * Method findByUnAuthProcessed, query by Un Auth.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuthProcessed(int maxRows,
			long lCaseNum, Timestamp tsEDBCRunDt)
			throws GenericRunTimeException {
		// ArrayList v = new ArrayList();

		try {
			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndP + " AND EDBC_RUN_DT = ? " + " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), TOA_PRIORITY_NUM, PROGRAM_CD desc ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			parms.add(tsEDBCRunDt);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByUnAuthProcessed
	/**
	 * Method findByMlyUpdIndvPrgCd, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @param progCds
	 *            String[]
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMlyUpdIndvPrgCd(int maxRows,
			Timestamp beginDt, Timestamp endDt, String[] progCds)
			throws GenericRunTimeException {
		ArrayList v = new ArrayList();
		EdEligibilityCargo colrows[] = null;
		try {
			StringBuffer str = new StringBuffer(
					"SELECT DISTINCT CASE_NUM FROM ED_ELIGIBILITY ");
			str.append(" WHERE PROGRAM_CD IN (");
			for (int i = 0; i < progCds.length; i++) {
				if (i != 0) {
					str.append(",");
				}
				str.append("'" + progCds[i] + "'");
			}
			str.append(")  AND DELETE_SW = 'N' AND  (PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL) AND EDBC_RUN_DT <= ? AND CURRENT_ELIG_IND IN ('A','C')  AND DELETE_SW = 'N' ORDER BY CASE_NUM ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(beginDt);
			parms.add(endDt);

			SQLCommand command = getSqlCommandForUpdate(str.toString(), parms);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> result : results) {
				// String aproviderId = (String) result.get("PROVIDER_ID");
				// String apaymentToAddrSeqNum = (String)
				// result.get("PAYMENT_TO_ADDR_SEQ_NUM");
				java.math.BigDecimal acaseNum = (BigDecimal) result
						.get(strLiteralCaseNum1);

				EdEligibilityCargo row = new EdEligibilityCargo();
				// row.setProviderId(aproviderId);
				// row.setPaymentToAddrSeqNum(apaymentToAddrSeqNum);
				row.setCaseNum(Long.parseLong(acaseNum.toString()));
				v.add(row);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by interface(kaur,rajdeep)
	/**
	 * Method findByMlyFSUpdIndvCaseRange, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum1
	 *            long
	 * @param caseNum2
	 *            long
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @param progCd
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMlyFSUpdIndvCaseRange(int maxRows,
			long caseNum1, long caseNum2, Timestamp beginDt, Timestamp endDt,
			String progCd) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM BETWEEN "
					+ caseNum1
					+ strLiteralANd
					+ caseNum1
					+ strLiteralANd
					+ " CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = 'FS' AND DELETE_SW = 'N' "
					+ " AND (((EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ ""
					+ strLiteralAndEdbcRunDt
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ " )"
					+ " AND CG_STATUS_CD IN ('AP', 'TN')) OR "
					+ " (PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ "))"
					+ " ORDER BY  CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC , EDBC_RUN_DT DESC ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByAllFSMlyUpdIndv, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @param progCd
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllFSMlyUpdIndv(int maxRows,
			Timestamp beginDt, Timestamp endDt, String progCd)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "((PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ " "
					+ "AND PAYMENT_END_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ " ) OR PAYMENT_END_DT IS NULL )"
					+ "AND CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = "
					+ progCd
					+ ""
					+ " AND DELETE_SW = 'N' ORDER BY CASE_NUM,  EDG_NUM ,EDBC_RUN_DT DESC ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByAllFSMlyUpdIndv
	/**
	 * Method findByEdgCreateSeqList, query by Edg Create Sequence List.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsRunDate
	 *            Timestamp
	 * @param edgCreateSeqList
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgCreateSeqList(int maxRows,
			long lCaseNum, Timestamp tsRunDate, String edgCreateSeqList)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + lCaseNum + " "
					+ strLiteralAndDeleteSWN + strLiteralAndEdgTraceIdIn
					+ edgCreateSeqList + ")";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByEdgCreateSeq
	// Stage 3 - Requested by Sumam Thomas (Interfaces) 01/23/2003 Purpose:
	// Fetch TOA ;caseNum ; progCd for SDX clients

	/**
	 * Method findByCaseProgram, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgram(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCaseProgram" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM=" + cargo.getCaseNum()
					+ " AND PROGRAM_CD=" + cargo.getProgramCd()
					+ " AND DELETE_SW='N' AND REC_END_DT IS NULL";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// end of findByCaseProgram
	/**
	 * Method findByCaseNumOTTANF, query by TOA = 'TP01' or 'TP61'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumOTTANF(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumOTTANF " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = "
					+ String.valueOf(cargo.getCurrentEligInd())
					+ ""
					+ " AND DELETE_SW ='N' "
					+ " AND (REC_BEGIN_DT<="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ ")"
					+ " AND (REC_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " OR REC_END_DT IS NULL) "
					+ " AND (TYPE_OF_ASSISTANCE_CD = 'TP01' OR TYPE_OF_ASSISTANCE_CD = 'TP61' )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByCaseNumOTTANF

	/**
	 * Method findByUnAuthForAllEdgs, query for 'P' or 'S' record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuthForAllEdgs(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		// ArrayList v = new ArrayList();

		try {
			String sql = ("Select A.*,A.rowid " + " from ED_ELIGIBILITY A "
					+ strLiteralWhereCaseNum2 + " AND program_cd = ? "
					+ " AND prior_medical_cd = ? "
					+ " AND prior_ma_seq_num = ? " + strLiteralAndDeleteSWN + " AND CURRENT_ELIG_IND in ('P','S') ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getProgramCd());
			parms.add(cargo.getPriorMedicalCd());
			parms.add(cargo.getPriorMaSeqNum());

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByUnAuthForAllEdgs

	/**
	 * Method findByBeforeSpendDownMetDt,Before SpendDown MetDt.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param lEdgNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByBeforeSpendDownMetDt(int maxRows,
			long lCaseNum, long lEdgNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + lCaseNum + " "
					+ strLiteralAndEdgNum + lEdgNum + " "
					+ strLiteralAndCurrentEligIndA + strLiteralAndCgStatusCdAP
					+ strLiteralAndDeleteSWN + " AND SPEND_DOWN_MET_DT Is Null";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByBeforeSpendDownMetDt
	// Requested by Correspondence (01/28/2003)
	/**
	 * Method findByCaseNumAndTypeCd, query for TOA - 'TP60'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumAndTypeCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumAndTypeCd " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "case_num = "
					+ cargo.getCaseNum()
					+ "  and program_cd = 'TF' and type_of_assistance_cd = 'TP60' and DELETE_SW = 'N' "
					+ "order by create_dt desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// findByCaseNumAndTypeCd
	/**
	 * Method findBySpendDownMetDt, query by pgm Code and Spend Down Met Date.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpendDownMetDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndProgramCd + cargo.getProgramCd() + " "
					+ strLiteralAndEdgTraceId + cargo.getEdgTraceId() + " "
					+ strLiteralAndCurrentEligIndP + strLiteralAndDeleteSWN
					+ " AND SPEND_DOWN_MET_DT is not null";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by DI for spendown auth
	/**
	 * Method findBySpendDownAuth, query by Spend Down Auth records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param programCd
	 *            String
	 * @param payBegdt
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpendDownAuth(int maxRows, long lCaseNum,
			String programCd, String payBegdt) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			payBegdt = DateFormatter.convSrcToDestinationDtFormat(payBegdt,
					"yyyy/mm", strLiteralMMMyy);
			String whereClause = strLiteralCaseNum2
					+ lCaseNum
					+ " "
					+ strLiteralAndprogramCd
					+ programCd
					+ "' "
					+ strLiteralANd
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6) + " ='" + payBegdt + "' "
					+ " AND TYPE_OF_ASSISTANCE_CD in ('TP56' , 'TP32') "
					+ " AND CURRENT_ELIG_IND in ('P','A') "
					+ strLiteralAndDeleteSwN;
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByActiveEDGOpenRecords, query by Open records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveEDGOpenRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		// Requested by Interfaces, Chandra Gorantla on 01/29/2003: used in
		// INDRClientDetailsBO
		// Do not change the SQL without contacting Interfaces.
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND"
					+ "  CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "' AND  CURRENT_ELIG_IND ='"
					+ cargo.getCurrentEligInd()
					+ "'"
					+ strLiteralAndRecEndDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " OR REC_END_DT is Null)"
					+ " AND DELETE_SW = 'N') " + "ORDER BY REC_BEGIN_DT DESC ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByCaseNumEdgTraceIdActiveOpenRecords, query by Edg trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdActiveOpenRecords(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		// Requested by Interfaces, Chandra Gorantla on 01/29/2003: used in
		// INDRClientDetailsBO
		// Do not change the SQL without contacting Interfaces.
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  EDG_TRACE_ID ="
					+ cargo.getEdgTraceId()
					+ " "
					+ " AND DELETE_SW = 'N' AND  (REC_END_DT IS NULL OR  REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " )" + " AND CG_STATUS_CD = '"
					+ cargo.getCgStatusCd() + "' AND CURRENT_ELIG_IND =  '"
					+ cargo.getCurrentEligInd() + "' ) " + "ORDER BY EDG_NUM ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByCaseNumOpenRecords, query by Open Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumOpenRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		// Requested by Interfaces, Chandra Gorantla on 01/29/2003: used in
		// INDRClientDetailsBO
		// Do not change the SQL without contacting Interfaces.

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND  "
					+ "(REC_END_DT IS NULL OR REC_END_DT >="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " ) )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByEdgNumEffDatesOpenRecords, query by Edg Num and Open
	 * Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumEffDatesOpenRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		// Requested by Interfaces, Chandra Gorantla on 01/29/2003: used in
		// INDRClientDetailsBO
		// Do not change the SQL without contacting Interfaces.
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND DELETE_SW = 'N' AND  "
					+ "(REC_END_DT IS NULL OR  REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " )  )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by -- Vasudev, Binu
	/**
	 * Method findByCaseNumEdgTraceId, query by Edg trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgTraceId
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceId(int maxRows,
			long aCaseNum, long aEdgTraceId) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " ( CASE_NUM = " + aCaseNum
					+ " AND  EDG_TRACE_ID = " + aEdgTraceId
					+ " AND DELETE_SW = 'N' )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByDistinctEdg, query by Distince Edg num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDistinctEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			String sql = ("select distinct(edg_num),program_cd from ed_eligibility where case_num = ? and DELETE_SW = 'N'");
			// statement.setLong(1, cargo.getCaseNum());
			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			// parms.add(endDt);

			SQLCommand command = getSqlCommandForUpdate(sql, parms);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			for (Map<String, Object> result : results) {
				// String aproviderId = (String) result.get("PROVIDER_ID");
				// String apaymentToAddrSeqNum = (String)
				// result.get("PAYMENT_TO_ADDR_SEQ_NUM");
				java.math.BigDecimal aedgeNum = (BigDecimal) result
						.get("EDGE_NUM");

				EdEligibilityCargo row = new EdEligibilityCargo();
				// row.setProviderId(aproviderId);
				// row.setPaymentToAddrSeqNum(apaymentToAddrSeqNum);
				row.setEdgNum(Long.parseLong(aedgeNum.toString()));
				row.setProgramCd((String) result.get(strLiteralProgarmCd));
				v.add(row);
			}
			EdEligibilityCargo[] colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested By -- Interface
	/**
	 * Method findBySASTrigger, query by DI Trans ID.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws Exception
	 */
	public EdEligibilityCargo[] findBySASTrigger(int maxRows,
			EdEligibilityCargo cargo) throws Exception {

		ArrayList v = new ArrayList();
		EdEligibilityCargo colrows[] = null;

		try {
			StringBuffer selBuff = new StringBuffer();
			selBuff.append(" SELECT PROGRAM_CD, TYPE_OF_ASSISTANCE_CD FROM ED_ELIGIBILITY ");
			selBuff.append(" WHERE CASE_NUM = ? AND EDG_NUM = ? AND DISPOSITION_TRANS_ID = ? ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getEdgNum());
			parms.add(cargo.getDispositionTransId());

			SQLCommand command = getSqlCommandForUpdate(selBuff.toString(),
					parms);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				row.setProgramCd((String) rs.get(strLiteralProgarmCd));
				row.setTypeOfAssistanceCd((String) rs
						.get(strLiteralTypeOfAssistanceCd));
				v.add(row);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// end method findBySASTrigger
	/**
	 * Method findByCaseNumEdgTraceIdEligIndHistory, query by Edg trace Id and
	 * Curr Elig Ind = 'A'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdEligIndHistory(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		// Requested by Interfaces, Chandra Gorantla on 02/04/2003: used in
		// DirectRead Edg History
		// Do not change the SQL without contacting Interfaces.

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  EDG_TRACE_ID = "
					+ cargo.getEdgTraceId()
					+ ""
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' ) ORDER BY EDG_NUM ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findBySASAction, query by Curr Elig Ind 'M'.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySASAction(int maxRows, long lCaseNum)
			throws GenericRunTimeException {

		// ArrayList v = new ArrayList();

		try {

			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND = 'M' " + strLiteralOrderby2);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			// parms.add(cargo.getProgramCd());

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// findBySASAction

	// Requested by - Mahesh Gantt //Changed by praveen on 11/5/2003
	/**
	 * Method findByDeniedEdges, query by denied Edg's.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDeniedEdges(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		EdEligibilityCargo[] colrows = null;

		try {

			String sql = ("SELECT MAX(EDG_TRACE_ID) AS \"EDG_TRACE_ID\", EDG_NUM FROM ED_ELIGIBILITY WHERE CASE_NUM = ? AND PROGRAM_CD = ? AND CG_STATUS_CD = 'DN' AND DELETE_SW = 'N' GROUP BY EDG_NUM ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getProgramCd());

			SQLCommand command = getSqlCommandForUpdate(sql, parms);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			for (Map<String, Object> result : results) {
				java.math.BigDecimal aedgTraceId = (BigDecimal) result
						.get(strLiteralEdgTraceId);
				java.math.BigDecimal aedgNum = (BigDecimal) result
						.get(strLiteralEdgNum);
				EdEligibilityCargo row = new EdEligibilityCargo();
				row.setEdgTraceId(Long.parseLong(aedgTraceId.toString()));
				row.setEdgNum(Long.parseLong(aedgNum.toString()));
				v.add(row);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by - Javid Qureshi (BI)/ Changed on 6/13/2003
	// Modified by Murthy Adireddy on February 22,2005
	/**
	 * Method findByPnaEligible, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPnaEligible(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByPnaEligible" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'"
					+ " AND TYPE_OF_ASSISTANCE_CD IN ('TA04','TA05','TA06','TA07','TA08','TA09','TA26','TP38','TP39','TP46')"
					+ " AND PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ""
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralOrPaymentEndDtisNull
					+ " AND DELETE_SW = 'N' ORDER BY EDG_NUM";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by EDBC - Chandil on 02/13/2003 for Overrides
	/**
	 * Method findByProcTanfAndUnProcFS, query by Pgm Code = 'TF' or 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProcTanfAndUnProcFS(int maxRows,
			long lCaseNum, Timestamp tsEDBCRunDt)
			throws GenericRunTimeException {

		try {

			String sql = ("Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2
					+ strLiteralAndDeleteSWN
					+ " AND ((PROGRAM_CD = 'TF' AND CURRENT_ELIG_IND = 'P') OR (PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND IN ('T', 'P'))) "
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt) + strLiteralOrderby2);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			// parms.add(tsEDBCRunDt);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByProcTanfAndUnProcFS, query by Pgm Code = 'TF' or 'FS'.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByUnAuthTandP(int maxRows, long lCaseNum,
			Timestamp tsEDBCRunDt) throws GenericRunTimeException {

		try {

			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND IN ('T', 'P') "
					+ strLiteralAndEdbcrunDt
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt) + strLiteralOrderby2);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested By:Binu Vasudev
	/**
	 * Method findByDlyCasesToBeExtracted, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param currEligIndA
	 *            char
	 * @param currEligIndC
	 *            char
	 * @param beginDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDlyCasesToBeExtracted(int maxRows,
			char currEligIndA, char currEligIndC, Timestamp beginDate)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(DELETE_SW = '" + String.valueOf('N')
					+ "' AND " + " (CURRENT_ELIG_IND =  '"
					+ String.valueOf(currEligIndA)
					+ "'OR CURRENT_ELIG_IND =  '"
					+ String.valueOf(currEligIndC) + strLiteralclparenthesis1
					+ "AND EDBC_RUN_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate) + ")";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested By:Binu Vasudev
	/**
	 * Method findByDlyEligibilityCases, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum1
	 *            long
	 * @param aCaseNum2
	 *            long
	 * @param currEligIndA
	 *            char
	 * @param currEligIndC
	 *            char
	 * @param beginDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDlyEligibilityCases(int maxRows,
			long aCaseNum1, long aCaseNum2, char currEligIndA,
			char currEligIndC, Timestamp beginDate)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM BETWEEN " + aCaseNum1
					+ strLiteralANd + aCaseNum2 + strLiteralAndDeleteSw
					+ String.valueOf('N') + "' " + "AND  (CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligIndA) + "'OR CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligIndC) + strLiteralclparenthesis1
					+ "AND  EDBC_RUN_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate) + ")";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested By:Binu Vasudev:: changed on 5/14/2003
	/**
	 * Method findByCasesToBeExtracted, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param currEligInd1
	 *            char
	 * @param currEligInd2
	 *            char
	 * @param CGStatusCD1
	 *            String
	 * @param CGStatusCD2
	 *            String
	 * @param CGStatusCD3
	 *            String
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCasesToBeExtracted(int maxRows,
			char currEligInd1, char currEligInd2, String CGStatusCD1,
			String CGStatusCD2, String CGStatusCD3, Timestamp beginDate,
			Timestamp endDate, Timestamp nextMnthEndDate)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " (DELETE_SW = 'N' AND  (((CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1)
					+ "' OR"
					+ "  CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd2)
					+ strLiteralAndCgStatusCd2
					+ CGStatusCD1
					+ "'"
					+ " OR CG_STATUS_CD = '"
					+ CGStatusCD2
					+ "'"
					+ " OR CG_STATUS_CD = '"
					+ CGStatusCD3
					+ strLiteralclparenthesis1
					+ "AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate)
					+ ""
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ ") "
					+ "OR (CG_STATUS_CD = '"
					+ CGStatusCD1
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1)
					+ "'"
					+ " AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ ""
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ ""
					+ " OR PAYMENT_END_DT IS NULL)) OR (CG_STATUS_CD = '"
					+ CGStatusCD1
					+ "' "
					+ "AND CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1)
					+ "' AND TYPE_OF_ASSISTANCE_CD = 'TP42'"
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ " "
					+ " OR PAYMENT_END_DT IS NULL))))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested By:Binu VasudevDAO
	/**
	 * Method findByEligibilityCases, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum1
	 *            long
	 * @param aCaseNum2
	 *            long
	 * @param currEligInd1
	 *            char
	 * @param currEligInd2
	 *            char
	 * @param CGStatusCD1
	 *            String
	 * @param CGStatusCD2
	 *            String
	 * @param CGStatusCD3
	 *            String
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEligibilityCases(int maxRows,
			long aCaseNum1, long aCaseNum2, char currEligInd1,
			char currEligInd2, String CGStatusCD1, String CGStatusCD2,
			String CGStatusCD3, Timestamp beginDate, Timestamp endDate,
			Timestamp nextMnthEndDate) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " (CASE_NUM BETWEEN " + aCaseNum1
					+ strLiteralANd + aCaseNum1
					+ " DELETE_SW = 'N' AND  (((CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1) + "' OR"
					+ "  CURRENT_ELIG_IND = '" + String.valueOf(currEligInd2)
					+ strLiteralAndCgStatusCd2 + CGStatusCD1 + "'"
					+ " OR CG_STATUS_CD = '" + CGStatusCD2 + "'"
					+ " OR CG_STATUS_CD = '" + CGStatusCD3
					+ strLiteralclparenthesis1 + "AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate) + ""
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate) + ") "
					+ "OR (CG_STATUS_CD = '" + CGStatusCD1
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1) + "'"
					+ " AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ "" + strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ "" + " OR PAYMENT_END_DT IS NULL)) OR (CG_STATUS_CD = '"
					+ CGStatusCD1 + "' " + "AND CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1)
					+ "' AND TYPE_OF_ASSISTANCE_CD = 'TP42'"
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(endDate) + ""
					+ " OR PAYMENT_END_DT IS NULL))))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByEligibilityCertifiedToday(int maxRow,
			Timestamp runDt) throws GenericRunTimeException {

		Map<String, Object> queryParms = new HashMap<>();
		StringBuilder sql = new StringBuilder();

		try {
			sql.append("CURRENT_ELIG_IND='A' AND ");
			sql.append(
					"(PROGRAM_CD='MA' OR PROGRAM_CD='ME') AND trunc(EDBC_RUN_DT) = ")
					.append(DateFormatter.getDateForWhereClauseAnsi(runDt));
			sql.append(" AND PAYMENT_END_DT IS NULL AND DELETE_SW='N' AND (cg_status_cd='AP' OR ((cg_status_cd='TN' OR cg_status_cd='DN') )) AND (activity_type IN('IN','PR','CV','IR','OG')) ");
			queryParms.put(FwConstants.READY_WHERE_CLAUSE, sql.toString());

			return getReturnCargo(queryParms);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumAuthMA(int maxRow, long caseNum)
			throws GenericRunTimeException {

		Map<String, Object> queryParms = new HashMap<>();

		try {
			String str = " CURRENT_ELIG_IND='A' AND "
					+ "(PROGRAM_CD='MA' OR PROGRAM_CD='ME') "
					+ " AND PAYMENT_END_DT IS NULL AND DELETE_SW='N' AND CASE_NUM = "
					+ caseNum;

			queryParms.put(FwConstants.READY_WHERE_CLAUSE, str);

			return getReturnCargo(queryParms);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e);
		}
	}

	/*
	 * //CCD CQ Id : BRGUS00035289 //Id : BRGUS00038453
	 *//**
	 * @param row
	 *            EdEligibilityCargo
	 * @param rs
	 *            Resultset
	 * @param findBy
	 *            String
	 * @throws Exception
	 */
	/*
	 * public void getCustomRowFromResultSet(EdEligibilityCargo row, ResultSet
	 * rs, String findBy) throws Exception {
	 * 
	 * if (findBy.equalsIgnoreCase("findByEligibilityCases") ||
	 * findBy.equalsIgnoreCase("findByCasesToBeExtracted") ||
	 * findBy.equalsIgnoreCase("findByDlyCasesToBeExtracted") ||
	 * findBy.equalsIgnoreCase("findByDlyEligibilityCases") ||
	 * findBy.equalsIgnoreCase("findByCancelRecForReInsPerf") ||
	 * findBy.equalsIgnoreCase("findByCaseNumsSpendDown")) {
	 * 
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1)); // Start: BRGUS00189342 -
	 * gundag - Finder for SSP Monthly Trigger // Process } else if
	 * (findBy.equalsIgnoreCase("findBySspMonthlyLoadStagingTable")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setBenefitAmt(rs.getDouble("BENEFIT_AMT"));
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
	 * row.setCgStatusCd(rs.getString("CG_STATUS_CD"));
	 * 
	 * } // End: BRGUS00189342 else if
	 * (findBy.equalsIgnoreCase("findByTANFProgramCodeTempTable") ||
	 * findBy.equalsIgnoreCase("findByFSProgramCodeTempTable") ||
	 * findBy.equalsIgnoreCase("findByFSProgramStagingParallel")) {
	 * 
	 * row.setCgStatusCd(rs.getString("CG_STATUS_CD"));
	 * row.setPaymentBegDt(rs.getTimestamp("PAYMENT_BEG_DT"));
	 * //row.setClaimNumber(rs.getLong("CLAIM_NUMBER"));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setBenefitAmt(rs.getDouble("BENEFIT_AMT"));
	 * 
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
	 * 
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setClaimTypeInd(rs.getLong("CLAIM_TYPE_IND"));
	 * row.setPenaltyAmt(rs.getDouble("PENALTY_AMT"));
	 * row.setRecoupmentAmt(rs.getDouble("RECOUPMENT_AMT"));
	 * row.setCountOfCgAdults(rs.getInt("COUNT_OF_CG_ADULTS"));
	 * //row.setForfeitMthDt(rs.getTimestamp("FORFEIT_MTH_DT"));
	 * row.setCgSize(rs.getLong("CG_SIZE"));
	 * row.setAbawdSw(getCharacterFromResultSet(rs, "ABAWD_SW"));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * //row.setRecoupmentBiInd(rs.getString("RECOUPMENT_BI_IND"));
	 * row.setCountOfCgChild(rs.getInt("COUNT_OF_CG_CHILD"));
	 * //row.setForfeitAmt(rs.getDouble("FORFEIT_AMT"));
	 * row.setNetBenefitAmt(rs.getDouble("NET_BENEFIT_AMT"));
	 * 
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * row.setEdgOverrideSw(getCharacterFromResultSet(rs, "EDG_OVERRIDE_SW"));
	 * row.setStateFundingInd(getCharacterFromResultSet(rs,
	 * "STATE_FUNDING_IND")); row.setEfipEligSw(getCharacterFromResultSet(rs,
	 * "EFIP_ELIG_SW"));
	 * row.setEstimatedEligEndDt(rs.getTimestamp("ESTIMATED_ELIG_END_DT"));
	 * 
	 * if (findBy.equalsIgnoreCase("findByFSProgramStagingParallel")) {
	 * row.setFsStimulusAmt(rs.getDouble("FS_STIMULUS_AMT")); row
	 * .setMicapFapSw(getCharacterFromResultSet(rs, "MICAP_FAP_SW")); }
	 * 
	 * } else if (findBy.equalsIgnoreCase("findByCaseNumberEdgNumber")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setPaymentBegDt(rs.getTimestamp("PAYMENT_BEG_DT"));
	 * row.setPaymentEndDt(rs.getTimestamp("PAYMENT_END_DT"));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * 
	 * row.setRecBeginDt(rs.getTimestamp("REC_BEGIN_DT"));
	 * row.setRecEndDt(rs.getTimestamp("REC_END_DT"));
	 * row.setEdbcRunDt(rs.getTimestamp("EDBC_RUN_DT"));
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
	 * 
	 * } else if (findBy.equalsIgnoreCase("findByMlyFSExtractIndvCaseRange")) {
	 * 
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setCgStatusCd(rs.getString("CG_STATUS_CD"));
	 * row.setPaymentBegDt(rs.getTimestamp("PAYMENT_BEG_DT"));
	 * row.setPaymentEndDt(rs.getTimestamp("PAYMENT_END_DT"));
	 * row.setEdbcRunDt(rs.getTimestamp("EDBC_RUN_DT"));
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
	 * row.setCertBegDt(rs.getTimestamp("CERT_BEG_DT"));
	 * row.setRecBeginDt(rs.getTimestamp("REC_BEGIN_DT"));
	 * row.setEligibilityBegDt(rs.getTimestamp("ELIGIBILITY_BEG_DT"));
	 * row.setEligibilityEndDt(rs.getTimestamp("ELIGIBILITY_END_DT"));
	 * row.setEstimatedEligEndDt(rs.getTimestamp("ESTIMATED_ELIG_END_DT"));
	 * row.setSpReviewDt(rs.getTimestamp("SP_REVIEW_DT"));
	 * row.setSpReviewCd(rs.getString("SP_REVIEW_CD"));
	 * row.setEdgSsiSw(getCharacterFromResultSet(rs, "EDG_SSI_SW"));
	 * row.setPreparedFoodSw(getCharacterFromResultSet(rs, "PREPARED_FOOD_SW"));
	 * row.setCgSize(rs.getLong("CG_SIZE"));
	 * row.setFsCatEligCd(rs.getString("FS_CAT_ELIG_CD"));
	 * row.setFsExpeditedSw(getCharacterFromResultSet(rs, "FS_EXPEDITED_SW")); }
	 * else if (findBy.equalsIgnoreCase("findByRpMuTrigSP002")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1)); } else if
	 * (findBy.equalsIgnoreCase("findByPayForPerformance")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdbcRunDt(rs.getTimestamp("EDBC_RUN_DT"));
	 * row.setPriorMedicalCd(rs.getString("PRIOR_MEDICAL_CD")); } else if
	 * (findBy.equalsIgnoreCase("findQCUnivMAPosNegCases") ||
	 * findBy.equalsIgnoreCase("findQCUnivMAPosNegCases")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum)); } else if
	 * (findBy.equalsIgnoreCase("findByCRRegionCd") ||
	 * findBy.equalsIgnoreCase("findByCROfficeNum") ||
	 * findBy.equalsIgnoreCase("findByCRCounty") ||
	 * findBy.equalsIgnoreCase("findByCRUnitNum") ||
	 * findBy.equalsIgnoreCase("findByCREmpId")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setCgStatusCd(rs.getString("CG_STATUS_CD"));
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd)); }
	 * else if (findBy.equalsIgnoreCase("findByMidSemiCerts")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setSemiAnnualReviewDt(rs.getTimestamp("SEMI_ANNUAL_REVIEW_DT"));
	 * row.setMidCertEndDt(rs.getTimestamp("MID_CERT_END_DT")); } else if
	 * (findBy.equalsIgnoreCase("findCaseStatusBySSN")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1)); } else if
	 * (findBy.equalsIgnoreCase("findCaseIndvByDOBDt")) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setProgramCd(rs.getString(strLiteralProgarmCd));
	 * row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
	 * row.setFinEligRsltCd(rs.getString("FIN_ELIG_RSLT_CD"));
	 * row.setSpReviewDt(rs.getTimestamp("SP_REVIEW_DT")); } else if
	 * (findBy.equalsIgnoreCase("findByQcDenials1") ||
	 * findBy.equalsIgnoreCase("findByQcDenials2") ||
	 * findBy.equalsIgnoreCase("findByQcClosures1") ||
	 * findBy.equalsIgnoreCase("findByQcClosures2") ||
	 * findBy.equalsIgnoreCase("findByQcClosures3") ||
	 * findBy.equalsIgnoreCase("findByQcClosures4")) {
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setFsExpeditedSw(getCharacterFromResultSet(rs, "FS_EXPEDITED_SW"));
	 * row.setNegativeActionEffDt(rs .getTimestamp("NEGATIVE_ACTION_EFF_DT"));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdbcRunDt(rs.getTimestamp("EDBC_RUN_DT"));
	 * row.setSuspendBenefitSw(getCharacterFromResultSet(rs,
	 * "SUSPEND_BENEFIT_SW")); } else if
	 * ("findByACF801CasesNew".equalsIgnoreCase(findBy)) {
	 * row.setCaseNum(rs.getLong(strLiteralCaseNum1));
	 * row.setEdgNum(rs.getLong(strLiteralEdgNum));
	 * row.setEligibilityBegDt(rs.getTimestamp("ELIGIBILITY_BEG_DT"));
	 * row.setEdgSize(rs.getLong("EDG_SIZE"));
	 * row.setPaymentBegDt(rs.getTimestamp("PAYMENT_BEG_DT"));
	 * row.setPaymentEndDt(rs.getTimestamp("PAYMENT_END_DT"));
	 * row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId)); } else {
	 * getRowFromResultSet(row, rs); } }
	 */

	/**
	 * Method findByCaseNumMgmtMonth, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param manageMonth
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumMgmtMonth(int maxRows,
			long lCaseNum, Timestamp manageMonth)
			throws GenericRunTimeException {

		try {

			String sql = ("Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA
					+ "WHERE A.CASE_NUM = ? "
					+ "AND A.DELETE_SW = 'N' "
					+ "AND A.PROGRAM_CD = 'TF' "
					+ "AND (A.CURRENT_ELIG_IND = 'A' OR A.CURRENT_ELIG_IND = 'P') "
					+ "AND A.PAYMENT_BEG_DT  <=  ? "
					+ "AND (A.PAYMENT_END_DT  >=  ? OR " + "A.PAYMENT_END_DT  is Null )");

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			parms.add(manageMonth);
			parms.add(manageMonth);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByIfAllEDMsAuthorizedForProgram, query by Auth records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByIfAllEDMsAuthorizedForProgram(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {

		Debug.println("findIfAllEDMsAuthorizedForThisProgram"
				+ strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSWN + strLiteralAndprogramCd
					+ cargo.getProgramCd() + " ' "
					+ " AND ( CURRENT_ELIG_IND IN ('S', 'P') )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByIfAllEDMsAuthorizedForProgram
	// Requested By Binu Vasudev
	/**
	 * Method findByCaseEdgNum, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aBenefitMonth
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgNum(int maxRows, long aCaseNum,
			long aEdgNum, Timestamp aBenefitMonth)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "((CASE_NUM = " + aCaseNum
					+ " ) AND (EDG_NUM =" + aEdgNum + " ) AND "
					+ "(CURRENT_ELIG_IND = 'A') AND (DELETE_SW = 'N')"
					+ "AND (PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBenefitMonth)
					+ ") " + "AND (PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBenefitMonth)
					+ " " + "OR PAYMENT_END_DT IS NULL))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByCaseEdgNum
	// Requested by Interfaces - Biju on 03/03/03
	/**
	 * Method findByAllTANFRecordsCaseRange, query by Pgm Code = 'TF' or 'MA'.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum1
	 *            long
	 * @param caseNum2
	 *            long
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllTANFRecordsCaseRange(int maxRows,
			long caseNum1, long caseNum2, Timestamp beginDt, Timestamp endDt)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM BETWEEN "
					+ caseNum1
					+ strLiteralANd
					+ caseNum2
					+ strLiteralANd
					+ " CURRENT_ELIG_IND ='A' AND PROGRAM_CD IN ('TF', 'MA') AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD IN ('AP','DN', 'TN') AND PAYMENT_BEG_DT  <= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt) + " "
					+ "AND ( PAYMENT_END_DT >="
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ " OR PAYMENT_END_DT IS NULL ) "
					+ " ORDER BY CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Track3 - Shekar on 03/05/2003
	// Requested by Track3 - Shekar on 03/05/2003
	/**
	 * Method findByTempEdgs, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTempEdgs(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum()
					+ " AND (PROGRAM_CD = '" + cargo.getProgramCd()
					+ "' OR PROGRAM_CD = 'ME' ) AND PRIOR_MEDICAL_CD = '"
					+ cargo.getPriorMedicalCd() + "' AND DELETE_SW = 'N'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Alerts - Binu
	// Modified by Chandil for Binu on 03/06/2003
	/**
	 * Method findByExpeditedCases, query by Expedited switch is 'Yes'.
	 *
	 * @param maxRows
	 *            int
	 * @param aBeginDate
	 *            Timestamp
	 * @param aEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpeditedCases(int maxRows,
			Timestamp aBeginDate, Timestamp aEndDate)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(PROGRAM_CD ='FS' AND CURRENT_ELIG_IND = 'A' "
					+ "AND CG_STATUS_CD = 'AP' "
					+ "AND FS_EXPEDITED_SW = 'Y'"
					+ " AND DELETE_SW = 'N' AND (PAYMENT_BEG_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDate)
					+ ""
					+ " AND PAYMENT_BEG_DT <"
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDate)
					+ " )"
					+ "AND REC_END_DT IS NOT NULL)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByExpeditedCases
	// request by Co for 1082
	/**
	 * Method findByEdgTraceIdEffBegDt, query by Edg Trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgTraceIdEffBegDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgTraceIdEffBegDt" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
				"yyyy-mm-dd");
		String rcvBgDt = sdf.format((java.util.Date) (cargo.getRecBeginDt()));
		String rcvEndDt = sdf.format((java.util.Date) (cargo.getRecEndDt()));
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ strLiteralAndEdgTraceId + cargo.getEdgTraceId()
					+ " AND DELETE_SW= 'N' "
					+ "AND CAST(CAST(REC_BEGIN_DT as VARCHAR(10)) as DATE)"
					+ " <= " + DateFormatter.getDateForWhereClauseAnsi(rcvBgDt)
					+ " and (CAST(CAST(REC_END_DT as VARCHAR(10)) "
					+ "as DATE) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(rcvEndDt)
					+ " or REC_END_DT is null ))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByCaseProgramCd, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramCd(int maxRows, long aCaseNum)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ aCaseNum
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND = 'A' ORDER BY PROGRAM_CD";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Track 2
	// Modified to include Pending Records -Jai (02/14/03)
	// Requested by Track 2
	// Modified to include Pending Records -Jai (11/25/03)
	/**
	 * Method findByEligibilityCases, custom Query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum1
	 *            long
	 * @param aCaseNum2
	 *            long
	 * @param currEligInd1
	 *            char
	 * @param currEligInd2
	 *            char
	 * @param currEligInd3
	 *            char
	 * @param CGStatusCD1
	 *            String
	 * @param CGStatusCD2
	 *            String
	 * @param CGStatusCD3
	 *            String
	 * @param cgStatusCD4
	 *            String
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEligibilityCases(int maxRows,
			long aCaseNum1, long aCaseNum2, char currEligInd1,
			char currEligInd2, char currEligInd3, String CGStatusCD1,
			String CGStatusCD2, String CGStatusCD3, String cgStatusCD4,
			Timestamp beginDate, Timestamp endDate, Timestamp nextMnthEndDate)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " (CASE_NUM BETWEEN " + aCaseNum1
					+ strLiteralANd + aCaseNum1
					+ " DELETE_SW = 'N' AND  (((CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1) + "' OR"
					+ "  CURRENT_ELIG_IND = '" + String.valueOf(currEligInd2)
					+ strLiteralAndCgStatusCd2 + CGStatusCD1 + "'"
					+ " OR CG_STATUS_CD = '" + CGStatusCD2 + "'"
					+ " OR CG_STATUS_CD = '" + CGStatusCD3
					+ "')  OR (CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd3) + strLiteralAndCgStatusCd
					+ cgStatusCD4 + strLiteralclparenthesis2
					+ "AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDate) + ""
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate) + ") "
					+ "OR (CG_STATUS_CD = '" + CGStatusCD1
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(currEligInd1) + "'"
					+ " AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ "" + strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ "" + " OR PAYMENT_END_DT IS NULL)) ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// added for Lenin Vallabhaneni on 03/21/2003 for IQ Management Eligibilty
	/**
	 * Method findByCaseListForIQ, query by Case num in List.
	 *
	 * @param maxRows
	 *            int
	 * @param list
	 *            ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseListForIQ(int maxRows, List list)
			throws GenericRunTimeException {

		Long[] caseNum = (Long[]) list.get(0);
		StringBuffer sbClause = new StringBuffer();
		try {

			Map<String, Object> map = new HashMap<String, Object>();
			// String clause = "WHERE CASE_NUM IN(";
			sbClause.append(" CASE_NUM IN(");
			for (int i = 0; i < caseNum.length; i++) {
				sbClause.append(caseNum[i].longValue());
				// clause += caseNum[i].longValue();
				if (!((i + 1) == caseNum.length)) {
					sbClause.append(",");
				}
				// clause += ",";
			}
			// clause += sbClause.toString() + ")";
			sbClause.append(")");
			// clause+= "AND (CG_STATUS_CD = ?) AND ((? IS NULL) OR (CREATE_DT
			// >= ?)) AND ((? IS NULL) OR (CREATE_DT <= ?)) AND DELETE_SW = 'N'
			// ORDER BY CASE_NUM";
			sbClause.append("AND (CG_STATUS_CD = '"
					+ (String) list.get(1)
					+ "') AND (("
					+ DateFormatter
							.getDateForWhereClauseAnsi((java.sql.Timestamp) list
									.get(2))
					+ " IS NULL) OR (CREATE_DT >= "
					+ DateFormatter
							.getDateForWhereClauseAnsi((java.sql.Timestamp) list
									.get(2))
					+ strLiteralclparenthesis2
					+ "AND (("
					+ DateFormatter
							.getDateForWhereClauseAnsi((java.sql.Timestamp) list
									.get(3))
					+ " IS NULL) OR (CREATE_DT <= "
					+ DateFormatter
							.getDateForWhereClauseAnsi((java.sql.Timestamp) list
									.get(3)) + strLiteralclparenthesis2
					+ "AND DELETE_SW = 'N' " + "ORDER BY CASE_NUM");

			map.put(FwConstants.READY_WHERE_CLAUSE, sbClause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByToaPgmByCaseNum, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByToaPgmByCaseNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND DELETE_SW='N')";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	} // findToaPgmByCaseNum

	// added for EDG
	/**
	 * Method findByNextTransactionId, query by Next Trans Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextTransactionId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		long lTransId = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];

		try {
			String sqlString = "select  "
					+ getSequenceNextValAsString("ED_ELIGIBILITY_6SQ")
					+ " newTransId " + DAOSqlHelper.getANSIDual();
			// SQLCommand command = getSqlCommand(sqlString);
			// Collection<Map<String, Object>> results = (Collection<Map<String,
			// Object>>) command
			// .execute();
			// List<EdEligibilityCargo> resultList = new
			// ArrayList<EdEligibilityCargo>();
			Sequence dbSequence = new Sequence("ED_ELIGIBILITY_6SQ",
					getDataSource());
			Long nextval = dbSequence.getValue();
			lTransId = nextval;
			// for (Map<String, Object> result : results) {
			// lTransId = ((BigDecimal) result.get("NEWTRANSID")).longValue();
			if (lTransId > 0) {

				colrows[0] = new EdEligibilityCargo();

				colrows[0].setEdgTransactionId(lTransId);

			}
			// }

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return (colrows);
	}

	// Added on 5/14/2003
	/**
	 * Method findByCaseNumEDG, query by Edg num.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aCurrEligInd1
	 *            char
	 * @param aCurrEligInd2
	 *            char
	 * @param aCGStatusCD1
	 *            String
	 * @param aCGStatusCD2
	 *            String
	 * @param aCGStatusCD3
	 *            String
	 * @param aBeginDate
	 *            Timestamp
	 * @param aEndDate
	 *            Timestamp
	 * @param nextMnthEndDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEDG(int maxRows, long aCaseNum,
			char aCurrEligInd1, char aCurrEligInd2, String aCGStatusCD1,
			String aCGStatusCD2, String aCGStatusCD3, Timestamp aBeginDate,
			Timestamp aEndDate, Timestamp nextMnthEndDate)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ aCaseNum
					+ " AND DELETE_SW = 'N' AND  (((CURRENT_ELIG_IND = '"
					+ String.valueOf(aCurrEligInd1)
					+ "' "
					+ "OR  CURRENT_ELIG_IND = '"
					+ String.valueOf(aCurrEligInd2)
					+ "')"
					+ " AND (CG_STATUS_CD = '"
					+ String.valueOf(aCGStatusCD1)
					+ "' OR CG_STATUS_CD ='"
					+ String.valueOf(aCGStatusCD2)
					+ strLiteralOrCgStatusCd
					+ String.valueOf(aCGStatusCD3)
					+ strLiteralclparenthesis1
					+ "AND  EDBC_RUN_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDate)
					+ " AND  EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDate)
					+ ")"
					+ " OR (CG_STATUS_CD = '"
					+ String.valueOf(aCGStatusCD1)
					+ "'  AND CURRENT_ELIG_IND = '"
					+ String.valueOf(aCurrEligInd1)
					+ "' AND  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ " AND (PAYMENT_END_DT >=  "
					+ DateFormatter.getDateForWhereClauseAnsi(nextMnthEndDate)
					+ " "
					+ "OR PAYMENT_END_DT IS NULL)) OR (CG_STATUS_CD = '"
					+ String.valueOf(aCGStatusCD1)
					+ "' AND CURRENT_ELIG_IND = '"
					+ String.valueOf(aCurrEligInd1)
					+ "' AND TYPE_OF_ASSISTANCE_CD = 'TP42' "
					+ "AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDate)
					+ ""
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDate)
					+ " OR PAYMENT_END_DT IS NULL))) "
					+ "ORDER BY EDG_NUM, EDG_TRANSACTION_ID, PAYMENT_BEG_DT,CURRENT_ELIG_IND ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 04/14/2003
	/**
	 * Method findByBeforeSpendDownMetDt, query by Spend Down Met Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param lEdgNum
	 *            long
	 * @param sMthYear
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByBeforeSpendDownMetDt(int maxRows,
			long lCaseNum, long lEdgNum, String sMthYear)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			sMthYear = DateFormatter.convSrcToDestinationDtFormat(sMthYear,
					"yyyy-MM", strLiteralMMMyy);
			String whereClause = "CASE_NUM = "
					+ lCaseNum
					+ " "
					+ strLiteralAndEdgNum
					+ lEdgNum
					+ " "
					+ strLiteralAndCurrentEligIndA
					+ strLiteralAndCgStatusCdAP
					+ strLiteralAndDeleteSWN
					+ strLiteralANd
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6) + " = '" + sMthYear + "' "
					+ " AND SPEND_DOWN_MET_DT Is Null";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added for CCB 70149
	// Added for DI - Spenddown denial because of no spenddownmetdt
	/**
	 * Method findBySpendDownMetDtNull, query by Spend Down Denial.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySpendDownMetDtNull(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndprogramCd + cargo.getProgramCd() + "' "
					+ strLiteralAndEdgTraceId + cargo.getEdgTraceId() + " "
					+ strLiteralAndCurrentEligIndP + strLiteralAndDeleteSWN
					+ " AND SPEND_DOWN_MET_DT is null";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// request by Co for 1082
	/**
	 * Method findByEdgTraceIdVoidSW, query by Edg Trace Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgTraceIdVoidSW(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgTraceIdVoidSW" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum()
					+ strLiteralAndEdgTraceId + cargo.getEdgTraceId()
					+ " AND DELETE_SW= 'N'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByCOOngoingApprovedEdg, query for On Going Approved records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCOOngoingApprovedEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCOOngoingApprovedEdg " + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndprogramCd
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = 'A' "
					+ "AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP'"
					+ strLiteralAndRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ ""
					+ " AND (REC_END_DT is null or REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + "))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 05/13/2003
	/**
	 * Method findByTransID, query by Transaction Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTransID(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "DELETE_SW = 'N' and (EDG_transaction_id = 0 or EDG_transaction_id is null) "
					+ "order by case_num, edg_num, edbc_run_dt, current_elig_ind ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added on 5/14/2003
	/**
	 * Method findByDeceased, query by Deceased.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEDGNum
	 *            long
	 * @param aIndvID
	 *            long
	 * @param aEDGTransactionID
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDeceased(int maxRows, long aCaseNum,
			long aEDGNum, long aIndvID, long aEDGTransactionID)
			throws GenericRunTimeException {

		try {

			String sql = (" SELECT A.* FROM ED_ELIGIBILITY A, ED_INDV_NOTICE_REASONS B  WHERE A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.CASE_NUM = ?  AND A.EDG_NUM = ? AND B.INDV_ID = ?  AND A.EDG_TRANSACTION_ID = ? AND B.FAILURE_REASON_CODE LIKE '%EL0037%'  AND A.DELETE_SW = 'N' ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(aCaseNum);
			parms.add(aEDGNum);
			parms.add(aIndvID);
			parms.add(aEDGTransactionID);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added on 5/14/2003
	/**
	 * Method findByPrevBenefit, query by Edg Transaction Id, EDBC Run Dt, Edg
	 * Num.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEDGNum
	 *            long
	 * @param aEDGTransID
	 *            long
	 * @param aDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPrevBenefit(int maxRows, long aCaseNum,
			long aEDGNum, long aEDGTransID, Timestamp aDate)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM ="
					+ aCaseNum
					+ "  AND EDG_NUM ="
					+ aEDGNum
					+ strLiteralAndEdbcRunDt
					+ DateFormatter.getDateForWhereClauseAnsi(aDate)
					+ " "
					+ "AND CURRENT_ELIG_IND IN ('A','C')  AND EDG_TRANSACTION_ID < "
					+ aEDGTransID
					+ ""
					+ " AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' Order By PAYMENT_BEG_DT Desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by EDBC - Chandil 04/21/2003
	/**
	 * Method findByAuthOtherCaseList, query by Auth in other case List.
	 *
	 * @param maxRows
	 *            int
	 * @param sCaseList
	 *            String
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthOtherCaseList(int maxRows,
			String sCaseList, Timestamp tsMaxEDM, Timestamp tsMinEDM)
			throws GenericRunTimeException {

		try {
			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ " Where CASE_NUM IN ( " + sCaseList + " ) "
					+ strLiteralAndDeleteSWN + strLiteralAndCurrentEligIndA
					+ " AND REC_BEGIN_DT <=  ? "
					+ " AND (REC_END_DT  >=  ? OR " + " REC_END_DT  is Null ) " + " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ), PROGRAM_CD desc ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(tsMaxEDM);
			parms.add(tsMinEDM);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Interface for NHIC SpendDown/ClosedCases
	/**
	 * Method findByEdgCoverageMMSpendDown, Interface for NHIC
	 * SpendDown/ClosedCases.
	 *
	 * @param maxRows
	 *            int
	 * @param edgNum
	 *            String
	 * @param coverMM
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgCoverageMMSpendDown(int maxRows,
			String edgNum, String coverMM) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			coverMM = DateFormatter.convSrcToDestinationDtFormat(coverMM,
					"yyyyMM", strLiteralMMMyy);
			String whereClause = "EDG_NUM="
					+ Long.parseLong(edgNum)
					+ ""
					+ strLiteralANd
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6) + "= '" + coverMM + "'"
					+ " AND CURRENT_ELIG_IND = 'A'" + " AND DELETE_SW = 'N";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// end findByEdgCoverageMMSpendDown()
	// Requested by Reports - Tarun - 04/21/2003
	/**
	 * Method findByCaseProgCD, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aProgramCD
	 *            String
	 * @param aRequestDT
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgCD(int maxRows, long aCaseNum,
			String aProgramCD, Timestamp aRequestDT)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + aCaseNum
					+ strLiteralAndProgramCd + aProgramCD
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(aRequestDT) + " "
					+ "AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N'"
					+ " order by PAYMENT_BEG_DT desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by Vivek Agrawal on 05/22/2003 for Driver Mode validations
	/**
	 * Method findByForMonitoringValidation, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByForMonitoringValidation(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByForMonitoringValidation " + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = ?" + " AND CURRENT_ELIG_IND IN ('A') AND PROGRAM_CD = ?"
					+ " AND DELETE_SW = 'N' )";
			map.put("CASE_NUM", cargo.getCaseNum());
			map.put("PROGRAM_CD", cargo.getProgramCd());
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Rajeswari Shankar on 04/29/03
	/**
	 * Method findByProResSwForPRA, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProResSwForPRA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByProResSwForPRA" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND PROT_RES_ASSESS_SW = 'Y'"
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('T', 'P') "
					+ "AND (REC_END_DT IS NULL OR REC_END_DT IS NOT NULL)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by Anand Avasthi on 6/3/2003
	/**
	 * Method findByCaseNumCMA, query by CMA records.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumCMA(int maxRows, long caseNum)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ caseNum
					+ " "
					+ "AND TYPE_OF_ASSISTANCE_CD IN ('TP20','TP43', 'TP44','TP45', 'TP47', 'TP48') "
					+ "AND CG_STATUS_CD = 'AP' AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'P'"
					+ " AND DELETE_SW = 'N' AND ACTIVITY_TYPE = 'PR'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 6/3/2003
	/**
	 * Method findByExPraRequired, query by Expanded Pra Switch 'Y'.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExPraRequired(int maxRows, long caseNum,
			Timestamp tsEDBCRunDt) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + caseNum + " "
					+ " AND PROGRAM_CD = 'ME' " + " AND EXPANDED_PRA_SW = 'Y' "
					+ strLiteralAndCurrentEligIndP
					+ " AND CAST(EDBC_RUN_DT as VARCHAR(10)) = "
					+ DateFormatter.getDateForWhereClauseAnsi(tsEDBCRunDt)
					+ " "
					// + " AND REC_END_DT IS NULL " //For defect Tiers00207799
					+ " AND DELETE_SW = 'N' ORDER BY PAYMENT_BEG_DT";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Suresh Akula to find edelig records based on disp trans id
	// for sas receive process.
	/**
	 * Method findByDispTransId, query by Disp Trans Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDispTransId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		EdEligibilityCargo colrows[] = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSWN + " AND DISPOSITION_TRANS_ID = "
					+ cargo.getDispositionTransId() + " ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByDispTransId
	// Added by DC for Schedule Expanded SPRA Screen.

	/**
	 * Method findByExpProResSwForPRA, query by Expanded pra Sw yes.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpProResSwForPRA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByProResSwForPRA" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND EXPANDED_PRA_SW = 'Y' AND DELETE_SW = 'N' AND CURRENT_ELIG_IND = 'P'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 6/19/2003
	/**
	 * Method findByRecoupmentPrevBenefit, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEDGNum
	 *            long
	 * @param aEDGTransID
	 *            long
	 * @param aDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByRecoupmentPrevBenefit(int maxRows,
			long aCaseNum, long aEDGNum, long aEDGTransID, Timestamp aDate)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM ="
					+ aCaseNum
					+ "  AND EDG_NUM = "
					+ aEDGNum
					+ " "
					+ "AND CURRENT_ELIG_IND IN ('A','C')  AND PAYMENT_BEG_DT  <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aDate) + " "
					+ " AND EDG_TRANSACTION_ID <= " + aEDGTransID
					+ " AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' "
					+ "Order By PAYMENT_BEG_DT Desc, EDG_TRANSACTION_ID DESC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByAuthRecords, query by Auth Records.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNumList
	 *            String
	 * @param pymtBeginDt
	 *            Timestamp
	 * @param pymtEndDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthRecords(int maxRows, long caseNum,
			String edgNumList, Timestamp pymtBeginDt, Timestamp pymtEndDt)
			throws GenericRunTimeException {
		Debug.println("findByAuthRecords" + " maxRows " + maxRows + " caseNum "
				+ caseNum + " edgNum = " + edgNumList);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ caseNum
					+ " "
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ strLiteralAndEdgNumIn
					+ edgNumList
					+ ")"
					+ " AND ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT)) <= '"
					+ DateFormatter.getSrcToDestDtAnsi(pymtEndDt, "yyyy-MM-dd",
							"yyyyMM")
					+ "' "
					+ " AND (PAYMENT_END_DT is NULL OR ( extract(year from PAYMENT_END_DT)||case when extract(month from PAYMENT_END_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_END_DT)) >= '"
					+ DateFormatter.getSrcToDestDtAnsi(pymtBeginDt,
							"yyyy-MM-dd", "yyyyMM") + " ' )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByAuthRecords - method2
	// Previous Month Eligibility Details
	/**
	 * Method findByPrevEligDetails, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aPaymentBegDt
	 *            Timestamp
	 * @param aEdbcRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPrevEligDetails(int maxRows,
			long aCaseNum, long aEdgNum, Timestamp aPaymentBegDt,
			Timestamp aEdbcRunDt) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM =" + aCaseNum + " AND  EDG_NUM = "
					+ aEdgNum + " AND  " + "PAYMENT_BEG_DT < "
					+ DateFormatter.getDateForWhereClauseAnsi(aPaymentBegDt)
					+ " " + " AND CURRENT_ELIG_IND IN ('" + String.valueOf('A')
					+ "','" + String.valueOf('C')
					+ "') AND ACTIVITY_TYPE IN ('IN','RE','PR','CV')"
					+ "AND EDBC_RUN_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(aPaymentBegDt)
					+ " " + "AND DELETE_SW ='" + String.valueOf('N')
					+ "' AND CG_STATUS_CD = 'AP') "
					+ "ORDER BY EDG_TRANSACTION_ID DESC,PAYMENT_BEG_DT ASC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Track02
	// Last Month Certification Details
	/**
	 * Method findByLastMonthCert, query by Last Month Cert.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aLastCertMonth
	 *            Timestamp
	 * @param aEdbcRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByLastMonthCert(int maxRows, long aCaseNum,
			long aEdgNum, Timestamp aLastCertMonth, Timestamp aEdbcRunDt)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + aCaseNum + " AND  EDG_NUM = "
					+ aEdgNum + " " + "AND TRUNC(PAYMENT_BEG_DT, 'MONTH') <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aLastCertMonth)
					+ "" + " AND PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aLastCertMonth)
					+ " " + "AND (CURRENT_ELIG_IND = '" + String.valueOf('A')
					+ "' OR CURRENT_ELIG_IND =  '" + String.valueOf('C')
					+ strLiteralclparenthesis1 + "AND CG_STATUS_CD =  '"
					+ String.valueOf('N') + "' " + "AND EDBC_RUN_DT < "
					+ DateFormatter.getDateForWhereClauseAnsi(aEdbcRunDt)
					+ " AND DELETE_SW = ?)";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by madhu for DC

	/**
	 * Method findByCasePgmVoid, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCasePgmVoid(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCasePgmVoid" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ strLiteralAndProgramCd + cargo.getProgramCd()
					+ " AND DELETE_SW = 'N')";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by ChandraD for Interfaces
	// Requested by Interfaces
	/**
	 * Method findByEdgNoCaseNo, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNoCaseNo(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByedgCaseNo" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A' AND DELETE_SW='N'  AND  REC_BEGIN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ "  "
					+ " AND  (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " OR REC_END_DT IS NULL ))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByMlyUpdIndvPrgCd, custom Query.
	 *
	 * @param maxRows
	 *            int
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMlyUpdIndvPrgCd(int maxRows,
			Timestamp beginDt, Timestamp endDt) throws GenericRunTimeException {

		EdEligibilityCargo colrows[] = null;
		try {

			String sql = "SELECT DISTINCT CASE_NUM FROM ED_ELIGIBILITY  WHERE PROGRAM_CD = 'FS' "
					+ " AND (EDBC_RUN_DT > ? AND EDBC_RUN_DT <= ? )  AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' ORDER BY CASE_NUM ";

			List<Object> parms = new ArrayList<Object>();
			parms.add(beginDt);
			parms.add(endDt);

			SQLCommand command = getSqlCommandForUpdate(sql, parms);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			for (Map<String, Object> result : results) {
				java.math.BigDecimal acaseNum = (BigDecimal) result
						.get(strLiteralCaseNum1);
				EdEligibilityCargo row = new EdEligibilityCargo();
				row.setCaseNum(acaseNum.longValue());
				v.add(row);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by sumam for interfaces on o8/15/2003
	/**
	 * Method findByActiveCaseNum, query by Active Case.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveCaseNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " PROGRAM_CD = 'ME' AND CG_STATUS_CD='AP' AND "
					+ strLiteralCurrentEligIndInA
					+ strLiteralRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralANd
					+ " (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT IS NULL ) AND DELETE_SW = 'N' ORDER BY CASE_NUM,EDG_NUM,EDG_TRACE_ID";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by sumam for interfaces on 8/15/2003
	/**
	 * Method findByActiveCaseNumTOA, query by Active case and Given TOA.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveCaseNumTOA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "PROGRAM_CD = 'ME' AND CG_STATUS_CD='AP' AND "
					+ strLiteralCurrentEligIndInA
					+ strLiteralRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralANd
					+ " (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " OR REC_END_DT IS NULL ) AND "
					+ " TYPE_OF_ASSISTANCE_CD = '"
					+ cargo.getTypeOfAssistanceCd() + "' AND DELETE_SW = 'N'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		// corr return colrows;
	}

	// Added by Sudesh Srinivasan on 8/22/2003
	/**
	 * Method findByAuthRecordForEDG, query by Auth Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthRecordForEDG(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(" findByAuthRecordForEDG " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'"
					+ " AND (TYPE_OF_ASSISTANCE_CD = 'TP06' OR TYPE_OF_ASSISTANCE_CD = 'TP09') "
					+ " AND PROGRAM_CD = 'FS' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ""
					+ " AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ " AND ESTIMATED_ELIG_END_DT >"
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ""
					+ " AND DELETE_SW = 'N' AND EDG_NUM = "
					+ cargo.getEdgNum()
					+ " ORDER BY EDG_NUM";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by DI added on 8/28/2003
	/**
	 * Method findByPandSRecords, query by Curr Elig Ind = 'P' or 'S'.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPandSRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByPandSRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM =" + cargo.getCaseNum() + " "
					+ " AND  EDG_NUM=" + cargo.getEdgNum() + " "
					+ " AND  PROGRAM_CD='" + cargo.getProgramCd() + "' "
					+ strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND in ('P','S') "
					+ " order by payment_beg_dt asc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested by Track 2 -Jai (09/10/03)
	// modified Jai -03/27/04
	/**
	 * Method findByCaseMAMEPrograms, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseMAMEPrograms(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCaseMAMEPrograms" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM="
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD IN ('MC', 'ME', 'MA')"
					+ " AND DELETE_SW='N' AND REQUEST_DT = 	"
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRequestDt()) + " AND REC_END_DT IS NULL";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		// EdEligibilityCargo[] rows = null;

	}

	// end of findByCaseMAMEPrograms
	/**
	 * Added for PAMAO - Interfaces on AUG 19 200 *
	 *
	 * @param maxRows
	 *            int.
	 * @param maxRows
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDGNumGIJPrgCD(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEDGNumGIJPrgCD" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "EDG_NUM = "
					+ cargo.getEdgNum()
					+ " "
					+ " and PROGRAM_CD IN ('TF','MA')"
					+ " and CURRENT_ELIG_IND in ('A','C') "
					+ strLiteralDeleteSwN
					+ strLiteralPaymentenddt
					+ strLiteralPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ " "
					+ "and PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " "
					+ " and edbc_run_dt <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + " "
					+ " order by edbc_run_dt desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 09/30/2003 not to modify the existing one
	/**
	 * Method findByAuthRecords, query by Auth Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @param paymentBegDt
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthRecords(int maxRows,
			EdEligibilityCargo cargo, String paymentBegDt)
			throws GenericRunTimeException {
		Debug.println("findByAuthRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM ="
					+ cargo.getCaseNum()
					+ " "
					+ " AND  EDG_NUM="
					+ cargo.getEdgNum()
					+ " "
					+ strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralclparenthesis
					+ " AND ( extract(year from PAYMENT_BEG_DT)||'/'||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT)) <="
					+ DateFormatter.getDateForWhereClauseAnsi(paymentBegDt)
					+ "";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by Vishal on 10/1/2003
	// Modified for prateek
	/**
	 * Method findByEdbcPaymentDt, query by Payment Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param aBeginDt
	 *            Timestamp
	 * @param aEndDt
	 *            Timestamp
	 * @param aProgramCd
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdbcPaymentDt(int maxRows,
			Timestamp aBeginDt, Timestamp aEndDt, String aProgramCd)
			throws GenericRunTimeException {

		String whereClause = null;
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			if (aProgramCd.equalsIgnoreCase("'CC'")) {
				whereClause = "(EDBC_RUN_DT BETWEEN "
						+ DateFormatter.getDateForWhereClauseAnsi(aBeginDt)
						+ strLiteralANd
						+ DateFormatter.getDateForWhereClauseAnsi(aEndDt)
						+ ") "
						+ "AND (PAYMENT_BEG_DT >="
						+ DateFormatter.getDateForWhereClauseAnsi(aBeginDt)
						+ " AND  PAYMENT_END_DT <= "
						+ DateFormatter.getDateForWhereClauseAnsi(aEndDt)
						+ " ) AND PROGRAM_CD IN ("
						+ aProgramCd
						+ ") AND CURRENT_ELIG_IND = 'A' AND ACTIVITY_TYPE IN('IN','RA','PR','IR')"
						+ " AND TYPE_OF_ASSISTANCE_CD NOT IN ('TA22','TP13') ORDER BY PRIMARY_WORKER_ID ASC";
			} else {
				whereClause = "(EDBC_RUN_DT BETWEEN "
						+ DateFormatter.getDateForWhereClauseAnsi(aBeginDt)
						+ strLiteralANd
						+ DateFormatter.getDateForWhereClauseAnsi(aEndDt)
						+ ") "
						+ "AND (PAYMENT_BEG_DT >="
						+ DateFormatter.getDateForWhereClauseAnsi(aBeginDt)
						+ " AND  PAYMENT_END_DT <= "
						+ DateFormatter.getDateForWhereClauseAnsi(aEndDt)
						+ " ) AND PROGRAM_CD IN ("
						+ aProgramCd
						+ ") AND CURRENT_ELIG_IND = 'A' AND ACTIVITY_TYPE IN('IN','RA','PR')"
						+ " AND TYPE_OF_ASSISTANCE_CD NOT IN ('TA22','TP13') ORDER BY PRIMARY_WORKER_ID ASC";
			}
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Vishal on 10/1/2003
	/**
	 * Method findByCaseNumEdgNumPaymentDt, query by Edg Num and Payment Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNumPaymentDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " "
					+ "AND (PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getCreateDt())
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getUpdateDt()) + " "
					+ "OR PAYMENT_END_DT IS NULL)) AND PROGRAM_CD = 'CC'"
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by Sudhir on 10/1/2003
	/**
	 * Method findByAuthIhfs, query by Auth and Ihfs records.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthIhfs(int maxRows, long lCaseNum,
			Timestamp tsMaxEDM, Timestamp tsMinEDM)
			throws GenericRunTimeException {

		try {

			String sql = ("Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ " AND TYPE_OF_ASSISTANCE_CD = 'TP86' "
					+ " AND REC_BEGIN_DT <=  ? "
					+ " AND (REC_END_DT  >=  ? OR " + " REC_END_DT  is Null ) " + strLiteralOrderby2);

			List<Object> parms = new ArrayList<Object>();
			parms.add(lCaseNum);
			parms.add(tsMaxEDM);
			parms.add(tsMinEDM);

			SQLCommand command = getSqlCommandForUpdate(sql.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Prakash, Jose Sathish (CV) - 10/09/2003
	/**
	 * Method findByNextDiTransID, query by DI next Trans Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByNextDiTransID(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		long diTRAN_ID = 0;
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[1];
		try {
			/*
			 * String sqlString =
			 * "select ED_ELIGIBILITY_5SQ.nextval newTRAN_ID from dual";
			 * SQLCommand command = getSqlCommand(sqlString);
			 * Collection<Map<String, Object>> results = (Collection<Map<String,
			 * Object>>) command .execute(); List<EdEligibilityCargo> resultList
			 * = new ArrayList<EdEligibilityCargo>();
			 */
			Sequence dbSequence = new Sequence("ED_ELIGIBILITY_6SQ",
					getDataSource());
			Long nextval = dbSequence.getValue();
			diTRAN_ID = nextval;
			// for (Map<String, Object> result : results) {
			// diTRAN_ID = ((BigDecimal) result.get("NEWTRAN_ID")).longValue();
			if (diTRAN_ID > 0) {

				colrows[0] = new EdEligibilityCargo();

				colrows[0].setUniqueTransId(diTRAN_ID);

			}
			// }

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return (colrows);

	}

	/**
	 * Method findByAllTANFRecordsReRunCaseRange, query for Tanf Re Run Cases.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum1
	 *            long
	 * @param caseNum2
	 *            long
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllTANFRecordsReRunCaseRange(int maxRows,
			long caseNum1, long caseNum2, Timestamp beginDt, Timestamp endDt)
			throws GenericRunTimeException {

		EdEligibilityCargo colrows[] = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM BETWEEN "
					+ caseNum1
					+ strLiteralANd
					+ caseNum2
					+ strLiteralANd
					+ " PROGRAM_CD IN ('TF', 'MA') AND DELETE_SW = 'N' "
					+ " AND ((CURRENT_ELIG_IND IN ('A', 'C') AND (EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ ""
					+ " AND EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ ") AND CG_STATUS_CD IN ('AP', 'TN')) OR "
					+ " ( CURRENT_ELIG_IND ='A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' AND EDBC_RUN_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ strLiteralclparenthesis2
					+ " ORDER BY CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC, EDBC_RUN_DT DESC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Method findByAllTANFRecordsReRun, query by Tanf Re Ran Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllTANFRecordsReRun(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		EdEligibilityCargo colrows[] = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "PROGRAM_CD IN ('TF', 'MA') AND DELETE_SW = 'N' "
					+ " AND ((CURRENT_ELIG_IND IN ('A', 'C') AND (EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ""
					+ " AND EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ") AND CG_STATUS_CD IN ('AP', 'TN')) OR "
					+ " ( CURRENT_ELIG_IND ='A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralclparenthesis2
					+ " ORDER BY CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC, EDBC_RUN_DT DESC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added on 10/9/2003
	/**
	 * Method findByMlyFSUpdIndvReRunCaseRange, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum1
	 *            long
	 * @param caseNum2
	 *            long
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @param progCd
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMlyFSUpdIndvReRunCaseRange(int maxRows,
			long caseNum1, long caseNum2, Timestamp beginDt, Timestamp endDt,
			String progCd) throws GenericRunTimeException {

		EdEligibilityCargo colrows[] = null;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String WHERE_SQL = " CASE_NUM BETWEEN "
					+ caseNum1
					+ strLiteralANd
					+ caseNum2
					+ strLiteralANd
					+ " CURRENT_ELIG_IND IN('A','C') AND PROGRAM_CD = 'FS' AND DELETE_SW = 'N' "
					+ " AND (((EDBC_RUN_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ ""
					+ strLiteralAndEdbcRunDt
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ " ) AND CG_STATUS_CD IN ('AP', 'TN')) OR "
					+ " (PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' AND EDBC_RUN_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ ")) ORDER BY  CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC , EDBC_RUN_DT DESC  ";
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_SQL);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Added by Vishal on 10/14/2003 and modified on 10/23/2003
	/**
	 * Method findByCaseEdgNum, query by Edg num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' AND CURRENT_ELIG_IND = 'A'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Requested By Suresh Akula (EDBC) On Oct 21 for Delete Alerts
	/**
	 * Method findByEligIndicator, query by Curr Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEligIndicator(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByEligIndicator" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSwN
					+ " AND CURRENT_ELIG_IND in ('X','S','P', 'M')";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// OUTER LOOP FINDER FOR BI-FSISS-BIP :- Use
	// Temporary Table for handling long lived cursor
	/**
	 * Method findByFSProgramCodeTempTable, Custom Query. CCD CQ Id :
	 * BRGUS00036611 Id : BRGUS00039741
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSProgramCodeTempTable(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' "
					+ "AND PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ "AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ""
					+ " AND COALESCE(PAYMENT_END_DT, CAST('01-DEC-2999' as date)) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " "
					+ "AND ESTIMATED_ELIG_END_DT >"
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralAndDeleteSWN
					+ "ORDER BY COALESCE(PAYMENT_END_DT, CAST('01-DEC-2999' as date))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// Modified by Hemalatha for Interfaces on 2/17/2004
	/**
	 * Method findByEDGNumGIJPrgCDEDGNum, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEDGNumGIJPrgCDEDGNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEDGNumGIJPrgCDEDGNum" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " "
					+ " and PROGRAM_CD IN ('TF','MA','ME','CC','MC')"
					+ " and CURRENT_ELIG_IND in ('A','C') "
					+ " and DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' "
					+ strLiteralPaymentenddt
					+ strLiteralPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ")"
					+ " "
					+ "and PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " "
					+ " and edbc_run_dt <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + " "
					+ " order by edbc_run_dt desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByEDGNumGIJPrgCDEDGNum
	/**
	 * Method findByCaseDIActionDate, query by DI action Date.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsDIActionDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseDIActionDate(int maxRows,
			long lCaseNum, Timestamp tsDIActionDate)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ lCaseNum
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND = 'A' AND DI_ACTION_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(tsDIActionDate)
					+ " ORDER BY ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| extract(month from PAYMENT_BEG_DT))  ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByCaseDIActionDate
	// Requested by Track 2 -Jai (11/14/03)
	/**
	 * Method findByINApprovedEDG, query by Apprved Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByINApprovedEDG(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(" findByINApprovedEDG " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " CASE_NUM =" + cargo.getCaseNum() + " "
					+ " AND EDG_NUM = ? " + " AND ACTIVITY_TYPE = 'IN' "
					+ strLiteralAndCgStatusCdAP + strLiteralAndDeleteSwN
					+ " ORDER BY CURRENT_ELIG_IND";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// findByINApprovedEDG
	// Added By Vishal//Changed on 12/09/2003
	/**
	 * Method findByReviewDate, query by Review Date.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByReviewDate(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		String whereClause = null;
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			if (cargo.getSpReviewDt() != null) {
				whereClause = "SP_REVIEW_DT = "
						+ DateFormatter.getDateForWhereClauseAnsi(cargo
								.getSpReviewDt())
						+ " AND SP_REVIEW_CD IN('14','15') AND TYPE_OF_ASSISTANCE_CD = 'TP86'"
						+ " AND CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD IN ('AP') AND DELETE_SW = 'N' ORDER BY REC_BEGIN_DT DESC";

			} else {
				whereClause = "CASE_NUM = "
						+ cargo.getCaseNum()
						+ strLiteralAndEdgNum
						+ cargo.getEdgNum()
						+ " AND TYPE_OF_ASSISTANCE_CD = 'TP86' "
						+ "AND CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD IN ('TN','DN') ORDER BY REC_BEGIN_DT DESC";

			}

			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by JYOTHI for DC on 11/18/2003
	/**
	 * Id : BRGUS00136478 Method findByRecForProgramDenial, query by Pgm Denial.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByRecForProgramDenial(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(strLiteralFindByRecForProgramDenial + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum + cargo.getCaseNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND DELETE_SW = 'N')");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProgramDenial(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(strLiteralFindByRecForProgramDenial + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum + cargo.getCaseNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND DELETE_SW = 'N')");
			if ("SE".equals(cargo.getProgramCd())) {
				clause.append(" AND CURRENT_ELIG_IND IN ('P','T','Q')");
			} else {
				clause.append(" AND CURRENT_ELIG_IND IN ('P','T')");
			}
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Vishal Mehta on 11/25/2003
	/**
	 * Method findByDisposedEDM, query for Disposed EDM.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByDisposedEDM(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByDisposedEDM" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2 + cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = 'A'" + " AND PROGRAM_CD = 'TF' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByPaymentDT, query by Payment Dt.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEDGNum
	 *            long
	 * @param aBenefitMnth
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPaymentDT(int maxRows, long aCaseNum,
			long aEDGNum, Timestamp aBenefitMnth)
			throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" CASE_NUM =" + aCaseNum + "  AND EDG_NUM = "
					+ aEDGNum
					+ " AND CURRENT_ELIG_IND = 'A'  AND PAYMENT_BEG_DT  <= "
					+ aBenefitMnth + " AND PAYMENT_END_DT >= " + aBenefitMnth
					+ "  AND DELETE_SW = 'N'  ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Mathew for checking Edg in AT Issuance Cases - BI
	// (12/03/2003)
	/**
	 * Method findByEdgNumberPgm, query by Edg Num and Pgm.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumberPgm(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgNumberPgm " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" EDG_NUM = " + cargo.getEdgNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND DELETE_SW = 'N' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by DI - Suresh Akula
	/**
	 * Method findByEdgTransId, query by Edg Trans Id.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgTransId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			if (cargo.getCurrentEligInd() == 'A') {
				clause.append(strLiteralCaseNum2
						+ cargo.getCaseNum()
						+ " "
						+ " AND   DELETE_SW = 'N' "
						+ " AND   CURRENT_ELIG_IND = 'A' "
						// To fix the defect 215406(Modified to include only EDG
						// Transaction ID)
						// + " AND ( EDG_TRANSACTION_ID = ? OR REC_END_DT IS
						// NULL OR HIS_TYPE_IND = 1 )";
						+ " AND   ( EDG_TRANSACTION_ID = "
						+ cargo.getEdgTransactionId() + " )");
			} else {

				clause.append(strLiteralCaseNum2 + cargo.getCaseNum()
						+ " "
						+ " AND   DELETE_SW = 'N' "
						+ " AND   CURRENT_ELIG_IND IN ('S', 'P', 'K')"
						// + " AND ( EDG_TRANSACTION_ID = ? OR REC_END_DT IS
						// NULL )" ;
						+ " AND   ( EDG_TRANSACTION_ID = "
						+ cargo.getEdgTransactionId() + " )");
			}
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseLatestEdgRecords, query for latest Edg's.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseLatestEdgRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2 + cargo.getCaseNum() + " "
					+ strLiteralAndDeleteSWN + strLiteralAndCurrentEligIndA
					+ " AND HIS_TYPE_IND = 1 ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// findByCaseLatestEdgRecords
	// Added by Paresh Mehta on 02/25/2004 for HOH validations
	/**
	 * Method findByForHOHValidation, custom Query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByForHOHValidation(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByForHOHValidation " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND IN ('A') AND CG_STATUS_CD = 'AP' AND (payment_end_dt > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " OR payment_end_dt is null)  AND DELETE_SW = 'N' )");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Finder Added by Paresh on 3/16/2004
	/**
	 * Method findByEdgDenied, query for Denied Edg.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgDenied(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgDenied " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND IN ('P','K','S') AND CG_STATUS_CD IN ('PE','AP') AND DELETE_SW = 'N' )");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Madhu on 03/25/2004 for SpendDown
	/**
	 * Method findByScheduleSpendDown, query by Spend Down.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByScheduleSpendDown(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("  CASE_NUM = " + cargo.getCaseNum() + " "
					+ " AND TYPE_OF_ASSISTANCE_CD IN('TP32','TP56')"
					// + " AND CURRENT_ELIG_IND IN ('P','S','K','V') "
					+ " AND CURRENT_ELIG_IND IN ('P','S','K') "
					+ strLiteralAndDeleteSWN);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00127816-End-adunuthalas-Modified method to remove some of TOA Cds.

	/**
	 * CCD CQ Id : BRGUS00100890 Id : BRGUS00100920
	 *
	 * Method findByMiCSESProgMAPrevRec, to get the previous 'TF' eligible
	 * MiCSES applicable record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESProgMAPrevRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ ""
					+ " AND (PROGRAM_CD = 'MA' "
					+ "AND TYPE_OF_ASSISTANCE_CD IN('TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM'))"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndInAC
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + ""
					+ " ORDER BY PAYMENT_BEG_DT DESC, EDG_TRACE_ID DESC  ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00100890 Id : BRGUS00100920
	 *
	 * Method findByMiCSESProgCDPrevRec, to get the previous 'TF' eligible
	 * MiCSES applicable record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByMiCSESProgCDPrevRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ ""
					+ " AND (PROGRAM_CD = 'CD' AND TYPE_OF_ASSISTANCE_CD = 'CDCS')"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndInAC
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + strLiteralOrderby1);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00100890 Id : BRGUS00100920
	 *
	 * Method findByMiCSESProgFSPrevRec, to get the previous 'TF' eligible
	 * MiCSES applicable record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESProgFSPrevRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ ""
					+ " AND (PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09')"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndInAC
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + "" + strLiteralOrderby1);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00100890 Id : BRGUS00100920
	 *
	 * Method findByMiCSESProgTFPrevRec, to get the previous 'TF' eligible
	 * MiCSES applicable record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESProgTFPrevRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ ""
					+ " AND (PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD = 'TP01')"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndInAC
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt()) + "" + strLiteralOrderby1);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00031540 Id : BRGUS00031545
	 *
	 * Method findByMiCSESProgCurrRec, to get the current eligible MiCSES
	 * applicable record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESProgCurrRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ " AND ((PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD = 'TP01') OR"
					+ "      (PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09') OR"
					+ "      (PROGRAM_CD = 'CD' AND TYPE_OF_ASSISTANCE_CD = 'CDCS') OR"
					+ "      (PROGRAM_CD = 'MA' "
					+ "AND TYPE_OF_ASSISTANCE_CD IN('TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM')))"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " "
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralOrPaymentEndDtisNull);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00100890 Id : BRGUS00100920
	 *
	 * Method findByMiCSESApplicableProg, to get the MiCSES applicable programs
	 * eligibility.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByMiCSESApplicableProg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " "
					+ " AND (PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD = 'TP01' OR"
					+ "      PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' OR"
					+ "      PROGRAM_CD = 'CD' AND TYPE_OF_ASSISTANCE_CD = 'CDCS' OR"
					+ "      PROGRAM_CD = 'MA' "
					+ "AND TYPE_OF_ASSISTANCE_CD IN('TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM'))"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ " AND (CG_STATUS_CD IN ( 'AP') OR (CG_STATUS_CD IN ( 'TN') AND DI_ACTION_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getDiActionDt())
					+ strLiteralclparenthesis2
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralOrPaymentEndDtisNull);
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00011462 Id : BRGUS00025242 Method findByFSTANFEligCase,
	 * by SK Ojha.
	 *
	 * @param aBeginDT
	 *            Timestamp
	 * @param aEndDT
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSTANFEligCase(int maxRows,
			Timestamp aBeginDT, Timestamp aEndDT)
			throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" ( " + " DELETE_SW = 'N' AND "
					+ " PROGRAM_CD IN ('FS', 'TF') AND "
					+ " CURRENT_ELIG_IND IN( 'A', 'C') AND "
					+ " CG_STATUS_CD = 'AP'  AND " + " EDBC_RUN_DT <= "
					+ aEndDT + strLiteralANd + " PAYMENT_BEG_DT <= " + aEndDT
					+ strLiteralANd + " (PAYMENT_END_DT >= " + aBeginDT
					+ " OR PAYMENT_END_DT IS NULL)) ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method Name : findByACF801Cases Used By ACF801 Report Job Created by
	 * Raveenkumar Govindasamy Modified by Raveenkumar Govindasamy on
	 * 16-APR-2007 Coded By Sanjay Ojah
	 *
	 * @param maxRows
	 * @param aBeginDT
	 * @param aEndDT
	 * @return
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByACF801Cases(int maxRows,
			Timestamp aBeginDT, Timestamp aEndDT)
			throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" DELETE_SW = 'N' AND " + " PROGRAM_CD = 'CD' AND "
					+ " TYPE_OF_ASSISTANCE_CD = 'CDCS'  AND "
					+ strLiteralCurrentEligIndInA
					+ " CG_STATUS_CD = 'AP'  AND "
					+ " PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDT)
					+ strLiteralANd
					+ " (PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDT)
					+ strLiteralOrPaymentEndDtisNull
					+ " AND (CASE_NUM,EDG_NUM) IN "
					+ " (SELECT A.CASE_NUM,A.EDG_NUM FROM ED_INDV_CDC_SERVICE_AUTH A,BI_WARRANT_PAYMENT_DETAIL B "
					+ strLiteralWhereAcsenumBcsenum
					+ " AND A.EDG_NUM = B.EDG_NUM "
					+ " AND B.PROGRAM_CD ='CD' "
					+ " AND B.Type_Of_Assistance_Cd='CDCS' "
					+ " AND A.CUR_ELIG_IND ='A' "
					+ " AND A.DELETE_SW ='N'"
					+ " AND B.PAYMENT_BEGIN_DT<= "
					+ DateFormatter.getDateForWhereClauseAnsi(aEndDT)
					+ " "
					+ " AND (B.PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(aBeginDT)
					+ " OR B.PAYMENT_END_DT IS NULL))"

					+ " ORDER BY CASE_NUM,EDG_NUM");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00038166 Id : BRGUS00038171 Method
	 * findByCurrentCaseProgram, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCurrentCaseProgram(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCurrentCaseProgram" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("CASE_NUM=" + cargo.getCaseNum()
					+ " AND PROGRAM_CD='" + cargo.getProgramCd()
					+ strLiteralAndCgStatusCd + cargo.getCgStatusCd()
					+ "'  AND  TYPE_OF_ASSISTANCE_CD = '"
					+ cargo.getTypeOfAssistanceCd() + "' AND ");
			clause.append("  PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralOrPaymentEndDtisNull);
			clause.append(" AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00035280 Id : BRGUS00038189 Added By Venu Dalayi MAR 28
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByExpeditedEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedEdg" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("(EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND REC_END_DT IS NULL)");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CCD CQ Id : BRGUS00045308
	// Id : BRGUS00045316
	public EdEligibilityCargo[] findByCaseNumforCR(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL AND DELETE_SW = 'N' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00026243 Id : BRGUS00046487 Method findByEdgNumberQC .
	 * To find the Edg Trace Id and Failure Reason Code.
	 *
	 * @param maxRows
	 *            int
	 * @param Long
	 *            edgNum
	 * @param String
	 *            mmYYYY
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumberQC(int maxRows, long edgNum,
			String mmYYYY, String fapMa) throws GenericRunTimeException {

		try {
			mmYYYY = DateFormatter.convSrcToDestinationDtFormat(mmYYYY,
					"MMyyyy", strLiteralMMMyy);
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" EDG_NUM = " + edgNum
					+ " AND CG_STATUS_CD IN ('DN','TN','AP')");
			clause.append(" AND PROGRAM_CD IN (" + fapMa + ") AND ");
			clause.append(strLiteralCurrentEligIndInA);
			clause.append(" "
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6)
					+ "= '"
					+ mmYYYY
					+ "'  OR  "
					+ DAOSqlHelper.getANSISubstring(
							"cast(PAYMENT_END_DT as VARCHAR(10))", 4, 6)
					+ " = '" + mmYYYY + "'");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CCD CQ Id : BRGUS00035280
	// Id : BRGUS00046580
	/**
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpeditedEdgAndEdgTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedEdgAndEdgTraceId" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" (EDG_NUM = "
					+ cargo.getEdgNum()
					+ strLiteralAndEdgTraceId
					+ cargo.getEdgTraceId()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND REC_END_DT IS NULL)");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CCD CQ Id : BRGUS00035280
	// Id : BRGUS00046580
	/**
	 * method findByExpeditedCase is used to
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpeditedCase(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedCase" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND REC_END_DT IS NULL)");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumProgramCdCancelled, query by Canceled Record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Parag
	public EdEligibilityCargo[] findByCaseNumProgramCdCancelled(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumProgramCdCancelled" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			//ND-52377 quotes missing
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				sb.append(" AND PROGRAM_CD = '" + cargo.getProgramCd() + "' ");
			}
			if(0 != cargo.getIndivId()) {
				sb.append(" AND TARGET_PERSON_ID = " + cargo.getIndivId() + " ");
			}
			sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q' ) ");
			sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','W') AND TRUNC(A.update_dt) =  ");
			sb.append("( Select max(TRUNC(B.update_dt)) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM");
			sb.append(strLiteralAndbdelteswy);
			sb.append(strLiteralAndBcurrenteligInd);
			sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			sb.append("	AND ( A.payment_end_dt = B.payment_end_dt or B.payment_end_dt is null ))))");
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " A.PAYMENT_BEG_DT >="+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())+") ");
			sb.append(strLiteralOrApaymentenddt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " and A.PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " ))   ");
			sb.append(" AND  TYPE_OF_ASSISTANCE_CD =  ?   ");
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getTypeOfAssistanceCd());

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * Map <String, Object> map = new HashMap<String, Object>();
			 * StringBuffer clause = new StringBuffer();
			 * clause.append(strLiteralCaseNum2+cargo.getCaseNum()+"" +
			 * strLiteralAndDeleteSwY +
			 * " AND CURRENT_ELIG_IND in ('T','S','P', 'A','R','C', 'K', 'V', 'W','Q')"
			 * +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY'))" +
			 * " OR ( PAYMENT_END_DT >= TO_DATE('"
			 * +sdf.format(cargo.getPaymentBegDt
			 * ())+"','MM/DD/YYYY') and PAYMENT_BEG_DT <= TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY')" + "))" +
			 * " AND  PROGRAM_CD = "+cargo.getProgramCd()+" ");
			 * Debug.println(clause.toString());
			 * map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			 * return getReturnCargo(map);
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAllProgramsRunModeCancelled, query by Caneled Run Mode for
	 * all Pgms.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Parag
	
	public EdEligibilityCargo[] findByAllProgramsRunModeCancelled(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		// System.out.println("chandrika --->Find the EDEligibility DAO before be findByAllProgramsRunMode");
		Debug.println("findByAllProgramsRunModeCancelled" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");

		try {

			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM = "+cargo.getCaseNum());
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				sb.append(" AND PROGRAM_CD = ? ");
			}
			if(0 != cargo.getIndivId()) {
				sb.append(" AND TARGET_PERSON_ID = ? ");
			}
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q') ");
			sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','W')))");
			/*sb.append(" AND A.update_dt =  ");
			sb.append("( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM");
			sb.append(strLiteralAndbdelteswy);
			sb.append(strLiteralAndBcurrenteligInd);
			sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			sb.append("	AND ( A.payment_end_dt = B.payment_end_dt or B.payment_end_dt is null ))))");
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) ) ");
			sb.append(strLiteralOrApaymentenddt + " CAST( ? AS DATE) "
					+ " and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) ))   ");*/
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			/*parms.add(cargo.getCaseNum());*/
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				parms.add(cargo.getProgramCd());
			}
			if(0 != cargo.getIndivId()) {
				parms.add(cargo.getIndivId());
			}
			/*parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));*/

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * Map <String, Object> map = new HashMap<String, Object>();
			 * StringBuffer clause = new StringBuffer();
			 * clause.append(strLiteralCaseNum2+cargo.getCaseNum()+"" +
			 * strLiteralAndDeleteSwY +
			 * " AND CURRENT_ELIG_IND in ('T','S','P', 'A','R','C', 'K', 'W', 'V','Q','D')"
			 * //added D :date :Sep 20 2011. +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY'))" +
			 * " OR    (PAYMENT_END_DT >= TO_DATE('"
			 * +sdf.format(cargo.getPaymentBegDt
			 * ())+"','MM/DD/YYYY') and PAYMENT_BEG_DT <= TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY') " + ") )" +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, to_char(PAYMENT_BEG_DT, 'yyyy-mm-dd'), PROGRAM_CD desc, CURRENT_ELIG_IND"
			 * ); Debug.println(clause.toString());
			 * map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			 * return getReturnCargo(map);
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAllProgramsRunModeCancelled, query by Caneled Run Mode for
	 * all Pgms and shows all records including History records in selected time frame
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findByAllProgramsRunModeWithHistory(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByAllProgramsRunModeWithHistory" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM = "+cargo.getCaseNum());
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				sb.append(" AND PROGRAM_CD = ? ");
			}
			if(0 != cargo.getIndivId()) {
				sb.append(" AND TARGET_PERSON_ID = ? ");
			}
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q') ");
			sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','W','R','D')))");
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) and A.PAYMENT_BEG_DT >= CAST( ? AS DATE)) ");
			sb.append(strLiteralOrApaymentenddt + " CAST( ? AS DATE) "
					+ " and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) ))   ");
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				parms.add(cargo.getProgramCd());
			}
			if(0 != cargo.getIndivId()) {
				parms.add(cargo.getIndivId());
			}
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Method findByAllProgramsRunMode, query by all Run Mode.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             //Parag
	 */
	public EdEligibilityCargo[] findByAllProgramsRunMode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByAllProgramsRunMode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		// SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		try {
			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				sb.append(" AND PROGRAM_CD = ? ");
			}
			if(0 != cargo.getIndivId()) {
				sb.append(" AND TARGET_PERSON_ID = ? ");
			}
			sb.append(" AND A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q') ");
			/*
			 * sb.append(
			 * " AND ( A.CURRENT_ELIG_IND in ('T','S','P','A', 'K', 'V','Q') ");
			 * sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append(strLiteralAndbdelteswy);
			 * sb.append(strLiteralAndBcurrenteligInd);
			 * sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			 */
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) )");
			sb.append(strLiteralOrApaymentenddt + " CAST( ? AS DATE) "
					+ " and A.PAYMENT_BEG_DT <= CAST( ? AS DATE) ))   ");
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				parms.add(cargo.getProgramCd());
			}
			if(0 != cargo.getIndivId()) {
				parms.add(cargo.getIndivId());
			}
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
			parms.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentEndDt()));
			
			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * Map <String, Object> map = new HashMap<String, Object>();
			 * StringBuffer clause = new StringBuffer();
			 * clause.append(strLiteralCaseNum2+cargo.getCaseNum()+"" +
			 * strLiteralAndDeleteSwY +
			 * " AND ( CURRENT_ELIG_IND in ('T','S','P','A', 'K', 'V','Q')" + OR
			 * ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt = (
			 * 
			 * 
			 * +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <=TO_DATE('"+
			 * sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY'))" +
			 * " OR ( PAYMENT_END_DT >= TO_DATE('"
			 * +sdf.format(cargo.getPaymentBegDt
			 * ())+"','MM/DD/YYYY') and PAYMENT_BEG_DT <=TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY')" + "))" +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, to_char(PAYMENT_BEG_DT, 'yyyy-mm-dd'), PROGRAM_CD desc, CURRENT_ELIG_IND"
			 * ); Debug.println(clause.toString());
			 * map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			 * return getReturnCargo(map);
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumProgramCd, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	// Parag
	public EdEligibilityCargo[] findByCaseNumProgramCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumProgramCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {

			// SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			//ND-52377 quotes missing
			if(null != cargo.getProgramCd() && !"".equals(cargo.getProgramCd().trim())) {
				sb.append(" AND PROGRAM_CD = '" + cargo.getProgramCd() + "' ");
			}
			if(0 != cargo.getIndivId()) {
				sb.append(" AND TARGET_PERSON_ID = " + cargo.getIndivId() + " ");
			}
			sb.append(" AND  A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q') ");
			/*
			 * sb.append(
			 * " AND ( A.CURRENT_ELIG_IND in ('T','S', 'K', 'P', 'V', 'A','Q') "
			 * ); sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append(strLiteralAndbdelteswy);
			 * sb.append(strLiteralAndBcurrenteligInd);
			 * sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			 */
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())+") ");
			sb.append(strLiteralOrApaymentenddt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " and A.PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " ))   ");
			sb.append("AND   TYPE_OF_ASSISTANCE_CD = ?  ");

			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getTypeOfAssistanceCd());

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * 
			 * Map <String, Object> map = new HashMap<String, Object>();
			 * StringBuffer clause = new StringBuffer();
			 * clause.append(strLiteralCaseNum2+cargo.getCaseNum()+"" +
			 * strLiteralAndDeleteSwY +
			 * " AND CURRENT_ELIG_IND in ('T','S', 'K', 'P', 'V', 'A','Q')" +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <=TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY'))" +
			 * " OR ( PAYMENT_END_DT >= TO_DATE('"
			 * +sdf.format(cargo.getPaymentBegDt
			 * ())+"','MM/DD/YYYY') and PAYMENT_BEG_DT <=TO_DATE('"
			 * +sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY')" + "))" +
			 * " AND  TYPE_OF_ASSISTANCE_CD='"+cargo.getTypeOfAssistanceCd()+"'"
			 * +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, to_char(PAYMENT_BEG_DT, 'yyyy-mm-dd'),CURRENT_ELIG_IND"
			 * ); Debug.println(clause.toString());
			 * map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			 * return getReturnCargo(map);
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumStatusCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2 + cargo.getCaseNum() + " "
					+ " AND DELETE_SW != 'Y' " + strLiteralAndCurrentEligIndA
					+ " AND CG_STATUS_CD IN ('TN','DN') "
					+ " AND REC_END_DT IS NULL "
					+ " AND ELIGIBILITY_END_DT IS NULL ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ ID :- BRGUS00002490 id : BRGUS00005729 Method
	 * findByTfAuthTraceIdList, query by Case, Edg Trace Id for Auth List.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param edgTraceId
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTfAuthTraceIdList(int maxRows,
			long lCaseNum, String edgTraceId) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2 + lCaseNum
					+ "  AND CURRENT_ELIG_IND = 'A' " + strLiteralAndDeleteSWN
					+ strLiteralAndEdgTraceIdIn + edgTraceId + ")");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * CCD FO125 id : New Method to Get all the current EDGS Method
	 * findByCaseNumEligIndStatus, This method finds all the EDGs in case(that
	 * are disposed) and their status for Case Assignment @param maxRows int
	 * 
	 * @param cargo EdEligibilityCargo @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumProgToaDetails(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" ( edg_num,type_of_assistance_cd,payment_beg_dt,edg_trace_id) in (select distinct edg_num,type_of_assistance_cd ,max(payment_beg_dt),max(edg_trace_id) from ed_eligibility where (case_num="
					+ cargo.getCaseNum()
					+ " and delete_sw ='N' and current_elig_ind ='A') group by type_of_assistance_cd ,edg_num) and delete_sw ='N' and current_elig_ind ='A' order by edg_num");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * CCD CQ ID :- BRGUS00002364 id : BRGUS00003368 New Method to identify the
	 * approved edges from ed eligilbility. @param maxRows int @param cargo
	 * EdEligibilityCargo @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByEdgsCurrentStatus(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgsCurrentStatus" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" ( EDG_NUM,TYPE_OF_ASSISTANCE_CD,PAYMENT_BEG_DT,EDG_TRACE_ID) IN  "
					+ " (SELECT DISTINCT EDG_NUM,TYPE_OF_ASSISTANCE_CD ,MAX(PAYMENT_BEG_DT),MAX(EDG_TRACE_ID)  "
					+ "  FROM ED_ELIGIBILITY WHERE (CASE_NUM="
					+ cargo.getCaseNum()
					+ " AND DELETE_SW ='N' )  "
					+ "  GROUP BY TYPE_OF_ASSISTANCE_CD ,EDG_NUM) AND DELETE_SW ='N' ORDER BY EDG_NUM ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ ID :- BRGUS00002490 id : BRGUS00005729 Finder to get last paid
	 * benefit amount
	 *
	 * @param maxRows
	 *            ints
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByAuthRecords2(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ strLiteralANd
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6)
					+ " <= '"
					+ DateFormatter.getSrcToDestDtAnsi(cargo.getPaymentBegDt(),
							"yyyy-MM-dd", strLiteralMMMyy)
					+ "'"
					+ " AND (PAYMENT_END_DT IS NULL OR "
					+ DAOSqlHelper.getANSISubstring(
							"cast(PAYMENT_END_DT as VARCHAR(10))", 4, 6)
					+ " >= '"
					+ DateFormatter.getSrcToDestDtAnsi(cargo.getPaymentBegDt(),
							"yyyy-MM-dd", strLiteralMMMyy)
					+ "' AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N'");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by track03
	/**
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByForEarnedIncome(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByForEarnedIncome" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndDeleteSWN + strLiteralAndprogramCd
					+ cargo.getProgramCd() + "'  "
					+ " AND ( CURRENT_ELIG_IND IN ('T','S', 'P') ) ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Modified by Manoj for RP(Tarun) on 05/05/05 for def Tiers00221969
	/**
	 * This method selects records required to determine the previous
	 * eligibility for an EDG.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aEdgTransID
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByPrevEligInfo(int maxRows, long aCaseNum,
			long aEdgNum, long aEdgTransID) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum
					+ aCaseNum
					+ " AND  EDG_NUM = "
					+ aEdgNum
					+ " AND  EDG_TRANSACTION_ID < "
					+ aEdgTransID
					+ " AND CURRENT_ELIG_IND IN ('A','C') AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP') ORDER BY EDG_TRANSACTION_ID DESC,PAYMENT_BEG_DT DESC");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Track02
	// Last Month Certification Details
	/**
	 * Method findByPrevMonthCert, query by Last Month Cert.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aLastCertMonth
	 *            Timestamp
	 * @param aEdgTransID
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPrevMonthCert(int maxRows, long aCaseNum,
			long aEdgNum, Timestamp aLastCertMonth, long aEdgTransID)
			throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ aCaseNum
					+ " AND  EDG_NUM = "
					+ aEdgNum
					+ " AND TRUNC(PAYMENT_BEG_DT, 'MONTH') <= "
					+ aLastCertMonth
					+ strLiteralAndPaymentEndDt2
					+ aLastCertMonth
					+ " OR PAYMENT_END_DT is null) AND (CURRENT_ELIG_IND = '"
					+ String.valueOf('A')
					+ "' OR CURRENT_ELIG_IND = '"
					+ String.valueOf('C')
					+ "') AND CG_STATUS_CD = 'AP' AND EDG_TRANSACTION_ID  < "
					+ aEdgTransID
					+ strLiteralAndDeleteSw
					+ String.valueOf('N')
					+ "' AND ACTIVITY_TYPE in ('IN','PR') ORDER BY EDG_TRANSACTION_ID ASC ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00005688 Id : BRGUS00011261 Method
	 * findByCaseNumForStatusAndAuth
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByCaseNumForStatusAndAuth(int maxRows,
			long caseNumber) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ caseNumber
					+ " AND DELETE_SW = 'N' AND ((CURRENT_ELIG_IND = 'A'  AND PAYMENT_END_DT IS NULL) OR (CURRENT_ELIG_IND IN ('S','P','K'))) ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested by Bhuvane on 01/19/04 to get TOAs for a casenumber used in
	// WorkLoadRealignment
	/**
	 * Method findByCaseNumberApproved, query by Approved Status.
	 *
	 * @param maxRows
	 *            int
	 * @param cases
	 *            ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberApproved(int maxRows, List cases)
			throws GenericRunTimeException {
		EdEligibilityCargo colrows[] = null;
		// StringBuffer sbClause = new StringBuffer();

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" CASE_NUM IN (");
			int iCaseSize = cases.size();
			for (int i = 0; i < iCaseSize; i++) {
				clause.append(cases.get(i));
				if (!((i + 1) == cases.size())) {
					clause.append(",");
				}
			}
			clause.append(") AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Sumam for Interfaces on 3/31/2004
	/**
	 * Method findByActiveCaseNumTOAMod, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveCaseNumTOAMod(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'MC' AND CG_STATUS_CD='AP' AND "
					+ strLiteralCurrentEligIndInA
					+ strLiteralRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralANd
					+ " (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + " OR REC_END_DT IS NULL ) AND "
					+ " TYPE_OF_ASSISTANCE_CD = 'TP23' AND DELETE_SW = 'N'");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Rajdeep for interfaces on 04/30/2004
	/**
	 * Method findByCancelledTANFRecordsReRun, query for Canceled Tanf records
	 * for re run.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum1
	 *            long
	 * @param caseNum2
	 *            long
	 * @param beginDt
	 *            Timestamp
	 * @param endDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCancelledTANFRecordsReRun(int maxRows,
			long caseNum1, long caseNum2, Timestamp beginDt, Timestamp endDt)
			throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" CASE_NUM BETWEEN "
					+ caseNum1
					+ strLiteralANd
					+ caseNum2
					+ " AND PROGRAM_CD IN ('TF', 'MA') AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN('A', 'C')   "
					+ "   AND PAYMENT_BEG_DT < = "
					+ DateFormatter.getDateForWhereClauseAnsi(beginDt)
					+ " AND DI_ACTION_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(endDt)
					+ " AND CG_STATUS_CD IN ('AP', 'TN') "
					+ " ORDER BY CASE_NUM, EDG_NUM, PAYMENT_BEG_DT DESC, EDBC_RUN_DT DESC ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Sumam for interfaces on 05/06/04
	/**
	 * Method findByActiveCaseNumMeMc, query for cases Active in Me or MC.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByActiveCaseNumMeMc(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" PROGRAM_CD IN ('ME','MC') AND CG_STATUS_CD='AP' AND "
					+ strLiteralCurrentEligIndInA
					+ strLiteralRecBegindt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ strLiteralANd
					+ " (REC_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt())
					+ " OR REC_END_DT IS NULL ) AND DELETE_SW = 'N' ORDER BY CASE_NUM, PROGRAM_CD DESC, EDG_NUM, EDG_TRACE_ID ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}// end findByActiveCaseNumMeMc()

	// Added for correspondance
	/**
	 * Method findByCOCaseNumAndEdgNum, query by Edg Num and Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCOCaseNumAndEdgNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCOCaseNumAndEdgNum" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " AND PROGRAM_CD in ('MA','ME','MC') AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt()) + " ) ORDER BY EDG_TRACE_ID DESC");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByQMB, query for 'TMB' Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQMB(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {

		Debug.println("findByQMB " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("  (CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND TYPE_OF_ASSISTANCE_CD = 'TP24' AND CURRENT_ELIG_IND in ('A','P') AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecBeginDt())
					+ " AND (PAYMENT_END_DT is null or PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRecEndDt()) + "))");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by track03
	/**
	 * Method findByLateDetermination, query for Late Determination.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByLateDetermination(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLateDetermination" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND IN ('P', 'S') AND  DELETE_SW = 'N' AND FS_EXPEDITED_SW = 'Y' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by interface
	/**
	 * Method findByCancelTermRec, query for Canceled Record.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCancelTermRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			String st = DateFormatter.convSrcToDestinationDtFormat(cargo
					.getPaymentBegDt().toString().substring(0, 10),
					"yyyy-mm-dd", strLiteralMMMyy);
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("  EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND DELETE_SW='N' AND CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "' AND CURRENT_ELIG_IND = '"
					+ cargo.getCgStatusCd()
					+ "' AND "
					+ DAOSqlHelper.getANSISubstring(strLiteralcastPaymentBegdt,
							4, 6) + "=  '" + st + "' ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// requested by Interface
	/**
	 * Method findByApprovedFS, query for Approved FS Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByApprovedFS(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		// Debug.println("findByApprovedFS" + strLiteralMaxRows +maxRows +
		// strLiteralCargo
		// + cargo);

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "'"
					+ " and CURRENT_ELIG_IND = 'A'"
					+ " and CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "'"
					+ " and DELETE_SW = 'N'"
					+ " and Payment_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " "
					+ " and (Payment_END_DT is null or Payment_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + ")");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByApprovedFS, query for Approved FS Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumAndDates(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "'"
					+ " and CURRENT_ELIG_IND = 'A'"
					+ " and CG_STATUS_CD = '"
					+ cargo.getCgStatusCd()
					+ "'"
					+ " and DELETE_SW = 'N'"
					+ " and CASE_NUM = "
					+ cargo.getCaseNum()
					+ " and Payment_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " "
					+ " and (Payment_END_DT is null or Payment_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + ")");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// REQUESTED BY INTERFACES
	/**
	 * Method findBySDXColachanges, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySDXColachanges(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findBySDXColachanges" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ "  AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND ='A' and REC_END_DT is null ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added for Ed-Services Search Screen for defect 211492
	/**
	 * Method findByCaseForServices, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseForServices(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseForServices " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' and current_elig_ind <> 'C' and program_cd in ('MA','CC','ME') ");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added for BI for defect 220119
	/**
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgAuthRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgAuthRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" EDG_NUM=" + cargo.getEdgNum() + " "
					+ strLiteralAndDeleteSWN + " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>="
					+ cargo.getPaymentEndDt() + strLiteralclparenthesis
					+ " AND PAYMENT_BEG_DT <=" + cargo.getPaymentBegDt() + "");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Added by Pravin Bhat for Reporting on 4/08/2005
	/**
	 * <code>findByAuthForfietDt<code> This findby fetches data based on ProgramCd, CurrentEligInd
	 * and ForfeitMonth.
	 *
	 * @param dt
	 *            java.sql.Date
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthForfietDt(java.sql.Date dt)
			throws GenericRunTimeException {

		/*
		 * String dtStr = (dt.getMonth() + 1) + "-" + (dt.getYear() + 1900); if
		 * (dtStr.length() == 6) { dtStr = "0" + dtStr; }
		 */
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append(" PROGRAM_CD = 'TF' and CURRENT_ELIG_IND = 'A' and "
					+ "order by edg_num, payment_beg_dt");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByAllProgramsRunMode, query by all Run Mode.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             //Parag
	 */
	// CCD CQ Id : BRGUS00052253
	// Balaji
	public EdEligibilityCargo[] findByCaseNumberForBenefitAmt(int maxRows,
			EdEligibilityCargo cargo)
			throws gov.state.nextgen.framework.exception.GenericRunTimeException {
		Debug.println("findByCaseNumberForBenefitAmt(" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		String whereClause = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		java.util.Date tempDate = new java.sql.Date(
				((java.util.Date) cargo.getPaymentBegDt()).getTime());
		try {
			String reqDt = DateFormatter.convSrcToDestinationDtFormat(
					sdf.format(tempDate), "yyyy-MM-dd", strLiteralMMMyy);
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ "  And EDG_NUM = "
					+ cargo.getEdgNum()
					+ " "
					+ " AND ( ("
					+ DAOSqlHelper.getANSISubstring(
							"cast (PAYMENT_BEG_DT as VARCHAR(10))", 4, 6)
					+ ") <= '"
					+ reqDt
					+ "' "
					+ " AND ( ("
					+ DAOSqlHelper.getANSISubstring(
							"cast (PAYMENT_END_DT as VARCHAR(10))", 4, 6)
					+ " >= '"
					+ reqDt
					+ "' or PAYMENT_END_DT IS NULL )) )	"
					+ " AND CURRENT_ELIG_IND in ('P','A') AND CG_STATUS_CD = 'AP' AND DELETE_SW='N' ";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This findBy is used to retrieve all Authorised and Psuedo Authorized
	 * Eligibility records
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthAndPsuedoAuth(int maxRows,
			long lCaseNum, Timestamp tsMaxEDM, Timestamp tsMinEDM)
			throws GenericRunTimeException {
		String clause = null;
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			clause = "Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('A', 'Q' ) "
					+ " AND REC_BEGIN_DT <=  ? "
					+ " AND (REC_END_DT  >=  ? OR " + " REC_END_DT  is Null ) "
					+ strLiteralOrderby2;

			params.add(lCaseNum);
			params.add(tsMaxEDM);
			params.add(tsMinEDM);

			SQLCommand command = getSqlCommandForUpdate(clause, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// New findBy Added for Alert 110 pending Verification.
	// CCD CQ Id : BRGUS00053734
	// Id : BRGUS00054411

	/**
	 * Method findByCurrentCaseEdgStatus, query by Case Number, Edg Number.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCurrentCaseEdgStatus(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCurrentCaseEdgStatus" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum() + " "
					+ " AND ((CG_STATUS_CD ='AP' "
					+ "    AND CURRENT_ELIG_IND='A') "
					+ "    OR (CG_STATUS_CD='PE' AND CURRENT_ELIG_IND ='P')) "
					+ "    AND DELETE_SW='N' " + "    AND REC_END_DT IS NULL ";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00051875 Fixed By Raveenkumar Govindasamy Ends here

	/**
	 * CCD CQ Id : BRGUS00059645 Id : BRGUS00059670 Added by Venu Dalayi for MI
	 * Screen Method to get StateApprovalInd for "AP" CgStatus Codes for a given
	 * period of begin & End dates,Case # and Edg #
	 */

	public EdEligibilityCargo[] findByExpeditedEdgCasesPBeginPEndDates(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Debug.println("findByExpeditedEdgCasesPBeginPEndDates"
				+ strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map map = new HashMap<String, Object>();
		try {
			String WHERE_CLAUSE_WITH_DATE = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND CG_STATUS_CD like('AP') AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " AND PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " AND REC_END_DT IS NULL)";
			String WHERE_CLAUSE_WITHOUT_DATE = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND CG_STATUS_CD like('AP') AND REC_END_DT IS NULL)";

			if (cargo.getPaymentBegDt() != null
					&& cargo.getPaymentEndDt() != null) {
				map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_CLAUSE_WITH_DATE);

			} else {
				map.put(FwConstants.READY_WHERE_CLAUSE,
						WHERE_CLAUSE_WITHOUT_DATE);
			}

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Def # BRGUS00056924 CCD CQ Id : BRGUS00059940 Id : BRGUS00059967 added on
	 * 07/26/2007
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return array EdEligibilityCargo
	 * @throws GenericRunTimeException
	 *             Chaitanya Kumar Ganta.
	 */
	public EdEligibilityCargo[] findBySerCaseNumEdgNum(int maxRows,
			long lCaseNum, long edgNum) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			String clause = "Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA + strLiteralWhereCaseNum2
					+ " AND EDG_NUM = ? "
					+ " AND CURRENT_ELIG_IND in ('P', 'Q' ) "
					+ strLiteralAndDeleteSWN + " AND PROGRAM_CD = 'SE' ";

			params.add(lCaseNum);
			params.add(edgNum);

			SQLCommand command = getSqlCommandForUpdate(clause, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00071486 Id : BRGUS00071776 Method findByCase, query by
	 * case #.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseForSERFInalPayment(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseForSERFInalPayment " + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		String whereClause = null;

		try {
			whereClause = " CASE_NUM ="
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N'  AND PROGRAM_CD = 'SE' AND PAYMENT_END_DT IS NOT NULL  ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Added By Srinivas Venna - Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereLastDispDt(int maxRows,
			long criteriaId, long sampleId, List datesList)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereLastDispDt >>>> maxRows= " + maxRows);
		try {
			List<Object> params = new ArrayList<Object>();
			StringBuffer query = new StringBuffer(
					strLiteralUpdateCrsamplecasefindings
							+ strLiteralWhereCCriteriaId
							+ strLiteralAndCsampleId
							+ strLiteralAndCreportIndP
							+ " AND C.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
							+ " FROM ED_ELIGIBILITY  A, CR_SAMPLE_CASE_FINDINGS B "
							+ strLiteralWhereAcsenumBcsenum
							+ " AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
							+ " AND B.CRITERIA_ID = ? "
							+ " AND B.SAMPLE_ID = ? " + strLiteralBReportIndP);
			query.append(" AND A.DI_ACTION_DT NOT BETWEEN ? AND ? ");
			query.append(" AND A.CASE_NUM = C.CASE_NUM) ");
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add((Timestamp) datesList.get(0));
			params.add((Timestamp) datesList.get(1));

			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			Map result = new HashMap();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			int count = ((BigDecimal) result.get("RESULTS")).intValue();

			if (count > 0) {
				EdEligibilityCargo cargos[] = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Added By Srinivas Venna - Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereDynaCondDates(int maxRows,
			long criteriaId, long sampleId, String columnName, Timestamp value)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereDynaCondDates >>>> maxRows= " + maxRows);
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			StringBuffer query = new StringBuffer(
					strLiteralUpdateCrsamplecasefindings
							+ strLiteralWhereCCriteriaId
							+ strLiteralAndCsampleId
							+ strLiteralAndCreportIndP
							+ " AND C.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
							+ " FROM ED_ELIGIBILITY  A, CR_SAMPLE_CASE_FINDINGS B "
							+ strLiteralWhereAcsenumBcsenum
							+ " AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
							+ " AND B.CRITERIA_ID = ? "
							+ " AND B.SAMPLE_ID = ? " + strLiteralBReportIndP);
			query.append(" AND A." + columnName + " <> ? ");
			query.append(" AND A.CASE_NUM = C.CASE_NUM) ");
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add(value);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = ((BigDecimal) result.get("RESULTS")).intValue();

			if (count > 0) {
				EdEligibilityCargo cargos[] = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Added By Srinivas Venna - Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereDynaCondSw(int maxRows,
			long criteriaId, long sampleId, String columnName, String value)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereDynaCondSw >>>> maxRows= " + maxRows);
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			StringBuffer query = new StringBuffer(
					strLiteralUpdateCrsamplecasefindings
							+ strLiteralWhereCCriteriaId
							+ strLiteralAndCsampleId
							+ strLiteralAndCreportIndP
							+ " AND C.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
							+ " FROM ED_ELIGIBILITY  A, CR_SAMPLE_CASE_FINDINGS B "
							+ strLiteralWhereAcsenumBcsenum
							+ " AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
							+ " AND B.CRITERIA_ID = ? "
							+ " AND B.SAMPLE_ID = ? " + strLiteralBReportIndP);
			query.append(" AND A." + columnName + " <> ? ");
			query.append(" AND A.CASE_NUM = C.CASE_NUM) ");
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add(value);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = (Integer) result.get(strLiteralResult);
			if (count > 0) {
				EdEligibilityCargo cargos[] = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00084709 Id : BRGUS00084732 Added By Srinivas Venna -
	 * Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereIncAmount(int maxRows,
			long criteriaId, long sampleId, String tableName,
			String columnName, String condition, double amount)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereIncAmount >>>> maxRows= " + maxRows);
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			String query = " UPDATE CR_SAMPLE_CASE_FINDINGS D SET D.REPORT_IND = 'N' "
					+ " WHERE D.CRITERIA_ID = ? "
					+ " AND D.SAMPLE_ID = ? "
					+ " AND D.REPORT_IND = 'P' "
					+ " AND D.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
					+ " FROM ED_ELIGIBILITY  A,  "
					+ tableName
					+ " B, CR_SAMPLE_CASE_FINDINGS C "
					+ " WHERE A.EDG_TRACE_ID = B.EDG_TRACE_ID "
					+ " AND A.CASE_NUM = C.CASE_NUM "
					+ " AND A.EDG_TRACE_ID = C.EDG_TRACE_ID "
					+ " AND B.CASE_NUM = C.CASE_NUM "
					+ " AND B.EDG_TRACE_ID = C.EDG_TRACE_ID "
					+ " AND C.CRITERIA_ID = ? "
					+ strLiteralAndCsampleId
					+ strLiteralAndCreportIndP
					+ " AND (B."
					+ columnName
					+ ") "
					+ condition + " ? " + " AND A.CASE_NUM = D.CASE_NUM) ";
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add(amount);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = (Integer) result.get(strLiteralResult);
			if (count > 0) {
				EdEligibilityCargo cargos[] = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Added By Srinivas Venna - Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereSumIncAmounts(int maxRows,
			long criteriaId, long sampleId, String condition, double amount)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereSumIncAmounts >> maxRows = " + maxRows);
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			String query = " UPDATE CR_SAMPLE_CASE_FINDINGS D SET D.REPORT_IND = 'N' "
					+ " WHERE D.CRITERIA_ID = ? "
					+ " AND D.SAMPLE_ID = ? "
					+ " AND D.REPORT_IND = 'P' "
					+ " AND D.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
					+ " FROM ED_ELIGIBILITY  A,  CR_SAMPLE_CASE_FINDINGS B, ED_ELIG_UN_INC_DTLS C "
					+ " WHERE A.EDG_TRACE_ID = B.EDG_TRACE_ID "
					+ " AND A.CASE_NUM = B.CASE_NUM "
					+ " AND A.EDG_TRACE_ID = C.EDG_TRACE_ID "
					+ " AND A.CASE_NUM = C.CASE_NUM "
					+ " AND B.CRITERIA_ID = ? "
					+ " AND B.SAMPLE_ID = ? "
					+ strLiteralBReportIndP
					+ " AND (to_number(C.RR_RETIREMENT_INC_AMT + C.VA_PENSION_INC_AMT)) "
					+ condition + " ? " + " AND D.CASE_NUM = A.CASE_NUM) ";
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add(amount);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = (Integer) result.get(strLiteralResult);
			if (count > 0) {
				EdEligibilityCargo cargos[] = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Added By Srinivas Venna - Program Measures
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFWhereRecoupmentAmount(int maxRows,
			long criteriaId, long sampleId, String condition)
			throws GenericRunTimeException {

		Debug.println("updateSFWhereRecoupmentAmount >>> maxRows = " + maxRows);
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			StringBuffer query = new StringBuffer(
					strLiteralUpdateCrsamplecasefindings
							+ strLiteralWhereCCriteriaId
							+ strLiteralAndCsampleId
							+ strLiteralAndCreportIndP
							+ " AND C.CASE_NUM  = (SELECT DISTINCT(A.CASE_NUM) "
							+ " FROM ED_ELIGIBILITY  A,  CR_SAMPLE_CASE_FINDINGS B "
							+ " WHERE A.EDG_TRACE_ID = C.EDG_TRACE_ID "
							+ " AND A.CASE_NUM = B.CASE_NUM "
							+ " AND B.CRITERIA_ID = ? "
							+ " AND B.SAMPLE_ID = ? " + strLiteralBReportIndP
							+ " AND B.CASE_NUM = C.CASE_NUM ");
			if ("Y".equals(condition)) {
				query.append(" AND A.RECOUPMENT_AMT < 0 ) ");
			} else {
				query.append(" AND A.RECOUPMENT_AMT is not null or  A.RECOUPMENT_AMT > 0 ) ");
			}
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = (Integer) result.get(strLiteralResult);
			if (count > 0) {
				EdEligibilityCargo[] cargos = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00064312 Id : BRGUS00064398
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNum(int maxRows, long caseNum,
			long edgNum) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + caseNum + strLiteralAndEdgNum
					+ edgNum + " AND CURRENT_ELIG_IND IN('A','C') "
					+ " AND BENEFIT_STATUS NOT IN ('DN','TN','DE') "
					+ " AND ACTIVITY_TYPE NOT IN ('IN') "
					+ " AND DELETE_SW = 'N' ORDER BY PAYMENT_END_DT DESC";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00064189 Id : BRGUS00064462
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNumList
	 *            String
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNums(int maxRows, long caseNum,
			String edgNumList) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + caseNum + " "
					+ strLiteralAndDeleteSWN + strLiteralAndEdgNumIn
					+ edgNumList + ")";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00064053 Id : BRGUS00065751 Method findBySerEdgsToClose
	 *
	 * @param maxRows
	 * @param caseNum
	 * @param reqDt
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySerEdgsToClose(int maxRows, long caseNum,
			Timestamp reqDt) throws GenericRunTimeException {
		String whereClause = null;
		try {
			whereClause = strLiteralCaseNum2
					+ caseNum
					+ strLiteralAndCgStatusCdAP
					+ " AND PROGRAM_CD = 'EA' AND "
					+ strLiteralCurrentEligIndInA
					+ " REQUEST_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(reqDt)
					+ strLiteralAndDeleteSWN
					+ " AND EDG_NUM NOT IN ( SELECT DISTINCT EDG_NUM FROM ED_ELIGIBILITY WHERE "
					+ strLiteralCaseNum2 + caseNum
					+ " AND PAYMENT_END_DT IS NULL AND PROGRAM_CD = 'EA' "
					+ " AND DELETE_SW = 'N' AND  CURRENT_ELIG_IND = 'A' )";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00067011 Id : BRGUS00067053 Method
	 * findByCaseEdgeCurrentIndA, query by Auth records.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNums
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgeCurrentIndA(int maxRows,
			long caseNum, String edgNums) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + caseNum + strLiteralAndEdgNumIn
					+ edgNums + ") " + strLiteralAndDeleteSwN
					+ " AND CURRENT_ELIG_IND ='A'"
					+ strLiteralAndPaymentEnddtisnull;

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Defect # BRGUS00067998 CCD CQ Id : BRGUS00068007 Id : BRGUS00068036
	 * Method findByAuthorizedEdgCases
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthorizedEdgCases(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthorizedEdgCases" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {

			String WHERE_CLAUSE = strLiteralCaseNum + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum() + " "
					+ " AND CURRENT_ELIG_IND = " + cargo.getCurrentEligInd()
					+ strLiteralAndDeleteSWN + " AND REC_END_DT IS NULL)";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_CLAUSE);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseForLastEDBCRun, query by Authorized and Cancel Record.
	 * BRGUS00053523
	 *
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseForLastEDBCRun(int maxRows,
			long lCaseNum, Timestamp tsMaxEDM, Timestamp tsMinEDM,
			Timestamp asOfDate) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			String clause = "Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in  ('A','C')  "
					+ " AND REC_BEGIN_DT <=  "
					+ DateFormatter.getDateForWhereClauseAnsi(tsMaxEDM)
					+ " AND (REC_END_DT  >=  "
					+ DateFormatter.getDateForWhereClauseAnsi(tsMinEDM)
					+ strLiteralOr
					+ " REC_END_DT  is Null )  "
					+ " AND EDBC_RUN_DT <  "
					+ DateFormatter.getDateForWhereClauseAnsi(asOfDate)
					+ " ORDER BY EDBC_RUN_DT desc,EDG_NUM desc,CREATE_DT desc,PAYMENT_BEG_DT ";

			params.add(lCaseNum);

			SQLCommand command = getSqlCommandForUpdate(clause, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00051993 Id : BRGUS00060381 Method findByCaseNumTraceId
	 *
	 * @param maxRows
	 *            int
	 * @param bdCaseNum
	 *            long
	 * @param edgTraceIdList
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumTraceId(int maxRows, long caseNum,
			String edgTraceIdList) throws GenericRunTimeException {
		String whereClause = null;
		try {
			whereClause = strLiteralCaseNum2 + caseNum + strLiteralAndDeleteSWN
					+ "  AND RES_TRF_SW = 'Y' " + strLiteralAndEdgTraceIdIn
					+ edgTraceIdList + ")";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);

		}

	}

	/**
	 * CCD CQ Id : BRGUS00071705
	 *
	 * Added by Yeshwanth Kattegummula SEP 20 2007
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findOpenCaseForEbtDemographics(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findOpenCaseForEbtDemographics" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		// StringBuffer SQL = new StringBuffer();
		try {
			String selectSQL = " SELECT CASE_NUM,EDG_NUM,PROGRAM_CD,SEMI_ANNUAL_REVIEW_DT,MID_CERT_END_DT FROM ED_ELIGIBILITY   "
					+ "WHERE (CASE_NUM = ? AND EDG_NUM = ? AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N')";

			params.add(cargo.getCaseNum());
			params.add(cargo.getEdgNum());

			SQLCommand command = getSqlCommandForUpdate(selectSQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00067551 Method findByCaseProgramCdFSExpedited.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNums
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramCdFSExpedited(int maxRows,
			long caseNum, String edgNums) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2
					+ caseNum
					+ strLiteralAndEdgNumIn
					+ edgNums
					+ ") AND  PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND = 'A' AND  DELETE_SW = 'N' AND FS_EXPEDITED_SW = 'Y' ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CCD CQ ID : BRGUS00073934
	// Id : BRGUS00074564
	/**
	 * method findBycaseNumAndCurEligP is used to retrieve the 'P' records for a
	 * given case number
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBycaseNumAndCurEligP(int maxRows,
			long caseNum) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + caseNum + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND IN ('P','V') ";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00102769 Id : BRGUS00107104
	 * <code>findBycaseNumAndCurEligNotInPAndT<code> This findby fetches authorized data based on Case number and Edg traceId
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBycaseNumAndCurEligNotInPAndT(int maxRows,
			long caseNum) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + caseNum + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND  NOT IN ('P','T') ";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00074766 Id : BRGUS00075125 Method
	 * findByHearingOverrideAndCurElig.
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByHearingOverrideAndCurElig(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		try {
			String clause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND HEARING_OVERRIDE_SW ='Y' "
					// + " AND CURRENT_ELIG_IND IN ('A','P')";
					+ " AND CURRENT_ELIG_IND IN ('P')";
			// END-BRGUS00186403

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ ID : Method findByCaseNumberQCTF . To Find the TANF Cases.
	 *
	 * @param maxRows
	 *            int
	 * @param Long
	 *            caseNum
	 * @param String
	 *            mmYYYY
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberQCTF(int maxRows, long caseNum,
			String mmYYYY) throws GenericRunTimeException {
		try {
			StringBuffer stb = new StringBuffer();
			stb.append(strLiteralCaseNum2 + caseNum
					+ strLiteralAndCgstatuscdinap);
			stb.append(" AND PROGRAM_CD IN ('TF') AND DELETE_SW = 'N' ");
			stb.append(" AND CURRENT_ELIG_IND = 'A' AND ");
			stb.append(strLiteraltruncpaymentbegdt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getLastDayOfMonth(Integer
									.valueOf(
											mmYYYY.substring(2)
													+ mmYYYY.substring(0, 2))
									.intValue()))
					+ strLiteraltruncpaymentenddt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getFirstDayOfMonth(mmYYYY))
					+ ") OR PAYMENT_END_DT IS NULL)     ");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumberQCFS . To Find the FS Cases. CCD ID :
	 * BRGUS00130910 ID: BRGUS00130931
	 *
	 * @param maxRows
	 *            int
	 * @param Long
	 *            caseNum
	 * @param String
	 *            mmYYYY
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberQCFS(int maxRows, long caseNum,
			long edgNum, String mmYYYY) throws GenericRunTimeException {
		try {
			StringBuffer stb = new StringBuffer("");
			stb.append(strLiteralCaseNum2 + caseNum + "  AND EDG_NUM= "
					+ edgNum + strLiteralAndCgstatuscdinap);
			stb.append(" AND PROGRAM_CD IN ('FS') AND DELETE_SW='N' ");
			stb.append(" AND CURRENT_ELIG_IND = 'A' AND ");
			stb.append(strLiteraltruncpaymentbegdt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getLastDayOfMonth(Integer
									.valueOf(
											mmYYYY.substring(2)
													+ mmYYYY.substring(0, 2))
									.intValue()))
					+ strLiteraltruncpaymentenddt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getFirstDayOfMonth(mmYYYY))
					+ strLiteralOrPaymentEndDtisNull);
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * method getFirstDayOfMonth is used to get the first day of given month
	 *
	 * @param mmYYYY
	 *            String
	 * @return Timestamp
	 */
	public static Timestamp getFirstDayOfMonth(String mmYYYY) {
		Calendar cal = Calendar.getInstance();
		cal.set(Integer.valueOf(mmYYYY.substring(2)).intValue(), Integer
				.valueOf(mmYYYY.substring(0, 2)).intValue() - 1, 1);
		java.util.Date dt = cal.getTime();
		return new Timestamp(dt.getTime());
		// return ts;
	}

	/**
	 * method getLastDayOfMonth is used to return the last day of a given month
	 *
	 * @param inputDate
	 *            int
	 * @return Timestamp
	 */
	public static Timestamp getLastDayOfMonth(int inputDate) {
		String datein = String.valueOf(inputDate);
		int year = Integer.parseInt(datein.substring(0, 4));
		int month = Integer.parseInt(datein.substring(4)) - 1;
		int day = 1;
		GregorianCalendar gc = new GregorianCalendar(year, month, day);
		day = gc.getActualMaximum(gc.DAY_OF_MONTH);
		gc = new GregorianCalendar(year, month, day);
		// Timestamp paydt = new Timestamp(gc.getTime().getTime());
		return new Timestamp(gc.getTime().getTime());
	}

	// BRGUS00127816-Begin-adunuthalas-Added condition for Program_Cd in ME
	/**
	 * Method findByCaseNumberQCFS . To Find the FS Cases. CCD ID :
	 * BRGUS00130910 ID : BRGUS00130931
	 *
	 * @param maxRows
	 *            int
	 * @param Long
	 *            caseNum
	 * @param String
	 *            mmYYYY
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberQCMA(int maxRows, long caseNum,
			long edgNum, String mmYYYY) throws GenericRunTimeException {

		try {
			StringBuffer stb = new StringBuffer("");
			stb.append(strLiteralCaseNum2 + caseNum + strLiteralAndEdgNum
					+ edgNum + strLiteralAndCgstatuscdinap);
			stb.append(" AND PROGRAM_CD IN ('MA','MC','ME') AND DELETE_SW = 'N' ");
			stb.append(" AND CURRENT_ELIG_IND = 'A' AND ");
			stb.append(strLiteraltruncpaymentbegdt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getLastDayOfMonth(Integer
									.valueOf(
											mmYYYY.substring(2)
													+ mmYYYY.substring(0, 2))
									.intValue()))
					+ strLiteraltruncpaymentenddt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getFirstDayOfMonth(mmYYYY))
					+ ") OR PAYMENT_END_DT IS NULL)     ");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00127816-End-adunuthalas-Added condition for Program_Cd in ME

	/**
	 * CCD CQ Id : BRGUS00080599 Id : BRGUS00081418 Method findByCaseNumTypeCode
	 * is used to query base on case number & type of assistance code
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumTypeCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumAndTypeCd " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralTypeOfAssistanceCd, cargo.getTypeOfAssistanceCd());
			map.put(strLiteralDeleteSw, "N");
			map.put(FwConstants.ORDER_BY_CLAUSE, "ORDER BY CREATE_DT DESC");
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * Defect Id : BRGUS00078213 Owner : Raveenkumar Govindasamy (ALERT TRACK)
	 * Date : 11/14/2007 Method findByEdgReqDtCertified is used to query base on
	 * Edg Number & Request Date
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgReqDtCertified(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByEdgReqDtCertified " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		String whereClause = null;

		try {
			whereClause = " EDG_NUM = "
					+ cargo.getEdgNum()
					+ "  AND REQUEST_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getRequestDt())
					+ "   AND REC_END_DT IS NULL "
					+ " AND EXISTS ( SELECT 1 FROM DC_CASE_PROGRAM P WHERE P.CASE_NUM = CASE_NUM AND P.PROG_CD='TF' AND P.EFF_END_DT IS NULL AND P.PROG_STATUS_CD='PE' ) ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Sys Defect ID :BRGUS00081972 Method findByCaseNumTOACd is used to query
	 * base on case number & type of assistance code for BV
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumTOACd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ "  AND TYPE_OF_ASSISTANCE_CD = "
					+ cargo.getTypeOfAssistanceCd()
					+ " AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND IN ('A','P') AND REC_END_DT IS NULL ORDER BY CREATE_DT DESC ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Requested for EDBC Batch
	/**
	 * Method findByEDBCProcessed, query by Processed record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             BRGUS00085099
	 */
	public EdEligibilityCargo[] findByCaseNumToScheduleRunEligibility(
			int maxRows, long lCaseNum) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			Timestamp sysdate = FwDateComparisons.getLocalesDate();
			String selectSQL = " Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2
					+ strLiteralAndDeleteSWN
					+ " AND PROGRAM_CD='SE'"
					+ strLiteralAndCurrentEligIndP
					+ " AND cast(EDBC_RUN_DT as VARCHAR(10))='"
					+ DateFormatter.stringHyphenToDateAnsi(sysdate.toString()
							.substring(0, 10)) + "'";

			params.add(lCaseNum);
			// params.add(sysdate);

			SQLCommand command = getSqlCommandForUpdate(selectSQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00090580 Id : BRGUS00090992 Method findByEDBCProcessed,
	 * query by Processed record.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @param tsEDBCRunDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             BRGUS00085099
	 */
	public EdEligibilityCargo[] findByCaseNumToScheduleCertification(
			int maxRows, long lCaseNum) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		// StringBuffer SQL = new StringBuffer();

		try {
			// Timestamp sysdate = FwDateComparisons.getLocalesDate();
			String selectSQL = "Select A.*, A.rowid "
					+ strLiteralFromEdEligibiltyA + strLiteralWhereCaseNum2
					+ strLiteralAndDeleteSWN + " AND PROGRAM_CD='SE'"
					+ strLiteralAndCurrentEligIndP;
			params.add(lCaseNum);
			SQLCommand command = getSqlCommandForUpdate(selectSQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Defect#BRGUS00084072::To find Cert End Date of an Edg.
	// CCD CQ Id : BRGUS00091784
	// Id : BRGUS00091854
	/**
	 * method findByCertEndDt is used to retrieve all the records for a given
	 * EDG
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCertEndDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCertEndDt" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {

			Map map = new HashMap<String, Object>();

			map.put(strLiteralEdgNum, cargo.getEdgNum());

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00097576 Id : BRGUS00098629 This is used generating
	 * alert for Spend Down
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumsSpendDown(int maxRows,
			Timestamp firstDayofMonth, Timestamp lastDayofMonth,
			Timestamp asOfDate) throws GenericRunTimeException {
		Debug.println("findByCaseNumsSpendDown" + strLiteralMaxRows + maxRows
				+ " firstDayofMonth=" + firstDayofMonth + " lastDayofMonth="
				+ lastDayofMonth);

		StringBuffer sqlClause = new StringBuffer();
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {

			sqlClause.append("SELECT CASE_NUM");
			sqlClause.append("  FROM ED_ELIGIBILITY");
			sqlClause.append(" WHERE MONITORING_DT >= ?");
			sqlClause.append("   AND MONITORING_DT <= ?");
			sqlClause.append("   AND TYPE_OF_ASSISTANCE_CD like 'G2%'");
			sqlClause.append("   AND PROGRAM_CD IN ('MA', 'ME')");
			sqlClause.append("   AND REC_END_DT IS NULL");
			sqlClause.append("   AND CG_STATUS_CD = 'AP'");
			sqlClause.append("   AND CURRENT_ELIG_IND = 'A'");
			sqlClause.append("   AND DELETE_SW = 'N'");
			sqlClause.append("   AND (case_num, program_cd) in");
			sqlClause.append("       (select dcp.case_num, dcp.prog_cd");
			sqlClause
					.append("          from dc_case_program_b dcp, dc_case_individual_b dci");
			sqlClause.append("         where dcp.eff_begin_dt <= ?");
			sqlClause
					.append("           and (dcp.eff_end_dt is null or dcp.eff_end_dt >= ?)");
			sqlClause.append("           and dcp.prog_cd in ('MA', 'ME')");
			sqlClause.append("           and dci.eff_begin_dt <= ?");
			sqlClause
					.append("           and (dci.eff_end_dt is null or dci.eff_end_dt >= ?)");
			sqlClause.append("           and dci.case_num = dcp.case_num");
			sqlClause.append("           and exists");
			sqlClause.append("         (select null");
			sqlClause
					.append("                  from dc_medical_deductions dcmd");
			sqlClause.append("                 where eff_begin_dt <= ?");
			sqlClause
					.append("                   and (eff_end_dt is null or eff_end_dt >= ?)");
			sqlClause
					.append("                   and dcmd.indv_id = dci.indv_id))");

			params.add(firstDayofMonth);
			params.add(lastDayofMonth);
			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			SQLCommand command = getSqlCommandForUpdate(sqlClause.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00108520 Id : BRGUS00108554 This method returns all the
	 * EDGs for MA,MC,ME programs
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMedicaidForProgramDenial(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(strLiteralFindByRecForProgramDenial + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);

		try {
			StringBuffer cond = new StringBuffer();
			// Defect# BRGUS00108134 - pulaguma - Adding Check for Program Code
			// ME
			cond.append(strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndDeleteSWN);
			if ("MA".equals(cargo.getProgramCd())
					|| "ME".equals(cargo.getProgramCd())) {
				cond.append(" AND PROGRAM_CD IN ('MA','ME')");
			} else {
				// Defect# BRGUS00108134 - pulaguma - Adding Check for Program
				// Code MC, correcting the query.
				cond.append(" AND PROGRAM_CD = 'MC'");
			}
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, cond.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00103240 Id : BRGUS00103343 BRGUS00102077 - It will pick
	 * up a record from EdEligibility table based on TOA, Status code, edge
	 * trace id, case num and program code.
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 * @author - poudyala
	 * @version 1 - Created.
	 */
	public EdEligibilityCargo[] findByEdgTraceIdProgramCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByEdgTraceIdProgramCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		EdEligibilityCargo[] colrows = null;

		try {

			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put("CG_STATUS_CD", cargo.getCgStatusCd());
			map.put(strLiteralTypeOfAssistanceCd, cargo.getTypeOfAssistanceCd());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralDeleteSw, "N");
			map.put(strLiteralCurrentEligInd, "A");

			Collection<EdEligibilityCargo> coll = getAll(map);

			colrows = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return colrows;
	}

	/**
	 * CCD CQ Id : BRGUS00103766 Id : BRGUS00104293 Retrieving records from
	 * edeligibility based SSI Type of assistance.
	 *
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumSsiToa(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumSsiToa " + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		String whereClause = null;
		try {
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ "  AND TYPE_OF_ASSISTANCE_CD IN ('TA22', 'TP13', 'SSIT', 'SSIA') AND DELETE_SW = 'N' ORDER BY CREATE_DT DESC ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00106357 Id : BRGUS00106472 Added for AL This is used
	 * for getting active FAP and the FIP which is closed This is to trigger MU
	 * trigger to get the penalty income removal
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByPenaltyIncomeRemoval(int maxRows,
			Timestamp firstDayofMonth, Timestamp lastDayofMonth)
			throws GenericRunTimeException {
		Debug.println("findByPenaltyIncomeRemoval" + strLiteralMaxRows
				+ maxRows + " firstDayofMonth=" + firstDayofMonth
				+ " lastDayofMonth=" + lastDayofMonth);

		StringBuffer sbSQL = new StringBuffer();
		try {
			sbSQL.append(" CURRENT_ELIG_IND = 'A'");
			sbSQL.append(" AND PROGRAM_CD = 'FS'");
			sbSQL.append(strLiteralAndDeleteSwN);
			sbSQL.append(" AND CG_STATUS_CD = 'AP'");
			sbSQL.append(" AND REC_END_DT IS NULL");
			sbSQL.append(strLiteralAndPaymentEnddtisnull);
			sbSQL.append(" AND CASE_NUM IN (SELECT CASE_NUM FROM ED_ELIGIBILITY");
			sbSQL.append(" WHERE CURRENT_ELIG_IND = 'A'");
			sbSQL.append(strLiteralAndDeleteSwN);
			sbSQL.append(" AND CG_STATUS_CD = 'TN'");
			sbSQL.append(" AND REC_END_DT IS NULL");
			sbSQL.append(strLiteralAndPaymentEnddtisnull);
			sbSQL.append(" AND PROGRAM_CD = 'TF'");
			sbSQL.append(" AND PAYMENT_BEG_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(firstDayofMonth)
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(lastDayofMonth)
					+ ")");

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sbSQL.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00109015 Id : BRGUS00109017 Added for AL Ref : CR 95045
	 * Method Name: findCaseStatusBySSN
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCaseStatusBySSN(int maxRows,
			EdEligibilityCargo cargo, Timestamp asOfDate)
			throws GenericRunTimeException {
		Debug.println("findCaseStatusBySSN" + strLiteralMaxRows + maxRows);
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		StringBuffer sbSQL = new StringBuffer();
		try {
			sbSQL.append("SELECT DISTINCT C.CASE_NUM FROM DC_INDV A, ED_ELIGIBILITY C, ED_INDV_ELIGIBILITY D, DC_INDIVIDUAL_ALIEN E "
					+ "JOIN DC_DEMOGRAPHICS B ON(A.INDV_ID = B.INDV_ID)"
					+ "LEFT OUTER JOIN DC_INDIVIDUAL_ALIEN E ON (A.INDV_ID = E.INDV_ID())");
			// Ends BRGUS00107823 by Anandp on 04/21/2008
			sbSQL.append(" WHERE (A.SSN_VRF_CD = 'NA' OR A.SSN_VRF_CD IS NULL)");
			sbSQL.append(" AND A.DEATH_DT IS NULL");
			sbSQL.append(" AND B.SSN_APPLIED_FOR_SW = 'Y'");
			// Starts BRGUS00107823 by Anandp on 04/29/2008
			sbSQL.append(" AND B.SSN_APPLICATION_VRF_CD NOT IN ('NA','CV')");
			// Ends BRGUS00107823 by Anandp on 04/29/2008
			sbSQL.append(" AND C.CG_STATUS_CD ='AP'");
			sbSQL.append(" AND C.DELETE_SW = 'N'");
			sbSQL.append(" AND C.CURRENT_ELIG_IND = 'A'");
			sbSQL.append(" AND D.PART_STATUS_CD IN ('EA','EC')");
			// Starts BRGUS00095045 by Anandp on 04/28/2008
			sbSQL.append(" AND (E.ALIEN_STATUS_CD = 'DO' OR E.ALIEN_STATUS_CD IS NULL)");
			// Ends BRGUS00095045 by Anandp on 04/28/2008
			sbSQL.append(" AND C.PROGRAM_CD IN ('MA','ME','MC','FS','TF')");
			sbSQL.append(" AND C.TYPE_OF_ASSISTANCE_CD NOT IN ('FC4E','FCDW','TP45','RUMM','AS4E','ASDW')");
			sbSQL.append(" AND A.INDV_ID = D.INDV_ID");
			// Starts BRGUS00095045 by Anandp on 04/28/2008
			// Ends BRGUS00095045 by Anandp on 04/28/2008
			sbSQL.append(" AND C.CASE_NUM = D.CASE_NUM");
			sbSQL.append(" AND C.EDG_TRACE_ID = D.EDG_TRACE_ID");
			// Starts BRGUS00107823 by Anandp on 04/29/2008
			sbSQL.append(" AND (B.EFF_BEGIN_DT <= TRUNC(?)  OR ( B.EFF_END_DT IS NULL OR  B.EFF_END_DT >= TRUNC(?)))");
			sbSQL.append(" AND (E.EFF_BEGIN_DT <= TRUNC(?)  OR ( E.EFF_END_DT IS NULL OR  E.EFF_END_DT >= TRUNC(?)))");
			// Ends BRGUS00107823 by Anandp on 04/29/2008
			sbSQL.append(" AND C.REC_END_DT IS NULL");
			sbSQL.append(" ORDER BY C.CASE_NUM");

			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			params.add(asOfDate);
			// Ends BRGUS00107823 by Anandp on 04/29/2008
			SQLCommand command = getSqlCommandForUpdate(sbSQL.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00106518 Id : BRGUS00107601 BRGUS00077376 - bhattaj -
	 * Used for triggering DHS-022-A
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgEdgTraceID(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseEdgEdgTraceID" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralEdgTraceId, cargo.getEdgTraceId());
			map.put(strLiteralDeleteSw, "N");
			map.put(strLiteralCurrentEligInd, "A");

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00110841 - Non Coop CR 84665 padmanabhunip
	 *
	 * @param maxRows
	 *            int
	 * @param ArrayList
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseCurrEligIndTOA(int maxRows, List args)
			throws GenericRunTimeException {
		Debug.println("findByCaseCurrEligIndTOA" + strLiteralMaxRows + maxRows
				+ " arguments=" + args);

		long caseNum = ((Long) args.get(0)).longValue();
		String toa = (String) args.get(1);
		String currEligInd = (String) args.get(2);

		StringBuffer clause = new StringBuffer();

		try {

			clause.append(strLiteralCaseNum2 + caseNum);
			clause.append(strLiteralAndDeleteSWN);

			if (toa != null) {
				clause.append(" AND TYPE_OF_ASSISTANCE_CD IN ( ");
				clause.append(toa);
				clause.append(" )");
			}
			if (toa != null) {
				clause.append(" AND CURRENT_ELIG_IND IN ( ");
				clause.append(currEligInd);
				clause.append(" )");
			}
			clause.append(" AND PAYMENT_END_DT IS NULL ");
			clause.append(" ORDER BY EDG_TRACE_ID DESC");// BRGUS00120401 --
															// padmanabhunip

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// End BRGUS00110841

	/**
	 * BRGUS00112739 bhattaj - Gets last EDBC run records for the EDG
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgForLastEDBCRun(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		String whereClause = null;
		try {
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND  EDG_NUM = "
					+ cargo.getEdgNum()
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('A','C') "
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndEdbcrundt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ " ORDER BY EDBC_RUN_DT DESC, PAYMENT_BEG_DT DESC";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This purpose method is to get latest segment given list of type of
	 * assistance codes, case, payment end date
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @param String
	 *            List of Type of Assistance code
	 * @return array of EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumLTOA(int maxRows,
			EdEligibilityCargo cargo, String listOfTOA)
			throws GenericRunTimeException {
		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('A', 'P') "
					+ " AND TYPE_OF_ASSISTANCE_CD IN ("
					+ listOfTOA
					+ ") "
					+ " AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT > "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ") "
					+ " ORDER BY PAYMENT_BEG_DT DESC, TYPE_OF_ASSISTANCE_CD, CURRENT_ELIG_IND ASC ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Defect ID : BRGUS00106053 Date : 06/10/2008 Owner : GovindasamyR Fix :
	 * Spend Down changes.
	 */
	/**
	 * Method findByCaseEdgNum, query by Edg Num.
	 *
	 * @param maxRows
	 *            int
	 * @param aCaseNum
	 *            long
	 * @param aEdgNum
	 *            long
	 * @param aBenefitMonth
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgNumPayPeriod(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		StringBuffer WHERE_CLAUSE = new StringBuffer();
		try {
			WHERE_CLAUSE.append(strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ "  AND CG_STATUS_CD = 'AP' ");
			WHERE_CLAUSE
					.append(" AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' ");
			WHERE_CLAUSE.append(" AND (  (PAYMENT_BEG_DT >= "
					+ DateHandler.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ "  AND PAYMENT_END_DT<= "
					+ DateHandler.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " ) ");
			WHERE_CLAUSE.append("        OR  ");
			WHERE_CLAUSE.append("        (PAYMENT_BEG_DT <= "
					+ DateHandler.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " AND (PAYMENT_END_DT IS NULL  OR PAYMENT_END_DT <= "
					+ DateHandler.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + " ))");
			WHERE_CLAUSE.append(" 	   ) ");
			WHERE_CLAUSE.append(" ORDER BY PAYMENT_BEG_DT DESC ");

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_CLAUSE.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00117223 Id : BRGUS00117336 This purpose method is to
	 * get cancelled reinstatement segments by given EDBC_RUN_DT
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return array of EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCancelRecForReInstatement(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND CAST(EDBC_RUN_DT as VARCHAR(10)) = CAST("
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ " as VARCHAR(10)) AND PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CG_STATUS_CD = 'AP' "
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('C') AND ACTIVITY_TYPE = 'RE' "
					+ " ORDER BY PAYMENT_BEG_DT DESC ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD CQ Id : BRGUS00117430 Id : BRGUS00117511 This purpose method is to
	 * get cancelled reinstatement segments by given EDBC_RUN_DT
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            String
	 * @return array of EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdEligInfo(int maxRows,
			String caseNum) throws GenericRunTimeException {
		// Debug.println("findByCaseNumSsiToa " + strLiteralMaxRows +maxRows + "
		// cargo=" + cargo);

		// long caseNumber = 0, edgeID = 0;
		// Timestamp reqDate;
		// int month;
		StringBuffer sqlQuery = new StringBuffer();

		try {
			sqlQuery.append(" CURRENT_ELIG_IND='A' AND CG_STATUS_CD='TN' AND DELETE_SW='N' "
					+ " AND PROGRAM_CD='TF' AND TYPE_OF_ASSISTANCE_CD='TP01'  "
					+ " AND PAYMENT_END_DT IS NULL AND CASE_NUM= "
					+ Long.valueOf(caseNum).longValue());
			// AND CG_STATUS_CD='TN'
			// AND TYPE_OF_ASSISTANCE_CD='TP09'
			// DELETE_SW='Y' AND
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sqlQuery.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00118359 - Arakalas - To find Active/Pending FAP case
	/**
	 * CCD CQ Id : BRGUS00120360 Id : BRGUS00121140 This method if a given case
	 * is Active/Pending FAP case
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            String
	 * @return array of EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByActiveFAPCase(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseEdgEdgTraceID" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		String whereClause = null;

		try {
			whereClause = "  CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ " AND PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND IN ('A','P') "
					+ " AND CG_STATUS_CD = 'AP' AND PAYMENT_END_DT IS NULL ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Gajda BRGUS00120504
	/**
	 * Method findByClsdCaseNumProgramCd, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param pgms
	 *            ArrayList
	 * @param caseNum
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByClsdCaseNumProgramCd(int maxRows,
			List pgms, String caseNum) throws GenericRunTimeException {
		StringBuffer sb = new StringBuffer();
		sb.append("EdEligibilityDAO-findByClsdCaseNumProgramCd : ");
		Debug.println(sb.toString());
		StringBuffer sbClause = new StringBuffer();
		try {
			sbClause.append(" PROGRAM_CD IN (");
			int iPgmSize = pgms.size();
			for (int i = 0; i < iPgmSize; i++) {
				sbClause.append("'");
				sbClause.append(pgms.get(i));
				sbClause.append("'");
				// clause +="'"+pgms.get(i)+"'";
				if (!((i + 1) == pgms.size())) {
					sbClause.append(",");
				}
				// clause += ",";
			}
			// clause
			// += sbClause.toString() + ") AND CASE_NUM = ? AND DELETE_SW='N'
			// AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND
			// CG_STATUS_CD = 'AP' ";
			sbClause.append(") AND CASE_NUM = "
					+ Long.parseLong(caseNum)
					+ " AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD in ('TN','DN') ");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sbClause.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			Debug.println(sb + " exception - " + ex.toString());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	// CCD CQ ID : BRGUS00121082
	// Id : BRGUS00121130
	/**
	 * This method fetches data based on case number, program cd, payment begin
	 * date and payment end date.
	 *
	 * @param maxRows
	 * @param caseNum
	 * @param mmYYYY
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberProgramCD(int maxRows,
			long caseNum, long edgNum, String mmYYYY)
			throws GenericRunTimeException {
		try {
			StringBuffer stb = new StringBuffer("");
			stb.append(strLiteralCaseNum2 + caseNum + "  AND   EDG_NUM = "
					+ edgNum + "");
			stb.append(" AND PROGRAM_CD IN ('FS') AND DELETE_SW = 'N' ");
			stb.append(" AND CURRENT_ELIG_IND = 'A' AND ");
			stb.append(strLiteraltruncpaymentbegdt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getLastDayOfMonth(Integer
									.valueOf(
											mmYYYY.substring(2)
													+ mmYYYY.substring(0, 2))
									.intValue()))
					+ strLiteraltruncpaymentenddt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getFirstDayOfMonth(mmYYYY))
					+ ") OR PAYMENT_END_DT IS NULL)");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumberProgramCode . To Find the FS Cases.
	 *
	 * @param maxRows
	 *            int
	 * @param Long
	 *            caseNum
	 * @param String
	 *            mmYYYY
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberProgramCode(int maxRows,
			long caseNum, String mmYYYY) throws GenericRunTimeException {
		// String whereClause = null;
		try {
			StringBuffer stb = new StringBuffer("");
			stb.append(strLiteralCaseNum2 + caseNum
					+ strLiteralAndCgstatuscdinap);
			stb.append(" AND PROGRAM_CD = 'FS' AND DELETE_SW = 'N' ");
			stb.append(" AND CURRENT_ELIG_IND = 'A' AND ");
			stb.append(strLiteraltruncpaymentbegdt
					+ DateFormatter
							.getDateForWhereClauseAnsi(getLastDayOfMonth(Integer
									.valueOf(
											mmYYYY.substring(2)
													+ mmYYYY.substring(0, 2))
									.intValue()))
					+ " ) AND ( TRUNC(PAYMENT_END_DT) >= TRUNC("
					+ DateFormatter
							.getDateForWhereClauseAnsi(getFirstDayOfMonth(mmYYYY))
					+ " ) OR PAYMENT_END_DT IS NULL)");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// End-BRGUS00119128-adunuthalas-Added method to retrieve data from
	// ed_eligibility table based on case number, Status Cd, Program Cd,
	// Current elig indicator, Payment begin date and Payment End Date.

	/**
	 * Added for CQ BRGUS00121840 Method findByOverrideSw, query by case_num,
	 * edbc_run_dt, edg_override_sw, delete_sw
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByOverrideSw(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String SELECT_SQL_CLAUSE = "SELECT CASE_NUM, EDG_NUM, EDG_TRACE_ID,"
				+ " PROGRAM_CD, TYPE_OF_ASSISTANCE_CD, CURRENT_ELIG_IND, CG_STATUS_CD,"
				+ " HEARING_OVERRIDE_SW FROM ED_ELIGIBILITY WHERE CASE_NUM = ? AND DELETE_SW = 'N'"
				+ " AND CURRENT_ELIG_IND = 'A' AND EDBC_RUN_DT = ? AND EDG_OVERRIDE_SW = 'Y'";
		try {

			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getEdbcRunDt()));
			// Ends BRGUS00107823 by Anandp on 04/29/2008
			SQLCommand command = getSqlCommandForUpdate(SELECT_SQL_CLAUSE,
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00164082 - NaredlaS - COMMA was missing in the select clause,
	// corrected it
	/**
	 * ID : BRGUS00124996 Method findByCaseNumEdgNumForSS, query by case_num,
	 * edbc_run_dt, program_cd, edg_num delete_sw
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNumForSS(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			String SELECT_SQL_CLAUSE = "SELECT EDG_TRACE_ID, ELIGIBILITY_BEG_DT, ELIGIBILITY_END_DT, "
					+ " TYPE_OF_ASSISTANCE_CD, NEGATIVE_ACTION_EFF_DT, CG_STATUS_CD "
					+ " FROM ED_ELIGIBILITY WHERE CASE_NUM = "
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSwN
					+ " AND CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = 'SS' AND EDBC_RUN_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEdbcRunDt())
					+ strLiteralAndEdgNum
					+ cargo.getEdgNum() + " ";
			SQLCommand command = getSqlCommandForUpdate(SELECT_SQL_CLAUSE,
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * CCD ID : BRGUS00128905 ID : BRGUS00129139 Method
	 * findBySTFSPotentialEligPendSW, query for STFS
	 *
	 * @author KannegantiK
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findBySTFSPotentialEligPendSW(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		try {
			String SQL_SELECT = "select distinct(a.edg_num),"
					+ "a.edg_trace_id,a.type_of_assistance_cd,"
					+ "a.REQUEST_DT,a.STFS_POTENTIAL_ELIG_BEGIN_DT,"
					+ "a.STFS_POTENTIAL_ELIG_END_DT,"
					+ "a.STFS_POTENTIAL_BENEFIT_AMT,a.CURRENT_ELIG_IND,"
					+ "a.PAYMENT_BEG_DT from ed_eligibility a, Ed_Indv_Ltc_Pending_Reason b"
					+ " where a.case_num = b.case_num  and "
					+ "a.edg_trace_id = b.edg_trace_id and a.case_num =? "
					+ " and a.PROGRAM_CD = 'TF'and a.TYPE_OF_ASSISTANCE_CD "
					+ "in ('TP01','TP71') and a.CURRENT_ELIG_IND IN('P','A') "
					+ "and a.DELETE_SW = 'N' and b.pending_reason_cd='1026' "
					+ "and (a.STFS_POTENTIAL_ELIG_SW = 'Y' or "
					+ "a.STFS_POTENTIAL_ELIG_BEGIN_DT is not null) "
					+ "order by a.CURRENT_ELIG_IND DESC,a.PAYMENT_BEG_DT DESC";
			params.add(cargo.getCaseNum());
			SQLCommand command = getSqlCommandForUpdate(SQL_SELECT, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * WR ID : BRGUS00131154 DEV Request ID : BRGUS00131158 ID : BRGUS00131335
	 * Method BRGUS00131158, query for BI Manual Issuance
	 *
	 * @author dalayiv
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgDeleteSw(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseEdgDeleteSw" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);

		try {
			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralDeleteSw, "N");

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Added for IN-Bendex (COLA Changes) To check whether to trigger Mass
	 * Update or not based on the indv id passed Method Name:
	 * findMUCOLAUpdateByIndvId
	 *
	 * @author AnandP on 11/17/2008
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findMUCOLAUpdateByIndvId(int maxRows,
			String indvID, String toaCode) throws GenericRunTimeException {
		Debug.println("findMUCOLAUpdateByIndvId" + strLiteralMaxRows + maxRows);

		StringBuffer whereClause = new StringBuffer("");
		try {
			whereClause
					.append(" CASE_NUM IN (SELECT CASE_NUM FROM DC_CASE_INDIVIDUAL");
			whereClause.append(" WHERE INDV_ID = "
					+ Long.valueOf(indvID).longValue()
					+ " AND EFF_BEGIN_DT <= CURRENT_TIMESTAMP");
			whereClause
					.append(" AND (EFF_END_DT IS NULL OR EFF_END_DT >= CURRENT_TIMESTAMP))");
			whereClause
					.append(" AND TYPE_OF_ASSISTANCE_CD = '" + toaCode + "'");
			whereClause
					.append(" AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N'");
			whereClause
					.append(" AND CG_STATUS_CD = 'AP' AND CG_ELIG_RSLT_CD = 'PS' AND REC_END_DT IS NULL");

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method Name: findByMedicaidForProgramDenialTP
	 *
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMedicaidForProgramDenialTP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println(strLiteralFindByRecForProgramDenial + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);

		try {
			StringBuffer cond = new StringBuffer();
			// Defect# BRGUS00108134 - pulaguma - Adding Check for Program Code
			// ME
			cond.append(strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndDeleteSWN);
			if ("MA".equals(cargo.getProgramCd())
					|| "ME".equals(cargo.getProgramCd())) {
				cond.append(" AND PROGRAM_CD IN ('MA','ME')");
			} else {
				// Defect# BRGUS00108134 - pulaguma - Adding Check for Program
				// Code MC, correcting the query.
				cond.append(" AND PROGRAM_CD = 'MC'");
			}
			cond.append(" AND CURRENT_ELIG_IND IN('P','T') ");
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, cond.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BEGIN-BRGUS00132741-upadhyayulag-New finder added
	/**
	 * Method Name: findCaseIndvByDOBDt The finder gets the individuals who turn
	 * 3 months , 1,16,17,18,20,60,65 years old in the month which is passed
	 * .Also checks what programs these individuals are active in. This was
	 * created for improving the performance of the program.
	 *
	 * @author Krishnap1 on 1/16/2009
	 * @param maxRows
	 *            int
	 * @param startDt
	 *            Timestamp
	 * @param beginDt
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCaseIndvByDOBDt(int maxRows,
			Timestamp startDt, Timestamp beginDt)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		// StringBuffer SQL = new StringBuffer();
		try {

			String SELECTSQL = "SELECT PROGRAM_CD,C.CASE_NUM CASE_NUM,TYPE_OF_ASSISTANCE_CD, "
					+ " D.PART_STATUS_CD FIN_ELIG_RSLT_CD, "
					+ " B.DOB_DT SP_REVIEW_DT FROM ED_ELIGIBILITY A, DC_INDV B,DC_CASE_INDIVIDUAL_B C, "
					+ " ED_INDV_ELIGIBILITY D WHERE C.INDV_ID=B.INDV_ID  "
					+ " AND A.CASE_NUM=C.CASE_NUM AND D.CASE_NUM=A.CASE_NUM "
					+ " AND D.EDG_TRACE_ID = A.EDG_TRACE_ID  AND D.INDV_ID=C.INDV_ID "
					+ " AND program_cd IN ('MA', 'ME', 'MC', 'TF', 'FS') "
					+ " AND current_elig_ind = 'A' AND CG_STATUS_CD = 'AP' "
					+ " AND type_of_assistance_cd IN ('TP01','TP09','TP13','TP21','TP22','TP43','TP44','G2UM','RAPC')"
					+ " AND ( DOB_DT BETWEEN (?-INTERVAL '3' MONTH) AND (TRUNC(?-INTERVAL '3' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '12' MONTH) AND (TRUNC(?-INTERVAL '12' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '72' MONTH) AND (TRUNC(?-INTERVAL '72' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY)  "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '216' MONTH) AND (TRUNC(?-INTERVAL '216' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '204' MONTH) AND (TRUNC(?-INTERVAL '204' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '228' MONTH) AND (TRUNC(?-INTERVAL '228' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '252' MONTH) AND (TRUNC(?-INTERVAL '252' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '192' MONTH) AND (TRUNC(?-INTERVAL '192' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '720' MONTH) AND (TRUNC(?-INTERVAL '720' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) "
					+ " OR DOB_DT BETWEEN (?-INTERVAL '780' MONTH) AND (TRUNC(?-INTERVAL '780' MONTH) + INTERVAL '1' MONTH - INTERVAL '1' DAY) )"
					+ " AND rec_end_dt IS NULL AND A.delete_sw = 'N' AND B.DELETE_SW='N' ";

			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(startDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(beginDt));

			SQLCommand command = getSqlCommandForUpdate(SELECTSQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00132741

	// BEGIN-BRGUS00147144-upadhyayulag-New finder added
	/**
	 * Method findByCaseProgramCDForFsStimulus, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramCDForFsStimulus(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseProgramCDForFsStimulus" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ strLiteralAndProgramCd
					+ cargo.getProgramCd()
					+ strLiteralAndDeleteSWN
					+ "AND CURRENT_ELIG_IND IN ('A','C','W','T','P','V','D','R'))";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00147144

	/**
	 * @author JosephI1
	 *
	 *         <li>The <code>findByCaseNumEDGProgToaDetails</code> fetches the
	 *         list of approved TOA's and Prog's for the given caseNum's String.
	 *         </li>
	 *
	 * @param maxRows
	 * @param caseNums
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEDGProgToaDetails(int maxRows,
			String caseNums) throws GenericRunTimeException {
		// StringBuffer toas = null;
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		try {

			StringBuffer query = new StringBuffer();
			query.append(" SELECT CASE_NUM, EDG_NUM, CG_STATUS_CD, DELETE_SW, CURRENT_ELIG_IND, ");
			query.append(" PROGRAM_CD, TYPE_OF_ASSISTANCE_CD ");
			query.append(" FROM ED_ELIGIBILITY ");
			// BEGIN-BRGUS00139724-upadhyayulag-Modify the query to include
			// case_num to increase performance
			query.append(" WHERE (EDG_NUM, CASE_NUM, TYPE_OF_ASSISTANCE_CD, PAYMENT_BEG_DT) IN ");
			query.append("(SELECT DISTINCT EDG_NUM, CASE_NUM, TYPE_OF_ASSISTANCE_CD , MAX(PAYMENT_BEG_DT) PAYMENT_BEG_DT ");
			query.append(" FROM ED_ELIGIBILITY ");
			// chakalamb added CG_STATUS_CD = 'AP'
			query.append(" WHERE (CASE_NUM IN( " + caseNums + " ) ");
			query.append(" AND DELETE_SW ='N' AND CURRENT_ELIG_IND ='A' AND CG_STATUS_CD = 'AP' and PAYMENT_END_DT is null) ");
			query.append(" GROUP BY TYPE_OF_ASSISTANCE_CD ,EDG_NUM, CASE_NUM) ");
			// END-BRGUS00139724
			// chakalamb added CG_STATUS_CD = 'AP'
			query.append("AND DELETE_SW ='N' AND CURRENT_ELIG_IND ='A' AND CG_STATUS_CD = 'AP' AND PAYMENT_END_DT is null ORDER BY EDG_NUM ");

			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseProgramCDForAltPayee, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramCDForAltPayee(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseProgramCDForAltPayee" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);

		try {
			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralEdgNum, cargo.getEdgNum());
			map.put(strLiteralDeleteSw, "N");

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseNumProgramCdForNotices, query by Pgm Code. This method
	 * is used for the IN-SSPNT-ONR and IN-EBTMF-ONR batches to improve
	 * performace.
	 *
	 * @param maxRows
	 *            int
	 * @param pgms
	 *            ArrayList
	 * @param caseNum
	 *            String
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumProgramCdForNotices(int maxRows,
			List pgms, String caseNum) throws GenericRunTimeException {
		StringBuffer sb = new StringBuffer();
		sb.append("EdEligibilityDAO-findByCaseNumProgramCdForNotices : ");
		Debug.println(sb.toString());
		StringBuffer sbClause = new StringBuffer();
		try {
			sbClause.append("WHERE PROGRAM_CD IN (");
			int iPgmSize = pgms.size();
			for (int i = 0; i < iPgmSize; i++) {
				sbClause.append("'");
				sbClause.append(pgms.get(i));
				sbClause.append("'");
				// clause +="'"+pgms.get(i)+"'";
				if (!((i + 1) == pgms.size())) {
					sbClause.append(",");
				}
				// clause += ",";
			}
			sbClause.append(") AND CASE_NUM = "
					+ Long.parseLong(caseNum)
					+ " AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' ");
			String whereClause = "SELECT CASE_NUM FROM ED_ELIGIBILITY " + " "
					+ sbClause.toString();
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			Debug.println(sb + " exception - " + ex.toString());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	/**
	 * CCD CQ Id : Id : Gajdat BRGUS00160712
	 *
	 * @param maxRows
	 *            int
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNumCDC(int maxRows,
			long caseNum, long edgNum) throws GenericRunTimeException {

		try {
			String clause = strLiteralCaseNum2 + caseNum + strLiteralAndEdgNum
					+ edgNum + " AND CURRENT_ELIG_IND IN('A','C') "
					+ " AND BENEFIT_STATUS NOT IN ('DN','TN')"
					+ strLiteralAndPaymentEnddtisnull
					+ " AND CG_STATUS_CD = 'AP'" + " AND PROGRAM_CD = 'CD'"
					+ " AND DELETE_SW = 'N' ORDER BY EDG_TRACE_ID DESC";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BEGIN-BRGUS00161264-upadhyayulag-New finder added
	/**
	 * Method findByCaseEdgCgStatus is used to retrieve the authorized ongoing
	 * approved records for a given Case Number & EDG number
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgCgStatus(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		String whereClause = null;
		try {
			whereClause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ " AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' "
					+ "AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00161264

	// BEGIN-BRGUS00164017-upadhyayulag-New finder added for botlag
	/**
	 * Method findByCaseDILastEDBCRun, query by Authorized and Cancel Record. WR
	 * # BRGUS00164017
	 *
	 * @param lCaseNum
	 *            long
	 * @param tsMaxEDM
	 *            Timestamp
	 * @param tsMinEDM
	 *            Timestamp
	 * @param asOfDate
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseDILastEDBCRun(int maxRows,
			long lCaseNum, Timestamp tsMaxEDM, Timestamp tsMinEDM,
			Timestamp asOfDate) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			String clause = "SELECT A.*, A.ROWID " + "FROM ED_ELIGIBILITY A "
					+ " WHERE CASE_NUM = ?"
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('A','C') "
					+ " AND PROGRAM_CD IN('MA','ME','MC') "
					+ " AND REC_BEGIN_DT <= ? "
					+ " AND (REC_END_DT  >= ? OR "
					+ " REC_END_DT  is Null ) "
					+ " AND EDBC_RUN_DT < ?"
					// BRGUS00173848-upadhyayulag-Change the order by
					+ " ORDER BY EDG_NUM ASC,EDBC_RUN_DT DESC,EDG_TRANSACTION_ID DESC";
			params.add(lCaseNum);
			params.add(DateFormatter.getDateForWhereClauseAnsi(tsMaxEDM));
			params.add(DateFormatter.getDateForWhereClauseAnsi(tsMinEDM));
			params.add(DateFormatter.getDateForWhereClauseAnsi(asOfDate));
			SQLCommand command = getSqlCommandForUpdate(clause, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00164017

	// BEGIN-BRGUS00160249-upadhyayulag-New finder added
	/*
	 * Method findByHKPresumptiveElig. @param maxRows int @param caseNum long
	 * 
	 * @param edgNum String @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByHKPresumptiveElig(int maxRows,
			long caseNum, String edgNum) throws GenericRunTimeException {

		try {
			Map map = new HashMap<String, Object>();

			map.put(strLiteralCaseNum1, caseNum);
			map.put(strLiteralEdgNum, edgNum);
			map.put(strLiteralDeleteSw, "N");
			map.put(strLiteralCurrentEligInd, "A");

			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00160249

	/*
	 * Method findByQcDenials1 @param maxRows int @param begDt Timestamp @param
	 * endDt Timestamp @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcDenials1(int maxRows, Timestamp begDt,
			Timestamp endDt) throws GenericRunTimeException {

		String sql = null;
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			sql = "select"
					+ " case_num, edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " from ed_eligibility e where"
					+ " e.program_cd = 'FS' and e.type_of_assistance_cd = 'TP09'"
					+ " AND e.edbc_run_dt >= ?"
					+ " AND e.edbc_run_dt < ?"
					+ " and e.CURRENT_ELIG_IND in ('A','C') and e.DELETE_SW = 'N'"
					+ " and (e.CG_STATUS_CD = 'DN' or (e.cg_status_cd = 'TN' and e.activity_type = 'PR'))";

			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * Method findByQcDenials2 @param maxRows int @param begDt Timestamp @param
	 * endDt Timestamp @param negBegDt Timestamp @param negEndDt Timestamp
	 * 
	 * @return EdEligibilityCargo[] @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcDenials2(int maxRows, Timestamp begDt,
			Timestamp endDt, Timestamp negBegDt, Timestamp negEndDt)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = "select /*+ parallel(edtmp)*/"
					+ " case_num, edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " from ed_eligibility edtmp"
					+ " where  edtmp.program_cd = 'FS'"
					+ " and edtmp.payment_beg_dt >= ?"
					+ " and edtmp.payment_beg_dt < ?"
					+ " AND ((edtmp.negative_action_eff_dt >= ?"
					+ " AND edtmp.negative_action_eff_dt < ?)"
					+ " or edtmp.edbc_run_dt = edtmp.negative_action_eff_dt)"
					+ " and edtmp.edbc_run_dt < ?"
					+ " AND edtmp.delete_sw = 'N'"
					+ " AND edtmp.suspend_benefit_sw = 'Y'"
					+ " AND edtmp.net_benefit_amt = 0"
					+ " AND edtmp.cg_status_cd = 'AP'"
					+ " AND edtmp.current_elig_ind IN ('A', 'C')"
					+ " AND ((edtmp.current_elig_ind = 'A')"
					+ " OR (edtmp.current_elig_ind = 'C'" + " AND EXISTS ("
					+ " SELECT he.edg_num" + " FROM he_restore_benefits he"
					+ " WHERE he.case_num = edtmp.case_num"
					+ " AND he.edg_num = edtmp.edg_num"
					+ " AND he.continue_benefit_sw = 'Y'"
					+ " AND he.protested_month_dt >= ?"
					+ " AND he.protested_month_dt < ?"
					+ " AND he.appeal_status_cd = '1')))";

			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * Method findByQcClosures1 @param maxRows int @param negBegDt Timestamp
	 * 
	 * @param negEndDt Timestamp @param eligBegDt Timestamp @param eligEndDt
	 * Timestamp @param payBegDt Timestamp @param payEndDt Timestamp @return
	 * EdEligibilityCargo[] @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcClosures1(int maxRows,
			Timestamp negBegDt, Timestamp negEndDt, Timestamp eligBegDt,
			Timestamp eligEndDt, Timestamp payBegDt, Timestamp payEndDt)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = "select"
					+ " case_num, edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " from ed_eligibility e where e.program_cd = 'FS'"
					+ " and e.type_of_assistance_cd = 'TP09'"
					+ " AND ((e.negative_action_eff_dt >= ?"
					+ " AND e.negative_action_eff_dt < ?)"
					+ " or e.edbc_run_dt = e.negative_action_eff_dt)"
					+ " and e.edbc_run_dt < ?"
					+ " AND e.eligibility_end_dt >= ?"
					+ " AND e.eligibility_end_dt < ?"
					+ " and e.payment_beg_dt >= ?"
					+ " AND e.payment_beg_dt < ?"
					+ " AND e.activity_type <> 'PR'"
					+ " and e.CURRENT_ELIG_IND = 'A' and e.DELETE_SW = 'N'"
					+ " and e.CG_STATUS_CD = 'TN'"
					+ " AND (e.case_num, e.program_cd, e.edg_num, e.type_of_assistance_cd) IN ("
					+ " SELECT /*+  parallel(edg)*/"
					+ " case_num, program_cd, edg_num, type_of_assistance_cd"
					+ " FROM ed_edg_num_allotment edg"
					+ " WHERE program_cd = 'FS'"
					+ " AND edg.type_of_assistance_cd = 'TP09')";

			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * Method findByQcClosures2 @param maxRows int @param negBegDt Timestamp
	 * 
	 * @param negEndDt Timestamp @param eligBegDt Timestamp @param eligEndDt
	 * Timestamp @param payBegDt Timestamp @param payEndDt Timestamp @return
	 * EdEligibilityCargo[] @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcClosures2(int maxRows,
			Timestamp negBegDt, Timestamp negEndDt, Timestamp eligBegDt,
			Timestamp eligEndDt, Timestamp payBegDt, Timestamp payEndDt)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = "select case_num, edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " from ed_eligibility edtn"
					+ " where"
					+ " ((edtn.negative_action_eff_dt >= ?"
					+ " AND edtn.negative_action_eff_dt < ?)"
					+ " or edtn.edbc_run_dt = edtn.negative_action_eff_dt)"
					+ " and edtn.edbc_run_dt < ?"
					+ " AND edtn.eligibility_end_dt >= ?"
					+ " AND edtn.eligibility_end_dt < ?"
					+ " and edtn.payment_beg_dt >= ?"
					+ " and edtn.payment_beg_dt < ?"
					+ " and edtn.program_cd = 'FS'"
					+ " AND edtn.activity_type <> 'PR'"
					+ " and edtn.cg_status_cd = 'TN' and edtn.current_elig_ind = 'C' and edtn.delete_sw = 'N'"
					+ " AND (edtn.case_num, edtn.program_cd, edtn.edg_num) IN ("
					+ " SELECT /*+  parallel(edg)*/"
					+ " case_num, program_cd, edg_num"
					+ " FROM ed_edg_num_allotment edg"
					+ " WHERE program_cd = 'FS')"
					+ " and (exists ("
					+ " select 1"
					+ " from ed_eligibility edap"
					+ " where"
					+ " edtn.case_num = edap.case_num"
					+ " and edtn.edg_num = edap.edg_num"
					+ " and edap.eligibility_beg_dt > edtn.payment_beg_dt"
					+ " and edap.cg_status_cd = 'AP' and edap.current_elig_ind = 'A'"
					+ " and edap.program_cd = 'FS'"
					+ " and edap.delete_sw = 'N'"
					+ " and edap.payment_beg_dt >= ?"
					+ " and edap.payment_beg_dt < ?)"
					+ " or exists ("
					+ " select 1 from ed_eligibility eddn"
					+ " where edtn.case_num = eddn.case_num"
					+ " and edtn.edg_num = eddn.edg_num"
					+ " and eddn.delete_sw = 'N'"
					+ " and eddn.application_dt > edtn.application_dt"
					+ " and eddn.cg_status_cd = 'DN' and eddn.current_elig_ind in ('A','C'))"
					+ " OR EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility e2"
					+ " WHERE e2.case_num = edtn.case_num"
					+ " AND e2.edg_num = edtn.edg_num"
					+ " AND e2.edbc_run_dt >= ?"
					+ " AND e2.delete_sw = 'N'"
					+ " AND e2.program_cd = 'FS'"
					+ " AND e2.cg_status_cd = 'AP'"
					+ " AND e2.current_elig_ind = 'A'"
					+ " AND e2.payment_beg_dt >= ?"
					+ " AND e2.payment_beg_dt < ?"
					+ " AND NOT EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility e3"
					+ " WHERE e3.case_num = e2.case_num"
					+ " AND e3.edg_num = e2.edg_num"
					+ " AND create_dt ="
					+ " (SELECT MAX (create_dt)"
					+ " FROM ed_eligibility e4"
					+ " WHERE e3.case_num = e4.case_num"
					+ " AND e3.edg_num = e4.edg_num"
					+ " AND e4.create_dt < ?"
					+ " AND e4.payment_beg_dt >= ?"
					+ " AND e4.payment_beg_dt < ?"
					+ " AND e4.delete_sw = 'N'"
					+ " AND e4.current_elig_ind = 'C'"
					+ " AND e4.cg_status_cd IN"
					+ " ('AP', 'TN')"
					+ " AND e4.program_cd = 'FS')"
					+ " AND e3.payment_beg_dt >= ?"
					+ " AND e3.payment_beg_dt < ?"
					+ " AND e3.delete_sw = 'N'"
					+ " AND e3.current_elig_ind = 'C'"
					+ " AND e3.program_cd = 'FS'"
					+ " AND e3.cg_status_cd = 'AP'))" + ")";

			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(payEndDt));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * Method findByQcClosures3 @param maxRows int @param negBegDt Timestamp
	 * 
	 * @param negEndDt Timestamp @param eligBegDt Timestamp @param eligEndDt
	 * Timestamp @param begDt Timestamp @param endDt Timestamp @return
	 * EdEligibilityCargo[] @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcClosures3(int maxRows,
			Timestamp negBegDt, Timestamp negEndDt, Timestamp eligBegDt,
			Timestamp eligEndDt, Timestamp begDt, Timestamp endDt)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = "select"
					+ " e.case_num, e.edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " from he_restore_benefits he, ed_eligibility e where"
					+ " he.case_num = e.case_num and he.edg_num = e.edg_num "
					+ " and e.program_cd = 'FS' and he.continue_benefit_sw = 'Y' "
					+ " and he.protested_month_dt >= ?"
					+ " and he.protested_month_dt < ?"
					+ " and he.appeal_status_cd = '1' and e.type_of_assistance_cd = 'TP09'"
					+ " AND ((e.negative_action_eff_dt >= ?"
					+ " AND e.negative_action_eff_dt < ?)"
					+ " or e.edbc_run_dt = e.negative_action_eff_dt)"
					+ " and e.edbc_run_dt < ?"
					+ " AND e.eligibility_end_dt >= ? "
					+ " AND e.eligibility_end_dt < ?"
					+ " and e.payment_beg_dt >= ?"
					+ " AND e.payment_beg_dt < ?"
					+ " AND e.activity_type <> 'PR'"
					+ " and e.CURRENT_ELIG_IND = 'C' and e.DELETE_SW = 'N'"
					+ " and e.CG_STATUS_CD = 'TN'";

			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(negBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(eligBegDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/*
	 * Method findByQcClosures4 @param maxRows int @param begDt Timestamp @param
	 * endDt Timestamp @param lastDt Timestamp @return EdEligibilityCargo[]
	 * 
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByQcClosures4(int maxRows,
			Timestamp begPrevMonthDt, Timestamp endPrevMonthDt,
			Timestamp begDt, Timestamp endDt) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = "SELECT case_num, edg_num, edbc_run_dt, negative_action_eff_dt, suspend_benefit_sw, FS_EXPEDITED_SW, EDG_TRACE_ID"
					+ " FROM ed_eligibility e"
					+ " WHERE e.program_cd = 'FS'"
					+ " AND e.type_of_assistance_cd = 'TP09'"
					+ " AND e.payment_beg_dt >= ?"
					+ " AND e.payment_beg_dt < ?"
					+ " AND e.activity_type = 'CV'"
					+ " AND (e.create_user_id like 'CV%' OR e.create_user_id like 'CW%')"
					+ " AND e.delete_sw = 'N'"
					+ " AND e.cg_status_cd = 'AP'"
					+ " AND e.current_elig_ind IN ('A', 'C')"
					+ " AND TRUNC (e.estimated_elig_end_dt) = ?"
					+ " AND TRUNC (e.semi_annual_review_dt) = ?"
					+ " AND (e.case_num, e.program_cd, e.edg_num, e.type_of_assistance_cd) IN ("
					+ " SELECT /*+  parallel(edg)*/"
					+ " case_num, program_cd, edg_num, type_of_assistance_cd"
					+ " FROM ed_edg_num_allotment edg"
					+ " WHERE program_cd = 'FS'"
					+ " AND edg.type_of_assistance_cd = 'TP09')"
					+ " AND ((e.current_elig_ind = 'A' and e.payment_end_dt is null)"
					+ " OR ((e.current_elig_ind = 'C' OR (e.current_elig_ind = 'A' AND e.payment_end_dt is not null))"
					+ " AND (EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility edap"
					+ " WHERE e.case_num = edap.case_num"
					+ " AND e.edg_num = edap.edg_num"
					+ " AND edap.eligibility_beg_dt >"
					+ " (e.payment_beg_dt + INTERVAL '1' MONTH)"
					+ " AND edap.cg_status_cd = 'AP'"
					+ " AND edap.current_elig_ind = 'A'"
					+ " AND edap.program_cd = 'FS'"
					+ " AND edap.delete_sw = 'N'"
					+ " AND edap.payment_beg_dt >= ?"
					+ " AND edap.payment_beg_dt < ?)"
					+ " OR EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility edtn"
					+ " WHERE e.case_num = edtn.case_num"
					+ " AND e.edg_num = edtn.edg_num"
					+ " AND edtn.current_elig_ind = 'A'"
					+ " AND edtn.cg_status_cd = 'TN'"
					+ " AND edtn.delete_sw = 'N'"
					+ " AND edtn.payment_beg_dt >= ?"
					+ " AND edtn.payment_beg_dt < ?"
					+ " AND edtn.eligibility_end_dt >= ?"
					+ " AND edtn.eligibility_end_dt < ?)"
					+ " OR EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility e2"
					+ " WHERE e2.case_num = e.case_num"
					+ " AND e2.edg_num = e.edg_num"
					+ " AND e2.edbc_run_dt >= ?"
					+ " AND e2.delete_sw = 'N'"
					+ " AND e2.program_cd = 'FS'"
					+ " AND e2.cg_status_cd = 'AP'"
					+ " AND e2.current_elig_ind = 'A'"
					+ " AND e2.payment_beg_dt >= ?"
					+ " AND e2.payment_beg_dt < ?"
					+ " AND NOT EXISTS ("
					+ strLiteralSelect1
					+ " FROM ed_eligibility e3"
					+ " WHERE e3.case_num = e2.case_num"
					+ " AND e3.edg_num = e2.edg_num"
					+ " AND create_dt ="
					+ " (SELECT MAX (create_dt)"
					+ " FROM ed_eligibility e4"
					+ " WHERE e3.case_num = e4.case_num"
					+ " AND e3.edg_num = e4.edg_num"
					+ " AND e4.create_dt < ?"
					+ " AND e4.payment_beg_dt >= ?"
					+ " AND e4.payment_beg_dt < ?"
					+ " AND e4.delete_sw = 'N'"
					+ " AND e4.current_elig_ind = 'C'"
					+ " AND e4.cg_status_cd IN"
					+ " ('AP', 'TN')"
					+ " AND e4.program_cd = 'FS')"
					+ " AND e3.payment_beg_dt >= ?"
					+ " AND e3.payment_beg_dt < ?"
					+ " AND e3.delete_sw = 'N'"
					+ " AND e3.current_elig_ind = 'C'"
					+ " AND e3.program_cd = 'FS'"
					+ " AND e3.cg_status_cd = 'AP'))" + ")))";

			params.add(DateFormatter.getDateForWhereClauseAnsi(begPrevMonthDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endPrevMonthDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endPrevMonthDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begPrevMonthDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(begDt));
			params.add(DateFormatter.getDateForWhereClauseAnsi(endDt));

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * WR: BRGUS00183755 Owner : GovindasamyR
	 *
	 * Method findByMiCSESAApplicableProgForPrd, to get the MiCSES applicable
	 * programs eligibility.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByMiCSESAApplicableProgForPrd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		EdEligibilityCargo colrows[] = null;
		try {
			String CUSTOM_SELECT = " SELECT CG_ELIG_RSLT_CD, CASE_NUM, EDG_NUM, CG_STATUS_CD,EDBC_RUN_DT,EDG_TRACE_ID,ELIGIBILITY_BEG_DT,ELIGIBILITY_END_DT,PAYMENT_BEG_DT,PAYMENT_END_DT,PROGRAM_CD,TYPE_OF_ASSISTANCE_CD,DI_ACTION_DT,CURRENT_ELIG_IND,CG_SIZE FROM ED_ELIGIBILITY ";
			String whereClause = " WHERE CASE_NUM = ? "
					+ " AND PROGRAM_CD IN ('FS','CD','TF','MA','ME') "
					+ "   AND TYPE_OF_ASSISTANCE_CD IN('TP01','TP09','CDCS','TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM')"
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND IN ('A','C') "
					+ "  AND (((PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL) AND (CURRENT_ELIG_IND='A' AND (CG_STATUS_CD ='AP' OR (CG_STATUS_CD ='TN' AND DI_ACTION_DT = ?)))) "
					+ "      OR ( CG_STATUS_CD='AP' AND EDBC_RUN_DT = (SELECT MAX(EDBC_RUN_DT) FROM ED_ELIGIBILITY ED  "
					+ "                                                           WHERE  ED.CASE_NUM= ?  "
					+ "                                                           AND  PROGRAM_CD IN ('TF','FS','CD','MA','ME')  "
					+ "                                                           AND TYPE_OF_ASSISTANCE_CD IN('TP09' ,'CDCS','TP01','TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM')  "
					+ "                                                           AND DELETE_SW = 'N'  "
					+ "                                                           AND CURRENT_ELIG_IND IN ('A','C') "
					+ "                                                           AND CG_STATUS_CD ='AP'           "
					+ "                                                           AND EDBC_RUN_DT < ?  "
					+ "			                                                           ) "
					+ "     )) ";

			sql = CUSTOM_SELECT + whereClause;
			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getDiActionDt()));
			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getDiActionDt()));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return colrows;

	}

	/**
	 * WR: BRGUS00183755 Owner: GovindasamyR Method
	 * findByMiCSESCaseEligibleEDGs, query to find all active EDGs as of date.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESCaseEligibleEDGs(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		EdEligibilityCargo colrows[] = null;
		try {
			String CUSTOM_SELECT = "SELECT CG_ELIG_RSLT_CD, CASE_NUM, EDG_NUM, CG_STATUS_CD,EDBC_RUN_DT,EDG_TRACE_ID,ELIGIBILITY_BEG_DT,ELIGIBILITY_END_DT,PAYMENT_BEG_DT,PAYMENT_END_DT,PROGRAM_CD,TYPE_OF_ASSISTANCE_CD,DI_ACTION_DT,CURRENT_ELIG_IND,CG_SIZE,EDG_SIZE,SPEND_DOWN_MET_DT,SPEND_DOWN_IND,PRIOR_MEDICAL_CD FROM ED_ELIGIBILITY  ";

			String whereClause = " WHERE CASE_NUM = ? "
					+ " AND PROGRAM_CD IN ('FS','CD','TF','MA','ME') "
					+ " AND TYPE_OF_ASSISTANCE_CD IN('TP01','TP09','CDCS','TP07','TP08','TP20','TP43','TP44','TP45','HKEM','G2UM','G2SM')"
					+ strLiteralAndDeleteSWN
					+ strLiteralAndCurrentEligIndA
					+ " AND ((CG_STATUS_CD = 'AP' "
					+ " AND CG_ELIG_RSLT_CD = 'PS') "
					+ " OR (CG_STATUS_CD = 'TN' "
					+ " AND (PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL))) "
					+ " ORDER BY EDG_NUM,PAYMENT_BEG_DT DESC, EDG_TRACE_ID DESC, CREATE_DT DESC ";
			sql = CUSTOM_SELECT + whereClause;
			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return colrows;

	}

	/**
	 * WR: BRGUS00183755 Owner : GovindasamyR
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMiCSESProgPrevRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		// List<Object> params = new ArrayList<Object>();
		// List<EdEligibilityCargo> resultList = new
		// ArrayList<EdEligibilityCargo>();
		// String sql = null;
		EdEligibilityCargo colrows[] = null;
		try {

			// String CUSTOM_SELECT =
			// "SELECT CG_ELIG_RSLT_CD, CASE_NUM, EDG_NUM, CG_STATUS_CD,EDBC_RUN_DT,EDG_TRACE_ID,ELIGIBILITY_BEG_DT,ELIGIBILITY_END_DT,PAYMENT_BEG_DT,PAYMENT_END_DT,PROGRAM_CD,TYPE_OF_ASSISTANCE_CD,DI_ACTION_DT,CURRENT_ELIG_IND,CG_SIZE,EDG_SIZE,SPEND_DOWN_MET_DT,SPEND_DOWN_IND,PRIOR_MEDICAL_CD FROM ED_ELIGIBILITY  ";

			String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() + " "
					+ strLiteralAndEdgNum + cargo.getEdgNum()
					+ strLiteralAndDeleteSWN + strLiteralAndCurrentEligIndInAC
					+ " AND EDBC_RUN_DT < ?" + strLiteralOrderby1;
			// int idx = 1;
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);
			colrows = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return colrows;

	}

	// BEGIN-BRGUS00153205-upadhyayulag-New finders added /*+ full(ed)
	// parallel(ed 8)*/
	/*
	 * Method findByFSProgramStagingParallel. @param maxRows int @param cargo
	 * EdEligibilityCargo @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSProgramStagingParallel(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		// List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		EdEligibilityCargo[] colrows = null;

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" CG_STATUS_CD, PAYMENT_BEG_DT, PROGRAM_CD, ");
			MY_SQL.append(" BENEFIT_AMT, TYPE_OF_ASSISTANCE_CD, CASE_NUM, ");
			MY_SQL.append(" CLAIM_TYPE_IND, PENALTY_AMT, RECOUPMENT_AMT, ");
			MY_SQL.append(" COUNT_OF_CG_ADULTS, CG_SIZE, ABAWD_SW, EDG_NUM, ");
			MY_SQL.append(" COUNT_OF_CG_CHILD, NET_BENEFIT_AMT, EDG_TRACE_ID, ");
			MY_SQL.append(" EDG_OVERRIDE_SW, STATE_FUNDING_IND, EFIP_ELIG_SW, ");
			MY_SQL.append(" ESTIMATED_ELIG_END_DT, FS_STIMULUS_AMT, MICAP_FAP_SW ");
			// CH-25874 - amirajkar - Added
			MY_SQL.append(" EFIP_CTR, ACTIVITY_TYPE, APPLICATION_DT, EDBC_RUN_DT, ELIGIBILITY_BEG_DT ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ed ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");
			MY_SQL.append(" AND PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT,cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT,cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			// CH-24943 For excluding records having COMBINED_PAYMENT_SW having
			// as Y
			MY_SQL.append(" AND DELETE_SW = 'N' AND (COMBINED_PAYMENT_SW = 'N' OR COMBINED_PAYMENT_SW IS NULL)");
			// CHIMESMO-57459 - FOR EXLUDING RECORDS HAVING FS_EXPEDITED_SW AS
			// 'Y'
			MY_SQL.append(" AND (FS_EXPEDITED_SW = 'N' OR FS_EXPEDITED_SW IS NULL)");
			MY_SQL.append(cargo.getActivityType());

			sql = MY_SQL.toString();

			SQLCommand command = getSqlCommand(sql);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			EdEligibilityCargo aedeligibilitycargo[] = colrows;

			return aedeligibilitycargo;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BEGIN-BRGUS00153205-upadhyayulag-New finders added /*+ full(ed)
	// parallel(ed 8)*/
	/*
	 * Method findByFSProgramStagingParallel. @param maxRows int @param cargo
	 * EdEligibilityCargo @return EdEligibilityCargo[] @throws
	 * GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTANFProgramStagingParallel(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		// List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		EdEligibilityCargo[] colrows = null;

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" CG_STATUS_CD, PAYMENT_BEG_DT, PROGRAM_CD, ");
			MY_SQL.append(" BENEFIT_AMT, TYPE_OF_ASSISTANCE_CD, CASE_NUM, ");
			MY_SQL.append(" CLAIM_TYPE_IND, PENALTY_AMT, RECOUPMENT_AMT, ");
			MY_SQL.append(" COUNT_OF_CG_ADULTS, CG_SIZE, ABAWD_SW, EDG_NUM, ");
			MY_SQL.append(" COUNT_OF_CG_CHILD, NET_BENEFIT_AMT, EDG_TRACE_ID, ");
			MY_SQL.append(" EDG_OVERRIDE_SW, STATE_FUNDING_IND, EFIP_ELIG_SW, ");
			MY_SQL.append(" ESTIMATED_ELIG_END_DT, FS_STIMULUS_AMT, MICAP_FAP_SW, ");
			// CH-25874 - amirajkar - Added
			MY_SQL.append(" EFIP_CTR, ACTIVITY_TYPE, APPLICATION_DT, EDBC_RUN_DT, ELIGIBILITY_BEG_DT ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");
			// CH-27216 - amirajkar - Removing criteria of
			// TYPE_OF_ASSISTANCE_CD.
			// MY_SQL.append(" AND PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD = 'TP01' ");
			MY_SQL.append(" AND PROGRAM_CD = 'TF' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT, cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT, cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append("  AND DELETE_SW = 'N' ");
			// CHIMESMO-45974 - ADDING CLAUSE TO FILTER OUT RECORDS WHICH WOULD
			// CLOSE AFTER CURRENT MONTH'S MASS UPDATE BATCH JOB
			MY_SQL.append("  AND NOT EXISTS ");
			MY_SQL.append("  (SELECT NULL FROM ED_CASE_RECERT_DATES EC WHERE ED.CASE_NUM = EC.CASE_NUM AND ED.EDG_NUM = EC.EDG_NUM ");
			MY_SQL.append("  AND TRUNC(EC.RECERT_REVIEW_DUE_DT) = TRUNC(CURRENT_TIMESTAMP+INTERVAL '1' MONTH-INTERVAL '1' DAY) ");
			MY_SQL.append("  AND EC.REVIEW_PACKET_RECEIVED_DT IS NULL AND COALESCE(EC.REVIEW_PENDING_CD,'XX') NOT IN('RC') ");
			MY_SQL.append("  AND EC.EFF_END_DT IS NULL) ");

			// MY_SQL.append(cargo.getActivityType());

			sql = MY_SQL.toString();

			SQLCommand command = getSqlCommand(sql);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			EdEligibilityCargo aedeligibilitycargo[] = colrows;

			return aedeligibilitycargo;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00153205
	/**
	 * This method fetches data based on case number, program cd, payment begin
	 * date and payment end date.
	 *
	 * @param maxRows
	 * @param caseNum
	 * @param mmYYYY
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumProgCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {

			/*
			 * StringBuffer sb=new StringBuffer();
			 * sb.append("Select A.*,  A.ROWID as aROWID  ");
			 * sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			 * sb.append(" AND  TYPE_OF_ASSISTANCE_CD = ? ");
			 * sb.append(strLiteralAndDeleteSWN);
			 * sb.append(" AND ( A.CURRENT_ELIG_IND in ( 'A') "); sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append(strLiteralAndbdelteswy);
			 * sb.append(strLiteralAndBcurrenteligInd);
			 * sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))" );
			 * sb.append(
			 * " AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <=TO_DATE(?,'MM/DD/YYYY')) "
			 * ); sb.append(
			 * "	OR ( A.PAYMENT_END_DT >= TO_DATE(?,'MM/DD/YYYY') and A.PAYMENT_BEG_DT <=TO_DATE(?,'MM/DD/YYYY') ))   "
			 * ); sb.append(" AND  TYPE_OF_ASSISTANCE_CD =  ?   "); sb.append(
			 * "	ORDER BY A.TOA_PRIORITY_NUM, A.EDG_NUM, to_char(A.PAYMENT_BEG_DT, 'yyyy-mm-dd'), A.PROGRAM_CD desc, A.CURRENT_ELIG_IND "
			 * );
			 * 
			 * 
			 * 
			 * 
			 * List<Object> parms = new ArrayList<Object>();
			 * parms.add(cargo.getCaseNum());
			 * parms.add(sdf.format(cargo.getPaymentEndDt()));
			 * parms.add(sdf.format(cargo.getPaymentBegDt()));
			 * parms.add(sdf.format(cargo.getPaymentEndDt()));
			 * parms.add(sdf.format(cargo.getTypeOfAssistanceCd()));
			 * 
			 * // parms.add(tsBegDate); // parms.add(tsEndDate);
			 * 
			 * SQLCommand command = getSqlCommandForUpdate(sb.toString(),
			 * parms); Collection<Map<String, Object>> results =
			 * (Collection<Map<String, Object>>) command.execute();
			 * List<EdEligibilityCargo> resultList = new
			 * ArrayList<EdEligibilityCargo>();
			 * 
			 * DefaultPropertyPopulator cargoPopulator = new
			 * DefaultPropertyPopulator(); cargoPopulator.setMapper(new
			 * CargoPropertyMapper()); for(Map<String, Object> result: results){
			 * EdEligibilityCargo newCargo = new EdEligibilityCargo();
			 * ObjectPopulator populator = new ObjectPopulator(result, newCargo,
			 * cargoPopulator); populator.execute(); resultList.add(newCargo); }
			 * 
			 * EdEligibilityCargo colrows[] = new
			 * EdEligibilityCargo[resultList.size()];
			 * resultList.toArray(colrows); return colrows;
			 */
			StringBuffer stb = new StringBuffer("");
			stb.append(strLiteralCaseNum2 + cargo.getCaseNum());
			stb.append(" AND TYPE_OF_ASSISTANCE_CD = ?  "
					+ cargo.getProgramCd() + "' AND DELETE_SW = 'N' ");
			stb.append(strLiteralAndCurrentEligIndA);
			stb.append(strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt()) + " ");
			stb.append(" AND ( PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ " OR PAYMENT_END_DT IS NULL )");

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
			Collection<EdEligibilityCargo> coll = getAll(map);
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByExpeditedEdgCases, query by Expedited.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExpdtCases(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExpeditedEdgCases" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String WHERE_CLAUSE = strLiteralCaseNum
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' AND REC_END_DT IS NULL)";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_CLAUSE);
			Collection<EdEligibilityCargo> coll = getAll(map);
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * BRGUS00189342 - gundag - Finder for SSP Monthly Trigger Process
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findBySspMonthlyLoadStagingTable(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		EdEligibilityCargo[] colrows = null;

		try {
			String MY_SQL = "SELECT /*+ parallel(a 12 2)*/ CASE_NUM, EDG_NUM, EDG_TRACE_ID,BENEFIT_AMT, PROGRAM_CD, TYPE_OF_ASSISTANCE_CD ,CG_STATUS_CD "
					+ "FROM ED_ELIGIBILITY ";
			String WHERE_SQL = " WHERE TYPE_OF_ASSISTANCE_CD = 'SSPC' AND PROGRAM_CD = 'SS' AND CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' AND PAYMENT_BEG_DT <= ? AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= ? ) AND BENEFIT_AMT > 0 "
					+ cargo.getActivityType();
			sql = MY_SQL + WHERE_SQL;

			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			EdEligibilityCargo aedeligibilitycargo[] = colrows;

			return aedeligibilitycargo;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}// End: BRGUS00189342

	/**
	 * This purpose method is to get cancelled reinstatement segments by given
	 * EDBC_RUN_DT
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return array of EdEligibilityCargo
	 * @throws GenericRunTimeException
	 *             Added By KethavatK as part of WR#BRGUS00188540.
	 */
	public EdEligibilityCargo[] findByCancelRecForReInsPerf(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		try {
			sql = " SELECT CASE_NUM FROM ED_ELIGIBILITY  "
					+ " WHERE CASE_NUM = ? AND EDG_NUM = ? AND CAST(EDBC_RUN_DT as VARCHAR(10)) "
					+ " = CAST(? as VARCHAR(10)) AND PROGRAM_CD = ? AND CG_STATUS_CD = 'AP' "
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND ='C' AND ACTIVITY_TYPE = 'RE' "
					+ " AND ROWNUM <= 1 ";
			params.add(cargo.getCaseNum());
			params.add(cargo.getEdgNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getEdbcRunDt()));
			params.add(cargo.getProgramCd());

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method will update the CR_SAMPLE_CASE_FINDINGS based on given
	 * Issuance amt and filter condition
	 *
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo array with one cargo is update is done
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] updateSFForIssuanceAmt(int maxRows,
			long criteriaId, long sampleId, String condition, double amt)
			throws GenericRunTimeException {

		Debug.println("updateSFForIssuanceAmt >>>> maxRows= " + maxRows);
		String operator = "=";
		List<Object> params = new ArrayList<Object>();

		int count = 0;
		// String rows = "";
		Map result = new HashMap();
		try {
			StringBuffer query = new StringBuffer(
					strLiteralUpdateCrsamplecasefindings
							+ strLiteralWhereCCriteriaId
							+ strLiteralAndCsampleId
							+ strLiteralAndCreportIndP
							+ " AND NOT EXISTS (SELECT NULL "
							+ " FROM ED_ELIGIBILITY  A, CR_SAMPLE_CASE_FINDINGS B "
							+ " WHERE B.CASE_NUM= C.CASE_NUM"
							+ " AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
							+ " AND A.CASE_NUM = B.CASE_NUM"
							+ " AND  A.EDG_NUM = B.EDG_NUM"
							+ " AND A.DELETE_SW='N' "
							+ " AND B.CRITERIA_ID = ? "
							+ " AND B.SAMPLE_ID = ? " + strLiteralBReportIndP
							+ " AND A.CURRENT_ELIG_IND = 'A' ");
			if ("LT".equalsIgnoreCase(condition)) {
				operator = " < ";
			} else if ("GT".equalsIgnoreCase(condition)) {
				operator = " > ";
			} else if ("ET".equalsIgnoreCase(condition)) {
				operator = " = ";
			} else if ("LE".equalsIgnoreCase(condition)) {
				operator = " <= ";
			} else if ("GE".equalsIgnoreCase(condition)) {
				operator = " >= ";
			} else {
				throw new GenericRunTimeException(
						"Invalid condition in updateSFForIssuanceAmt"
								+ "for sample ID = " + sampleId);
			}
			query.append(" AND A.BENEFIT_AMT" + operator + " ? ");
			query.append(" ) ");
			params.add(criteriaId);
			params.add(sampleId);
			params.add(criteriaId);
			params.add(sampleId);
			params.add(amt);
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			if (results.iterator().hasNext()) {
				result = results.iterator().next();
			}
			count = (Integer) result.get(strLiteralResult);
			if (count > 0) {
				EdEligibilityCargo[] cargos = new EdEligibilityCargo[1];
				cargos[0] = new EdEligibilityCargo();
				return cargos;
			}
			return null;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00208905 marpinas 11/18/2009 Method
	 * findByCaseNumProgramCdOPReferral, query by OP Referral Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumProgramCdOPReferral(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumProgramCdOPReferral" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");
		try {

			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q', 'R') ");
			/*
			 * sb.append(
			 * " AND ( A.CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q') "
			 * ); sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append(strLiteralAndbdelteswy);
			 * sb.append(strLiteralAndBcurrenteligInd);
			 * sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			 */
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <= CAST(? as DATE)) ");
			sb.append("	OR ( A.PAYMENT_END_DT >= CAST(? as date) and A.PAYMENT_BEG_DT <=CAST(? as date) ))");
			sb.append("AND  TYPE_OF_ASSISTANCE_CD = ?  ");

			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentBegDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(cargo.getTypeOfAssistanceCd());

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() +
			 * strLiteralAndDeleteSwN +
			 * " AND CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q')" +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= " +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + ")" + strLiteralOrPaymentendDt +
			 * "TO_DATE (' "+sdf.format(cargo.
			 * getPaymentBegDt())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentBegDt())
			 * + strLiteralPaymentBegDt +
			 * "TO_DATE (' "+sdf.format(cargo.getPaymentEndDt
			 * ())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + "" + "))" + " AND  PROGRAM_CD = " + cargo.getProgramCd() + " "
			 * +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, PAYMENT_BEG_DT,CURRENT_ELIG_IND"
			 * ;
			 * 
			 * Map map = new HashMap<String, Object>();
			 * map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			 * Collection<EdEligibilityCargo> coll = getAll(map);
			 * EdEligibilityCargo colrows[] = new
			 * EdEligibilityCargo[coll.size()]; coll.toArray(colrows); return
			 * colrows;
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00208905 marpinas 11/18/2009 Method
	 * findByCaseNumProgramCdOPReferral, query by OP Referral Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumProgramCdOPReferralCancelled(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Debug.println("findByCaseNumProgramCdOPReferral" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");
		try {

			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q', 'R') ");
			sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			sb.append("( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM");
			sb.append(strLiteralAndbdelteswy);
			sb.append(strLiteralAndBcurrenteligInd);
			sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <=CAST(? as date))");
			sb.append("	OR ( A.PAYMENT_END_DT >= CAST(? as date) and A.PAYMENT_BEG_DT <=CAST(? as date) ))   ");
			sb.append("AND  TYPE_OF_ASSISTANCE_CD = ?  ");

			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentBegDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(cargo.getTypeOfAssistanceCd());

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() +
			 * strLiteralAndDeleteSwN +
			 * " AND CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q')" +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= " +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + ")" + strLiteralOrPaymentendDt +
			 * "TO_DATE (' "+sdf.format(cargo.
			 * getPaymentBegDt())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentBegDt())
			 * + strLiteralPaymentBegDt +
			 * "TO_DATE (' "+sdf.format(cargo.getPaymentEndDt
			 * ())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + "" + "))" + " AND  PROGRAM_CD = " + cargo.getProgramCd() + " "
			 * +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, PAYMENT_BEG_DT,CURRENT_ELIG_IND"
			 * ;
			 * 
			 * Map map = new HashMap<String, Object>();
			 * map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			 * Collection<EdEligibilityCargo> coll = getAll(map);
			 * EdEligibilityCargo colrows[] = new
			 * EdEligibilityCargo[coll.size()]; coll.toArray(colrows); return
			 * colrows;
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00208905 marpinas 11/18/2009 Method
	 * findByAllProgramsRunModeOPReferral, query by OP Referral Run Mode for all
	 * Pgms.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllProgramsRunModeOPReferral(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByAllProgramsRunModeCancelled" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");
		try {

			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND  A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q', 'R') ");
			/*
			 * sb.append(
			 * " AND ( A.CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q') "
			 * ); sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append(strLiteralAndbdelteswy);
			 * sb.append(strLiteralAndBcurrenteligInd);
			 * sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			 */
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <=cast(? as date)) ");
			sb.append("	OR ( A.PAYMENT_END_DT >= CAST(? as date) and A.PAYMENT_BEG_DT <=CAST(? as date) ))   ");
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentBegDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() +
			 * strLiteralAndDeleteSwN +
			 * " AND CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q')" +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= "
			 * 
			 * +" TO_DATE('"+sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY')"
			 * + DateFormatter.getDateForWhereClauseAnsi(cargo
			 * .getPaymentEndDt()) + ")" + " OR    (PAYMENT_END_DT >= "
			 * +" TO_DATE ('"+sdf.format(cargo
			 * .getPaymentBegDt())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentBegDt())
			 * + strLiteralPaymentBegDt
			 * +"TO_DATE('"+sdf.format(cargo.getPaymentEndDt
			 * ())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + " " + ") )" +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, PAYMENT_BEG_DT, PROGRAM_CD desc, CURRENT_ELIG_IND"
			 * ;
			 * 
			 * Map map = new HashMap<String, Object>();
			 * map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			 * Collection<EdEligibilityCargo> coll = getAll(map);
			 * EdEligibilityCargo colrows[] = new
			 * EdEligibilityCargo[coll.size()]; coll.toArray(colrows); return
			 * colrows;
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * BRGUS00208905 marpinas 11/18/2009 Method
	 * findByAllProgramsRunModeOPReferral, query by OP Referral Run Mode for all
	 * Pgms.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAllProgramsRunModeOPReferralCancelled(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {

		Debug.println("findByAllProgramsRunModeCancelled" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		// java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
		// "MM/dd/yyyy");
		try {

			/*
			 * changes done for getting the latest historical record :Date 17
			 * Sep 2011
			 */
			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q', 'R') ");
			sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			sb.append("( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM");
			sb.append(strLiteralAndbdelteswy);
			sb.append(strLiteralAndBcurrenteligInd);
			sb.append(strLiteralAndPaymentbegdtBpaymentbegdt);
			sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <=CAST(? as date)) ");
			sb.append("	OR ( A.PAYMENT_END_DT >= CAST(? as date) and A.PAYMENT_BEG_DT <=CAST(? as date) ))   ");
			sb.append(strLiteralOrderby3);

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentBegDt().toString().substring(0, 10)));
			parms.add(DateFormatter.stringHyphenToDateAnsi(cargo
					.getPaymentEndDt().toString().substring(0, 10)));

			// parms.add(tsBegDate);
			// parms.add(tsEndDate);

			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

			/*
			 * String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() +
			 * strLiteralAndDeleteSwN +
			 * " AND CURRENT_ELIG_IND in ('T','S','P','A','R','K','V','Q')" +
			 * " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <= "
			 * 
			 * +" TO_DATE('"+sdf.format(cargo.getPaymentEndDt())+"','MM/DD/YYYY')"
			 * + DateFormatter.getDateForWhereClauseAnsi(cargo
			 * .getPaymentEndDt()) + ")" + " OR    (PAYMENT_END_DT >= "
			 * +" TO_DATE ('"+sdf.format(cargo
			 * .getPaymentBegDt())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentBegDt())
			 * + strLiteralPaymentBegDt
			 * +"TO_DATE('"+sdf.format(cargo.getPaymentEndDt
			 * ())+"','MM/DD/YYYY')" +
			 * DateFormatter.getDateForWhereClauseAnsi(cargo .getPaymentEndDt())
			 * + " " + ") )" +
			 * " ORDER BY TOA_PRIORITY_NUM, EDG_NUM, PAYMENT_BEG_DT, PROGRAM_CD desc, CURRENT_ELIG_IND"
			 * ;
			 * 
			 * Map map = new HashMap<String, Object>();
			 * map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			 * Collection<EdEligibilityCargo> coll = getAll(map);
			 * EdEligibilityCargo colrows[] = new
			 * EdEligibilityCargo[coll.size()]; coll.toArray(colrows); return
			 * colrows;
			 */
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BEGIN-BRGUS00199853-upadhyayulag-New finder added
	/**
	 * Method findByCurrentFsProgramEdg, query by Pgm Code, CgStatusCd and curr
	 * Elig Ind.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByFsProgramEdg(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCurrentFsProgramEdg" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String whereClause = strLiteralCaseNum2 + cargo.getCaseNum()
					+ strLiteralAndprogramCd + cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = " + cargo.getCurrentEligInd()
					+ " " + " AND DELETE_SW  = 'N' AND CG_STATUS_CD = ? ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// END-BRGUS00199853

	// BRGUS00210367 - kumarp
	/**
	 * Method findByACFCases, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByACF801CasesNew(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		try {
			sql = " select case_num,edg_num, eligibility_beg_dt, edg_size,payment_beg_Dt,payment_End_Dt,edg_trace_id from ed_eligibility  "
					+ " where program_Cd = 'CD' and type_of_assistance_cd = 'CDCS'  "
					+ " and delete_Sw = 'N' and current_elig_ind = 'A' and cg_Status_Cd = 'AP' "
					+ "and payment_beg_Dt <= ? "
					+ "and current_elig_ind = 'A' "
					+ "and (payment_end_dt >= ? or payment_end_dt is null) "
					+ "and case_num in (select /*+ parallel(dcpb)*/ case_num from dc_case_program_b dcpb where prog_cd='CD')";
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00210367 - kumarp
	/**
	 * Method findByFSTANFEligCase, by SK Ojha.
	 *
	 * @param aBeginDT
	 *            Timestamp
	 * @param aEndDT
	 *            Timestamp
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSTANFEligCaseACF801(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		try {

			String sql = "SELECT 'FS' PROGRAM_CD " + DAOSqlHelper.getANSIDual()
					+ " WHERE EXISTS ( "
					+ "SELECT 1 FROM ED_ELIGIBILITY WHERE CASE_NUM = ? "
					+ "AND DELETE_SW = 'N' AND PROGRAM_CD = 'FS' AND "
					+ "CURRENT_ELIG_IND = 'A' AND "
					+ "CG_STATUS_CD = 'AP'  AND " + "PAYMENT_BEG_DT <= ?  AND "
					+ "(PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL)) "
					+ "UNION " + "SELECT 'TF' PROGRAM_CD "
					+ DAOSqlHelper.getANSIDual() + " WHERE EXISTS ( "
					+ "SELECT 1 FROM ED_ELIGIBILITY WHERE CASE_NUM = ? "
					+ "AND DELETE_SW = 'N' AND PROGRAM_CD = 'TF' AND "
					+ "CURRENT_ELIG_IND = 'A' AND "
					+ "CG_STATUS_CD = 'AP'  AND " + "PAYMENT_BEG_DT <= ?  AND "
					+ "(PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL)) ";

			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			params.add(cargo.getCaseNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			params.add(cargo.getCaseNum());
			// statement.setTimestamp(4, cargo.getPaymentBegDt());

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00210149 - kumarp
	/**
	 * Method findByCaseEdgPayBeginDt, custom query. This query returns
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgPayBeginDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;
		try {
			sql = "SELECT TYPE_OF_ASSISTANCE_CD FROM ED_ELIGIBILITY WHERE CASE_NUM = ? AND "
					+ " EDG_NUM = ? AND CURRENT_ELIG_IND = 'A' AND DELETE_SW = 'N' "
					+ " AND PAYMENT_BEG_DT <= ? AND (PAYMENT_END_DT >= ? OR PAYMENT_END_DT IS NULL) ";
			params.add(cargo.getCaseNum());
			params.add(cargo.getEdgNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00210367 - kumarp
	/**
	 * Method findByACFCases, custom query.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByACF801CasesEdgTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		try {
			String sql = "select edg_Trace_id from ed_eligibility "
					+ "where program_Cd = 'CD' and type_of_assistance_cd = 'CDCS' and case_num = ? and edg_num = ? "
					+ "and delete_Sw = 'N' and current_elig_ind = 'A' and cg_Status_Cd = 'AP' "
					+ "and payment_beg_Dt <= ? "
					+ "and current_elig_ind = 'A' "
					+ "and (payment_end_dt >= ? or payment_end_dt is null) ";

			params.add(cargo.getCaseNum());
			params.add(cargo.getEdgNum());
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			params.add(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// BRGUS00210367 - kumarp

	/**
	 * This method finds all the Programs applicable to send to the MiCSES.
	 *
	 * @param maxRows
	 *            int
	 * @param EdEligibilityCargo
	 *            cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByIvdReferrableProgs(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByIvdReferrableProgs" + strLiteralMaxRows + maxRows);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ "  AND PROGRAM_CD IN ('FS', 'CD', 'TF', 'MA', 'ME')"
					+ " AND TYPE_OF_ASSISTANCE_CD IN ('TP01','TP09','CDCS','TP07','TP08','TP20','TP43','TP44', "
					+ " 'TP45','HKEM','G2UM','G2SM') AND DELETE_SW ='N' AND CURRENT_ELIG_IND ='A' "
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ "  AND (PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralOrPaymentEndDtisNull
					+ " AND (CG_STATUS_CD = 'AP' OR (CG_STATUS_CD = 'TN' AND DI_ACTION_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getDiActionDt()) + strLiteralclparenthesis2;

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			Collection<EdEligibilityCargo> coll = getAll(map);
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method finds all the Programs applicable to send to the MiCSES.
	 *
	 * @param maxRows
	 *            int
	 * @param EdEligibilityCargo
	 *            cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMinEDBCRunDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			String SQL = "SELECT MIN(EDBC_RUN_DT) AS EDBC_RUN_DT FROM ED_ELIGIBILITY WHERE CASE_NUM = ?  AND PROGRAM_CD IN ('FS', 'CD', 'TF', "
					+ " 'MA', 'ME') AND TYPE_OF_ASSISTANCE_CD IN ('TP01','TP09','CDCS','TP07','TP08','TP20',"
					+ " 'TP43','TP44','TP45','HKEM','G2UM','G2SM') AND DELETE_SW ='N' AND " // EDG_NUM
																							// =
																							// ?
																							// AND
																							// "
					+ " ELIGIBILITY_BEG_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEligibilityBegDt())
					+ " AND CURRENT_ELIG_IND IN ('A','C') AND ACTIVITY_TYPE ='IN' ";
			params.add(cargo.getCaseNum());
			// params.add(cargo.getEdgNum());
			// params.add();

			SQLCommand command = getSqlCommandForUpdate(SQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByRecordsToVoid, query to find records to void.
	 *
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByRecordsToVoid(int maxRows, long lCaseNum)
			throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {

			String SQL = "Select A.*, A.rowid " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum2 + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND IN ('T', 'P', 'S', 'K', 'V') "
					+ strLiteralOrderby2;

			params.add(lCaseNum);

			SQLCommand command = getSqlCommandForUpdate(SQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);

			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * CHIMESMO-122255 - Added to remove 1013 error.
	 * 
	 * @param maxRows
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByRecordsToVoidForSnapAndTanf(int maxRows,
			long caseNum) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {

			String SQL = "Select A.*, A.rowid " + "from ED_ELIGIBILITY A "
					+ " Where CASE_NUM = ? " + " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND IN ('T', 'P', 'V') "
					+ " AND PROGRAM_CD IN ('EA','TF','FS')"
					+ " ORDER BY PAYMENT_BEG_DT, PROGRAM_CD desc ";

			params.add(caseNum);

			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), SQL, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);

			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findAssistanceInformationByIndvIdAndCaseNum(
			int maxRows, EdIndvEligibilityCargo cargo)
			throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		try {

			
			  String clause =
			  " select distinct edi.indv_id,edi.case_num,ed.benefit_amt,ed.cg_size,ed.type_of_assistance_cd,ed.edg_trace_id from ed_eligibility ED, ed_indv_eligibility EDI "
			  + " where delete_sw = 'N' "+
			  " and type_of_assistance_cd in ('TP01','TP09') "+
			  " and ED.EDG_TRACE_ID = EDI.EDG_TRACE_ID "+
			  " and EDI.case_num = "+cargo.getCaseNum()+
			  " and edi.indv_id =  "+cargo.getIndvId()+
			  " order by ed.edg_trace_id desc";
			 


			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();

			SQLCommand command = getSqlCommand(clause);

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return colrows;
	}

	/**
	 * This method will be used by WoRC module to find Eligibility record for a
	 * referred individual for a given payment month
	 *
	 * @param maxRows
	 * @param caseNum
	 *            - case num of referred individual
	 * @param typeOfAssistance
	 *            - type of assistance
	 * @param date
	 *            - for identifying payment month
	 * @return EdEligibilityCargo
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findEligibilityForWoRCPayment(int maxRows,
			long caseNum, String typeOfAssistance, Timestamp date)
			throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			// SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
			sb.append("case_num = ");
			sb.append(caseNum);
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(typeOfAssistance);
			sb.append("' AND delete_sw = 'N' AND ");
			sb.append("eligibility_Beg_Dt <=");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(date));
			sb.append(" AND (eligibility_End_Dt >= ");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(date));
			sb.append(" or eligibility_End_Dt is null)");
			sb.append(" AND current_elig_ind in ('P','A')");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findEligibilityForReferral(int maxRows,
			long caseNum, String typeOfAssistance, Timestamp date)
			throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			// SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
			sb.append("case_num = ");
			sb.append(caseNum);
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(typeOfAssistance);
			sb.append("' AND delete_sw = 'N' AND ");
			sb.append("payment_beg_dt <=");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(date));
			sb.append(" AND (payment_end_dt >= ");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(date));
			sb.append(" or payment_end_dt is null)");
			sb.append(" AND current_elig_ind in ('P','A')");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findEligibilityForMonth(int maxRows,
			long caseNum, String typeOfAssistance, Timestamp date)
			throws GenericRunTimeException {
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(strLiteralMMMyy);
			String paymentMth = "'" + sdf.format(date) + "'";
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = ");
			sb.append(caseNum);
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(typeOfAssistance);
			sb.append("' AND delete_sw = 'N' AND "
					+ DAOSqlHelper.getANSISubstring(
							"cast(payment_beg_dt as VARCHAR(10))", 4, 6)
					+ " = ");
			sb.append(paymentMth);
			sb.append(" AND (payment_end_dt is null OR  payment_end_dt >= ");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(date));
			sb.append(" )");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method is used to fetch the write eligibility cargo based on case
	 * number and type of assistance code.
	 * 
	 * @param maxRows
	 * @param eligCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findForCSS(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		// String dateWherClause;
		try {
			// dateWherClause =
			// DateFormatter.getDateForWhereClauseAnsi(eligCargo.getEligibilityBegDt());
			StringBuilder sb = new StringBuilder();
			sb.append(strLiteralCaseNum2);
			sb.append(eligCargo.getCaseNum());
			sb.append(strLiteralAndEdgNum);
			sb.append(eligCargo.getEdgNum());
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(eligCargo.getTypeOfAssistanceCd());
			sb.append("'");// AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A'
							// ");
			// sb.append(strLiteralAndDeleteSWN);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method is used to find the edge based on the Case number and the
	 * program code.
	 * 
	 * @param maxRows
	 * @param eligCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findEdgForPrograms(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		// String dateWherClause;
		try {
			// dateWherClause =
			// DateFormatter.getDateForWhereClauseAnsi(eligCargo.getEligibilityBegDt());
			StringBuilder sb = new StringBuilder();
			sb.append(strLiteralCaseNum2);
			sb.append(eligCargo.getCaseNum());
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(eligCargo.getTypeOfAssistanceCd());
			sb.append("' AND PROGRAM_CD = '");
			sb.append(eligCargo.getProgramCd());
			sb.append("' AND DELETE_SW = 'N' AND (FS_165_PERCENT_TEST_REQ_SW = 'N' OR FS_165_PERCENT_TEST_REQ_SW IS NULL) ORDER BY FS_165_PERCENT_TEST_REQ_SW,EDG_NUM DESC");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findAssistanceInformationByIndvId(int maxRows,
			EdIndvEligibilityCargo cargo) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		try {

			/*
			 * String clause =
			 * " select distinct edi.indv_id,edi.case_num,ed.benefit_amt,ed.cg_size,ed.type_of_assistance_cd from ed_eligibility ED, ed_indv_eligibility EDI "
			 * + " where delete_sw = 'N' "+
			 * " and type_of_assistance_cd in ('TP01','TP09') "+
			 * " and ED.EDG_TRACE_ID = EDI.EDG_TRACE_ID "+
			 * " and EDI.case_num = "+cargo.getCaseNum()+
			 * " and edi.indv_id =  "+cargo.getIndvId();
			 */

			String clause = "Select * from ED_ELIGIBILITY EL "
					+ "INNER JOIN ED_INDV_ELIGIBILITY IE ON IE.CASE_NUM = EL.CASE_NUM AND IE.EDG_TRACE_ID = EL.EDG_TRACE_ID "
					+ "AND EL.PROGRAM_CD in ( 'RSS') AND EL.PROGRAM_CD NOT IN ('TF','FS','MA','EA') AND EL.DELETE_SW = 'N' AND EL.CURRENT_ELIG_IND IN ('A' ,'C')"
					+ "AND EL.CG_STATUS_CD IN ('AP','PE') and indv_id="
					+ cargo.getIndvId();

			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();

			SQLCommand command = getSqlCommand(clause);

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return colrows;
	}

	// CH-9540 -sdandekar - added below New method(start)
	/**
	 * This method Returns the Case number and Edg number the records which are
	 * exists in bi_fs_detail table.
	 *
	 * @param maxRows
	 *            int
	 * @param EdEligibilityCargo
	 *            cargo
	 * @param fdts
	 *            Timestamp
	 * @param ldts
	 *            Timestamp
	 * @return EdEdgNumAllotmentCargo[]
	 * @throws GenericRunTimeException
	 *             Added by Deepesh for Rajender - 188795
	 */
	public EdEligibilityCargo[] findQCUnivFAPPoCases(int maxRows, String fdts,
			String ldts, int numberOfInst, int currentInst, boolean isParallel)
			throws GenericRunTimeException {
		try {
			ldts = DateFormatter.convSrcToDestinationDtFormat(ldts,
					"MM-dd-yyyy", strLiteralDdMMMMyy);
			fdts = DateFormatter.convSrcToDestinationDtFormat(fdts,
					"MM-dd-yyyy", strLiteralDdMMMMyy);
			/*
			 * CH-9540 -sdandekar - commented below code(start) String
			 * SELECT_PARLELL_SQL =
			 * " SELECT + full(edg) parallel(edg 6 2) edg.CASE_NUM, edg.EDG_NUM "
			 * + " FROM ED_EDG_NUM_ALLOTMENT edg " +
			 * " WHERE PROGRAM_CD = 'FS' AND EXISTS ( " +
			 * " SELECT NULL FROM BI_FS_DETAIL b WHERE b.CASE_NUM = edg.CASE_NUM "
			 * + " AND b.EDG_NUM = edg.EDG_NUM AND ISSUANCE_AMT > 0 " +
			 * " AND PAYMENT_BEGIN_DT >= ? AND PAYMENT_BEGIN_DT <= ? AND ACCESSIBILITY_DT >= ?) "
			 * + "AND ORA_HASH(edg.CASE_NUM, ?) = ? ";
			 */
			// String SELECT_SQL =
			// " SELECT /*+ full(edg) parallel(edg 6 2)*/ edg.CASE_NUM, edg.EDG_NUM "
			/*
			 * + " FROM ED_EDG_NUM_ALLOTMENT edg " +
			 * " WHERE PROGRAM_CD = 'FS' AND EXISTS ( " +
			 * " SELECT NULL FROM BI_FS_DETAIL b WHERE b.CASE_NUM = edg.CASE_NUM "
			 * + " AND b.EDG_NUM = edg.EDG_NUM AND ISSUANCE_AMT > 0 " +
			 * " AND PAYMENT_BEGIN_DT >= ? AND PAYMENT_BEGIN_DT <= ? AND ACCESSIBILITY_DT >= ?)"
			 * ; CH-9540 -sdandekar - commented below code(end)
			 */

			// CH-9540 -sdandekar - added new queries below(Start)
			String SELECT_PARLELL_SQL = "select CASE_NUM,EDG_NUM,BENEFIT_AMT,EDG_TRANSACTION_ID \n"
					+ " from ED_ELIGIBILITY "
					+ " where PROGRAM_CD = 'FS' "
					+ " and CG_STATUS_CD = 'AP' "
					+ strLiteralCurrenteligIndA
					+ strLiteralDeleteSwN
					+ " and EDBC_RUN_DT <= CAST((TRUNC((CAST(? as DATE) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date) "
					+ " and TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ strLiteralPaymentBegDt
					+ " CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date)"
					+ " and (PAYMENT_END_DT >= "
					+ " CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date)"
					+ " or PAYMENT_END_DT is null) "
					+ " order by CASE_NUM, EDG_NUM"
					+ " AND ORA_HASH(edg.CASE_NUM, ?) = ? ";

			String SELECT_SQL = "select CASE_NUM,EDG_NUM,BENEFIT_AMT,EDG_TRANSACTION_ID \n"
					+ " from ED_ELIGIBILITY "
					+ " where PROGRAM_CD = 'FS' "
					+ " and CG_STATUS_CD = 'AP' "
					+ strLiteralCurrenteligIndA
					+ strLiteralDeleteSwN
					+ " and EDBC_RUN_DT <= CAST((TRUNC((CAST(? as DATE) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date) "
					+ " and TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ strLiteralPaymentBegDt
					+ " CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date)"
					+ " and (PAYMENT_END_DT >= "
					+ " CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date)"
					+ " or PAYMENT_END_DT is null) "
					+ " order by CASE_NUM, EDG_NUM";
			// CH-9540 -sdandekar - added new queries below(end)
			List<Object> parms = new ArrayList<Object>();
			SQLCommand command = null;
			if (isParallel) {
				parms.add(fdts);
				parms.add(ldts);
				parms.add(ldts);
				// parms.add(fdts); //CH-9540 -sdandekar - commented
				parms.add(numberOfInst);
				parms.add(currentInst);
				command = getSqlCommandForUpdate(SELECT_PARLELL_SQL, parms);
			} else {
				parms.add(fdts);
				parms.add(ldts);
				parms.add(ldts);
				// parms.add(fdts); //CH-9540 -sdandekar - commented
				command = getSqlCommandForUpdate(SELECT_SQL, parms);
			}
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * This method Returns the Case number and Edg number the records which are
	 * exists in bi_fs_detail table.
	 *
	 * @param maxRows
	 *            int
	 * @param EdEligibilityCargo
	 *            cargo
	 * @param fdts
	 *            Timestamp
	 * @param ldts
	 *            Timestamp
	 * @return EdEdgNumAllotmentCargo[]
	 * @throws GenericRunTimeException
	 *             Added by Deepesh for Rajender - 188795
	 */
	public EdEligibilityCargo[] findQCUnivFAPNegCases(int maxRows, String fdts,
			String ldts, int numberOfInst, int currentInst, boolean isParallel)
			throws GenericRunTimeException {
		try {
			ldts = DateFormatter.convSrcToDestinationDtFormat(ldts,
					"MM-dd-yyyy", strLiteralDdMMMMyy);
			fdts = DateFormatter.convSrcToDestinationDtFormat(fdts,
					"MM-dd-yyyy", strLiteralDdMMMMyy);
			/*
			 * CH-9540 -sdandekar - commented below code(start) String
			 * SELECT_PARLELL_SQL =
			 * " SELECT + full(edg) parallel(edg 6 2) edg.CASE_NUM, edg.EDG_NUM "
			 * + " FROM ED_EDG_NUM_ALLOTMENT edg " +
			 * " WHERE PROGRAM_CD = 'FS' AND EXISTS ( " +
			 * " SELECT NULL FROM BI_FS_DETAIL b WHERE b.CASE_NUM = edg.CASE_NUM "
			 * + " AND b.EDG_NUM = edg.EDG_NUM AND ISSUANCE_AMT > 0 " +
			 * " AND PAYMENT_BEGIN_DT >= ? AND PAYMENT_BEGIN_DT <= ? AND ACCESSIBILITY_DT >= ?) "
			 * + "AND ORA_HASH(edg.CASE_NUM, ?) = ? ";
			 */
			// String SELECT_SQL =
			// " SELECT /*+ full(edg) parallel(edg 6 2)*/ edg.CASE_NUM, edg.EDG_NUM "
			/*
			 * + " FROM ED_EDG_NUM_ALLOTMENT edg " +
			 * " WHERE PROGRAM_CD = 'FS' AND EXISTS ( " +
			 * " SELECT NULL FROM BI_FS_DETAIL b WHERE b.CASE_NUM = edg.CASE_NUM "
			 * + " AND b.EDG_NUM = edg.EDG_NUM AND ISSUANCE_AMT > 0 " +
			 * " AND PAYMENT_BEGIN_DT >= ? AND PAYMENT_BEGIN_DT <= ? AND ACCESSIBILITY_DT >= ?)"
			 * ; CH-9540 -sdandekar - commented below code(end)
			 */

			// CH-9540 -sdandekar - added new queries below(Start)
			String SELECT_PARLELL_SQL = "SELECT DISTINCT ED1.EDG_TRANSACTION_ID, ED1.CASE_NUM, ED1.EDG_NUM "
					+ " FROM ED_ELIGIBILITY ED1 "
					+ " WHERE ED1.PROGRAM_CD = 'FS' AND ED1.TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ " AND ED1.DELETE_SW = 'N' AND ED1.CURRENT_ELIG_IND IN ('A','C') AND ED1.CG_STATUS_CD IN ('DN','TN') "
					+ " AND ED1.EDBC_RUN_DT >= CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date) AND ED1.EDBC_RUN_DT <= CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date) "
					+ " AND ED1.CREATE_DT  IN ( "
					+ " SELECT MAX(ED2.CREATE_DT) FROM ED_ELIGIBILITY ED2 "
					+ " WHERE ED2.CASE_NUM = ED1.CASE_NUM AND ED2.EDG_NUM = ED1.EDG_NUM AND ED2.EDBC_RUN_DT = ED1.EDBC_RUN_DT "
					+ " AND ED2.PROGRAM_CD = 'FS' AND ED2.TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ "  AND ED2.DELETE_SW = 'N' AND ED2.CURRENT_ELIG_IND IN ('A','C') AND ED2.CG_STATUS_CD IN ('DN','TN') "
					+ "  AND ED2.EDBC_RUN_DT >= CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date) AND ED2.EDBC_RUN_DT <= CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date)) "
					+ " ORDER  BY ED1.CASE_NUM,ED1. EDG_NUM "
					+ " AND ORA_HASH(edg.CASE_NUM, ?) = ? ";

			String SELECT_SQL = "SELECT DISTINCT ED1.EDG_TRANSACTION_ID, ED1.CASE_NUM, ED1.EDG_NUM "
					+ "FROM ED_ELIGIBILITY ED1 "
					+ "WHERE ED1.PROGRAM_CD = 'FS' AND ED1.TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ " AND ED1.DELETE_SW = 'N' AND ED1.CURRENT_ELIG_IND IN ('A','C') AND ED1.CG_STATUS_CD IN ('DN','TN') "
					+ " AND ED1.EDBC_RUN_DT >= CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date) AND ED1.EDBC_RUN_DT <= CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date) "
					+ " AND ED1.CREATE_DT IN ( "
					+ " SELECT MAX(ED2.CREATE_DT) FROM ED_ELIGIBILITY ED2 "
					+ " WHERE ED2.CASE_NUM = ED1.CASE_NUM AND ED2.EDG_NUM = ED1.EDG_NUM AND ED2.EDBC_RUN_DT = ED1.EDBC_RUN_DT "
					+ " AND ED2.PROGRAM_CD = 'FS' AND ED2.TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ "  AND ED2.DELETE_SW = 'N' AND ED2.CURRENT_ELIG_IND IN ('A','C') AND ED2.CG_STATUS_CD IN ('DN','TN') "
					+ "  AND ED2.EDBC_RUN_DT >= CAST(trunc(trunc((CAST(? as date) - INTERVAL '1' MONTH),'MM'),'MM') as date) AND ED2.EDBC_RUN_DT <= CAST((TRUNC((CAST(? as date) - INTERVAL '1' MONTH), 'MM') + INTERVAL '1' MONTH - INTERVAL '1' DAY) as date)) "
					+ " ORDER  BY ED1.CASE_NUM,ED1. EDG_NUM ";
			// CH-9540 -sdandekar - added new queries below(end)

			List<Object> parms = new ArrayList<Object>();
			SQLCommand command = null;
			if (isParallel) {
				parms.add(fdts);
				parms.add(ldts);
				parms.add(fdts);
				parms.add(fdts);// CH-9540 -sdandekar - commented
				parms.add(numberOfInst);
				parms.add(currentInst);
				command = getSqlCommandForUpdate(SELECT_PARLELL_SQL, parms);
			} else {
				parms.add(fdts);
				parms.add(ldts);
				parms.add(fdts);
				parms.add(ldts);
				// parms.add(fdts); //CH-9540 -sdandekar - commented
				command = getSqlCommandForUpdate(SELECT_SQL, parms);
			}
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// CH-9540 -sdandekar - added below New method(end)

	/**
	 * Method findByTANFProgramCodeTempTable for loading BI_ST_TANF_MONTHLY
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByTANFProgramCodeTempTable(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByTANFProgramCodeTempTable" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' "
					+ "AND PROGRAM_CD = 'TF' AND TYPE_OF_ASSISTANCE_CD IN ('RAPC') "
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND COALESCE(PAYMENT_END_DT,CAST('01-DEC-2999' as DATE)) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt()) + strLiteralAndDeleteSWN;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByTANFProgramCodeTempTable for loading BI_ST_TANF_MONTHLY
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findSupportiveIssuance(int maxRows,
			BiWcPaymentDetailsCustomCargo cargo) throws GenericRunTimeException {
		Debug.println("findSupportiveIssuance" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " case_num ="
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD ="
					+ cargo.getReferredToCd()
					+ strLiteralAndDeleteSWN
					+ " AND ELIGIBILITY_BEG_DT = ( select max(ELIGIBILITY_BEG_DT) from ed_eligibility where case_num="
					+ cargo.getCaseNum()
					+ " AND program_cd="
					+ cargo.getReferredToCd()
					+ " AND DELETE_SW = 'N' )"
					+ " (FS_165_PERCENT_TEST_REQ_SW = 'N' OR FS_165_PERCENT_TEST_REQ_SW IS NULL)";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * @author knakra
	 * @purpose Used to fetch the records for Emergency Assistance fragment
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findEMChangeData(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			StringBuffer stringBuffer = new StringBuffer();
			stringBuffer.append("SELECT * FROM ED_ELIGIBILITY ED WHERE ");
			// stringBuffer.append("ED.CURRENT_ELIG_IND = 'A' ");
			stringBuffer.append("ED.CASE_NUM = ? ");
			stringBuffer.append("AND ED.EDG_NUM = ? ");
			stringBuffer.append("AND ED.PROGRAM_CD = ? ");
			stringBuffer.append("AND ED.TYPE_OF_ASSISTANCE_CD = ? ");
			stringBuffer.append("AND ED.EDG_TRACE_ID = ?");
			stringBuffer.append("AND ED.DELETE_SW = 'N'");
			// stringBuffer.append("ED.ACTIVITY_TYPE = 'IR'");
			stringBuffer.append("AND EXISTS (SELECT 1 "
					+ "FROM ED_EMER_ASSIST EM WHERE "
					+ "ED.CASE_NUM = EM.CASE_NUM "
					+ "AND ED.EDG_TRACE_ID = EM.EDGE_TRACE_ID "
					+ "AND trunc(ED.EDBC_RUN_DT) = EM.CREATE_DT)"); // As per
																	// Sai's
																	// understanding
																	// used
																	// Create_dt

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(eligibilityCargo.getEdgNum());
			parms.add(eligibilityCargo.getProgramCd());
			parms.add(eligibilityCargo.getTypeOfAssistanceCd());
			parms.add(eligibilityCargo.getEdgTraceId());

			SQLCommand command = getSqlCommandForUpdate(
					stringBuffer.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * @author adbhatnagar
	 * @purpose ELigibility Notice Correspondence- TANF Page 2
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByApprovedRecordsPast12Months(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];

			// from date should be 12 months before the payment beg dt starts
			Timestamp fromDate = cargo.getPaymentBegDt();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(FwCalendar.getInstance().getDate().getTimestamp());

			FwDate fwd = new FwDate();
			Date date = new Date();
			date.setTime(fwd.getTimeInMillis());

			if (fromDate != null) {
				date.setTime(cargo.getPaymentBegDt().getTime());
			}
			calendar.setTime(date);
			calendar.add(calendar.YEAR, -1);
			fromDate = new Timestamp(calendar.getTime().getTime());
			// from date should be 12 months before the payment beg dt ends

			// from date should be 1 day before the payment beg dt
			Timestamp toDate = RpUtils.addDays(cargo.getPaymentBegDt(), (-1));

			StringBuffer stringBuffer = new StringBuffer();
			stringBuffer.append(strLiteralCaseNum2 + cargo.getCaseNum());
			stringBuffer.append(" AND EFIP_ELIG_SW = 'Y' ");
			stringBuffer.append(strLiteralAndCgStatusCdAP);
			stringBuffer.append(strLiteralAndCurrentEligIndA);
			stringBuffer.append(" AND FIN_ELIG_RSLT_CD = 'FL' ");
			stringBuffer.append(" AND trunc(PAYMENT_BEG_DT) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(fromDate));
			stringBuffer.append(" AND trunc(PAYMENT_END_DT) <= "
					+ DateFormatter.getDateForWhereClauseAnsi(toDate));
			map.put(FwConstants.READY_WHERE_CLAUSE, stringBuffer.toString());
			resultList.toArray(colrows);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * added by animesh a. for correspondence Method
	 * findByCaseNumTANFPaymentDates, query by Pgm Code = 'TF', case num and
	 * correspondence generated date between payment strt and end date
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByCaseNumTANFPaymentDates(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByTANFProgramCode" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = "CASE_NUM ="
					+ cargo.getCaseNum()
					+ strLiteralANd
					+ " CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' "
					+ " AND PROGRAM_CD = 'TF' "
					+ " AND (TYPE_OF_ASSISTANCE_CD = 'TP01' OR TYPE_OF_ASSISTANCE_CD = 'TP61') "
					+ strLiteralAndPaymentBegDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ strLiteralAndPaymentEndDt2
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralOrPaymentEndDtisNull
					+ " AND DELETE_SW = 'N' AND EDG_NUM > " + cargo.getEdgNum()
					+ strLiteralOrderByEdgNum;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * @author snayak
	 * @param cargo
	 * @return Object[] from the resultset.
	 */
	public EdEligibilityCargo[] findByCaseNumEdgeTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = ");
			sb.append(cargo.getCaseNum());
			sb.append("and EDG_TRACE_ID = ");
			sb.append(cargo.getEdgTraceId());
			sb.append(" AND PROGRAM_CD ='FS'");
			sb.append(" AND delete_sw = 'N' AND CG_STATUS_CD = 'PE'");
			sb.append(" AND ACTIVITY_TYPE = 'RE'");
			sb.append(" AND CURRENT_ELIG_IND = 'P'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CH-25848-Kunal-Start
	/**
	 * @author snayak
	 * @param cargo
	 * @return Object[] from the resultset.
	 */
	public EdEligibilityCargo[] findByCaseNumForNCH034(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = ");
			sb.append(cargo.getCaseNum());
			/*
			 * sb.append("and EDG_TRACE_ID = ");
			 * sb.append(cargo.getEdgTraceId());
			 */
			sb.append(" AND PROGRAM_CD ='FS'");
			sb.append(" AND delete_sw = 'N' AND CG_STATUS_CD = 'PE'");
			sb.append(" AND ACTIVITY_TYPE = 'RE'");
			sb.append(" AND CURRENT_ELIG_IND = 'P'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// CH-25848-Kunal-End
	public EdEligibilityCargo[] findByStatusAsstTypeCode(int maxRows,
			String asstTypeCode, Timestamp schdDate)
			throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("type_of_assistance_cd  IN ");
			sb.append("(" + asstTypeCode + ")");
			sb.append(" AND CG_STATUS_CD = 'AP'");
			sb.append("and payment_beg_dt <= ");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(schdDate));
			sb.append(" AND (payment_end_dt >= "
					+ DateFormatter.getDateForWhereClauseAnsi(schdDate)
					+ " OR payment_end_dt IS NULL)");
			sb.append(" AND delete_sw = 'N'");
			sb.append(" AND CURRENT_ELIG_IND = 'A'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// ADDED BY: vamrit for Mass Mailing batch
	/**
	 * 
	 * @param maxRows
	 * @param coeCode
	 * @param schdDate
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByStatusCoeCode(int maxRows,
			String coeCode, Timestamp schdDate) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("coe  IN ");
			sb.append("(" + coeCode + ")");
			sb.append(" AND CG_STATUS_CD = 'AP'");
			sb.append("and payment_beg_dt <= ");
			sb.append(DateFormatter.getDateForWhereClauseAnsi(schdDate));
			sb.append(" AND (payment_end_dt >= "
					+ DateFormatter.getDateForWhereClauseAnsi(schdDate)
					+ " OR payment_end_dt IS NULL)");
			sb.append(" AND delete_sw = 'N'");
			sb.append(" AND CURRENT_ELIG_IND = 'A'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvElg(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append(strLiteralselectfromedeligibility);
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
			query.append(" AND EL.CG_STATUS_CD IN ('AP')");
			query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
			query.append(" AND EL.ELIGIBILITY_BEG_DT <= ?");
			query.append(" AND (EL.ELIGIBILITY_END_DT IS NULL OR EL.ELIGIBILITY_END_DT >= ? )");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");

			List<Object> parms = new ArrayList<Object>();

			parms.add(eligibilityCargo.getEligibilityEndDt());
			parms.add(eligibilityCargo.getEligibilityBegDt());
			parms.add(eligibilityCargo.getCaseNum());

			parms.add(indvId);
			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	// aurs
	public EdEligibilityCargo[] findByPgCdEligInd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = '");
			sb.append(cargo.getCaseNum());
			sb.append("' AND PROGRAM_CD = '");
			sb.append(cargo.getProgramCd());
			sb.append("' AND DELETE_SW = 'N'");
			sb.append(" AND CURRENT_ELIG_IND = '");
			sb.append(cargo.getCurrentEligInd());
			sb.append("' AND type_of_assistance_cd ='TP01'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvElgByPmntDt(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append(strLiteralselectfromedeligibility);
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
			query.append(" AND EL.CG_STATUS_CD IN ('AP')");
			query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
			query.append(" AND (EL.PAYMENT_END_DT >= ? or EL.PAYMENT_END_DT IS NULL)");
			query.append(" AND EL.PAYMENT_BEG_DT <= ? ");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");
			query.append(" order by EL.PAYMENT_BEG_DT desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(indvId);
			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findBySEARCHSElgWithoutGrpInd(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append(strLiteralselectfromedeligibility);
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
			query.append(" AND EL.CG_STATUS_CD IN ('AP')");
			query.append(" AND EL.type_of_assistance_cd ='TP01' ");
			query.append(" AND (EL.PAYMENT_END_DT >= ? or EL.PAYMENT_END_DT IS NULL)");
			query.append(" AND EL.PAYMENT_BEG_DT <= ? ");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");
			query.append(" order by EL.PAYMENT_BEG_DT desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(indvId);
			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 *
	 * @param maxRows
	 * @param caseNum
	 * @param indvId
	 * @param yyyyMM
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySEARCHSTFEligCaseIndvMonth(int maxRows,
			long caseNum, long indvId, String yyyyMM) throws ParseException,
			GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			String MMMyy = DateFormatter.getSrcToDestDtAnsi(yyyyMM, "yyyyMM",
					strLiteralMMMyy);
			query.append(" select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ");
			query.append(" EL.PROGRAM_CD = 'TF' AND EL.DELETE_SW = 'N' AND EL.CURRENT_ELIG_IND IN ('A')  AND EL.CG_STATUS_CD IN ('AP') AND EL.type_of_assistance_cd ='TP01' ");
			query.append(" AND ie.case_num = " + caseNum + " AND ie.indv_id = "
					+ indvId + " AND ie.group_ind='C' ");
			query.append(" and EL.PAYMENT_END_DT is not null and  TRUNC(EL.PAYMENT_END_DT,'MM')<=CAST('01-"
					+ MMMyy + "' as DATE)");
			query.append(" and (TRUNC(EL.PAYMENT_BEG_DT,'MM')>=CAST('01-"
					+ MMMyy + "' as DATE) or EL.PAYMENT_BEG_DT is null )");
			query.append(" order by EL.PAYMENT_BEG_DT desc");

			SQLCommand command = getSqlCommand(query.toString());
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * findByCaseNumforSEARCHS : Find by case
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforSEARCHS(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("select * from ed_eligibility where");
			sb.append(" case_num = ? ");
			sb.append(" AND PROGRAM_CD = 'TF' AND type_of_assistance_cd='TP01' ");
			sb.append(" AND eligibility_end_dt is not null");
			sb.append(" And eligibility_end_dt >= ? ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getEligibilityEndDt());
			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * findByCaseNumforSEARCHS : Find by case
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumClosedOrderedByEndDtForSEARCHS(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("select * from ed_eligibility where");
			sb.append(" case_num = ? ");
			sb.append(" AND PROGRAM_CD = 'TF' AND type_of_assistance_cd='TP01' ");
			sb.append(" AND eligibility_end_dt is not null  AND CG_STATUS_CD ='TN' AND DELETE_SW='N' ");
			sb.append(" AND eligibility_end_dt <= ? order by eligibility_end_dt desc ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(cargo.getEligibilityBegDt());
			SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * findByCaseNumforCAPS : Find by case
	 * 
	 * @author urvmehta
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforCAPS(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = '");
			sb.append(cargo.getCaseNum());
			sb.append("' AND DELETE_SW = 'N' ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public void getRowFromResultSet(EdEligibilityCargo row, ResultSet rs)
			throws SQLException {
		row.setAdverseActionAllowedSw(getCharacterFromResultSet(rs,
				"ADVERSE_ACTION_ALLOWED_SW"));
		row.setSupplementOffsetAmt(rs.getDouble("SUPPLEMENT_OFFSET_AMT"));
		row.setBuildNextMonthSw(getCharacterFromResultSet(rs,
				"BUILD_NEXT_MONTH_SW"));
		row.setSdvInd(getCharacterFromResultSet(rs, "SDV_IND"));
		row.setCopayAmt(rs.getDouble("COPAY_AMT"));
		row.setDeleteSw(getCharacterFromResultSet(rs, strLiteralDeleteSw));
		row.setFsRasclSw(getCharacterFromResultSet(rs, "FS_RASCL_SW"));
		row.setTmaGrpReqSw(getCharacterFromResultSet(rs, "TMA_GRP_REQ_SW"));
		row.setArchiveDt(rs.getTimestamp("ARCHIVE_DT"));
		row.setProtResAssessSw(getCharacterFromResultSet(rs,
				"PROT_RES_ASSESS_SW"));
		row.setFundingSourceCd(rs.getString("FUNDING_SOURCE_CD"));
		row.setStfsPotentialEligSw(getCharacterFromResultSet(rs,
				"STFS_POTENTIAL_ELIG_SW"));
		row.setIspId(rs.getLong("ISP_ID"));
		row.setEligibilityBegDt(rs.getTimestamp("ELIGIBILITY_BEG_DT"));
		row.setAssociatedEdgTraceId(rs.getLong("ASSOCIATED_EDG_TRACE_ID"));
		row.setNewCertApplDt(rs.getTimestamp("NEW_CERT_APPL_DT"));
		row.setRecoupmentAmt(rs.getDouble("RECOUPMENT_AMT"));
		row.setFoodstampPaInd(getCharacterFromResultSet(rs, "FOODSTAMP_PA_IND"));
		row.setUpdateDt(rs.getTimestamp("UPDATE_DT"));
		row.setMidCertificationShortenSw(getCharacterFromResultSet(rs,
				"MID_CERTIFICATION_SHORTEN_SW"));
		row.setCgSize(rs.getLong("CG_SIZE"));
		row.setPaymentAmt(rs.getDouble("PAYMENT_AMT"));
		row.setNfEligRsltCd(rs.getString("NF_ELIG_RSLT_CD"));
		row.setEligibilityEndDt(rs.getTimestamp("ELIGIBILITY_END_DT"));
		row.setAdvanceNoticeReqSw(getCharacterFromResultSet(rs,
				"ADVANCE_NOTICE_REQ_SW"));
		row.setNfVerifReqSw(getCharacterFromResultSet(rs, "NF_VERIF_REQ_SW"));
		row.setFinEligTestReqSw(getCharacterFromResultSet(rs,
				"FIN_ELIG_TEST_REQ_SW"));
		row.setCountOfCgChild(rs.getInt("COUNT_OF_CG_CHILD"));
		row.setEfipEligSw(getCharacterFromResultSet(rs, "EFIP_ELIG_SW"));
		row.setPenaltyAmt(rs.getDouble("PENALTY_AMT"));
		row.setNetSupplementAmt(rs.getDouble("NET_SUPPLEMENT_AMT"));
		row.setOverrideSpanCd(getCharacterFromResultSet(rs, "OVERRIDE_SPAN_CD"));
		row.setDelayRsnDt(rs.getTimestamp("DELAY_RSN_DT"));
		row.setPotentialTmapEligSw(getCharacterFromResultSet(rs,
				"POTENTIAL_TMAP_ELIG_SW"));
		row.setEdgSsiSw(getCharacterFromResultSet(rs, "EDG_SSI_SW"));
		row.setClaimTypeInd(rs.getLong("CLAIM_TYPE_IND"));
		row.setResEligTestReqSw(getCharacterFromResultSet(rs,
				"RES_ELIG_TEST_REQ_SW"));
		row.setMedIdSw(getCharacterFromResultSet(rs, "MED_ID_SW"));
		row.setCgEligRsltCd(rs.getString("CG_ELIG_RSLT_CD"));
		row.setHistoricalSw(getCharacterFromResultSet(rs, "HISTORICAL_SW"));
		row.setEdgOverrideSw(getCharacterFromResultSet(rs, "EDG_OVERRIDE_SW"));
		row.setMigrantReasonTypeCd(getCharacterFromResultSet(rs,
				"MIGRANT_REASON_TYPE_CD"));
		row.setEdgSize(rs.getLong("EDG_SIZE"));
		row.setIllegalAliensNum(rs.getLong("ILLEGAL_ALIENS_NUM"));
		row.setStateFundingInd(getCharacterFromResultSet(rs,
				"STATE_FUNDING_IND"));
		row.setCreateDt(rs.getTimestamp("CREATE_DT"));
		row.setHkPresumptiveEdgSw(getCharacterFromResultSet(rs,
				"HK_PRESUMPTIVE_EDG_SW"));
		row.setSpendDownMetDt(rs.getTimestamp("SPEND_DOWN_MET_DT"));
		row.setStfsPotentialEligBeginDt(rs
				.getTimestamp("STFS_POTENTIAL_ELIG_BEGIN_DT"));
		row.setEdgNum(rs.getLong(strLiteralEdgNum));
		row.setActivityType(rs.getString("ACTIVITY_TYPE"));
		row.setTypeOfAssistanceCd(rs.getString(strLiteralTypeOfAssistanceCd));
		row.setGroupNum(rs.getLong("GROUP_NUM"));
		row.setEdgReprocessSw(getCharacterFromResultSet(rs, "EDG_REPROCESS_SW"));
		row.setEdgCombineSw(getCharacterFromResultSet(rs, "EDG_COMBINE_SW"));
		row.setOverpaymentAmt(rs.getDouble("OVERPAYMENT_AMT"));
		row.setCertEndDt(rs.getTimestamp("CERT_END_DT"));
		row.setExpandedPraSw(getCharacterFromResultSet(rs, "EXPANDED_PRA_SW"));
		row.setPaymentBegDt(rs.getTimestamp("PAYMENT_BEG_DT"));
		row.setDispositionCertBegDt(rs.getTimestamp("DISPOSITION_CERT_BEG_DT"));
		row.setSemiAnnualReviewDt(rs.getTimestamp("SEMI_ANNUAL_REVIEW_DT"));
		row.setIncExclTestReqSw(getCharacterFromResultSet(rs,
				"INC_EXCL_TEST_REQ_SW"));
		row.setChipReferralSw(getCharacterFromResultSet(rs, "CHIP_REFERRAL_SW"));
		row.setBenefitAmt(rs.getDouble("BENEFIT_AMT"));
		row.setStfsEligRsltCd(rs.getString("STFS_ELIG_RSLT_CD"));
		row.setPaymentEndDt(rs.getTimestamp("PAYMENT_END_DT"));
		row.setCombinedPaymentSw(getCharacterFromResultSet(rs,
				"COMBINED_PAYMENT_SW"));
		row.setSerCopayChangeAllowedSw(getCharacterFromResultSet(rs,
				"SER_COPAY_CHANGE_ALLOWED_SW"));
		row.setDiActionDt(rs.getTimestamp("DI_ACTION_DT"));
		row.setCountOfCgAdults(rs.getInt("COUNT_OF_CG_ADULTS"));
		row.setRecoupmentErrorTypeCd(rs.getString("RECOUPMENT_ERROR_TYPE_CD"));
		row.setFsStimulusAmt(rs.getDouble("FS_STIMULUS_AMT"));
		row.setLtcBudgetCd(rs.getString("LTC_BUDGET_CD"));
		row.setSecondPartyReviewerId(rs.getLong("SECOND_PARTY_REVIEWER_ID"));
		row.setEidChangeSw(getCharacterFromResultSet(rs, "EID_CHANGE_SW"));
		row.setCgStatusCd(rs.getString("CG_STATUS_CD"));
		row.setFsShortCertSw(getCharacterFromResultSet(rs, "FS_SHORT_CERT_SW"));
		row.setDispositionTransId(rs.getLong("DISPOSITION_TRANS_ID"));
		row.setDelayReasonCd(rs.getString("DELAY_REASON_CD"));
		row.setRider37Sw(getCharacterFromResultSet(rs, "RIDER_37_SW"));
		row.setSupplementRecoupmentAmt(rs
				.getDouble("SUPPLEMENT_RECOUPMENT_AMT"));
		row.setApplicationDt(rs.getTimestamp("APPLICATION_DT"));
		row.setAutoDisposeSw(getCharacterFromResultSet(rs, "AUTO_DISPOSE_SW"));
		row.setEdgClosureSw(getCharacterFromResultSet(rs, "EDG_CLOSURE_SW"));
		row.setFinEligRsltCd(rs.getString("FIN_ELIG_RSLT_CD"));
		row.setBenefitStatus(rs.getString("BENEFIT_STATUS"));
		row.setMicapFapSw(getCharacterFromResultSet(rs, "MICAP_FAP_SW"));
		row.setOttanfRsltCd(rs.getString("OTTANF_RSLT_CD"));
		row.setHearingOverrideSw(getCharacterFromResultSet(rs,
				"HEARING_OVERRIDE_SW"));
		row.setRider7Sw(getCharacterFromResultSet(rs, "RIDER_7_SW"));
		row.setPreparedFoodSw(getCharacterFromResultSet(rs, "PREPARED_FOOD_SW"));
		row.setFsExpeditedSw(getCharacterFromResultSet(rs, "FS_EXPEDITED_SW"));
		row.setPriorMaSeqNum(rs.getLong("PRIOR_MA_SEQ_NUM"));
		row.setStfsPotentialEligEndDt(rs
				.getTimestamp("STFS_POTENTIAL_ELIG_END_DT"));
		row.setSpReviewDt(rs.getTimestamp("SP_REVIEW_DT"));
		row.setUpdateUserId(rs.getString("UPDATE_USER_ID"));
		row.setEfipToFipSw(getCharacterFromResultSet(rs, "EFIP_TO_FIP_SW"));
		row.setIncExclEligRsltCd(rs.getString("INC_EXCL_ELIG_RSLT_CD"));
		row.setMidMonthSw(getCharacterFromResultSet(rs, "MID_MONTH_SW"));
		row.setDispositionEligBegDt(rs.getTimestamp("DISPOSITION_ELIG_BEG_DT"));
		row.setReferenceEdgTraceId(rs.getLong("REFERENCE_EDG_TRACE_ID"));
		row.setFsCatEligCd(rs.getString("FS_CAT_ELIG_CD"));
		row.setNegativeActionEffDt(rs.getTimestamp("NEGATIVE_ACTION_EFF_DT"));
		row.setFsEldDisGroupSw(getCharacterFromResultSet(rs,
				"FS_ELD_DIS_GROUP_SW"));
		row.setCatEligSw(getCharacterFromResultSet(rs, "CAT_ELIG_SW"));
		row.setCreatorInd(getCharacterFromResultSet(rs, "CREATOR_IND"));
		row.setStfsPotentialBenefitAmt(rs
				.getDouble("STFS_POTENTIAL_BENEFIT_AMT"));
		row.setProgramCd(rs.getString(strLiteralProgarmCd));
		row.setSupplementAmt(rs.getDouble("SUPPLEMENT_AMT"));
		row.setStfsIneligRsnCd(rs.getString("STFS_INELIG_RSN_CD"));
		row.setAllowBenefitMatchSw(getCharacterFromResultSet(rs,
				"ALLOW_BENEFIT_MATCH_SW"));
		row.setMidCertEndDt(rs.getTimestamp("MID_CERT_END_DT"));
		row.setSpecialTriggerCd(rs.getString("SPECIAL_TRIGGER_CD"));
		row.setAdequateNoticeReqSw(getCharacterFromResultSet(rs,
				"ADEQUATE_NOTICE_REQ_SW"));
		row.setMndtChExistSw(getCharacterFromResultSet(rs, "MNDT_CH_EXIST_SW"));
		row.setEdChipSkipInd(getCharacterFromResultSet(rs, "ED_CHIP_SKIP_IND"));
		row.setEdgTransactionId(rs.getLong("EDG_TRANSACTION_ID"));
		row.setRequestDt(rs.getTimestamp("REQUEST_DT"));
		row.setSpendDownAmt(rs.getDouble("SPEND_DOWN_AMT"));
		row.setVerificationStatusCd(rs.getString("VERIFICATION_STATUS_CD"));
		row.setCmaGroupNum(rs.getLong("CMA_GROUP_NUM"));
		row.setEstimatedEligEndDt(rs.getTimestamp("ESTIMATED_ELIG_END_DT"));
		row.setParNum(rs.getLong("PAR_NUM"));
		row.setCreateUserId(rs.getString("CREATE_USER_ID"));
		row.setEdgTraceId(rs.getLong(strLiteralEdgTraceId));
		row.setSimplifiedReportingGrpCd(rs
				.getString("SIMPLIFIED_REPORTING_GRP_CD"));
		row.setMigrantHouseholdSw(getCharacterFromResultSet(rs,
				"MIGRANT_HOUSEHOLD_SW"));
		row.setFsDaEdgSw(rs.getString("FS_DA_EDG_SW"));
		row.setCertBegDt(rs.getTimestamp("CERT_BEG_DT"));
		row.setHisTypeInd(rs.getLong("HIS_TYPE_IND"));
		row.setPotGrossBenefitAmt(rs.getDouble("POT_GROSS_BENEFIT_AMT"));
		row.setEidEligSw(getCharacterFromResultSet(rs, "EID_ELIG_SW"));
		row.setTmaTypeCd(rs.getString("TMA_TYPE_CD"));
		row.setEdbcActionCd(rs.getString("EDBC_ACTION_CD"));
		row.setPrimaryWorkerId(rs.getLong("PRIMARY_WORKER_ID"));
		row.setExpeditedDetermDt(rs.getTimestamp("EXPEDITED_DETERM_DT"));
		row.setCaseNum(rs.getLong(strLiteralCaseNum1));
		row.setSpReviewCd(rs.getString("SP_REVIEW_CD"));
		row.setMonitoringDt(rs.getTimestamp("MONITORING_DT"));
		row.setNetBenefitAmt(rs.getDouble("NET_BENEFIT_AMT"));
		row.setProgReqAppDt(rs.getTimestamp("PROG_REQ_APP_DT"));
		row.setHomelessHouseholdSw(getCharacterFromResultSet(rs,
				"HOMELESS_HOUSEHOLD_SW"));
		row.setRecoupmentAdviceSw(getCharacterFromResultSet(rs,
				"RECOUPMENT_ADVICE_SW"));
		row.setSpendDownInd(getCharacterFromResultSet(rs, "SPEND_DOWN_IND"));
		row.setEdbcRunDt(rs.getTimestamp("EDBC_RUN_DT"));
		row.setCdcBenefitMonth(rs.getTimestamp("CDC_BENEFIT_MONTH"));
		row.setSuspendBenefitSw(getCharacterFromResultSet(rs,
				"SUSPEND_BENEFIT_SW"));
		row.setSignDt(rs.getTimestamp("SIGN_DT"));
		row.setFs165PercentTestReqSw(getCharacterFromResultSet(rs,
				"FS_165_PERCENT_TEST_REQ_SW"));
		row.setUniqueTransId(rs.getLong("UNIQUE_TRANS_ID"));
		row.setResTrfSw(getCharacterFromResultSet(rs, "RES_TRF_SW"));
		row.setRscEligRsltCd(rs.getString("RSC_ELIG_RSLT_CD"));
		row.setToaPriorityNum(rs.getLong("TOA_PRIORITY_NUM"));
		row.setRecEndDt(rs.getTimestamp("REC_END_DT"));
		row.setPriorMedicalCd(rs.getString("PRIOR_MEDICAL_CD"));
		row.setPtbdSw(getCharacterFromResultSet(rs, "PTBD_SW"));
		row.setRecBeginDt(rs.getTimestamp("REC_BEGIN_DT"));
		row.setSngParChUnder6Sw(getCharacterFromResultSet(rs,
				"SNG_PAR_CH_UNDER6_SW"));
		row.setCurrentEligInd(getCharacterFromResultSet(rs,
				strLiteralCurrentEligInd));
		row.setSupplementAdviceSw(getCharacterFromResultSet(rs,
				"SUPPLEMENT_ADVICE_SW"));
		row.setYoungChDob(rs.getTimestamp("YOUNG_CH_DOB"));
		row.setExpToMeetSpendDownSw(getCharacterFromResultSet(rs,
				"EXP_TO_MEET_SPEND_DOWN_SW"));
		row.setRowid(rs.getString("rowid"));
		row.setServicesSw(getCharacterFromResultSet(rs, "SERVICES_SW"));
		row.setAbawdSw(getCharacterFromResultSet(rs, "ABAWD_SW"));
		row.setDelayRsnCd(rs.getString("DELAY_RSN_CD"));
	}

	/**
	 * Converts the String to char. If the String is null, it returns 0 for
	 * null.
	 * 
	 * @param rs
	 *            ResultSet
	 * @param col
	 *            String
	 * @return char
	 * @throws SQLException
	 */
	public char getCharacterFromResultSet(ResultSet rs, String col)
			throws SQLException {
		String result = rs.getString(col);
		if (result != null && result.length() > 0) {
			return result.charAt(0);
		} else {
			return 0;
		}
	}

	/**
	 * findByCaseNumforEaCapsTrigger : Find by case and program code
	 * 
	 * @author amirajkar
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumforEaCapsTrigger(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("CASE_NUM = '");
			sb.append(cargo.getCaseNum());
			sb.append("' AND PROGRAM_CD = '");
			sb.append(cargo.getProgramCd());
			sb.append("' AND DELETE_SW = 'N' ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This method is added to check the type of type of assistance of a person.
	 * Set type of assistance as Y if a person is registered as Refugee only.
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] checkIndividualTypeofAssistance(int maxRows,
			EdIndvEligibilityCargo cargo) throws GenericRunTimeException {

		EdEligibilityCargo[] colrows = null;

		String programCode = null;
		String typeOfAssistance = null;
		boolean isRefugee = false;
		boolean nonRefugee = false;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append("select PROGRAM_CD, TYPE_OF_ASSISTANCE_CD ");
			sb.append(" from cv_ed_mci_edg_individual ");
			sb.append(" where indv_id =" + cargo.getIndvId());
			sb.append(" and ((elig_eff_end_dt is NULL) OR CAST(CAST(elig_eff_end_dt as VARCHAR(10)) as DATE) >= CAST(TRUNC(CURRENT_TIMESTAMP) as DATE))");

			ArrayList<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			EdEligibilityCargo newEligiCargo = new EdEligibilityCargo();
			newEligiCargo.setTypeOfAssistanceCd("N");
			SQLCommand command = getSqlCommand(sb.toString());

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			if (results != null && results.size() > 0) {
				for (Map<String, Object> result : results) {
					programCode = (String) result.get(strLiteralProgarmCd);
					typeOfAssistance = (String) result
							.get(strLiteralTypeOfAssistanceCd);
					if (("RSS".equalsIgnoreCase(programCode))
							|| ("TF".equalsIgnoreCase(programCode) && "RAPC"
									.equalsIgnoreCase(typeOfAssistance))) {
						isRefugee = true;
					} else {
						nonRefugee = true;
					}
				}
			}

			if (isRefugee == true && nonRefugee == false) {
				newEligiCargo.setTypeOfAssistanceCd("Y");
			}

			resultList.add(newEligiCargo);

			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return colrows;
	}

	/**
	 * findByCaseNumTOAAndPostTanfEmp : Find by case and program code
	 * 
	 * @author amirajkar
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumTOAAndPostTanfEmp(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("CASE_NUM =  ");
			sb.append(cargo.getCaseNum());
			sb.append(" AND TYPE_OF_ASSISTANCE_CD = '");
			sb.append(cargo.getTypeOfAssistanceCd());
			if (cargo.getEfipEligSw() != '\u0000') {
				sb.append("' AND EFIP_ELIG_SW = '");
				sb.append(cargo.getEfipEligSw());
			}
			sb.append("' AND DELETE_SW = 'N' ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByAuthCaseNum(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		String sql = null;

		try {

			sql = " select * from ed_eligibility where edg_trace_id = (select max (edg_trace_id) from ed_eligibility where case_num = ? and"
					+ "  current_elig_ind = 'A' and cg_status_cd = 'AP' and program_cd = 'EA') ";

			params.add(cargo.getCaseNum());

			SQLCommand command = getSqlCommandForUpdate(sql, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method to find the Primary payee EDG of the case
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberPrimaryPayeeEDGInfo(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {

		Debug.println("findByCaseNumberAndEdgNumber " + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);

		// StringBuffer sqlClause = new StringBuffer();
		// List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		try {

			StringBuffer query = new StringBuffer();
			query.append("SELECT E.CASE_NUM, E.EDG_NUM, E.TYPE_OF_ASSISTANCE_CD, E.PROGRAM_CD, ");
			query.append("E.PAYMENT_BEG_DT FROM  ED_ELIGIBILITY E ");
			query.append("LEFT OUTER JOIN DC_PRIMARY_PAYEE P ON E.CASE_NUM=P.CASE_NUM AND E.EDG_NUM=P.EDG_NUM ");
			query.append("WHERE E.CASE_NUM = ? ");
			query.append("AND E.DELETE_SW = 'N' ");
			query.append("AND E.CURRENT_ELIG_IND = 'A' ");
			query.append("AND E.PAYMENT_END_DT IS NULL ");
			query.append("AND P.CASE_NUM IS NULL ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());

			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	

	/**
	 *
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] medSocialReviewClosure(int maxRows,
			String params) throws GenericRunTimeException {

		try {
			StringBuffer sb = new StringBuffer();
			
			sb.append("select distinct ed.* from dc_disability dc,ed_eligibility ed ");
			sb.append(" where dc.review_dt is not null ");
			sb.append(" and to_char(dc.review_dt,'ddMMYY') = to_char(LAST_DAY(to_date('"+params+"','DD-MM-YYYY')),'ddMMYY')"); 
			sb.append(" and dc.srt_status_cd='AP'");
			sb.append(" and dc.HIST_NAV_IND in('S','P')");
			sb.append(" and ed.delete_sw='N'");
			sb.append(" and ed.cg_status_cd='AP'");
			sb.append(" and ed.current_elig_ind='A'");
			sb.append(" and ed.PAYMENT_END_DT is null");
			sb.append(" and dc.indv_id=ed.TARGET_PERSON_ID");
			sb.append(" and ed.PROGRAM_CD='MA'");
			sb.append(" and ed.DELAY_RSN_CD is not null");
			sb.append(" and ed.DELAY_RSN_CD not in('ACA')");
					     
			

			

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sb.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	/**
	 *
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getSNAP01ExpeditedSNAPInformation(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" select * from ed_eligibility ");
			sb.append(" where case_num = " + eligibilityCargo.getCaseNum());
			sb.append(" and Current_Elig_Ind = 'A' ");
			sb.append(" and Cg_Status_Cd = 'AP' ");
			sb.append(" and activity_type = 'IN' ");
			sb.append(" and edg_num not in ( ");
			sb.append(" select edg_num from ed_eligibility where ");
			sb.append(" case_num = " + eligibilityCargo.getCaseNum());
			sb.append(" and Current_Elig_Ind = 'A' ");
			sb.append(" and Cg_Status_Cd = 'AP' ");
			// sb.append(" and activity_type = 'IN' ");
			sb.append(" and payment_end_dt is null ");
			sb.append(" and delete_sw = 'N' ");
			sb.append(" ) ");
			sb.append(" order by payment_beg_dt ");

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sb.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	// CHIMESMO-80506 - Chitra
	public EdEligibilityCargo[] getSNAP01ExpeditedPending(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" select * from ed_eligibility ");
			sb.append(" where case_num = " + eligibilityCargo.getCaseNum());
			// sb.append(" and Current_Elig_Ind = 'P' ");
			sb.append(" and Cg_Status_Cd = 'PE' ");
			sb.append(" and delete_sw = 'N' ");
			sb.append(" and Program_cd = 'FS' ");
			sb.append(" and payment_end_dt is null");

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sb.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getSNAP01ExpeditedSNAPInformationWithEDBCRunDate(
			int maxRows, EdEligibilityCargo eligibilityCargo)
			throws GenericRunTimeException {

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" select * from ed_eligibility ");
			sb.append(" where case_num = " + eligibilityCargo.getCaseNum());
			sb.append(" and Current_Elig_Ind = 'A' ");
			sb.append(" AND EDBC_RUN_DT = ").append(
					DateFormatter.getDateForWhereClause(eligibilityCargo
							.getEdbcRunDt()));
			sb.append(" and Cg_Status_Cd = 'AP' ");
			sb.append(" and activity_type = 'IN' ");
			sb.append(" and edg_num not in ( ");
			sb.append(" select edg_num from ed_eligibility where ");
			sb.append(" case_num = " + eligibilityCargo.getCaseNum());
			sb.append(" and Current_Elig_Ind = 'A' ");
			sb.append(" and Cg_Status_Cd = 'AP' ");
			// sb.append(" and activity_type = 'IN' ");
			sb.append(" and payment_end_dt is null ");
			sb.append(" and delete_sw = 'N' ");
			sb.append(" ) ");
			sb.append(" order by payment_beg_dt ");

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sb.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvidualsElgByPmntDt(int maxRows,
			EdEligibilityCargo eligibilityCargo, long[] indvIds)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder indvIdStr = new StringBuilder("");
			boolean toAppendSeparator = false;
			if (indvIds != null && indvIds.length != 0) {
				for (int i = 0; i < indvIds.length; i++) {
					if (toAppendSeparator) {
						indvIdStr.append(",");
					}
					indvIdStr.append(indvIds[i]);
					toAppendSeparator = true;
				}
			}

			if (indvIdStr != null && indvIdStr.toString().trim().length() != 0) {

				StringBuilder query = new StringBuilder();
				query.append(strLiteralselectfromedeligibility);
				query.append(" EL.PROGRAM_CD = 'TF' ");
				query.append(" AND EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
				query.append(" AND EL.CG_STATUS_CD IN ('AP')");
				query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
				query.append(" AND (EL.PAYMENT_END_DT >= ? or EL.PAYMENT_END_DT IS NULL)");
				query.append(" AND EL.PAYMENT_BEG_DT <= ? ");
				query.append(" AND ie.case_num = ? ");
				query.append(" AND ie.indv_id in (" + indvIdStr.toString()
						+ ")");
				query.append(" order by EL.PAYMENT_BEG_DT desc");

				List<Object> parms = new ArrayList<Object>();
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getCaseNum());
				// parms.add(indvIdStr.toString());
				SQLCommand command = getSqlCommandForUpdate(query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return null;

	}

	public EdEligibilityCargo[] findBySEARCHSSameSpanApproved(int maxRows,
			EdEligibilityCargo eligibilityCargo) throws ParseException,
			GenericRunTimeException {
		try {

			StringBuilder query = new StringBuilder();
			query.append("select * from ed_eligibility el where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
			query.append(" AND EL.CG_STATUS_CD IN ('AP')");
			query.append(" AND EL.type_of_assistance_cd ='TP01' ");
			query.append(" AND ((EL.PAYMENT_END_DT IS NOT NULL  AND to_date(concat(to_char(EL.PAYMENT_END_DT,'yyyyMM'),'01'),'yyyyMMdd') >= trunc(?)) or (EL.PAYMENT_END_DT IS NULL))");
			query.append(" AND EL.PAYMENT_BEG_DT IS NOT NULL AND to_date(concat(to_char(EL.PAYMENT_BEG_DT,'yyyyMM'),'01'),'yyyyMMdd') <= trunc(?) ");
			query.append(" AND EL.case_num = ? ");
			query.append(" order by EL.PAYMENT_BEG_DT desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getCaseNum());
			// parms.add(indvIdStr.toString());
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Finds pending eligibility for childen in a household
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvIds
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBySEARCHSPendingEligibilityByPmntDt(
			int maxRows, EdEligibilityCargo eligibilityCargo, long[] indvIds)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder indvIdStr = new StringBuilder("");
			boolean toAppendSeparator = false;
			if (indvIds != null && indvIds.length != 0) {
				for (int i = 0; i < indvIds.length; i++) {
					if (toAppendSeparator) {
						indvIdStr.append(",");
					}
					indvIdStr.append(indvIds[i]);
					toAppendSeparator = true;
				}
			}

			if (indvIdStr != null && indvIdStr.toString().trim().length() != 0) {

				StringBuilder query = new StringBuilder();
				query.append(strLiteralselectfromedeligibility);
				query.append(" EL.PROGRAM_CD = 'TF' ");
				query.append(" AND EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('P') ");
				query.append(" AND EL.CG_STATUS_CD IN ('PE')");
				query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
				query.append(" AND (EL.PAYMENT_END_DT >= ? or EL.PAYMENT_END_DT IS NULL)");
				query.append(" AND EL.PAYMENT_BEG_DT <= ? ");
				query.append(" AND ie.case_num = ? ");
				query.append(" AND ie.indv_id in (" + indvIdStr.toString()
						+ ")");
				query.append(" order by EL.PAYMENT_BEG_DT desc");

				List<Object> parms = new ArrayList<Object>();
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getCaseNum());
				// parms.add(indvIdStr.toString());
				SQLCommand command = getSqlCommandForUpdate(query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return null;

	}

	/**
	 *
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvidualsElgByFuturePmntDt(
			int maxRows, EdEligibilityCargo eligibilityCargo, long[] indvIds)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder indvIdStr = new StringBuilder("");
			boolean toAppendSeparator = false;
			if (indvIds != null && indvIds.length != 0) {
				for (int i = 0; i < indvIds.length; i++) {
					if (toAppendSeparator) {
						indvIdStr.append(",");
					}
					indvIdStr.append(indvIds[i]);
					toAppendSeparator = true;
				}
			}

			if (indvIdStr != null && indvIdStr.toString().trim().length() != 0) {

				StringBuilder query = new StringBuilder();
				query.append(strLiteralselectfromedeligibility);
				query.append(" EL.PROGRAM_CD = 'TF' ");
				query.append(" AND EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('A','P') ");
				query.append(" AND EL.CG_STATUS_CD IN ('AP','PE')");
				query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
				query.append(" AND (EL.PAYMENT_END_DT > ? or EL.PAYMENT_END_DT IS NULL)");
				query.append(" AND EL.PAYMENT_BEG_DT > ? ");
				query.append(" AND ie.case_num = ? ");
				query.append(" AND ie.indv_id in (" + indvIdStr.toString()
						+ ")");
				query.append(" order by EL.PAYMENT_BEG_DT desc");

				List<Object> parms = new ArrayList<Object>();
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getPaymentBegDt());
				parms.add(eligibilityCargo.getCaseNum());
				// parms.add(indvIdStr.toString());
				SQLCommand command = getSqlCommandForUpdate(query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

		return null;

	}

	public EdEligibilityCargo[] findByRedetRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByRedetRecords" + strLiteralMaxRows + maxRows
				+ " Case Num=" + cargo.getCaseNum());
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = 'P'"
					+ "AND DELETE_SW = 'N'  AND  ACTIVITY_TYPE = 'PR' AND PROGRAM_CD= 'FS' AND PAYMENT_END_DT IS NULL"
					+ " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByIssTriggerRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByIssTriggerRecords" + strLiteralMaxRows + maxRows
				+ " Case Num=" + cargo.getCaseNum());
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND TYPE_OF_ASSISTANCE_CD = '"
					+ cargo.getTypeOfAssistanceCd()
					+ "'"
					+ " AND TRUNC(PAYMENT_BEG_DT) <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ " AND COALESCE(TRUNC(PAYMENT_END_DT), CAST('31-DEC-2999' as DATE)) >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt()) + " AND CURRENT_ELIG_IND = 'A'"
					+ " AND CG_STATUS_CD = 'AP'" + strLiteralAndDeleteSwN;
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByCaseNumEdgTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumEdgTraceId" + strLiteralMaxRows + maxRows
				+ " Case Num=" + cargo.getCaseNum());
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum()
					+ " AND EDG_TRACE_ID = '" + cargo.getEdgTraceId() + "'"
					+ strLiteralAndDeleteSwN;
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByCaseNumPreSanction(int maxRows,
			long edgTraceId, long caseNum, long indvId)
			throws GenericRunTimeException {

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" SELECT  b.* FROM ed_indv_eligibility a,  ed_eligibility b");
			sb.append(" where a.case_num        = b.case_num");
			sb.append(" and a.edg_trace_id      = b.edg_trace_id");
			sb.append(" and a.edg_trace_id      < " + edgTraceId);
			sb.append(" and a.case_num          = " + caseNum);
			sb.append(" and a.indv_id           = " + indvId);
			sb.append(" and a.part_status_cd    = 'EA'");
			sb.append(" and b.program_cd        = 'TF'");
			sb.append(" and b.current_elig_ind IN ('P','A')");
			sb.append(" and b.delete_sw         = 'N' ");
			sb.append(" ORDER BY b.payment_beg_dt DESC , a.edg_trace_id DESC ");

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sb.toString());
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception ex) {
			log(ILog.ERROR, ex.getMessage());
			throw new GenericRunTimeException(ex.getMessage(),ex);
		}

	}

	public EdEligibilityCargo[] findByCaseNumTOA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("CASE_NUM =  ");
			sb.append(cargo.getCaseNum());
			sb.append(" AND TYPE_OF_ASSISTANCE_CD = '");
			sb.append(cargo.getTypeOfAssistanceCd());
			sb.append("' AND DELETE_SW = 'N' ");
			sb.append(" AND CURRENT_ELIG_IND = 'A'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByAuthNotPandT(int maxRows, long lCaseNum)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID " + strLiteralFromEdEligibiltyA
					+ " Where CASE_NUM =  " + lCaseNum + strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND NOT IN ('P','T') "
					+ " AND PROGRAM_CD = 'TF' "
					+ " AND TYPE_OF_ASSISTANCE_CD = 'TP01' "
					+ strLiteralOrderby2;

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	// Find any latest approved TANF case
	// used when records by begin date and as of date are not found
	public EdEligibilityCargo[] findByEarliestTanfApprovedRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'TF' AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND IN ('A') AND CG_STATUS_CD IN ('AP') AND type_of_assistance_cd ='TP01' order by payment_beg_dt ";

			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByInitialAuthSNAP(int maxRows, long aCaseNum)
			throws GenericRunTimeException {
		try {
			String clause = strLiteralCaseNum2
					+ aCaseNum
					+ " AND PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' "
					+ " AND CURRENT_ELIG_IND IN ('A','C') AND CG_STATUS_CD IN ('AP')"
					+ " ORDER BY EDG_TRACE_ID ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * This returns the records with given where clause
	 * 
	 * @return EiRateCalculationCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByWhereClause(int maxRows,
			String whereClause) throws GenericRunTimeException,
			CheckedApplicationException {
		try {
			String sqlString = SELECT_SQL + whereClause;
			EdEligibilityCargo[] erccArray = getCargoArray(sqlString,
					EdEligibilityCargo.class);
			return erccArray;
		} catch (CheckedApplicationException e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method findByCaseProgram, query by Pgm Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseProgramForNOA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findByCaseProgram" + " maxRows= " + maxRows + " cargo="
				+ cargo);
		List<Object> parms = new ArrayList<Object>();
		EdEligibilityCargo[] colrows = null;
		// EdEligibilityCargo[] rows = null;

		try {
			String sqlString = SELECT_SQL
					+ "  WHERE CASE_NUM=? AND PROGRAM_CD=? AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' AND REC_END_DT IS NULL ";

			parms.add(cargo.getCaseNum());
			parms.add(cargo.getProgramCd());

			colrows = getCargoArray(sqlString, parms, EdEligibilityCargo.class);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		return colrows;

	}

	public EdEligibilityCargo[] findPrevPendRecords(int maxRows, long personID,
			Timestamp prevEdm, Timestamp tsMinRunDt, long caseNum)
			throws GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID   FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A WHERE A.CASE_NUM = ?");
			query.append(" and B.indv_id = ?");
			query.append(" AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N'  AND A.CURRENT_ELIG_IND IN ('P','V','I','Y') and B.TARGET_SW= 'Y'  ");
			query.append(" and trunc(a.payment_beg_dt,'MM')= trunc( CAST(? AS DATE)");
			query.append(",'MM') ");
			query.append(" and trunc(a.payment_beg_dt,'MM') >= trunc( CAST(? AS DATE)");
			query.append(",'MM') and program_cd='MA'");

			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(personID);
			params.add(DateFormatter.getDateForWhereNoCast(prevEdm));
			params.add(DateFormatter.getDateForWhereNoCast(tsMinRunDt));
			
		
            Debug.println(query.toString());
            EdEligibilityCargo[] cargo = getCargoArray(query.toString(), params, EdEligibilityCargo.class);
            
            return cargo;
			
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findPrevAuthRecords(int maxRows, long personID,
			Timestamp edm, long caseNum) throws GenericRunTimeException {

		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID   FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A  WHERE A.CASE_NUM = ?");
			query.append(" and B.indv_id = ?");
			query.append(" AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N' AND A.CURRENT_ELIG_IND = 'A' and B.TARGET_SW= 'Y' and (( a.payment_beg_dt<= CAST( ? AS DATE)");
			query.append(" and a.payment_end_dt>= CAST( ? AS DATE)");
			query.append(") or (a.payment_beg_dt<= CAST( ? AS DATE)");
			query.append(" and a.payment_end_dt is null)) and program_cd='MA' ORDER BY A.ELIGIBILITY_BEG_DT");
			
			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(personID);
			params.add(DateFormatter.getDateForWhereNoCast(new java.sql.Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())));
			params.add(DateFormatter.getDateForWhereNoCast(new java.sql.Timestamp(DateUtilities.getLastDayOfMonth(edm).getTime())));
			params.add(DateFormatter.getDateForWhereNoCast(edm));
			
			EdEligibilityCargo[] cargo = getCargoArray(query.toString(), params, EdEligibilityCargo.class);
            
            return cargo;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	public EdEligibilityCargo[] findPrevAuthRecordsForRetro(int maxRows,
			long personID, Timestamp edm, long caseNum)
			throws GenericRunTimeException {

		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID   FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A  WHERE A.CASE_NUM = ?");
			query.append(" and B.indv_id = ?");
			query.append(" AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N' AND A.CURRENT_ELIG_IND = 'A' and B.TARGET_SW= 'Y'  and ( a.payment_beg_dt= CAST( ? AS DATE)");
			query.append(" and a.payment_end_dt= CAST( ? AS DATE)");
			query.append(")  and program_cd='MA'");
			
			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(personID);
			params.add(DateFormatter.getDateForWhereNoCast(new java.sql.Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())));
			params.add(DateFormatter.getDateForWhereNoCast(new java.sql.Timestamp(DateUtilities.getLastDayOfMonth(edm).getTime())));
			
			EdEligibilityCargo[] cargo = getCargoArray(query.toString(), params, EdEligibilityCargo.class);
            
            return cargo;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * Added for Family Transitional to get the ongoing authorized records.
	 *
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findOngoingAuthRecordsByCaseNumAndCurrEligIndForMA(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Debug.println("findOngingRecordsByCaseNumCurrEligIndA" + " maxRows= "
				+ maxRows + " cargo=" + cargo);
		try {
			String clause = " CASE_NUM = " + cargo.getCaseNum()
					+ " AND DELETE_SW <> 'Y'"
					+ " AND CURRENT_ELIG_IND in ('A', 'V')"
					+ " AND TYPE_OF_ASSISTANCE_CD = 'MA50'"
					+ " AND CG_ELIG_RSLT_CD = 'PS'"
					+ " AND PAYMENT_END_DT IS NULL"
					+ " ORDER BY EDG_NUM, PAYMENT_BEG_DT ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * Author Manmath Agarwal JIRA ID ND-7798 To fetch Ongoing records for
	 * Parent Caretaker, Extended and Transitional types of Assistance Included
	 * the TOA codes MA79 and MA80 in where clause
	 **/
	//ND-24210 query changed
	public EdEligibilityCargo[] findTransExtendOngoingAuthRecordsByCaseNumAndCurrEligIndForMA(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Debug.println("findTransExtendOngoingAuthRecordsByCaseNumAndCurrEligIndForMA"
				+ " maxRows= " + maxRows + " cargo=" + cargo);
		try {
			String clause = " CASE_NUM = ?"
					+ " AND DELETE_SW <> 'Y'"
					+ " AND CURRENT_ELIG_IND in ('A')"
					+ " AND TYPE_OF_ASSISTANCE_CD in ('MA50','MA79','MA80') "
					//+ " AND CG_ELIG_RSLT_CD = 'PS'"
					//+ " AND PAYMENT_END_DT IS NULL"
					+ " ORDER BY EDG_NUM, PAYMENT_BEG_DT DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			map.put(strLiteralCaseNum1,cargo.getCaseNum());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// Code for ND-7798 ends here

	/**
	 * Retrieves the Tanf records for the particular individual for the case
	 * having MA programs
	 * 
	 * @param maxRows
	 * @param edEligibilityCargo
	 * @param currentIndArray
	 * @param edIndvEligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getEligibilityTanfGrantRecordsMA(int maxRows,
			EdEligibilityCargo edEligibilityCargo, String currentInd,
			EdIndvEligibilityCargo edIndvEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityTanfGrantRecordsMA START");
		Map<String, Object> map = new HashMap<String, Object>();
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT A.*");
			sb.append(" FROM ED_ELIGIBILITY A ");
			sb.append("  WHERE ");
			sb.append(" A.CASE_NUM = " + edEligibilityCargo.getCaseNum()
					+ " AND ");
			sb.append(" A.DELETE_SW = '" + edEligibilityCargo.getDeleteSw()
					+ "'  AND ");
			sb.append(" A.PROGRAM_CD = '" + edEligibilityCargo.getProgramCd()
					+ "'  AND ");
			sb.append(" A.CG_STATUS_CD IN "
					+ edEligibilityCargo.getCgStatusCd() + " AND ");
			sb.append(" A.CURRENT_ELIG_IND IN " + currentInd + " AND ");
			sb.append(" ((A.PAYMENT_END_DT IS NULL and A.PAYMENT_BEG_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY')) OR");
			sb.append(" ( A.PAYMENT_END_DT >= TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentBegDt())
					+ "','MM/DD/YYYY') and A.PAYMENT_BEG_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY'))) AND");
			sb.append(" " + edIndvEligibilityCargo.getIndvId() + " IN (");
			sb.append(" (SELECT PP.INDV_ID FROM DC_PRIMARY_PAYEE PP ");
			sb.append(" WHERE PP.INDV_ID = "
					+ edIndvEligibilityCargo.getIndvId() + " AND ");
			sb.append(" PP.CASE_NUM = " + edEligibilityCargo.getCaseNum()
					+ " AND ");
			sb.append(" PP.TYPE_OF_ASSISTANCE_CD = 'TP01' AND ");
			sb.append(" (PP.PAYEE_END_DT IS NULL AND (PP.PAYEE_BEGIN_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY')) OR");
			sb.append(" ( PP.PAYEE_END_DT >= TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentBegDt())
					+ "','MM/DD/YYYY') and PP.PAYEE_BEGIN_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY')))) ");
			sb.append(" UNION ");
			sb.append(" (SELECT HH.INDV_ID FROM DC_HEAD_OF_HOUSEHOLD HH ");
			sb.append(" WHERE HH.CASE_NUM = " + edEligibilityCargo.getCaseNum()
					+ " AND HH.INDV_ID = " + edIndvEligibilityCargo.getIndvId()
					+ " AND ");
			sb.append(" (HH.HOH_END_DT IS NULL AND (HH.HOH_BEGIN_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY')) OR");
			sb.append(" ( HH.HOH_END_DT >= TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentBegDt())
					+ "','MM/DD/YYYY') and HH.HOH_BEGIN_DT <=TO_DATE( '"
					+ sdf.format(edEligibilityCargo.getPaymentEndDt())
					+ "','MM/DD/YYYY'))))) ");
			sb.append(" ORDER BY A.CURRENT_ELIG_IND ");
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sb.toString());
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			if (results != null) {
				for (Map<String, Object> result : results) {
					if (result != null) {
						EdEligibilityCargo newCargo = new EdEligibilityCargo();
						ObjectPopulator populator = new ObjectPopulator(result,
								newCargo, cargoPopulator);
						populator.execute();
						resultList.add(newCargo);
					}
				}
			}
			EDBCLogger.debug("getEligibilityTanfGrantRecordsMA END");
			return resultList.toArray(new EdEligibilityCargo[0]);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// MAGI INTEGRATION - start

	public EdEligibilityCargo[] findEligibilityForNonParentTeenMonth(
			int maxRows, long caseNum, String typeOfAssistance, Timestamp date)
			throws GenericRunTimeException {
		try {

			Timestamp paymentMth = WcUtil.getLastDayOfMonth(date);
			StringBuilder sb = new StringBuilder();
			sb.append("case_num = ");
			sb.append(caseNum);
			sb.append(" AND type_of_assistance_cd = '");
			sb.append(typeOfAssistance);
			sb.append("' AND delete_sw = 'N' AND payment_beg_dt  <= ");
			sb.append(DateFormatter.getDateForWhereClause(paymentMth));
			sb.append(" AND (payment_end_dt is null OR  payment_end_dt >= ");
			sb.append(DateFormatter.getDateForWhereClause(paymentMth));
			sb.append(" ) AND (CURRENT_ELIG_IND = 'A' or  (current_elig_ind in ('P')  AND CG_ELIG_RSLT_CD='PE')) ORDER BY CURRENT_ELIG_IND, PAYMENT_BEG_DT ASC");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByNoIssuanceChangeSegments(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = "
					+ eligCargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND PROGRAM_CD = 'TF' "
					+ " AND PAYMENT_BEG_DT = "
					+ DateFormatter.getDateForWhereClause(eligCargo
							.getPaymentBegDt())
					+ " AND CURRENT_ELIG_IND IN ('V')";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-69810 : SEARCHS interface
	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSSameSpanNotApproved(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.part_status_cd in ('EC','EA') ");
			query.append(" AND (EL.PAYMENT_END_DT >= ? or EL.PAYMENT_END_DT IS NULL)");
			query.append(" AND EL.PAYMENT_BEG_DT <= ? ");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");
			query.append(" order by EL.Edg_Trace_Id desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(indvId);
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSOtherSpanApproved(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
			query.append(" AND EL.CG_STATUS_CD IN ('AP')");
			query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");
			query.append(" order by EL.Edg_Trace_Id desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(indvId);
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSOtherSpanNotApproved(int maxRows,
			EdEligibilityCargo eligibilityCargo, long indvId)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder();
			query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.part_status_cd in ('EC','EA') ");
			query.append(" AND ie.case_num = ? ");
			query.append(" AND ie.indv_id = ?");
			query.append(" order by EL.Edg_Trace_Id desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getCaseNum());
			parms.add(indvId);
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvSameSpanNotApproved(
			int maxRows, EdEligibilityCargo eligibilityCargo)
			throws ParseException, GenericRunTimeException {
		try {

			StringBuilder query = new StringBuilder();
			query.append("select * from ed_eligibility el where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.type_of_assistance_cd ='TP01' ");
			query.append(" AND EL.CURRENT_ELIG_IND NOT IN ('C') ");
			query.append(" AND ((EL.PAYMENT_END_DT IS NOT NULL  AND to_date(concat(to_char(EL.PAYMENT_END_DT,'yyyyMM'),'01'),'yyyyMMdd') >= trunc(?)) or (EL.PAYMENT_END_DT IS NULL))");
			query.append(" AND EL.PAYMENT_BEG_DT IS NOT NULL AND to_date(concat(to_char(EL.PAYMENT_BEG_DT,'yyyyMM'),'01'),'yyyyMMdd') <= trunc(?) ");
			query.append(" AND EL.case_num = ? ");
			query.append(" order by EL.PAYMENT_BEG_DT desc");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getPaymentBegDt());
			parms.add(eligibilityCargo.getCaseNum());
			// parms.add(indvIdStr.toString());
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvOtherSpanApproved(int maxRows,
			EdEligibilityCargo eligibilityCargo, long[] indvIds)
			throws ParseException, GenericRunTimeException {
		try {
			StringBuilder indvIdStr = new StringBuilder("");
			boolean toAppendSeparator = false;
			if (indvIds != null && indvIds.length != 0) {
				for (int i = 0; i < indvIds.length; i++) {
					if (toAppendSeparator) {
						indvIdStr.append(",");
					}
					indvIdStr.append(indvIds[i]);
					toAppendSeparator = true;
				}
			}

			if (indvIdStr != null && indvIdStr.toString().trim().length() != 0) {

				StringBuilder query = new StringBuilder();
				query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id where ");
				query.append(" EL.PROGRAM_CD = 'TF' ");
				query.append(" AND EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
				query.append(" AND EL.CG_STATUS_CD IN ('AP')");
				query.append(" AND EL.type_of_assistance_cd ='TP01' AND ie.group_ind='C' ");
				query.append(" AND ie.case_num = ? ");
				query.append(" AND ie.indv_id in (" + indvIdStr.toString()
						+ ")");
				query.append(" order by EL.Edg_Trace_Id desc");

				List<Object> parms = new ArrayList<Object>();
				parms.add(eligibilityCargo.getCaseNum());
				// parms.add(indvIdStr.toString());
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

		return null;

	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findBySEARCHSIndvOtherSpanNotApproved(
			int maxRows, EdEligibilityCargo eligibilityCargo)
			throws ParseException, GenericRunTimeException {
		try {

			StringBuilder query = new StringBuilder();

			query.append(" select * from ed_eligibility e ");
			query.append(" where E.PROGRAM_CD = 'TF' ");
			query.append(" AND E.DELETE_SW = 'N' ");
			query.append(" AND E.type_of_assistance_cd ='TP01' ");
			query.append(" AND E.CURRENT_ELIG_IND NOT IN ('C') ");
			query.append(" AND (e.edg_trace_id,e.case_num) in ");
			query.append("( select el.edg_trace_id,el.case_num from ");
			query.append("ed_eligibility el where ");
			query.append(" EL.PROGRAM_CD = 'TF' ");
			query.append(" AND EL.DELETE_SW = 'N' ");
			query.append(" AND EL.type_of_assistance_cd ='TP01' ");
			query.append(" AND EL.CURRENT_ELIG_IND NOT IN ('C') ");
			query.append(" AND EL.case_num = ? ");
			query.append(" and el.payment_beg_dt = ( select max(el1.payment_beg_dt) from ed_eligibility el1 where el1.case_num =el.case_num  ");
			query.append(" ) ) ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(eligibilityCargo.getCaseNum());
			// parms.add(indvIdStr.toString());
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			EdEligibilityCargo newCargo = null;
			for (Map<String, Object> result : results) {
				newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;

		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	// SD:Added - New Finder to check for ED_ELIG records and throw proper MA
	// error instead of 777-EDG not run
	/**
	 * findByUnAuthCaseNum, query by un Auth.
	 * 
	 * @param maxRows
	 *            int
	 * @param lCaseNum
	 *            long
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findUnAuthRecordsByCaseNum(int maxRows,
			long lCaseNum) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + lCaseNum + "  "
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND in ('P', 'T', 'V', 'K', 'S')";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * Method findByMAProgramCode, query by Pgm Code = 'MA' and current record
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByMAProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'P' AND CG_STATUS_CD in ('AP','PE') AND APPLICATION_SRC <> 'FFM' ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-86271 : If no ongoing authorized records are found for a case,
	// then we would set the adverse action allowed switch to 'Yes'
	// for segments which are after the authorized segments and not have been
	// authorized before.
	public EdEligibilityCargo[] findByAuthorizedRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthorizedRecords" + " maxRows= " + maxRows
				+ " cargo=" + cargo);
		try {
			String clause = " CASE_NUM = " + cargo.getCaseNum()
					+ " AND  EDG_NUM= " + cargo.getEdgNum()
					+ " AND DELETE_SW = 'N' " + " AND  CURRENT_ELIG_IND = 'A' "
					+ " ORDER BY PAYMENT_BEG_DT ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-89580
	public EdEligibilityCargo[] findByAuthorizedFSRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthorizedRecords" + " maxRows= " + maxRows
				+ " cargo=" + cargo);
		try {
			String clause = " CASE_NUM = " + cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'FS'" + " AND DELETE_SW = 'N' "
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " ORDER BY PAYMENT_BEG_DT ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-84675 added findByAuthorizedRecordsforMATANF
	public EdEligibilityCargo[] findByAuthorizedRecordsforMATANF(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthorizedRecords" + " maxRows= " + maxRows
				+ " cargo=" + cargo);
		try {
			String clause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'TF'"
					+ " AND DELETE_SW = 'N' "
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND PAYMENT_BEG_DT = "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentBegDt()) + " ORDER BY EDG_TRACE_ID DESC";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// AA:Added CHIMESMO-81053
	public EdEligibilityCargo[] findPendingSNAPTANFRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthorizedRecords" + " maxRows= " + maxRows
				+ " cargo=" + cargo);
		try {
			StringBuffer sbClause = new StringBuffer();
			sbClause.append("CASE_NUM =");
			sbClause.append(cargo.getCaseNum());
			sbClause.append(" AND CURRENT_ELIG_IND in ('P','V') AND PROGRAM_CD IN ('TF','FS') AND CG_STATUS_CD NOT IN ('TN','DN') AND DELETE_SW='N' AND "
					+ "VERIFICATION_STATUS_CD='PE' ");

			String whereClause = sbClause.toString();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// AA:End

	// CHIMESMO-88061
	public EdEligibilityCargo[] findByEdgeCaseFS(int maxRows, long caseNum,
			long edgeNum) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = " + caseNum + " AND EDG_NUM = "
					+ edgeNum + " AND  PROGRAM_CD = 'FS'"
					+ " AND DELETE_SW = 'N' " + " AND  CURRENT_ELIG_IND = 'A' "
					+ " And payment_end_dt Is Null ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-56912
	public EdEligibilityCargo[] findByAuthOngoingRecords(int maxRows,
			long caseNum, String progCd) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = " + caseNum + " AND DELETE_SW = 'N' "
					+ " AND PROGRAM_CD = '" + progCd
					+ "' AND  CURRENT_ELIG_IND = 'A' "
					+ " AND payment_end_dt Is Null "
					+ " ORDER BY PAYMENT_BEG_DT ASC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * Method findByEdbcRunDt is used to retrive the records to be purged based
	 * on the edbc run date
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdPurgeTriggerCargo
	 * @return EdPurgeTriggerCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdbcRunDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		List<Object> parms = new ArrayList<Object>();
		Debug.println("findByProgramCode" + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {

			String CustomSql = "SELECT /*+ parallel(E) */  rowid ,TYPE_OF_ASSISTANCE_CD ,CURRENT_ELIG_IND ,EDG_TRANSACTION_ID ,CREATE_DT ,PROGRAM_CD ,"
					+ "CASE_NUM ,EDG_TRACE_ID ,CREATE_USER_ID ,EDBC_RUN_DT ,EDG_NUM ,UPDATE_DT ,UPDATE_USER_ID  FROM ED_ELIGIBILITY E "
					+ "WHERE DELETE_SW = 'Y' AND  E.EDBC_RUN_DT < add_months(sysdate,?) ORDER BY CASE_NUM DESC, EDG_TRACE_ID DESC";

			parms.add(Integer.parseInt(cargo.getProgramCd()));

			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), CustomSql, parms);
			// SQLCommand command = new SQLCommand(new
			// ApplicationConnectionFactory(), CustomSql);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND PROGRAM_CD = 'MA' AND CG_STATUS_CD in ('AP','PE') AND APPLICATION_SRC <> 'FFM' ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findColaSwForDec(int maxRows, long personID,
			Timestamp edm, long caseNum) throws GenericRunTimeException {

		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID	FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A  WHERE A.CASE_NUM = ");
			query.append(caseNum);
			query.append(" and B.indv_id = ");
			query.append(personID);
			query.append(" AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N' AND A.CURRENT_ELIG_IND = 'A' and A.CG_STATUS_CD='AP' and B.TARGET_SW= 'Y' and A.TYPE_OF_ASSISTANCE_CD in ('MS01','MS02','MS04','MS05','MS06','MS03') and a.payment_beg_dt<=");
			query.append(DateFormatter
					.getDateForWhereClause(new java.sql.Timestamp(DateUtilities
							.getLastDayOfMonth(edm).getTime())));
			query.append(" and (a.payment_end_dt>= ");
			query.append(DateFormatter
					.getDateForWhereClause(new java.sql.Timestamp(DateUtilities
							.getFirstDayOfMonth(edm).getTime())));
			query.append(" or a.payment_end_dt is null) and program_cd='MA'");

			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	public EdEligibilityCargo[] findByCaseNumPreviousEdmMA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND = 'A' "
					+ " AND payment_beg_dt <= "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentEndDt())
					+ " AND ( payment_end_dt is null or payment_end_dt >= "
					+ DateFormatter.getDateForWhereClause(cargo.getPaymentBegDt())
					+")";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumEdmMA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND = 'A' "
					+ " AND payment_beg_dt <= "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentEndDt())
					+ " AND (payment_end_dt >= "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentBegDt())
					+ " OR  payment_end_dt is null)"
					+ " ORDER BY payment_beg_dt DESC";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// findPotentiallyEligibleRecords
	/**
	 * Method findPotentiallyEligibleRecords, query by begdate, enddate.
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             //Parag
	 */
	public EdEligibilityCargo[] findPotentiallyEligibleRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {

		Debug.println("findPotentiallyEligibleRecords" + " maxRows= " + maxRows
				+ " cargo=" + cargo);
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("Select A.*,  A.ROWID as aROWID  ");
			sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM =? ");
			sb.append(" AND DELETE_SW <> 'Y'  ");
			sb.append(" AND A.CURRENT_ELIG_IND in ('I') ");
			if(!"YES".equalsIgnoreCase(cargo.getAidTypeCpde())){
				sb.append(" AND A.CG_STATUS_CD not in ('DN') ");
			}
			/*
			 * sb.append(
			 * " AND ( A.CURRENT_ELIG_IND in ('T','S','P','A', 'K', 'V','Q') ");
			 * sb.append(
			 * " OR ( A.CURRENT_ELIG_IND in ('C','D','W') AND A.update_dt =  ");
			 * sb.append(
			 * "( Select max(B.update_dt) from ED_ELIGIBILITY B where  B.CASE_NUM = A.CASE_NUM"
			 * ); sb.append("	AND B.delete_sw <> 'Y' ");
			 * sb.append("	AND B.current_elig_ind in ('C','W') ");
			 * sb.append("	AND A.payment_beg_dt = B.payment_beg_dt ");
			 * sb.append("	AND A.payment_end_dt = B.payment_end_dt )))");
			 */
			sb.append(" AND  ((A.PAYMENT_END_DT is null and A.PAYMENT_BEG_DT <=TO_DATE(?,'MM/DD/YYYY')) ");
			sb.append("	OR ( A.PAYMENT_END_DT >= TO_DATE(?,'MM/DD/YYYY') and A.PAYMENT_BEG_DT <=TO_DATE(?,'MM/DD/YYYY') ))   ");
			sb.append("	ORDER BY A.EDG_NUM, to_char(A.PAYMENT_BEG_DT, 'yyyy-mm-dd') ");

			List<Object> parms = new ArrayList<Object>();
			parms.add(cargo.getCaseNum());
			parms.add(sdf.format(cargo.getPaymentEndDt()));
			parms.add(sdf.format(cargo.getPaymentBegDt()));
			parms.add(sdf.format(cargo.getPaymentEndDt()));

			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sb.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-99426 MM_01.01.01 ED Framework Cascade FU & NF by Anubhav START
	/**
	 * Retrieve all MA records from EdEligibility for given case num, delete
	 * switch and required current elig indicator records
	 * 
	 * @param maxRows
	 * @param edEligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getEligibilityIndRecordsMA(int maxRows,
			EdEligibilityCargo edEligibilityCargo, String currentInd)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityIndRecordsMA START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (currentInd.contains("'")){  
				currentInd = currentInd.replace("'", "");
    		}
			if (currentInd.contains("(")){  
				currentInd = currentInd.replace("(", "");
    		}
			if (currentInd.contains(")")){  
				currentInd = currentInd.replace(")", "");
    		}
			final String[] strArray =currentInd.split(",");
			final StringBuffer sqlString = new StringBuffer( EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"CASE_NUM = ? AND PROGRAM_CD = ? AND CURRENT_ELIG_IND IN(" );
			ArrayList<Object> params = new ArrayList <Object> ();
			params.add(edEligibilityCargo.getCaseNum());
			params.add(edEligibilityCargo.getProgramCd());
			for(int i=0;i<strArray.length;i++){
                sqlString.append("?");
                params.add(strArray[i]);
                if (!(i + 1 == strArray.length)) 
                    sqlString.append(",");
            }
            sqlString.append(") AND DELETE_SW = ?  ");
		
			params.add(String.valueOf(edEligibilityCargo.getDeleteSw()));
			final EdEligibilityCargo[] cargo = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargo;
			
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// CHIMESMO-99426 MM_01.01.01 ED Framework Cascade FU & NF by Anubhav END
	public EdEligibilityCargo[] findByCaseNumPreviousEdmAuthorizedMA(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND payment_beg_dt <= "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentEndDt())
					+ " AND ( payment_end_dt >= "
					+ DateFormatter.getDateForWhereClause(cargo
							.getPaymentBegDt())
					+ " OR payment_end_dt is null) AND CURRENT_ELIG_IND ='A'";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBenefitByReportingRange(int maxRows,
			Timestamp beginDt, Timestamp endDt, long caseNum)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "((PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClause(beginDt)
					+ " "
					+ "AND PAYMENT_END_DT <= "
					+ DateFormatter.getDateForWhereClause(endDt)
					+ " ))"
					+ "AND CASE_NUM = "
					+ caseNum
					+ "AND CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = 'FS' "
					+ "AND DELETE_SW = 'N' ORDER BY CASE_NUM,  EDG_NUM ,EDBC_RUN_DT DESC ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * 
	 * @param maxRows
	 * @param personIDs
	 * @param edm
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findPrevAuthRecords(int maxRows,
			String personIDs, Timestamp edm, long caseNum)
			throws GenericRunTimeException {

		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID	FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A  WHERE A.CASE_NUM = ");
			query.append(caseNum);
			query.append(" and B.indv_id in ( ");
			query.append(personIDs);
			query.append(" ) AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N' AND A.CURRENT_ELIG_IND = 'A'  and (( a.payment_beg_dt=");
			query.append(DateFormatter
					.getDateForWhereClause(new java.sql.Timestamp(DateUtilities
							.getFirstDayOfMonth(edm).getTime())));
			query.append(" and a.payment_end_dt= ");
			query.append(DateFormatter
					.getDateForWhereClause(new java.sql.Timestamp(DateUtilities
							.getLastDayOfMonth(edm).getTime())));
			query.append(") or (a.payment_beg_dt<= ");
			query.append(DateFormatter.getDateForWhereClause(edm));
			query.append(" and a.payment_end_dt is null)) and program_cd='MA'");
			/*
			 * String sSQL
			 * ="SELECT A.*,  A.ROWID	FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A"
			 * + " WHERE A.CASE_NUM = " +caseNum+ " and B.indv_id = "+ personID
			 * +
			 * " AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
			 * + " AND A.DELETE_SW = 'N' " +
			 * " AND A.CURRENT_ELIG_IND = 'A'  and a.payment_end_dt is null and program_cd='MA'"
			 * ;
			 */
			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	public EdEligibilityCargo[] findPrevPendRecords(int maxRows,
			String personIDs, Timestamp prevEdm, Timestamp tsMinRunDt,
			long caseNum) throws GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.*,  A.ROWID	FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A WHERE A.CASE_NUM = ");
			query.append(caseNum);
			query.append(" and B.indv_id in( ");
			query.append(personIDs);
			query.append(" ) AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID  AND A.DELETE_SW = 'N'  AND A.CURRENT_ELIG_IND IN ('P','V','I','Y') and B.TARGET_SW= 'Y'  ");
			query.append(" and trunc(a.payment_beg_dt,'MM')= trunc(")
					.append(DateFormatter.getDateForWhereClause(prevEdm))
					.append(",'MM') ");
			query.append(" and trunc(a.payment_beg_dt,'MM') >= trunc(")
					.append(DateFormatter.getDateForWhereClause(tsMinRunDt))
					.append(",'MM') and program_cd='MA'");

			/*
			 * String sSQL
			 * ="SELECT A.*,  A.ROWID	FROM ED_INDV_ELIGIBILITY B,  ED_ELIGIBILITY A"
			 * + " WHERE A.CASE_NUM = " +caseNum+ " and B.indv_id = "+ personID
			 * +
			 * " AND A.CASE_NUM = B.CASE_NUM AND A.EDG_TRACE_ID = B.EDG_TRACE_ID "
			 * + " AND A.DELETE_SW = 'N' " + " AND A.CURRENT_ELIG_IND = 'P' " +
			 * " and trunc(a.payment_beg_dt,'MM')= trunc("
			 * +DateFormatter.getDateForWhereClause(prevEdm)+",'MM')" +
			 * " and trunc(a.payment_beg_dt,'MM') >= trunc("
			 * +DateFormatter.getDateForWhereClause(tsMinRunDt) +
			 * ",'MM') and program_cd='MA'";
			 */

			String sSQL = query.toString();

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findByNdnh(int maxrows, long indvId,
			String effBegDt1) throws ParseException, GenericRunTimeException {
		try {
			if (indvId != 0) {

				StringBuilder query = new StringBuilder();

				query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id WHERE ");
				query.append(" EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
				query.append(" AND EL.type_of_assistance_cd ='TP09' AND EL.program_Cd = 'FS'");
				query.append(" and to_char(EL.PAYMENT_END_DT,'yyyyMMdd') >= '"
						+ effBegDt1 + "' ");
				query.append(" and to_char(EL.PAYMENT_BEG_DT,'yyyyMMdd') <= '"
						+ effBegDt1 + "' ");
				query.append(" AND ie.indv_id in (" + indvId + ")");
				query.append(" order by EL.PAYMENT_BEG_DT desc");

				List<Object> parms = new ArrayList<Object>();
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

		return null;

	}

	/**
	 * 
	 * @param maxRows
	 * @param eligibilityCargo
	 * @param indvId
	 * @return
	 * @throws ParseException
	 * @throws GenericRunTimeException
	 *             SEARCHs
	 */
	public EdEligibilityCargo[] findByPrevMontNdnh(int maxrows, long indvId,
			String effBegDt1) throws ParseException, GenericRunTimeException {
		try {
			if (indvId != 0) {
				StringBuilder query = new StringBuilder();

				query.append("select * from ed_eligibility el inner join ED_INDV_ELIGIBILITY ie on ie.case_num = el.case_num and ie.edg_trace_id = el.edg_trace_id WHERE ");
				query.append(" EL.DELETE_SW = 'N' ");
				query.append(" AND EL.CURRENT_ELIG_IND IN ('A') ");
				query.append(" AND EL.type_of_assistance_cd ='TP09' AND EL.program_Cd = 'FS'");
				query.append(" and to_char(EL.PAYMENT_END_DT,'yyyyMMdd') >= '"
						+ effBegDt1 + "' ");
				query.append(" and to_char(EL.PAYMENT_BEG_DT,'yyyyMMdd') <= '"
						+ effBegDt1 + "' ");
				query.append(" AND ie.indv_id in (" + indvId + ")");
				query.append(" order by EL.PAYMENT_BEG_DT desc");

				List<Object> parms = new ArrayList<Object>();
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), query.toString(),
						parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				EdEligibilityCargo newCargo = null;
				for (Map<String, Object> result : results) {
					newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			}
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

		return null;

	}

	/**
	 * Method findByEdCaseNumber
	 */
	public EdEligibilityCargo[] findByEdCaseNumber(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String SQL = "Select CASE_NUM " + "from ED_ELIGIBILITY "
					+ " Where CASE_NUM =  " + cargo.getCaseNum()
					+ " And ROWNUM <=1";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// Author Chitra/Sunil: Medicaid notices migration
	public EdEligibilityCargo[] findAuthorizedeligibilityRecord(int maxRows,
			long lCaseNum, String tsMaxEDM, String tsMinEDM, long indvId)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.CASE_NUM, A.EDBC_RUN_DT, A.PROGRAM_CD, A.PAYMENT_BEG_DT,	 "
					+ " NVL(A.PAYMENT_END_DT, TO_DATE('12/31/2999','MM/DD/YYYY')) AS PAYMENT_END_DT, "
					+ " CASE WHEN i.MA_COVERAGE_CD = 'B' THEN 'Basic' WHEN i.MA_COVERAGE_CD = 'F' THEN 'Full' ELSE NULL END AS MA_COVERAGE_CD"
					+ " from ED_ELIGIBILITY A "
					+ " JOIN ED_INDV_ELIGIBILITY i on i.edg_trace_id = A.edg_trace_id "
					+ " Where A.CASE_NUM = "
					+ lCaseNum
					+ " AND A.DELETE_SW = 'N' "
					+ " AND i.INDV_ID = "
					+ indvId
					+ " AND A.CURRENT_ELIG_IND = 'A' "
					+ " AND A.CG_STATUS_CD = 'AP' "
					+ " AND i.TARGET_SW = 'Y' "
					+ " AND A.PAYMENT_BEG_DT <=  TO_DATE('"
					+ tsMaxEDM
					+ "','YYYY-MM-DD') "
					+ " AND (A.PAYMENT_END_DT  >= TO_DATE('"
					+ tsMinEDM
					+ "','YYYY-MM-DD') "
					+ " OR "
					+ " A.PAYMENT_END_DT  is Null ) "
					+ " ORDER BY A.PAYMENT_BEG_DT ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			// results.get(0)).get("CASE_NUM")
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findRecentAuthorizedRecords(int maxRows,
			long caseNum) throws GenericRunTimeException {
		try {
			String SQL = "Select min(payment_beg_dt) payment_beg_dt, max(nvl(payment_end_dt, '31-DEC-2999')) payment_end_dt  "
					+ " from ed_eligibility ed, dc_case_program cp "
					+ " where ed.case_num =  "
					+ caseNum
					+ " and ed.delete_sw = 'N' and ed.current_elig_ind = 'A' and ed.cg_status_cd = 'AP' and ed.program_cd = 'MA' and ed.type_of_assistance_cd not like '%MS%' "
					+ " and ed.case_num = cp.case_num and ed.program_cd = cp.prog_cd and cp.eff_end_dt is null and ed.application_dt = cp.application_dt ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			// results.get(0)).get("CASE_NUM")
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}

	/**
	 * This finder will fetch all authorized records present for an individual
	 * in a case in ascending order.
	 * 
	 * @param maxRows
	 * @param personID
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findPrevAuthRecordForIndvMA(int maxRows,
			long personID, long caseNum) throws GenericRunTimeException {

		try {
			StringBuffer query = new StringBuffer();
			query.append("Select A.* From Ed_Eligibility A , Ed_Indv_Eligibility B Where A.Case_Num = ?" + " And A.Delete_Sw = 'N' And ");
			query.append(" A.Current_Elig_Ind = 'A' And A.Case_Num = B.Case_Num And A.Edg_Trace_Id = B.Edg_Trace_Id And B.Target_Sw = 'Y' ");
			query.append(" and B.indv_id= ?" + " and A.program_cd = 'MA'  order by A.Payment_Beg_Dt asc ");
			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(personID);
			
			String sSQL = query.toString();
			
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommandForUpdate(sSQL, params);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * This finder will fetch all converted authorized records for
	 * a case in ascending order.
	 * 
	 * @param maxRows
	 * @param personID
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findConvertedAuthRecords(int maxRows, long caseNum) throws GenericRunTimeException {

		try {
			StringBuffer query = new StringBuffer();
			query.append("SELECT * FROM ED_ELIGIBILITY WHERE CASE_NUM = ? AND ");
			query.append("CURRENT_ELIG_IND IN ('A', 'C') AND CREATE_USER_ID = ? ORDER BY ELIGIBILITY_BEG_DT ASC");
			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(LDSConstants.CREATE_USER_ID);
			
			String sSQL = query.toString();
			
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommandForUpdate(sSQL, params);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * CHIMESMO-111919 - BCBS Copay for Households with Child Turning 19
	 * 
	 * @param maxRows
	 * @param caseNum
	 * @param familySpanBegDt
	 * @param familySpanEnddt
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCoPayDetails(int maxRows, long caseNum,
			Timestamp familySpanBegDt, Timestamp familySpanEnddt)
			throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = " + caseNum
					+ " AND CURRENT_ELIG_IND in ('A')"
					+ " AND TYPE_OF_ASSISTANCE_CD = 'MA40'"
					+ " AND COPAY_AMT = 0" + " AND PAYMENT_BEG_DT >= "
					+ DateFormatter.getDateForWhereClause(familySpanBegDt)
					+ " AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT <="
					+ DateFormatter.getDateForWhereClause(familySpanEnddt)
					+ ")";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findByPendingSegments(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = " + eligCargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND IN ('V','P','S','T')";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findGroupNum(int maxRows, long caseNum)
			throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			// String query=
			// "select vreq.INDV_ID ,vreq.REQUEST_DATE,vres.response_cd as REQUEST_ID, vreq.immigration_status_cd ,vreq.CASE_NUMBER from vlp_request  vreq ,vlp_response vres where vreq.INDV_ID ="
			// + "'"+cargo.getIndvId()+"'" +
			// " and vreq.request_id = vres.request_id  and vreq.REQUEST_CD =" +
			// "'" +INConstants.REQUEST_TYPE_INITIAL +"'" ;
			/*
			 * String query=
			 * "select vres.REQUEST_ID,vres.LAWFUL_PRESENCE_VERIFIED ,vres.RESPONSE_CD ,vres.CASE_NUM ,vres.RESPONSE_ID ,"
			 * +
			 * "vres.ELIG_STMT_CD from vlp_response vres where request_id in (select vreq.request_id from vlp_request vreq"
			 * + " where vreq.case_number="+"'" +caseNum
			 * +"'"+") order by vres.RESPONSE_ID desc";
			 */
			String query = "select max(a.group_num) group_num from ed_eligibility a where case_num = "
					+ "'" + caseNum + "'" + " and delete_sw = 'N'";

			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), query);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	//Notices should not fetch deceased Indv's information
	public EdEligibilityCargo[] findByEdgNoCaseNoNDHCELN18(int maxRows, long caseNumber, String refDate) throws GenericRunTimeException {
		Debug.println("findByedgCaseNo" + strLiteralMaxRows + maxRows + " caseNumber " + caseNumber);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B  "
					+ " WHERE A.INDV_ID = B.INDV_ID "
					+ " AND A.CASE_NUM = "+caseNumber
					+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
					+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+refDate+"\' AS DATE))"
					+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+refDate+"\' AS DATE))";
			String whereClause = "CASE_NUM = " + caseNumber
					+ " AND CG_STATUS_CD='PE'"
					+ " AND CURRENT_ELIG_IND='P' "
					+ " AND DELETE_SW='N' "
					//ND-18694+ " AND PAYMENT_END_DT IS NULL"
					+ " AND TARGET_PERSON_ID IN ("+ temp +") ";
			/* + " AND TARGET_PERSON_ID = " */
			/* + cargo.getTargetPersonId(); */

			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Added for Notice NDHCMNN08
	 * 
	 * @param maxRows
	 * @param EdEligibilityCargo
	 *            *
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumNDHCMNN08(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumNDHCMNN08" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ " AND COVERAGE_GROUP IN ('MA','HS')"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A' AND DELETE_SW='N'"
					+ " AND PAYMENT_END_DT IS NULL" + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	/**
	 * Added for Notice NDHCGNN12
	 * 
	 * @param maxRows
	 * @param EdEligibilityCargo
	 *            *
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumNDHCGNN12(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumNDHCGNN12" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = " + cargo.getCaseNum()
					+ " AND COVERAGE_GROUP IN ('MA','MX')"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A' AND DELETE_SW='N'"
					+ " AND PAYMENT_END_DT IS NULL" + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	public EdEligibilityCargo[] findByCaseNumAndProgramCdForNDMAELN19(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumAndProgramCdForNDMAELN19" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'MA'"
				    + " AND COVERAGE_GROUP IN ('MA')"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A'"
					+ " AND DELETE_SW='N'" + " )";
					//+ " AND PAYMENT_END_DT IS NULL" + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param caseNum
	 * @param indvIds
	 * @return
	 * @throws GenericRunTimeException
	 */

	public EdEligibilityCargo[] findByCaseNumForChild(int maxRows, long caseNum, String indvIds) throws GenericRunTimeException {
		Debug.println("findByCaseNumForChild" + strLiteralMaxRows + maxRows + " caseNum " + caseNum + " indvIds " + indvIds);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + caseNum
					+ " AND PROGRAM_CD = 'MA'"
				    + " AND COVERAGE_GROUP IN ('MA')"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A'"
					+ " AND DELETE_SW='N'"
					//+ " AND PAYMENT_END_DT IS NULL"
					+ " AND TARGET_PERSON_ID IN ( " + indvIds + " ) ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	// Added by vamrit for Re_determination Batch
	/**
	 * 
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByConditionForNDHCGNF15(int maxRows, String edAdequateNoticeDate) throws GenericRunTimeException {
		try {
			String query = "SELECT DISTINCT E.CASE_NUM,E.TYPE_OF_ASSISTANCE_CD "
					+ " FROM ED_ELIGIBILITY E JOIN DC_CASE_PROGRAM D "
					+ "		 ON E.CASE_NUM = D.CASE_NUM "
					+ "		 AND E.PAYMENT_END_DT IS NULL "
					+ "		 AND E.PROGRAM_CD = \'MA\' "
					+ "		 AND E.CURRENT_ELIG_IND = \'A\' "
					+ "		 AND E.CG_STATUS_CD = \'AP\' "
					+ "		 AND E.DELETE_SW = \'N\' "
					+ "		 AND E.PRIOR_MEDICAL_CD = D.PRIOR_MEDICAID_CD "
					+ "		 AND E.APPLICATION_DT = D.APPLICATION_DT "
					+ "	WHERE D.PROG_CD = \'MA\' "
					+ "		  AND D.PRIOR_MEDICAID_CD = \'P0\' "
					+ "		  AND D.EFF_END_DT IS NULL "
					+ "		  AND D.PROG_STATUS_CD = \'AP\' "
					+ "		  AND E.CASE_NUM IN ("
					+ "		  SELECT CASE_NUM FROM ("	
					+ "		  SELECT E.CASE_NUM,"	
					+ "		  months_between(LAST_DAY (\'"+edAdequateNoticeDate+"\' ),LAST_DAY(MAX(greatest( "
					+ "		  nvl(TO_DATE(E.APPLICATION_DT),CAST('01-JAN-1900' AS DATE)),nvl(TO_DATE(R.REVIEW_PACKET_RECEIVED_DT),CAST('01-JAN-1900' AS DATE)))))) dif "
					+ "		  FROM ED_ELIGIBILITY E JOIN ED_CASE_RECERT_DATES R "
					+ "		  ON E.CASE_NUM  = R.CASE_NUM "
					+ "		  GROUP BY E.CASE_NUM )"
					+ "		  WHERE dif = 6 )"
					+ "		  AND E.CASE_NUM NOT IN ( "
					+ "							SELECT DISTINCT(R.CASE_NUM) "
					+ "							FROM  ED_CASE_RECERT_DATES R, ED_ELIGIBILITY E "
					+ "							WHERE R.CASE_NUM = E.CASE_NUM "
					+ "								  AND R.EDG_NUM = E.EDG_NUM "
					+ "								  AND R.EFF_END_DT IS NULL "
					+ "								  AND R.PROGRAM_CD = E.PROGRAM_CD "
					+ "              	  AND ((LAST_DAY(R.RECERT_REVIEW_DUE_DT) = LAST_DAY (\'"+edAdequateNoticeDate+"\')"
					+ "OR LAST_DAY(R.SEMI_ANNUAL_REVIEW_DT) = LAST_DAY (\'"+edAdequateNoticeDate+"\'))AND R.PROGRAM_CD<>\'MA\')) "
			// Added as part of Spring batch conversion for CO-N0015-MLY
					+ "  ORDER BY E.CASE_NUM ";

			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	// Added by akala for Reminder to Report Changes NON ACA Batch
		/**
		 * 
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findByNonACAConditionForNDHCGNF15(int maxRows, String edAdequateNoticeDate) throws GenericRunTimeException {
			try {
				String query = "SELECT DISTINCT E.CASE_NUM,E.TYPE_OF_ASSISTANCE_CD"
						+ " FROM ED_ELIGIBILITY E JOIN DC_CASE_PROGRAM D "
						+ "		 ON E.CASE_NUM = D.CASE_NUM "
						+ "		 AND E.PAYMENT_END_DT IS NULL "
						+ "		 AND E.PROGRAM_CD = \'MA\' "
						+ "		 AND E.CURRENT_ELIG_IND = \'A\' "
						+ "		 AND E.CG_STATUS_CD = \'AP\' "
						+ "		 AND E.DELETE_SW = \'N\' "
						+ "		 AND E.PRIOR_MEDICAL_CD = D.PRIOR_MEDICAID_CD "
						+ "		 AND E.APPLICATION_DT = D.APPLICATION_DT "
						+ "	WHERE D.PROG_CD = \'MA\' "
						+ "		  AND D.PRIOR_MEDICAID_CD = \'P0\' "
						+ "		  AND D.EFF_END_DT IS NULL "
						+ "		  AND D.PROG_STATUS_CD = \'AP\' "
						+ "		  AND E.CASE_NUM NOT IN ( "
						+ "							SELECT DISTINCT(R.CASE_NUM) "
						+ "							FROM  ED_CASE_RECERT_DATES R, ED_ELIGIBILITY E "
						+ "							WHERE R.CASE_NUM = E.CASE_NUM "
						+ "								  AND R.EDG_NUM = E.EDG_NUM "
						+ "								  AND R.EFF_END_DT IS NULL "
						+ "								  AND R.PROGRAM_CD = E.PROGRAM_CD "
						+ "              	  AND ((LAST_DAY(R.RECERT_REVIEW_DUE_DT) = LAST_DAY (\'"+edAdequateNoticeDate+"\')"
						+ "OR LAST_DAY(R.SEMI_ANNUAL_REVIEW_DT) = LAST_DAY (\'"+edAdequateNoticeDate+"\'))AND R.PROGRAM_CD<>\'MA\')) "
				// Added as part of Spring batch conversion for CO-N0015-MLY
						+ "  ORDER BY E.CASE_NUM ";

				String sSQL = query.toString();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), sSQL);
				List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
						.execute();
				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> obj : results) {
					EdEligibilityCargo theObject = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(obj, theObject,
							cargoPopulator);
					populator.execute();
					resultList.add(theObject);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}

	/**
	 * Changes for BATCH JOB CO-N0015-MLY
	 * 
	 * This method will grab all CASE_NUMs program MA and MEDICAID P0
	 * 
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             Added By:Mohit Chaturvedi
	 */
	public EdEligibilityCargo[] findCasesByConditionForNDHCGNF15(int maxRows,
			int pageSize, long startAfterValue, long queryFromId, long queryToId)
			throws GenericRunTimeException {
		StringBuffer query = new StringBuffer();
		query.append(" SELECT DISTINCT(E.CASE_NUM) ");
		query.append(" FROM ED_ELIGIBILITY E JOIN DC_CASE_PROGRAM D ");
		query.append(" 	 ON E.CASE_NUM = D.CASE_NUM ");
		query.append(" 	 AND E.PAYMENT_END_DT IS NULL ");
		query.append(" 	 AND E.PROGRAM_CD = \'MA\' ");
		query.append(" 	 AND E.CURRENT_ELIG_IND = \'A\' ");
		query.append(" 	 AND E.CG_STATUS_CD = \'AP\' ");
		query.append(" 	 AND E.DELETE_SW = \'N\' ");
		query.append(" 	 AND E.PRIOR_MEDICAL_CD = D.PRIOR_MEDICAID_CD ");
		query.append(" 	 AND E.APPLICATION_DT = D.APPLICATION_DT ");
		query.append(" WHERE D.PROG_CD = \'MA\' ");
		query.append(" 	  AND D.PRIOR_MEDICAID_CD = \'P0\' ");
		query.append(" 	  AND D.EFF_END_DT IS NULL ");
		query.append(" 	  AND D.PROG_STATUS_CD = \'AP\' ");
		query.append(" 	  AND NOT EXISTS ( ");
		query.append(" 						SELECT 1 ");
		query.append(" 						FROM ED_CASE_RECERT_DATES R ");
		query.append(" 						WHERE R.CASE_NUM = E.CASE_NUM ");
		query.append(" 							  AND R.EDG_NUM = E.EDG_NUM ");
		query.append(" 							  AND R.EFF_END_DT IS NULL ");
		query.append(" 							  AND R.PROGRAM_CD = E.PROGRAM_CD ");
		query.append("              	  AND LAST_DAY(R.RECERT_REVIEW_DUE_DT) = LAST_DAY (TRUNC(SYSDATE)) ");
		query.append("              ) ");
		query.append("  AND E.CASE_NUM >= ? ");
		query.append("  AND E.CASE_NUM <= ? ");
		query.append("  AND E.CASE_NUM > ? ");
		query.append("  ORDER BY E.CASE_NUM ");

		List<Object> parms = new ArrayList<Object>();
		parms.add(queryFromId);
		parms.add(queryToId);
		parms.add(startAfterValue);

		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					parms, pageSize);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByConditionForNDHCREN17(int maxRows, long caseNumber, String edNegActionDate) throws GenericRunTimeException {
		try {

			String query = "SELECT E.* "// EDG_NUM, E.CASE_NUM,
										// E.TARGET_PERSON_ID, E.APPLICATION_DT,
										// E.PROGRAM_CD
										// " //R.RECERT_REVIEW_DUE_DT "
					+ "	FROM ED_ELIGIBILITY E JOIN ED_CASE_RECERT_DATES R "
					+ "		 ON R.CASE_NUM = E.CASE_NUM "
					+ "	     AND R.PROGRAM_CD = E.PROGRAM_CD "
					+ "		 AND R.EDG_NUM = E.EDG_NUM "
					+ "		 AND R.EFF_END_DT IS NULL "
					+ "	     AND LAST_DAY(R.RECERT_REVIEW_DUE_DT) = LAST_DAY (TRUNC(CAST(\'" + edNegActionDate + "\' AS DATE))) "//LAST_DAY (TRUNC(SYSDATE)) "
					+ "		 AND E.APPLICATION_DT = R.RECERT_REVIEW_APP_FILE_DT "
					+ "	WHERE E.DELETE_SW = \'N\' "
					+ "		 AND E.CURRENT_ELIG_IND = \'A\' "
					+ "	     AND E.CG_STATUS_CD = \'AP\' "
					+ "		 AND E.PAYMENT_END_DT IS NULL "
					+ "		 AND E.PRIOR_MEDICAL_CD = \'P0\' "
					+ "	     AND E.PROGRAM_CD = \'MA\' ";
			if (caseNumber > 0) {
				query = query + " AND E.CASE_NUM = " + caseNumber;
			}
			query = query + " ORDER BY E.CASE_NUM,E.TARGET_PERSON_ID ";

			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Changes for BATCH JOB CO-N0017-MLY
	 * 
	 * This method will grab all CASE records having program MA and MEDICAID P0
	 * 
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 *             Added By:Mohit Chaturvedi
	 */
	public EdEligibilityCargo[] findCasesByConditionForNDHCREN17(int maxRows,
			int pageSize, long startAfterValue, long queryFromId, long queryToId)
			throws GenericRunTimeException {

		StringBuffer query = new StringBuffer();
		query.append("SELECT E.* ");
		query.append("	FROM ED_ELIGIBILITY E JOIN ED_CASE_RECERT_DATES R ");
		query.append("		 ON R.CASE_NUM = E.CASE_NUM ");
		query.append("	     AND R.PROGRAM_CD = E.PROGRAM_CD ");
		query.append("		 AND R.EDG_NUM = E.EDG_NUM ");
		query.append("		 AND R.EFF_END_DT IS NULL ");
		query.append("	     AND LAST_DAY(R.RECERT_REVIEW_DUE_DT) = LAST_DAY (TRUNC(SYSDATE)) ");
		query.append("		 AND E.APPLICATION_DT = R.RECERT_REVIEW_APP_FILE_DT ");
		query.append("	WHERE E.DELETE_SW = \'N\' ");
		query.append("		 AND E.CURRENT_ELIG_IND = \'A\' ");
		query.append("	     AND E.CG_STATUS_CD = \'AP\' ");
		query.append("		 AND E.PAYMENT_END_DT IS NULL ");
		query.append("		 AND E.PRIOR_MEDICAL_CD = \'P0\' ");
		query.append("	     AND E.PROGRAM_CD = \'MA\' ");
		query.append("  AND E.CASE_NUM >= ? ");
		query.append("  AND E.CASE_NUM <= ? ");
		query.append("  AND E.CASE_NUM > ? ");
		query.append("  ORDER BY E.CASE_NUM ");

		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();
		parms.add(queryFromId);
		parms.add(queryToId);
		parms.add(startAfterValue);

		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),
					parms, pageSize);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	//Notice should not pull up deceased Indv's information
	public EdEligibilityCargo[] findByCurrentEligIndAndActiveInCase(int maxRows, long caseNum, String refDate) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B  "
				+ " WHERE A.INDV_ID = B.INDV_ID "
				+ " AND A.CASE_NUM = "+ caseNum
				+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
				//+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+refDate+"\' AS DATE))"
				+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+refDate+"\' AS DATE))";
		try {
			String whereClause = " CURRENT_ELIG_IND = \'A\'"
					+ " AND CASE_NUM="+ caseNum
					+ " AND DELETE_SW=\'N\'" + " AND TARGET_PERSON_ID IN ( "
					+ temp + " ) ORDER BY BENEFIT_START_DT ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	//Notice should not pull up deceased Indv's information
	public EdEligibilityCargo[] findByEdgNumEdgTraceIdAndActiveInCase(int maxRows, long caseNum, String edgNumString,
			String edgTraceIdString, String refDate) throws GenericRunTimeException {

		Map<String, Object> map = new HashMap<String, Object>();
		String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B  "
				+ " WHERE A.INDV_ID = B.INDV_ID "
				+ " AND A.CASE_NUM = "+caseNum
				+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
				//+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+refDate+"\' AS DATE))"
				+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+refDate+"\' AS DATE))";
		try {
			String whereClause = "EDG_NUM IN ( " + edgNumString + " )"
					+ " AND EDG_TRACE_ID IN ( " + edgTraceIdString + " )"
					+ " AND CASE_NUM="+ caseNum
					+ " AND DELETE_SW= \'N\'" 
					+ " AND CURRENT_ELIG_IND = \'A\'"
					+ " AND TARGET_PERSON_ID IN ( "+ temp + " )"
					+ " ORDER BY BENEFIT_START_DT ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}
	//Notice should not pull up deceased Indv's information
	public EdEligibilityCargo[] findByCoverageGroup(int maxRows, String date, String coverageCodes) throws GenericRunTimeException {
		try {
			String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B  "
					+ " WHERE A.INDV_ID = B.INDV_ID "
					+ " AND A.CASE_NUM > 0 "
					+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
					+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+date+"\' AS DATE))"
					+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+date+"\' AS DATE))";
			String whereClause = " DELETE_SW= \'N\'"
					+ " AND TARGET_PERSON_ID IN ( " + temp + " ) "
					+ " AND CG_STATUS_CD = \'AP\'"
					+ " AND PAYMENT_BEG_DT <= CAST(\'" + date + "\' AS DATE)"
					+ " AND (PAYMENT_END_DT >= CAST(\'" + date + "\' AS DATE) OR PAYMENT_END_DT IS NULL)"
					+ " AND COVERAGE_GROUP IN (" + coverageCodes + ")";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**
	 * Method to fetch edge trace Ids for a individual for current application
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findIndvByAppDate(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = \'N\'"
					+ " AND PROGRAM_CD = \'MA\'"
					+  " AND APPLICATION_DT = "
					+ DateFormatter.getDateForWhereClause(cargo
							.getApplicationDt()) + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findIndvByAppDateForPrevAuthRec(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND TARGET_PERSON_ID = "
					+ cargo.getTargetPersonId()
					+ "AND CURRENT_ELIG_IND = \'A\'"
					+ "AND PRIOR_MEDICAL_CD = \'P0\'"
					+ " AND APPLICATION_DT = "
					+ DateFormatter.getDateForWhereClause(cargo
							.getApplicationDt()) + " )";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * this Method fetch Ongoing Authorized Approved Records for indv id
	 */
	public EdEligibilityCargo[] findAuthorizedOngoingApprovedRecordsForIndv(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = \'N\'"
					+  "AND CURRENT_ELIG_IND IN ('P') "
					+ "AND CG_STATUS_CD  IN  ('AP','SP') "
					+ "AND TARGET_PERSON_ID="+cargo.getTargetPersonId()
					+ "AND PAYMENT_END_DT IS NULL"
					+ " AND DISPOSITION_ELIG_BEG_DT IS NOT NULL"
					+"  AND ROWNUM="
					+ 1 
					+ " AND APPLICATION_DT = "
					+ DateFormatter.getDateForWhereClause(cargo
							.getApplicationDt()) + " )";
			
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 *  Method to fetch Not null Disposition_elg_beg_dt from Ed_eligibility 
	 *  for any case
	 */
	
	public EdEligibilityCargo[] findDispositionEligBegDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = \'N\'"
					+ "AND CURRENT_ELIG_IND  IN  ('A','S','C','K','W') "
					+ " AND DISPOSITION_ELIG_BEG_DT IS NOT NULL"
					+"  AND ROWNUM="
					+ 1 
					+ " AND APPLICATION_DT = "
					+ DateFormatter.getDateForWhereClause(cargo
							.getApplicationDt()) + " )";
			
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	/**
	 * Method to fetch records for given case number, type of assistance,
	 * individual
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberTypeOFAssistIndvId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println((new StringBuilder())
				.append("findByCaseNumber maxRows= ").append(maxRows)
				.append(" cargo=").append(cargo).toString());
		try {
			Map map = new HashMap();
			map.put("CASE_NUM", Long.valueOf(cargo.getCaseNum()));
			map.put("TYPE_OF_ASSISTANCE_CD", cargo.getTypeOfAssistanceCd());
			map.put("TARGET_PERSON_ID", cargo.getTargetPersonId());

			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByConditionForNCH001(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			String query = "SELECT DISTINCT E.DI_ACTION_DT, E.DISPOSITION_ELIG_BEG_DT"
						  + " FROM ED_ELIGIBILITY E"
						  + " WHERE 1=1"
						  + "      AND E.CASE_NUM = " + cargo.getCaseNum()
						  + "      AND TRUNC(E.APPLICATION_DT) = " + DateFormatter.getDateForWhereClauseAnsi(cargo.getApplicationDt())
						  + "      AND E.DI_ACTION_DT IS NOT NULL"
						  + "      AND E.DISPOSITION_ELIG_BEG_DT IS NOT NULL"
						  + "      AND TRUNC(E.DI_ACTION_DT) != TRUNC(E.DISPOSITION_ELIG_BEG_DT)"; 

			if (cargo.getTargetPersonId() != null) {
				query = query + " AND E.TARGET_PERSON_ID = " + cargo.getTargetPersonId();
			}
			
			if(cargo.getProgramCd() != null) {
				query = query + " AND E.PROGRAM_CD = '" + cargo.getProgramCd()+"'";
			}
			
			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject, cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByEligibilityCertifiedFfmReferral(int maxRow,
			String runDt) throws GenericRunTimeException, ParseException {

		StringBuffer query = new StringBuffer();
		query.append("SELECT EL.* ");
		query.append(" FROM ED_ELIGIBILITY EL, IN_APPLICANT_STG AP, IN_FFM_CHIMES_INDV_MAPPING IM");
		query.append(" WHERE EL.CURRENT_ELIG_IND ='A' ");
		query.append(" AND EL.PROGRAM_CD ='MA'");
		query.append(" AND trunc(EL.EDBC_RUN_DT) =  to_date(?, 'mm/dd/yyyy')");
		query.append(" AND IM.CHIMES_INDV_ID =  EL.TARGET_PERSON_ID");
		query.append(" AND IM.FFM_INDV_ID = AP.INDV_ID");
		query.append(" AND trunc(EL.EDBC_RUN_DT) >=  trunc(AP.REF_ACTIVITY_DATE)");
		query.append(" AND EL.PAYMENT_END_DT IS NULL");
		query.append(" AND EL.DELETE_SW ='N'");
		query.append(" AND EL.TARGET_PERSON_ID IS NOT NULL ORDER BY EL.CASE_NUM, EL.TARGET_PERSON_ID ");
		
		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();
		parms.add(runDt);
	
		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByEligibilityCertifiedFfmWpDenied(int maxRow,
			String runDt) throws GenericRunTimeException, ParseException {

		StringBuffer query = new StringBuffer();
		query.append("SELECT EL.* ");
		query.append(" FROM ED_ELIGIBILITY EL");
		query.append(" WHERE CURRENT_ELIG_IND ='A' ");
		query.append(" AND PROGRAM_CD ='MA'");
		query.append(" AND trunc(EDBC_RUN_DT) = to_date(?, 'mm/dd/yyyy') ");
		query.append(" AND PAYMENT_END_DT IS NULL");
		query.append(" AND DELETE_SW ='N'");
		query.append(" AND (CG_STATUS_CD ='TN' OR CG_STATUS_CD = 'DN') AND EL.TARGET_PERSON_ID IS NOT NULL AND NOT EXISTS");
		query.append(" (SELECT 1 FROM ED_ELIGIBILITY ED WHERE ED.CASE_NUM = EL.CASE_NUM AND ED.PAYMENT_END_DT IS NULL AND ED.CURRENT_ELIG_IND = 'A' AND ED.PROGRAM_CD = 'MA' ");
		query.append(" AND ED.EDG_TRACE_ID <> EL.EDG_TRACE_ID");
		query.append(" AND ED.TARGET_PERSON_ID = EL.TARGET_PERSON_ID AND ED.CG_STATUS_CD = 'AP' AND ED.DELETE_SW ='N') ORDER BY EL.CASE_NUM, EL.TARGET_PERSON_ID");
		
		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();
		parms.add(runDt);
	
		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findOnGoingRecordByCaseNumAndIndvId(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
		String whereClause = "CASE_NUM = " + cargo.getCaseNum()
					+ " AND TARGET_PERSON_ID = " + cargo.getTargetPersonId()
					+ " AND DELETE_SW = \'N\' "
					+ " AND CG_STATUS_CD = \'AP\' "
					+ " AND PROGRAM_CD = \'MA\'"
				    + " AND COVERAGE_GROUP IN (\'MA\',\'MX\')"
					+ " AND CURRENT_ELIG_IND = \'A\' "
					+ " AND PAYMENT_END_DT IS NULL";
					
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumRevertOpenCase(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		EdEligibilityCargo[] edEligibilityCargos;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = " + cargo.getCaseNum()
						+ " AND CURRENT_ELIG_IND =  \'A\'"
						+ " AND DELETE_SW = \'N\'"
						+ "ORDER BY DISPOSITION_ELIG_BEG_DT DESC";
						
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				edEligibilityCargos = getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		return edEligibilityCargos;
	}
	/***
	 * 
	 *Changes by nil begin for ND-99594 
	 * ****/
	
	public EdEligibilityCargo[] checkAuthorizationByCaseNumber(int maxRows, EdEligibilityCargo edCargo)
	throws GenericRunTimeException {
		try {
			long caseNum = edCargo.getCaseNum();
			String[] progCdList = null;
			if(null != edCargo.getProgramCd()){
				progCdList = edCargo.getProgramCd().split(",");
			}
			StringBuffer WHERE_SQL = new StringBuffer();
			WHERE_SQL.append("CASE_NUM = ");
			WHERE_SQL.append(caseNum);
			if(null != progCdList && progCdList.length>0){
				WHERE_SQL.append(" AND PROGRAM_CD IN (");
				for(String progCd : progCdList){
					WHERE_SQL.append("'");
					WHERE_SQL.append(progCd);
					WHERE_SQL.append("',");
				}
				WHERE_SQL.deleteCharAt(WHERE_SQL.length()-1);
				WHERE_SQL.append(")");
			}
			WHERE_SQL.append(" AND DELETE_SW='N' and CURRENT_ELIG_IND='A' ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, WHERE_SQL);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	
	
	
	
	
	
	/***
	 * 
	 *Changes by nil end for ND-99594 
	 * ****/
	public EdEligibilityCargo[] findAuthorizedRecordsByCaseNum(int maxRows, EdEligibilityCargo cargo)
	        throws GenericRunTimeException
	    {
	        try
	        {
	            String SQL = "Select A.* from ED_ELIGIBILITY A Where CASE_NUM = ? AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND = 'A'  AND PROGRAM_CD = 'MA' ";
	            List params = new ArrayList();
	            params.add(Long.valueOf(cargo.getCaseNum()));
	            Debug.println(SQL.toString());
	          
	            EdEligibilityCargo[] cargoArray = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    }
		
	public EdEligibilityCargo[] findAuthorizedRecordsByCaseNumForRetro(int maxRows, EdEligibilityCargo cargo)
	        throws GenericRunTimeException
	    {
	        try
	        {
	            String SQL = "Select A.* from ED_ELIGIBILITY A Where CASE_NUM = ? AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND = 'A'  AND PROGRAM_CD = 'MA' AND prior_medical_cd!='P0' ";
	            List params = new ArrayList();
	            params.add(Long.valueOf(cargo.getCaseNum()));
	            Debug.println(SQL.toString());
	          
	            EdEligibilityCargo[] cargoArray = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    }
	
	/**
	 * Query to find authorized records excluding MINI_APP records. 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findAuthorizedRecordsByCaseNumForMAIssuance(int maxRows, EdEligibilityCargo cargo)
	        throws GenericRunTimeException
	    {
	        try
	        {
	            String SQL = "Select A.* from ED_ELIGIBILITY A Where CASE_NUM = ? AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND = 'A'  AND PROGRAM_CD = 'MA' AND A.EDG_TRACE_ID not in ( select B.EDG_TRACE_ID from ED_ELIGIBILITY B Where A.CASE_NUM = B.CASE_NUM AND B.DELETE_SW = 'N'  AND B.CURRENT_ELIG_IND = 'A' and B.CREATE_USER_ID = 'MINI_APP_R1' AND B.CG_STATUS_CD in('DN','TN'))";
	            List params = new ArrayList();
	            params.add(Long.valueOf(cargo.getCaseNum()));
	            Debug.println(SQL.toString());
	          
	            EdEligibilityCargo[] cargoArray = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    }
	
	/**
	 * Method to fetch Previous authorized records
	 * @param maxRows
	 * @param programCd
	 * @param edm
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findPrevAuthorizedRecords(int maxRows, String programCd,
			Timestamp edm, long caseNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = (new StringBuilder("CASE_NUM = "))
					.append(caseNum)
					.append(" AND DELETE_SW = 'N' ")
					.append(" AND PROGRAM_CD = '")
					.append(programCd)
					.append("' AND CURRENT_ELIG_IND = 'A' AND (rec_begin_dt<= ")
					.append(DateFormatter.getDateForWhereClause(new Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())))
					.append(" AND (rec_end_dt>= ")
					.append(DateFormatter.getDateForWhereClause(new Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())))
					.append(" or rec_end_dt is null))").toString();
            map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
            return getReturnCargo(map);
        
			
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}
	
	/**
	 * Method to fetch previous unauthorized records
	 * @param maxRows
	 * @param programCd
	 * @param edm
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findPrevPendingRecords(int maxRows, String programCd,
			Timestamp edm, long caseNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"CASE_NUM = ? AND DELETE_SW = 'N' AND PROGRAM_CD = ? AND CURRENT_ELIG_IND IN('P','V','I','Y')"
					+ "AND (rec_begin_dt<= ?) AND (rec_end_dt>= ? OR rec_end_dt is null)");
						
			ArrayList<Object> params = new ArrayList <Object> ();
			params.add(caseNum);
			params.add(programCd);
			params.add(DateFormatter.getDateForWhereNoCast(new Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())));
			params.add(DateFormatter.getDateForWhereNoCast(new Timestamp(DateUtilities.getFirstDayOfMonth(edm).getTime())));
			final EdEligibilityCargo[] cargo = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargo;
			
			
			
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}
	
	//ND-34584 Added by asputta
	/**
	 *  This method is used to fetch program eligibity status
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseEdgeTraceId(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		
		List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
		EdEligibilityCargo colrows[] = null;
		try {

			StringBuffer sqlQuery = new StringBuffer();
			sqlQuery.append("SELECT PROGRAM_CD,BENEFIT_START_DT,CG_STATUS_CD  From ED_ELIGIBILITY");
			sqlQuery.append("  WHERE ");
			
			
			sqlQuery.append("CASE_NUM = " + cargo.getCaseNum());
			sqlQuery.append(" AND EDG_TRACE_ID = "+cargo.getEdgTraceId());
			
			
			
			List<Object> params = new ArrayList<Object>();
			
			DAOSqlHelper daohelper = new DAOSqlHelper();
			SQLCommand command = daohelper.getSqlCommandForUpdate(getDataSource(), sqlQuery.toString(), params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}

			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		
	}catch (Exception e) {
		throw new GenericRunTimeException(e.getMessage(), e);
	}
	}
	/** start: JIRA:ND-38247- set isSNAPonCase */ 
	/**
	 * Method findByCase, query by case #.
	 * 
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseForSNAPInCO(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					// + " AND PAYMENT_BEG_DT <= " +
					// DateFormatter.getDateForWhereClause(currDate)
					+ " AND program_cd = 'FS' "
					+ " AND cg_status_cd = 'AP' "
					+ " AND current_elig_ind = 'A' "
					+ " AND payment_end_dt is null ";
			// + " ORDER BY PAYMENT_BEG_DT DESC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 *  Added for Correspondence (It will fetch all the active programs respective to case number)
	 *  JIRA - ND-38242
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findActiveCasesInCO(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND cg_status_cd = 'AP' "
					+ " AND payment_end_dt is null ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	/** start: JIRA:ND-38247- set isSNAPonCase */ 
	/**
	 * Method findByCaseFS
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseFSInCO(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseFS" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CURRENT_ELIG_IND = 'P' AND DELETE_SW='N' AND CG_STATUS_CD='PE' AND VERIFICATION_STATUS_CD='PE' AND CASE_NUM="
					+ cargo.getCaseNum();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Method checkForFS
	 * @author akankshagupta
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] checkForFS(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("checkForFS" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = '"
					+ cargo.getProgramCd()
					+ "' AND CASE_NUM=" + 
					cargo.getCaseNum() + " AND DELETE_SW='N'";			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	public EdEligibilityCargo[] findByCaseNumberVal(int maxRows, EdEligibilityCargo cargo)throws GenericRunTimeException {

		Debug.println("checkForFS" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " PROGRAM_CD = 'CD' AND CASE_NUM=" + 
					cargo.getCaseNum() + " AND DELETE_SW='N'";			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
}
	public EdEligibilityCargo[] findBenefitStartDate(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		String query = "SELECT * FROM ED_ELIGIBILITY where CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND program_cd = 'LI' AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('A','P')";

		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();

		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findByPendingCaseForSNAP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND program_cd = 'FS' "
					+ " AND cg_status_cd = 'PE' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
		public EdEligibilityCargo[] findBySNAPPaymentMonth(int maxRows, 
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findBySnapPaymentMonth " + " maxrows = " + maxRows + "cargo=" + cargo);
		try {
			String whereClause = " CASE_NUM = " + cargo.getCaseNum()
					+ " AND CG_STATUS_CD = 'AP'" 
					+ " AND CURRENT_ELIG_IND = 'A'"
					+ " AND PROGRAM_CD = 'FS'" 
					+ " AND TYPE_OF_ASSISTANCE_CD = 'TP09'"
					+ " AND DELETE_SW = 'N'"
					+ " ORDER BY PAYMENT_BEG_DT ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		}
		catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		
	}
	
	
	public EdEligibilityCargo[] findByIndvIdCWDWWDPremium(int maxRows,
			long indvId) throws GenericRunTimeException {
		Debug.println("findByIndvIdCWDWWD " +  indvId + " = ");
		try {
			String whereClause = " TARGET_PERSON_ID = "
					+ indvId
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND IN ('A','P','I')"
					+ " AND TYPE_OF_ASSISTANCE_CD in ('WD10', 'CW10') ORDER BY PAYMENT_BEG_DT ASC";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByIndvIdForClientShareMA(int maxRows,
			long indvId) throws GenericRunTimeException {
		Debug.println("findByIndvIdCWDWWD " +  indvId + " = ");
		try {
			String whereClause = " TARGET_PERSON_ID = "
					+ indvId
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' "
					+ " AND PROGRAM_CD = 'MA' ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * @author karraj
	 * @param maxRows
	 * @param lCaseNum
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findTANFReviewReviewNextMonth(int maxRows, long lCaseNum, Timestamp date) throws GenericRunTimeException {
		try {
			String dateToConsider = "";
			if(null!=date){
				dateToConsider = BiUtils.getMonth(date)+" "+ BiUtils.getYear(date);
			}
			String whereClause = " CASE_NUM = "
					+ lCaseNum
					+ " AND DELETE_SW = 'N' "
					+ " AND program_cd = 'TF' "
					+ " AND to_char(ESTIMATED_ELIG_END_DT ,'MM YYYY') = '"+dateToConsider+"'"
					+ " AND cg_status_cd = 'AP' "
					+ " AND current_elig_ind = 'A' "
					+ " AND payment_end_dt is null ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseNumAll(int maxRows, EdEligibilityCargo cargo)throws GenericRunTimeException {

		Debug.println("checkForCaseNumber" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		try {
			String clause = "CASE_NUM=" + cargo.getCaseNum();			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	public EdEligibilityCargo[] findBenefitStartDateRepayment(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		String query = "SELECT * FROM ED_ELIGIBILITY where CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND program_cd = 'LI' ";

		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();

		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(), parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByIndvForBuyin(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		try {
			String SQL = "SELECT * FROM ED_ELIGIBILITY WHERE CASE_NUM IN ("
					+ "SELECT UNIQUE CASE_NUM FROM DC_CASE_PROGRAM WHERE CASE_NUM IN ("
					+ "SELECT UNIQUE CASE_NUM FROM DC_CASE_INDIVIDUAL WHERE INDV_ID = "+cargo.getIndivId()+") AND PROG_CD = 'MA') "
					+ " AND DELETE_SW ='N' AND ELIGIBILITY_END_DT IS NULL ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
public EdEligibilityCargo[] findListOfUniqueCaseNumPersonIds(int rowNum,String programCd , Timestamp lastDtOfPrevMonth,String appender,Timestamp asOfDate) throws GenericRunTimeException{
        
        try {
            
        StringBuffer selectQuery = new StringBuffer();
        selectQuery.append("SELECT DISTINCT CASE_NUM || '");
        selectQuery.append(appender);
        selectQuery.append("' || EDG_NUM ");
        selectQuery.append(" AS KEY_STRING FROM ED_ELIGIBILITY WHERE ");
        selectQuery.append("PROGRAM_CD = ? AND CURRENT_ELIG_IND = 'A' AND DELETE_SW ='N' AND REC_BEGIN_DT <= ? AND ");
        selectQuery.append(" CG_STATUS_CD IN ('AP','TN','DN') AND");
        selectQuery.append(" (REC_END_DT >= ? OR REC_END_DT IS NULL) ");
        selectQuery.append(" AND  EDBC_RUN_DT < ? ");
        if("MA".equalsIgnoreCase(programCd)){
        	selectQuery.append("");
        }else if("FS".equalsIgnoreCase(programCd)){
        	selectQuery.append(" AND TYPE_OF_ASSISTANCE_CD = 'TP09' ");
        }
        selectQuery.append(" ORDER BY CASE_NUM || '");
        selectQuery.append(appender);
        selectQuery.append("' || EDG_NUM ASC"); 

        List<Object> params = new ArrayList<Object>();
        params.add(programCd);
        params.add(lastDtOfPrevMonth);
        params.add(lastDtOfPrevMonth);
        params.add(asOfDate);
        
        SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), selectQuery.toString(), params);
        @SuppressWarnings("unchecked")
        Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
        List<String> arrayList = new ArrayList<>();

        for (Map<String, Object> result : results) {
            arrayList.add(result.get("KEY_STRING").toString());
        }
        EdEligibilityCargo[] result = new EdEligibilityCargo[arrayList.size()];
        for (int count = 0; count < arrayList.size(); count++) {
            EdEligibilityCargo tempDataCargo = new EdEligibilityCargo();
            if(arrayList.get(count)!=null){
            tempDataCargo.setCreateUserId(arrayList.get(count));  // temporarily stored unique combination of CASE_NUM and TARGET_PERSON_ID into create_user_id field
            }
            result[count] = tempDataCargo;
        }

        return result;

    } catch (Exception e) {
        throw new GenericRunTimeException(e.getMessage(), e);
    }
    }
    
    public EdEligibilityCargo[] findByCaseNumAndPrgmCdAndSampleMonth(int maxRows,String programCd,Timestamp lastDtOfPreMonth,
            String fromValue, String toValue,String startAfterValue, int pageSize, String compositeKeyAppender,Timestamp asOfDate) throws GenericRunTimeException{
        
            List<Object> params = new ArrayList<Object>();
            List <EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            EdEligibilityCargo colrows[] = null;
            
            StringBuffer selectQuery = new StringBuffer();
            selectQuery.append("SELECT * FROM ED_ELIGIBILITY WHERE ");
            selectQuery.append("PROGRAM_CD = ? AND CURRENT_ELIG_IND = 'A' AND DELETE_SW ='N' AND REC_BEGIN_DT <= ? AND ");
            selectQuery.append(" CG_STATUS_CD IN ('AP','TN','DN') AND");
            selectQuery.append("(REC_END_DT >= ? OR REC_END_DT IS NULL) ");
            selectQuery.append(" AND  EDBC_RUN_DT < ? ");
            if("MA".equalsIgnoreCase(programCd)){
            	selectQuery.append("");
            }else if("FS".equalsIgnoreCase(programCd)){
            	selectQuery.append(" AND TYPE_OF_ASSISTANCE_CD = 'TP09' ");
            }
            params.add(programCd);
            params.add(lastDtOfPreMonth);
            params.add(lastDtOfPreMonth);
            params.add(asOfDate);
            
            if (!"".equalsIgnoreCase(toValue) && !"0".equalsIgnoreCase(toValue)) {
                selectQuery.append(" AND CASE_NUM || '");
                selectQuery.append(compositeKeyAppender);
                selectQuery.append("' || EDG_NUM ");

                selectQuery.append(" BETWEEN ? AND ? ");
                params.add(fromValue);
                params.add(toValue);
            } else {
                selectQuery.append(" AND CASE_NUM || '");
                selectQuery.append(compositeKeyAppender);
                selectQuery.append("' || EDG_NUM = ?");
                params.add(fromValue);
            }
            
            selectQuery.append(" AND CASE_NUM || '");
            selectQuery.append(compositeKeyAppender);
            selectQuery.append("' || EDG_NUM > ?");
            params.add(startAfterValue);
            
            selectQuery.append(" ORDER BY CASE_NUM || '");
            selectQuery.append(compositeKeyAppender);
            selectQuery.append("' || EDG_NUM ASC");
            
            try {
                SQLCommand command = new DAOSqlHelper().getSqlCommandForUpdate(
                        getDataSource(), selectQuery.toString(), params);
                ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command.execute();
                DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
                cargoPopulator.setMapper(new CargoPropertyMapper());
                for (Map<String, Object> result : results) {
                    EdEligibilityCargo newCargo = new EdEligibilityCargo();
                    ObjectPopulator populator = new ObjectPopulator(result,newCargo, cargoPopulator);
                    populator.execute();
                    resultList.add(newCargo);
                }
                colrows = new EdEligibilityCargo[resultList.size()];
                resultList.toArray(colrows);
                return colrows;
            } catch (CheckedApplicationException e) {
                throw new GenericRunTimeException(e.getMessage(), e);
            }        
    }
    

/**
 * This method is used to find unique key string for SNAP Claims Universe
 * @param rowNum
 * @param programCd
 * @param lastDtOfPrevMonth
 * @param appender
 * @param asOfDate
 * @return
 * @throws GenericRunTimeException
 */
public EdEligibilityCargo[] findListOfUniqueCaseNumClaimIds(int rowNum,String programCd , Timestamp lastDtOfPrevMonth,String appender,Timestamp asOfDate) throws GenericRunTimeException{
        
        try {
            if(programCd != null && "CL".equalsIgnoreCase(programCd)){
                programCd = "FS";
            }
        StringBuffer selectQuery = new StringBuffer();
        
        selectQuery.append("WITH t AS(");
        selectQuery.append("SELECT t1_claim_id AS claim_id, t2_case_num AS case_num, overpay_amt, error_reason_cd, error_type_cd ");
        selectQuery.append("FROM v_bv_claim t1 ");
        selectQuery.append("WHERE t1.t1_program_cd=? "); 
        selectQuery.append("AND t1.t1_status_cd='OP' ");
        selectQuery.append("AND to_char(eff_begin_dt,'MON-RRRR') = to_char(");
        selectQuery.append(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPrevMonth));
        selectQuery.append(", 'MON-RRRR') ");
        selectQuery.append(" AND trunc(t1.eff_begin_dt) not in ");
        selectQuery.append("(SELECT trunc(eff_begin_dt) ");
        selectQuery.append("FROM v_bv_claim t2 ");
        selectQuery.append("WHERE t1.t1_claim_id=t2.t1_claim_id "); 
        selectQuery.append("AND t2.t1_status_cd = 'DN') ");
        selectQuery.append("UNION ");
        selectQuery.append("SELECT t1_claim_id AS claim_id, t2_case_num AS case_num, overpay_amt, error_reason_cd, error_type_cd ");
        selectQuery.append("FROM v_bv_claim  ");
        selectQuery.append("WHERE t1_program_cd= ? ");
        selectQuery.append("AND t1_status_cd='OP' ");
        selectQuery.append("AND transaction_cd = 'RA' ");
        selectQuery.append("AND to_char(transaction_dt,'MON-RRRR') = to_char(");
        selectQuery.append(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPrevMonth));
        selectQuery.append(", 'MON-RRRR') ) ");
        selectQuery.append("SELECT DISTINCT t.claim_id || '");
        selectQuery.append(appender);
        selectQuery.append("' || ed.case_num ");
        selectQuery.append("AS KEY_STRING FROM ed_eligibility ed, t ");
        selectQuery.append("WHERE t.case_num = ed.case_num ");
        selectQuery.append("AND ed.current_elig_ind = 'A' ");
        selectQuery.append("AND ed.delete_sw ='N' ");
        selectQuery.append("AND program_cd=? ");
        selectQuery.append("AND cg_status_cd IN ('AP','TN','DN') "); 
        selectQuery.append("AND EDBC_RUN_DT < ? ");
        selectQuery.append("ORDER BY t.claim_id || '");
        selectQuery.append(appender);
        selectQuery.append("' || ed.case_num ASC");         
                
                
        List<Object> params = new ArrayList<Object>();
        params.add(programCd);
        params.add(programCd);
        params.add(programCd);
        params.add(asOfDate);
        
        SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), selectQuery.toString(), params);
        @SuppressWarnings("unchecked")
        Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
        List<String> arrayList = new ArrayList<>();

        for (Map<String, Object> result : results) {
            arrayList.add(result.get("KEY_STRING").toString());
        }
        EdEligibilityCargo[] result = new EdEligibilityCargo[arrayList.size()];
        for (int count = 0; count < arrayList.size(); count++) {
            EdEligibilityCargo tempDataCargo = new EdEligibilityCargo();
            if(arrayList.get(count)!=null){
            tempDataCargo.setCreateUserId(arrayList.get(count));  // temporarily stored unique combination of CASE_NUM and TARGET_PERSON_ID into create_user_id field
            }
            result[count] = tempDataCargo;
        }

        return result;

    } catch (Exception e) {
        throw new GenericRunTimeException(e.getMessage(), e);
    }
    }
    

public EdEligibilityBatchCustomCargo[] findByCaseNumAndPrgmCdAndSampleMonthForClaims(int maxRows,String programCd,Timestamp lastDtOfPreMonth,
        String fromValue, String toValue,String startAfterValue, int pageSize, String compositeKeyAppender,Timestamp asOfDate) throws GenericRunTimeException{
    try {
        
        if(programCd != null && "CL".equalsIgnoreCase(programCd)){
            programCd = "FS";
        }
        List<Object> params = new ArrayList<Object>();
        List <EdEligibilityBatchCustomCargo> resultList = new ArrayList<EdEligibilityBatchCustomCargo>();
        EdEligibilityBatchCustomCargo colrows[] = null;
        
        StringBuffer selectQuery = new StringBuffer();
          
        selectQuery.append("SELECT DISTINCT t.claim_id AS CLAIM_ID, ed.case_num AS CASE_NUM, ");
        selectQuery.append("t.overpay_amt AS OVERPAY_AMT, t.error_reason_cd AS ERROR_REASON_CD, t.error_type_cd AS ERROR_TYPE_CD, t.claim_status AS CLAIM_STATUS ");
        selectQuery.append("FROM ed_eligibility ed, ");
        selectQuery.append("(SELECT t1_claim_id AS claim_id, t2_case_num AS case_num, overpay_amt, error_reason_cd, error_type_cd, 'New' as claim_status  ");
        selectQuery.append("FROM v_bv_claim t1 ");
        selectQuery.append("WHERE t1.t1_program_cd=? "); 
        selectQuery.append("AND t1.t1_status_cd='OP' ");
        selectQuery.append("AND to_char(eff_begin_dt,'MON-RRRR') = to_char(");
        selectQuery.append(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPreMonth));
        selectQuery.append(", 'MON-RRRR') ");
        selectQuery.append(" AND trunc(t1.eff_begin_dt) not in ");
        selectQuery.append("(SELECT trunc(eff_begin_dt) ");
        selectQuery.append("FROM v_bv_claim t2 ");
        selectQuery.append("WHERE t1.t1_claim_id=t2.t1_claim_id "); 
        selectQuery.append("AND t2.t1_status_cd = 'DN') ");
        selectQuery.append("UNION ");
        selectQuery.append("SELECT t1_claim_id AS claim_id, t2_case_num AS case_num, overpay_amt, error_reason_cd, error_type_cd, 'Adjusted' as claim_status  ");
        selectQuery.append("FROM v_bv_claim ");
        selectQuery.append("WHERE t1_program_cd= ? ");
        selectQuery.append("AND t1_status_cd='OP' ");
        selectQuery.append("AND transaction_cd = 'RA' ");
        selectQuery.append("AND to_char(transaction_dt,'MON-RRRR') = to_char(");
        selectQuery.append(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPreMonth));
        selectQuery.append(", 'MON-RRRR') ) t ");
        selectQuery.append("WHERE t.case_num = ed.case_num ");
        selectQuery.append("AND ed.current_elig_ind = 'A' ");
        selectQuery.append("AND ed.delete_sw ='N' ");
        selectQuery.append("AND program_cd=? ");
        selectQuery.append("AND cg_status_cd IN ('AP','TN','DN') "); 
        selectQuery.append("AND EDBC_RUN_DT < ? ");
       
        params.add(programCd);
        params.add(programCd);
        params.add(programCd);
        params.add(asOfDate);
        
        if (!"".equalsIgnoreCase(toValue) && !"0".equalsIgnoreCase(toValue)) {
            selectQuery.append(" AND t.claim_id || '");
            selectQuery.append(compositeKeyAppender);
            selectQuery.append("' || ed.case_num ");

            selectQuery.append(" BETWEEN ? AND ? ");
            params.add(fromValue);
            params.add(toValue);
        } else {
            selectQuery.append(" AND t.claim_id || '");
            selectQuery.append(compositeKeyAppender);
            selectQuery.append("' || ed.case_num = ?");
            params.add(fromValue);
        }
        
        selectQuery.append(" AND t.claim_id || '");
        selectQuery.append(compositeKeyAppender);
        selectQuery.append("' || ed.case_num > ?");
        params.add(startAfterValue);
        
        selectQuery.append(" ORDER BY t.claim_id || '");
        selectQuery.append(compositeKeyAppender);
        selectQuery.append("' || ed.case_num, t.claim_status ASC");
        
       /* StringBuffer sq = new StringBuffer(); 
        sq.append("select t.overpay_amt, t.error_reason_cd, t.error_type_cd from v_bv_claim t where rownum <= ?");
        params = new ArrayList<>();
        params.add("5");*/
            ArrayList<String> uniqueElementList = new ArrayList<>();
            SQLCommand command = getSqlCommandForUpdate(selectQuery.toString(),params);
            ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command.execute();
            EdEligibilityBatchCustomCargo temp = null;
            for(int i =0; (results != null && i < results.size()) ;i++){
                temp = new EdEligibilityBatchCustomCargo();
                for (Entry<String, Object> rs : results.get(i).entrySet()) {
                    String key= rs.getKey();
                    Object value= rs.getValue();
                    if (key != null && "CLAIM_ID".equalsIgnoreCase(key)) {
                        if(value == null)
                            temp.setClaimId("");
                        else if(value instanceof String){
                            temp.setClaimId(value.toString());
                        }
                    } else if (key != null && "CASE_NUM".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof BigDecimal){
                            temp.setCaseNum(Long.valueOf(((BigDecimal)value).toString()));
                        }
                    } else if (key != null && "EDG_NUM".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof BigDecimal){
                            temp.setEdgNum(Long.valueOf(((BigDecimal)value).toString()));
                        }
                    } else if (key != null && "OVERPAY_AMT".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof BigDecimal){
                            temp.setAmt(Double.valueOf(((BigDecimal)value).toString()));
                        }
                    } else if (key != null && "ERROR_TYPE_CD".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof String){
                            temp.setClaimErrorTypeCd((String)value);
                        } else {
                            temp.setClaimErrorTypeCd("");
                        }
                    } else if (key != null && "ERROR_REASON_CD".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof String){
                            temp.setClaimErrorReasonCd((String)value);
                        } else {
                            temp.setClaimErrorReasonCd("");
                        }
                    }  else if (key != null && "CLAIM_STATUS".equalsIgnoreCase(key)) {
                        if(value != null && value instanceof String){
                            temp.setClaimStatusCd((String)value);
                        } else {
                            temp.setClaimStatusCd("");
                        }
                    }
                }
                String keyString = temp.getCaseNum() + compositeKeyAppender + temp.getClaimId();
                if(!uniqueElementList.contains(keyString)){
                    uniqueElementList.add(keyString);
                    resultList.add(temp);
                } 
            }
            colrows = new EdEligibilityBatchCustomCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
        } catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(), e);
        }        
}
	/**
	 * Added by asputta
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findCoPayIndvs(int maxRows,
			String indvIds,String edgTraceList) throws GenericRunTimeException {
		
		try {
			String whereClause = " EDG_TRACE_ID IN ("
					+edgTraceList+" )"
					+ " AND TARGET_PERSON_ID IN ( "
					+ indvIds + " ) AND COPAY_AMT = 0"; 

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Added by mgosavi
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findMAEligibiltyRecords(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuffer whereClause = new StringBuffer();
			whereClause.append(" CASE_NUM = "+ cargo.getCaseNum());
			whereClause.append(" AND TARGET_PERSON_ID = "+ cargo.getIndivId());
			whereClause.append(" AND DELETE_SW = 'N' AND PROGRAM_CD = 'MA' ORDER BY PAYMENT_BEG_DT DESC ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	// ND-88746 : changes -Fetching records on basis of benefitStatus
	public EdEligibilityCargo[] findMAEligibiltyRecordsByBenefitStatus(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuffer whereClause = new StringBuffer();
			whereClause.append(" CASE_NUM = "+ cargo.getCaseNum());
			whereClause.append(" AND TARGET_PERSON_ID = "+ cargo.getIndivId());
			whereClause.append(" AND BENEFIT_STATUS NOT IN ('SU') ");
			whereClause.append(" AND DELETE_SW = 'N' AND PROGRAM_CD = 'MA' ORDER BY PAYMENT_BEG_DT DESC ");
	
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	/**
	 * Fetch primary key of Authorized Eligibility records for SSI Medicaid monthly staging job
	 * ND-49283 : SSI Medicaid Monthly Staging Batch job
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findBySSIAuthorizedEligibilityRecords(int maxRows, 
			EdEligibilityCustomCargo edELigCargo) throws GenericRunTimeException {

		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;
		Timestamp lastDayOfCurrentMonth = DateComparisons.getLastDayOfPreviousMonth(edELigCargo.getPaymentBegDt());

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" DISTINCT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");	
			// ND-56544 : just check for programCd and edg_ssi_sw
			/*MY_SQL.append(" AND PROGRAM_CD = 'MA' AND TYPE_OF_ASSISTANCE_CD IN (");
			MY_SQL.append(edELigCargo.getTypeOfAssistanceCd() + ") ");*/
			MY_SQL.append(" AND PROGRAM_CD = 'MA' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(edELigCargo
					.getPaymentEndDt()));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT,cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(edELigCargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT,cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(edELigCargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND DELETE_SW = 'N' AND EDG_SSI_SW = 'Y'");
			// Adding clause to filter out records that are due for review or monthly report
			MY_SQL.append("  AND NOT EXISTS ");
			MY_SQL.append("  (SELECT NULL FROM ED_CASE_RECERT_DATES EC WHERE ED.CASE_NUM = EC.CASE_NUM AND ED.EDG_NUM = EC.EDG_NUM ");
			MY_SQL.append("  AND (LAST_DAY(EC.RECERT_REVIEW_DUE_DT) <= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(lastDayOfCurrentMonth));
			MY_SQL.append("  OR LAST_DAY(EC.SEMI_ANNUAL_REVIEW_DT) <=  ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(lastDayOfCurrentMonth)).append(")");
			MY_SQL.append("  AND EC.EFF_END_DT IS NULL) ");
			MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");

			sql = MY_SQL.toString();

			sql = MY_SQL.toString();
			SQLCommand command = getSqlCommand(sql);

			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			
			for (Map<String, Object> result: results){
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
	        	   newCargo.setKeyString(result.get("KEY_STRING").toString());
	        	   resultList.add(newCargo);
	           }
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			return resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}


	/**
	 * Fetch Authorized Eligibility records for next month for SSI Medicaid Monthly Staging Issuance Job
	 * ND-49283 : SSI Medicaid Monthly Staging Batch job
	 * @param maxRows
	 * @param pageSize
	 * @param startAfterValue
	 * @param queryFromId
	 * @param queryToId
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findBySSIAuthorizedEligibilityRecords(int maxRows,
			int pageSize, String startAfterValue, String queryFromId, String queryToId, Timestamp asOfDate, String ssiTOAs)
					throws GenericRunTimeException {

		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;
		Timestamp beginDt = DateComparisons.getFirstDayOfNextMonth(asOfDate);
		Timestamp endDt = DateComparisons.getLastDayOfDate(beginDt);
		Timestamp lastDayOfCurrentMonth = DateComparisons.getLastDayOfDate(asOfDate);

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING, ED.* ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");
			// ND-56544 : just check for programCd and edg_ssi_sw
			/*MY_SQL.append(" AND PROGRAM_CD = 'MA' AND TYPE_OF_ASSISTANCE_CD IN (");
			MY_SQL.append(ssiTOAs + ") ");*/
			MY_SQL.append(" AND PROGRAM_CD = 'MA' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(endDt));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT,cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT,cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(beginDt));
			MY_SQL.append(" AND DELETE_SW = 'N' AND EDG_SSI_SW = 'Y'");
			// Adding clause to filter out records that are due for review or monthly report
			MY_SQL.append("  AND NOT EXISTS ");
			MY_SQL.append("  (SELECT NULL FROM ED_CASE_RECERT_DATES EC WHERE ED.CASE_NUM = EC.CASE_NUM AND ED.EDG_NUM = EC.EDG_NUM ");
			MY_SQL.append("  AND (LAST_DAY(EC.RECERT_REVIEW_DUE_DT) <= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(lastDayOfCurrentMonth));
			MY_SQL.append("  OR LAST_DAY(EC.SEMI_ANNUAL_REVIEW_DT) <=  ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(lastDayOfCurrentMonth)).append(")");
			MY_SQL.append("  AND EC.EFF_END_DT IS NULL) ");
        	MY_SQL.append(" AND ((ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) between ? AND ?) AND ((ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) > ? )");
        	MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");


			sql = MY_SQL.toString();
			List<Object> params = new ArrayList<Object>();
         	params.add(queryFromId);
        	params.add(queryToId);
        	params.add(startAfterValue);

			SQLCommand command = getSqlCommandForUpdate(MY_SQL.toString(), params,pageSize);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				newCargo.setKeyString(result.get("KEY_STRING").toString());
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			return resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	
	
	
	
	public EdEligibilityCargo[] findByCaseNumAndProgramCdForNDHCGNF15(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumAndProgramCdForNDHCGNF15" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'MA'"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A'"
					+ " AND DELETE_SW='N'" + " )"
					+ " AND PAYMENT_END_DT IS NULL";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * Fetch primary key of Authorized Eligibility records for SNAP monthly staging job
	 * ND-49275 : SNAP Monthly Staging Batch job
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findByFSEligibilityRecords(int maxRows,
			EdEligibilityCustomCargo cargo) throws GenericRunTimeException {

		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" DISTINCT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");
			MY_SQL.append(" AND PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT,cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT,cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			// CH-24943 For excluding records having COMBINED_PAYMENT_SW having
			// as Y
			MY_SQL.append(" AND DELETE_SW = 'N'");
			
			// ND-70796 - mgosavi start
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ST_FS_MONTHLY ST ");
			MY_SQL.append(" WHERE ED.CASE_NUM = ST.CASE_NUM ");
			MY_SQL.append(" AND PAYMENT_BEG_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()));
			MY_SQL.append(" AND PAYMENT_END_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt()));
			MY_SQL.append(" ) ");
			// ND-70796 - mgosavi end
			
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ISSUANCE_TRIGGER TR ");
			MY_SQL.append(" WHERE ED.CASE_NUM = TR.CASE_NUM AND PROGRAM_CD = 'FS' AND ED.EDG_NUM = TR.EDG_NUM ");
			MY_SQL.append(" AND PAYMENT_BEGIN_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()));
			MY_SQL.append(" AND PAYMENT_END_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt()));
			MY_SQL.append(" AND  BENEFIT_TYPE_CD IN ('IN', 'MN', 'IM', 'RG') AND  (MANUAL_ISSUANCE_SW = 'N' OR MANUAL_ISSUANCE_SW IS NULL) ) ");
			
			MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");

			sql = MY_SQL.toString();

			SQLCommand command = getSqlCommand(sql);

			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			for (Map<String, Object> result: results){
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
	        	   newCargo.setKeyString(result.get("KEY_STRING").toString());
	        	   resultList.add(newCargo);
	           }
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			return resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 *  Fetch primary key of Authorized Eligibility records for SNAP monthly staging job
	 * ND-49275 : SNAP Monthly Staging Batch job
	 * @param maxRows
	 * @param pageSize
	 * @param startAfterValue
	 * @param queryFromId
	 * @param queryToId
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findByFSEligibilityRecords(int maxRows, String queryFromId, String queryToId,
			 String startAfterValue, int pageSize, Timestamp asOfDate) throws GenericRunTimeException {

		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;
		Timestamp paymentBeginDt = BiUtils.getFirstDayOfNextMonth(asOfDate);
		Timestamp paymentEndDt = BiUtils.getLastDayOfNextMonth(asOfDate);

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" DISTINCT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING, ");
			MY_SQL.append(" CG_STATUS_CD, PAYMENT_BEG_DT, PAYMENT_END_DT, PROGRAM_CD, ");
			MY_SQL.append(" BENEFIT_AMT, TYPE_OF_ASSISTANCE_CD, CASE_NUM, ");
			MY_SQL.append(" CLAIM_TYPE_IND, PENALTY_AMT, RECOUPMENT_AMT, ");
			MY_SQL.append(" COUNT_OF_CG_ADULTS, CG_SIZE, ABAWD_SW, EDG_NUM, ");
			MY_SQL.append(" COUNT_OF_CG_CHILD, NET_BENEFIT_AMT, EDG_TRACE_ID, ");
			MY_SQL.append(" EDG_OVERRIDE_SW, STATE_FUNDING_IND, EFIP_ELIG_SW, ");
			MY_SQL.append(" ESTIMATED_ELIG_END_DT, FS_STIMULUS_AMT, MICAP_FAP_SW ");
			// CH-25874 - amirajkar - Added
			MY_SQL.append(" EFIP_CTR, ACTIVITY_TYPE, APPLICATION_DT, EDBC_RUN_DT, ELIGIBILITY_BEG_DT ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' ");
			MY_SQL.append(" AND PROGRAM_CD = 'FS' AND TYPE_OF_ASSISTANCE_CD = 'TP09' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT,cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT,cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND DELETE_SW = 'N'");

			// ND-70796 - mgosavi start
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ST_FS_MONTHLY ST ");
			MY_SQL.append(" WHERE ED.CASE_NUM = ST.CASE_NUM ");
			MY_SQL.append(" AND PAYMENT_BEG_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND PAYMENT_END_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" ) ");
			// ND-70796 - mgosavi end
			
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ISSUANCE_TRIGGER TR ");
			MY_SQL.append(" WHERE ED.CASE_NUM = TR.CASE_NUM AND PROGRAM_CD = 'FS' AND ED.EDG_NUM = TR.EDG_NUM ");
			MY_SQL.append(" AND PAYMENT_BEGIN_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND PAYMENT_END_DT = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" AND  BENEFIT_TYPE_CD IN ('IN', 'MN', 'IM', 'RG') AND  (MANUAL_ISSUANCE_SW = 'N' OR MANUAL_ISSUANCE_SW IS NULL) ) ");
			
			
			MY_SQL.append(" AND (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) between ? AND ? AND ((ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) > ? ) ");
        	MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");

			sql = MY_SQL.toString();

			List<Object> params = new ArrayList<Object>();
         	params.add(queryFromId);
        	params.add(queryToId);
        	params.add(startAfterValue);

			SQLCommand command = getSqlCommandForUpdate(MY_SQL.toString(), params,pageSize);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
				newCargo.setKeyString(result.get("KEY_STRING").toString());
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			return resultList.toArray(colrows);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	/**
	 * added by asputta
	 * @param maxRows
	 * @param caseNum
	 * @param programCd
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getSnapAuthorised(int maxRows,
			long caseNum,String programCd) throws GenericRunTimeException {
		
		try {
			String whereClause = "case_num= "+ caseNum + "AND PROGRAM_CD= "+programCd
					+"CURRENT_ELIG_IND='A' and delete_Sw='N' ORDER BY BENEFIT_START_DT DESC "; 

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findIsMATFEligibility(int maxRows, long caseNum,String currentAsOfDateString) 
			throws GenericRunTimeException {
		Map <String, Object> map = new HashMap <String, Object> ();
		try {
			String clause="CASE_NUM ="
					+ caseNum
					+ strLiteralAndDeleteSWN
					+ " AND program_cd IN ('MA','TF') "
					+ strLiteralAndCgStatusCdAP
					+ strLiteralAndCurrentEligIndA
					+ " AND PAYMENT_BEG_DT<= \'"+currentAsOfDateString+"\' "
					+ " AND (payment_end_dt is null OR payment_end_dt>= \'"+currentAsOfDateString+"\')";
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		}
		catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	

	public EdEligibilityCargo[] fetchCaseNumberByLIHEAP(int maxRows,Timestamp asOfDate, String jobId, Timestamp liheapHeatingSeason,boolean firstRunflag) 
			throws GenericRunTimeException {
	        try
	        {
	        	List<Object> parms = new ArrayList<Object>();
				StringBuilder sb = new StringBuilder();
				sb.append(" SELECT DISTINCT CASE_NUM FROM ED_ELIGIBILITY WHERE");
				sb.append(" CURRENT_ELIG_IND='A' ");
				sb.append(" AND DELETE_SW='N' ");
				sb.append(" AND PROGRAM_CD= 'LI' ");
				sb.append(" AND CG_STATUS_CD in ('AP','TN') ");
				if(firstRunflag){
					sb.append(" AND TRUNC(DI_ACTION_DT) <= TO_CHAR("+ DateFormatter.getDateForWhereClauseAnsi(asOfDate));
					sb.append(" ,'DD-Mon-YYYY') ");
				} else {
					sb.append(" AND DI_ACTION_DT BETWEEN ( SELECT TRUNC(AS_OF_DT) FROM FW_BATCH_SUMMARY WHERE RUN_NUM IN ( ");
					sb.append(" SELECT MAX(RUN_NUM) FROM FW_BATCH_SUMMARY WHERE JOB_ID = ? ) ");
					sb.append(" AND RECORD_NUM = 1 ) ");
					sb.append(" AND TO_CHAR(" + DateFormatter.getDateForWhereClauseAnsi(asOfDate));
					sb.append(" ,'DD-Mon-YYYY') ");
					parms.add(jobId);
				}
				sb.append(" AND TRUNC(PAYMENT_END_DT) = TO_CHAR("+ DateFormatter.getDateForWhereClauseAnsi(liheapHeatingSeason));
				sb.append(" ,'DD-Mon-YYYY') ");
				sb.append(" order By CASE_NUM ");
				
	            EdEligibilityCargo[] cargoArray = getCargoArray(sb.toString(), parms, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    } 
	
	public EdEligibilityCargo[] fetchCaseNumberByLIHEAPByStatus(int maxRows,Timestamp asOfDate,long caseNumFromValue, long caseNumToValue, long sequenceNum, int pageSize, long startAfterValue, String jobId, Timestamp liheapHeatingSeason, boolean firstRunflag) 
			throws GenericRunTimeException {
	        try
	        {
	        	List<Object> parms = new ArrayList<Object>();
	        	String monthLi = null;
				SimpleDateFormat sdf = new SimpleDateFormat("DD-MMM-YY");
				monthLi = sdf.format(asOfDate);
				StringBuilder sb = new StringBuilder();
				String date = DateFormatter.getDateForWhereClauseAnsi(asOfDate);
				sb.append(" SELECT * FROM ED_ELIGIBILITY WHERE ");
				sb.append(" CURRENT_ELIG_IND='A' ");
				sb.append(" AND DELETE_SW='N' ");
				sb.append(" AND PROGRAM_CD= 'LI' ");
				sb.append(" AND CG_STATUS_CD in ('AP','TN') ");
				if(firstRunflag){
					sb.append(" AND TRUNC(DI_ACTION_DT) <= TO_CHAR("+ DateFormatter.getDateForWhereClauseAnsi(asOfDate));
					sb.append(" ,'DD-Mon-YYYY') ");
				} else {
					sb.append(" AND DI_ACTION_DT BETWEEN ( SELECT TRUNC(AS_OF_DT) FROM FW_BATCH_SUMMARY WHERE RUN_NUM IN ( ");
					sb.append(" SELECT MAX(RUN_NUM) FROM FW_BATCH_SUMMARY WHERE JOB_ID = ? ) ");
					sb.append(" AND RECORD_NUM = 1 ) ");
					sb.append(" AND TO_CHAR(" + DateFormatter.getDateForWhereClauseAnsi(asOfDate));
					sb.append(" ,'DD-Mon-YYYY') ");
					parms.add(jobId);
				}
				sb.append(" AND TRUNC(PAYMENT_END_DT) = TO_CHAR("+ DateFormatter.getDateForWhereClauseAnsi(liheapHeatingSeason));
				sb.append(" ,'DD-Mon-YYYY') ");
				
				if(caseNumToValue != 0){
					sb.append(" AND CASE_NUM BETWEEN ? AND ? AND CASE_NUM > ?");
					parms.add(caseNumFromValue);
					parms.add(caseNumToValue);
					parms.add(startAfterValue);
				}
				EdEligibilityCargo[] cargo = getCargoArray(sb.toString(), parms, EdEligibilityCargo.class);
	            
				return cargo;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    } 
	

/**
 * added by asputta	
 * @param maxRows
 * @param caseNum
 * @param edgNumString
 * @param edgTraceIdString
 * @param refDate
 * @return
 * @throws GenericRunTimeException
 */
//Notice should not pull up deceased Indv's information
		public EdEligibilityCargo[] findByEdgNumEdgTraceIdSNAPCase(int maxRows, long caseNum, String edgNumString,
				String edgTraceIdString, String refDate) throws GenericRunTimeException {

			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
				String whereClause = "CASE_NUM="+caseNum
						+ " AND EDG_NUM IN ( " + edgNumString + " )"
						+ " AND EDG_TRACE_ID IN ( " + edgTraceIdString + " )"
						+ " AND DELETE_SW= \'N\'" 
						+ " AND CURRENT_ELIG_IND = \'A\'"
						+ " AND PROGRAM_CD IN ('FS','TF','CD','LI')"
						+ " ORDER BY BENEFIT_START_DT ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}

		}
		//Notice should not pull up deceased Indv's information
		public EdEligibilityCargo[] findByEdgNumEdgTraceIdAndActiveInMACase(int maxRows, long caseNum, String edgNumString,
				String edgTraceIdString, String refDate) throws GenericRunTimeException {

			Map<String, Object> map = new HashMap<String, Object>();
			String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B  "
					+ " WHERE A.INDV_ID = B.INDV_ID "
					+ " AND A.CASE_NUM = "+caseNum
					+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
					//+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+refDate+"\' AS DATE))"
					+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+refDate+"\' AS DATE))";
			try {
				String whereClause = "EDG_NUM IN ( " + edgNumString + " )"
						+ " AND EDG_TRACE_ID IN ( " + edgTraceIdString + " )"
						+ " AND DELETE_SW= \'N\'" 
						+ " AND CURRENT_ELIG_IND = \'A\'"
						+ " AND PROGRAM_CD='MA'"
						+ " AND TARGET_PERSON_ID IN ( "+ temp + " )"
						+ " ORDER BY BENEFIT_START_DT ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}

		}
		

		/**
		 * 
		 * @param maxRows
		 * @param indvId
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findByIndvIdForQIPremium(int maxRows,
				long indvId) throws GenericRunTimeException {
			Debug.println("findByIndvIdForQIPremium " +  indvId + " = ");
			try {
				String whereClause = " TARGET_PERSON_ID = "
						+ indvId
						+ " AND DELETE_SW = 'N' "
						+ " AND CG_STATUS_CD = 'AP' "
						+ " AND CURRENT_ELIG_IND = 'A' "
						+ " AND PROGRAM_CD = 'MA' "
						+ " AND TYPE_OF_ASSISTANCE_CD IN ('MS03','MS05') ";
					//	+ " AND TYPE_OF_ASSISTANCE_CD = 'MA' ";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
	
		public EdEligibilityCargo[] findByCurrentEligIndAndActiveInCaseMA(int maxRows, long caseNum, String refDate) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
			String temp = "SELECT A.INDV_ID FROM DC_CASE_INDIVIDUAL A, DC_INDV B,DC_CASE_PROGRAM_INDV C   "
					+ " WHERE A.INDV_ID = B.INDV_ID "
					+ " AND A.CASE_NUM = "+ caseNum
					+ " AND A.INDV_ID = C.INDV_ID "
					+ " AND C.AID_REQUEST_SW = \'Y\' " 
					+ " AND A.ACTIVE_IN_CASE_SW = \'Y\' "
					//+ " AND (B.DEATH_DT IS NULL OR B.DEATH_DT > CAST(\'"+refDate+"\' AS DATE))"
					+ " AND (A.EFF_END_DT IS NULL OR A.EFF_END_DT > CAST(\'"+refDate+"\' AS DATE))";
			try {
				String whereClause = " CURRENT_ELIG_IND = \'A\'"
						+ " AND DELETE_SW=\'N\'" + " AND TARGET_PERSON_ID IN ( "
						+ temp + " ) AND PROGRAM_CD='MA' ORDER BY BENEFIT_START_DT ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}

		}
		public EdEligibilityCargo[] findByCurrentEligIndAndActiveInCaseSNAP(int maxRows, long caseNum, String refDate) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
				String whereClause = "CASE_NUM="+caseNum+" AND CURRENT_ELIG_IND = \'A\'"
						+ "AND PROGRAM_CD IN ('FS','TF','CD','LI') AND DELETE_SW=\'N\'" + " ORDER BY BENEFIT_START_DT ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}

		}	
		
		public EdEligibilityCargo[] findByTitleCode(int maxRows,
				EdEligibilityCargo cargo) throws GenericRunTimeException {
			try {
				String SQL = "SELECT TITLE_CODE FROM ED_ELIGIBILITY WHERE CASE_NUM =" +cargo.getCaseNum() + " AND program_cd ='"+cargo.getProgramCd()+"'";

				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
				SQLCommand command = getSqlCommand(SQL);
				List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
						.execute();
				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> obj : results) {
					EdEligibilityCargo theObject = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(obj, theObject,
							cargoPopulator);
					populator.execute();
					resultList.add(theObject);
				}
				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		
/**
	 * Query to find payment end date for living arrangement
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	/*public EdEligibilityCargo[] findByIndvIdForPaymentDt(int maxRows, EdEligibilityCargo cargo)
	        throws GenericRunTimeException
	    {
	        try
	        {
	            String SQL = " SELECT * FROM ( SELECT * FROM ED_ELIGIBILITY where TARGET_PERSON_ID=? AND DELETE_SW='N' AND CURRENT_ELIG_IND IN ( 'A','W') AND CG_STATUS_CD IN ('AP') AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y') and COVERAGE_GROUP IN ('MA','HS') ORDER BY PAYMENT_BEG_DT DESC) WHERE ROWNUM=1 ";
	            List params = new ArrayList();
	            params.add(Long.valueOf(cargo.getTargetPersonId()));
	            Debug.println(SQL.toString());
	          
	            EdEligibilityCargo[] cargoArray = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	    } 
*/
		public EdEligibilityCargo[] findAllPrograms(int maxRows,
				String progCd) throws GenericRunTimeException {
			Debug.println("findAllPrograms " +  progCd + " = ");
			try {
				String whereClause = " PROGRAM_CD = "
						+ progCd
						+ " AND DELETE_SW = 'N' "
						+ " AND CG_STATUS_CD = 'AP' "
						+ " AND CURRENT_ELIG_IND = 'A' ";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		
		public EdEligibilityCargo[] findProgramsNDEBN111Insert(int maxRows,
				EdEligibilityCargo caseNum) throws GenericRunTimeException {
			Debug.println("findProgramsNDEBN111Insert " +  caseNum + " = ");
			try {
				String whereClause = " CURRENT_ELIG_IND = 'A' "
						+ " AND CG_STATUS_CD = 'AP'";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		public EdEligibilityCargo[] findProgramsNDEBN111(int maxRows,
				EdEligibilityCargo caseNum) throws GenericRunTimeException {
			Debug.println("findProgramsNDEBN111Insert " +  caseNum + " = ");
			try {
				String whereClause = " CURRENT_ELIG_IND = 'A' "
						+ " AND CG_STATUS_CD = 'AP' "
						+ " AND CASE_NUM = " +caseNum.getCaseNum();
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		public EdEligibilityCargo[] findByCurrentEligIndAndActiveInCaseCCAP(int maxRows, long caseNum, String refDate) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
			
			try {
				String whereClause = "CASE_NUM="+caseNum+" AND CURRENT_ELIG_IND = \'A\'"
						+ "AND PROGRAM_CD='CD' AND DELETE_SW=\'N\'" + " ORDER BY BENEFIT_START_DT ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(),e);
			}

		}	
		
		/**
	 * Method to fetch records for given case number, type of assistance,
	 * individual
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumberOnly(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println((new StringBuilder())
				.append("findByCaseNumber maxRows= ").append(maxRows)
				.append(" cargo=").append(cargo).toString());
		try {
			Map map = new HashMap();
			map.put("CASE_NUM", Long.valueOf(cargo.getCaseNum()));
			map.put("PROGRAM_CD", cargo.getProgramCd());

			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * @author karraj
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findRetroMonthsForIndv(int maxRows, long indvId, long caseNum) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select E.* From Ed_Eligibility E,Ed_Indv_Eligibility I Where E.Prior_Medical_Cd <> 'P0' And E.Edg_Trace_Id = I.Edg_Trace_Id And E.Delete_Sw = 'N' And E.Cg_Status_Cd = 'AP' And E.Current_Elig_Ind = 'A' AND E.Benefit_Status Not In ('TN','DN')");
            clause.append(" And E.Case_Num = ").append(caseNum);
            clause.append(" And I.Indv_Id = ").append(indvId);
            clause.append(" Order BY E.PAYMENT_BEG_DT");
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * @author karraj
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findIndvDeniedTANFAssistance(int maxRows, long indvId, long caseNum) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select E.* From Ed_Eligibility E,Ed_Indv_Eligibility I Where E.Edg_Trace_Id = I.Edg_Trace_Id And E.Delete_Sw = 'N' And E.Cg_Status_Cd = 'AP' And E.Current_Elig_Ind In ('A','P') And E.Program_Cd = 'TF' And E.Benefit_Status In ('TN','DN')");
            clause.append(" And E.Case_Num = ").append(caseNum);
            clause.append(" And I.Indv_Id = ").append(indvId);
            clause.append(" Order BY E.PAYMENT_BEG_DT");
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * @author karraj
	 * @param maxRows
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findBenefitMonthForSOFNotice(int maxRows, long caseNum) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select E.* From Ed_Eligibility E,Ed_Indv_Eligibility I Where E.Prior_Medical_Cd = 'P0' And E.Edg_Trace_Id = I.Edg_Trace_Id And E.Delete_Sw = 'N' And E.Cg_Status_Cd = 'AP' And E.Current_Elig_Ind = 'A' and E.Benefit_Status Not In ('TN','DN')");
            clause.append(" And E.Case_Num = ").append(caseNum);
            clause.append(" Order BY E.Eligibility_Beg_Dt");
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	/**ND-54010
	 * added by shreyasingh
	 * @param maxRows
	 * @param indvId
	 * @return
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findDisabilityByIndvId(int maxRows, long indvId)
			throws GenericRunTimeException {
		List<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
		EdEligibilityCargo colrows[] = null;
		try {
			List<Object> params = new ArrayList<Object>();
			String clause = "select * from ed_eligibility where delete_sw='N'  and CURRENT_ELIG_IND='A' and target_person_id = "+indvId;	
			List<Object> param = new ArrayList<Object>();
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString(), param);
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for (Map<String, Object> result : results) {
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                   ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                   populator.execute();
                   v.add(newCargo);
            }
            colrows = new EdEligibilityCargo[v.size()];
            v.toArray(colrows);
            return colrows;
      } catch (Exception e) {
            throw new GenericRunTimeException("NDHCC107Assembler------"+e.getMessage(),e);
      }
	}
	public EdEligibilityCargo[] findByCaseNumSorted(int maxrows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		String strLiteralCaseNum2 = " CASE_NUM = ";
		String strLiteralOrderByBenifitstartdt = " ORDER BY BENEFIT_START_DT DESC ";
		try {
			String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() + " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' "+strLiteralOrderByBenifitstartdt;
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumDateDetails(int maxrows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		String strLiteralCaseNum2 = " CASE_NUM = ";
		try {
			String whereClause = strLiteralCaseNum2 + cargo.getCaseNum() + " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findbyProviderId(int maxRows,long providerId) throws GenericRunTimeException{
		
		String sql = "select a.* from ED_ELIGIBILITY a, ED_INDV_ELIGIBILITY b,PM_CCAP_PROVIDERS c,dc_indv d where ";
		sql+="b.edg_trace_id = a.EDG_TRACE_ID  and c.ssn = d.ssn and d.indv_id = b.indv_id and ";
		sql+="b.CASE_NUM = a.CASE_NUM and c.PROVIDER_ID = ? ";
		try {
			 List params = new ArrayList();
	            params.add(providerId);
	          
	            return getCargoArray(sql, params, EdEligibilityCargo.class);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumNotDeleted(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuffer whereClause = new StringBuffer();
			whereClause.append(" CASE_NUM = "+ cargo.getCaseNum());
			whereClause.append(" AND DELETE_SW = 'N' ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * fetch primary keys of TANF authorized records for next month
	 * ND-54156 : TANF monthly staging batch
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findByTANFProgramStagingParallel(
			int maxRows, EdEligibilityCustomCargo cargo)
			throws GenericRunTimeException {

		// List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;
		Date date=new Date();	
		SimpleDateFormat format=new SimpleDateFormat("dd-MMM-yyyy");
		Timestamp ts= BiUtils.getLastDayOfPreviousMonth(cargo.getPaymentEndDt());
		String lastDayOfTheMonth=format.format(ts);

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" DISTINCT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD in ('AP','SP') AND CURRENT_ELIG_IND = 'A' ");

			MY_SQL.append(" AND PROGRAM_CD = 'TF' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentEndDt()));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT, cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT, cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo
					.getPaymentBegDt()));
			MY_SQL.append("  AND DELETE_SW = 'N' ");

			MY_SQL.append("  AND NOT EXISTS ");
			MY_SQL.append("  (SELECT NULL FROM ED_CASE_RECERT_DATES EC WHERE ED.CASE_NUM = EC.CASE_NUM AND ED.EDG_NUM = EC.EDG_NUM ");
			MY_SQL.append("  AND TRUNC(EC.RECERT_REVIEW_DUE_DT) = TRUNC( CAST(\'" + lastDayOfTheMonth + "\' AS DATE)");
			MY_SQL.append(")  AND EC.REVIEW_PACKET_RECEIVED_DT IS NULL AND COALESCE(EC.REVIEW_PENDING_CD,'XX') NOT IN('RC') ");
			MY_SQL.append("  AND EC.EFF_END_DT IS NULL) ");
			
			// ND-70796 - mgosavi start
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ST_TANF_MONTHLY ST ");
			MY_SQL.append(" WHERE ED.CASE_NUM = ST.CASE_NUM ");
			MY_SQL.append(" AND PAYMENT_BEG_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()));
			MY_SQL.append(" AND PAYMENT_END_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt()));
			MY_SQL.append(" ) ");
			// ND-70796 - mgosavi end	
			
			//Changes as per ND-98136
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ISSUANCE_TRIGGER TR ");
			MY_SQL.append(" WHERE ED.CASE_NUM = TR.CASE_NUM ");
			MY_SQL.append(" AND PROGRAM_CD = 'TF' AND ED.EDG_NUM = TR.EDG_NUM AND PAYMENT_BEGIN_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()));
			MY_SQL.append(" AND PAYMENT_END_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt()));
			MY_SQL.append(" AND (MANUAL_ISSUANCE_SW = 'N' OR MANUAL_ISSUANCE_SW IS NULL) AND  BENEFIT_TYPE_CD IN ('IN', 'MN', 'IM', 'RG')");
			MY_SQL.append(" AND SS_CATEGORY IS NULL AND SS_TYPE IS NULL) ");
		
			
			MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");

			// MY_SQL.append(cargo.getActivityType());

			sql = MY_SQL.toString();

			SQLCommand command = getSqlCommand(sql);

			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			for (Map<String, Object> result : results) {
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
				newCargo.setKeyString(result.get("KEY_STRING").toString());
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			return resultList.toArray(colrows);

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	/**
	 * fetch TANF authorrized records for next month to be prrocessed by TANF MOnthly Staging batch
	 * ND-54156
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCustomCargo[] findByTANFProgramStagingParallel(
			int maxRows, String queryFromId, String queryToId,
			String startAfterValue, int pageSize, Timestamp asOfDate)
			throws GenericRunTimeException {

		List<EdEligibilityCustomCargo> resultList = new ArrayList<EdEligibilityCustomCargo>();
		String sql = null;
		EdEligibilityCustomCargo[] colrows = null;
		Timestamp paymentBeginDt = BiUtils.getFirstDayOfNextMonth(asOfDate);
		Timestamp paymentEndDt = BiUtils.getLastDayOfNextMonth(asOfDate);
		Date date=new Date();	
		SimpleDateFormat format=new SimpleDateFormat("dd-MMM-yyyy");
		Timestamp ts= BiUtils.getLastDayOfPreviousMonth(paymentEndDt);
		String lastDayOfTheMonth=format.format(ts);

		try {
			StringBuffer MY_SQL = new StringBuffer(" SELECT ");
			MY_SQL.append(" DISTINCT (ED.CASE_NUM ||  '-' || ED.EDG_TRACE_ID)  as KEY_STRING ,");
			MY_SQL.append(" CG_STATUS_CD, PAYMENT_BEG_DT, PROGRAM_CD, ");
			MY_SQL.append(" BENEFIT_AMT, TYPE_OF_ASSISTANCE_CD, CASE_NUM, ");
			MY_SQL.append(" CLAIM_TYPE_IND, PENALTY_AMT, RECOUPMENT_AMT, ");
			MY_SQL.append(" COUNT_OF_CG_ADULTS, CG_SIZE, ABAWD_SW, EDG_NUM, ");
			MY_SQL.append(" COUNT_OF_CG_CHILD, NET_BENEFIT_AMT, EDG_TRACE_ID, ");
			MY_SQL.append(" EDG_OVERRIDE_SW, STATE_FUNDING_IND, EFIP_ELIG_SW, ");
			MY_SQL.append(" ESTIMATED_ELIG_END_DT, FS_STIMULUS_AMT, MICAP_FAP_SW, ");

			MY_SQL.append(" EFIP_CTR, ACTIVITY_TYPE, APPLICATION_DT, EDBC_RUN_DT, ELIGIBILITY_BEG_DT, COVERAGE_GROUP ");
			MY_SQL.append(" FROM ED_ELIGIBILITY ED ");
			MY_SQL.append(" WHERE CG_STATUS_CD in ('SP','AP') AND CURRENT_ELIG_IND = 'A' ");

			MY_SQL.append(" AND PROGRAM_CD = 'TF' ");
			MY_SQL.append(strLiteralAndPaymentBegDt2);
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" AND COALESCE(PAYMENT_END_DT, cast('01-DEC-2999' as date)) >= ");
			MY_SQL.append(DateFormatter
					.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND COALESCE(ESTIMATED_ELIG_END_DT, cast('01-DEC-2999' as date)) > ");
			MY_SQL.append(DateFormatter
					.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append("  AND DELETE_SW = 'N' ");
			// CHIMESMO-45974 - ADDING CLAUSE TO FILTER OUT RECORDS WHICH WOULD
			// CLOSE AFTER CURRENT MONTH'S MASS UPDATE BATCH JOB
			MY_SQL.append("  AND NOT EXISTS ");
			MY_SQL.append("  (SELECT NULL FROM ED_CASE_RECERT_DATES EC WHERE ED.CASE_NUM = EC.CASE_NUM AND ED.EDG_NUM = EC.EDG_NUM ");
			MY_SQL.append("  AND TRUNC(EC.RECERT_REVIEW_DUE_DT) = TRUNC( CAST(\'" + lastDayOfTheMonth + "\' AS DATE)");
			MY_SQL.append(")  AND EC.REVIEW_PACKET_RECEIVED_DT IS NULL AND COALESCE(EC.REVIEW_PENDING_CD,'XX') NOT IN('RC') ");
			MY_SQL.append("  AND EC.EFF_END_DT IS NULL) ");
			
			// ND-70796 - mgosavi start
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ST_TANF_MONTHLY ST ");
			MY_SQL.append(" WHERE ED.CASE_NUM = ST.CASE_NUM ");
			MY_SQL.append(" AND PAYMENT_BEG_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND PAYMENT_END_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" ) ");
			// ND-70796 - mgosavi end	
			
			//Changes as per ND-98136
			MY_SQL.append(" AND NOT EXISTS (SELECT NULL FROM BI_ISSUANCE_TRIGGER TR ");
			MY_SQL.append(" WHERE ED.CASE_NUM = TR.CASE_NUM ");
			MY_SQL.append(" AND PROGRAM_CD = 'TF' AND ED.EDG_NUM = TR.EDG_NUM AND PAYMENT_BEGIN_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentBeginDt));
			MY_SQL.append(" AND PAYMENT_END_DT  = ");
			MY_SQL.append(DateFormatter.getDateForWhereClauseAnsi(paymentEndDt));
			MY_SQL.append(" AND (MANUAL_ISSUANCE_SW = 'N' OR MANUAL_ISSUANCE_SW IS NULL) AND  BENEFIT_TYPE_CD IN ('IN', 'MN', 'IM', 'RG')");
			MY_SQL.append(" AND SS_CATEGORY IS NULL AND SS_TYPE IS NULL) ");
			
			MY_SQL.append(" AND (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) between ? AND ? AND ((ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID) > ? ) ");
			MY_SQL.append(" ORDER BY (ED.CASE_NUM  || '-' || ED.EDG_TRACE_ID)");

			List<Object> params = new ArrayList<Object>();
			params.add(queryFromId);
			params.add(queryToId);
			params.add(startAfterValue);

			SQLCommand command = getSqlCommandForUpdate(MY_SQL.toString(),
					params, pageSize);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCustomCargo newCargo = new EdEligibilityCustomCargo();
				newCargo.setKeyString(result.get("KEY_STRING").toString());
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			colrows = new EdEligibilityCustomCargo[resultList.size()];
			resultList.toArray(colrows);
			EdEligibilityCustomCargo aedeligibilitycargo[] = colrows;

			return aedeligibilitycargo;

		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	public EdEligibilityCargo[] findAllProgramsCase(int maxRows,long caseNum) throws GenericRunTimeException {
			Debug.println("findAllPrograms CD = ");
			try {
				String whereClause = " PROGRAM_CD = 'CD'"
						+ " AND CASE_NUM = " 
						+ caseNum
						+ " AND DELETE_SW = 'N' "
						+ " AND CG_STATUS_CD = 'AP' "
						+ " AND CURRENT_ELIG_IND = 'A' ORDER BY BENEFIT_START_DT DESC";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
	
	public EdEligibilityCargo[] findAllProgramsCaseAsc(int maxRows,long caseNum) throws GenericRunTimeException {
		Debug.println("findAllPrograms CD = ");
		try {
			String whereClause = " PROGRAM_CD = 'CD'"
					+ " AND CASE_NUM = " 
					+ caseNum
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' ORDER BY BENEFIT_START_DT ASC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param caseNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findDiversionInfoForCase(int maxRows, long caseNum) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' AND Cg_Status_Cd = 'AP' And Program_Cd = 'TF' And Current_Elig_Ind in ('A','P') And PAYMENT_End_Dt Is Null And Coverage_Group = 'DV' And Benefit_Status Not In ('TN','DN')");
            clause.append(" And Case_Num = ").append(caseNum);
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCaseNumbersForNonReciptOfMonthlyRpt(int maxRows, Timestamp date) throws GenericRunTimeException {
		String dateToConsider = FwConstants.SPACE;
		if(null!=date){
			dateToConsider = BiUtils.getMonth(date)+" "+ BiUtils.getYear(date);
		}
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' And Cg_Status_Cd = 'AP'");
            clause.append(" And Program_Cd = 'TF' And Current_Elig_Ind = 'A' ");
            clause.append(" AND PAYMENT_BEG_DT <= "+DateFormatter.getDateForWhereClause(date)+" AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >="+DateFormatter.getDateForWhereClause(date)+")");
            clause.append(" AND Benefit_Status Not In ('TN','DN') ");
            clause.append(" And Case_Num In ( Select Case_Num From Ed_Case_Recert_Dates Where Program_Cd = 'TF' And eff_end_dt is null AND HIST_NAV_IND IN('S','P') ");
            clause.append(" AND to_char(SEMI_ANNUAL_REVIEW_DT,'MM YYYY') = '"+dateToConsider+"'" );
            clause.append(" AND (FORM_2240_RECEIVED_DT Is Null OR (FORM_2240_RECEIVED_DT NOT BETWEEN FORM_1830_PRINT_DT AND "+DateFormatter.getDateForWhereClause(date)+"))");
            clause.append(" AND (Recert_Review_Start_Dt Is Null OR (RECERT_REVIEW_START_DT < "+DateFormatter.getDateForWhereClause(date));
            clause.append(" AND to_char(RECERT_REVIEW_START_DT,'MM YYYY') <> '"+dateToConsider+"')))");
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	
	public EdEligibilityCargo[] findRecoupmentCopayByChildIndvID(int maxRows, long caseNumber, String startDt, String lastDt) throws GenericRunTimeException {
		try {
			String sqlString = "SELECT * FROM ED_ELIGIBILITY WHERE program_cd='CD' and current_elig_ind='A' and case_num= "+caseNumber+" and cg_status_cd='AP' and delete_sw='N' and PAYMENT_BEG_DT <=CAST(\'" + lastDt + "\' AS DATE) AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >=CAST(\'" + startDt + "\' AS DATE))";
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sqlString);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}


	/**
		 * Method findByCaseNumEligIndDeleteSw, query by Case Num Curr Elig Ind Delete Sw.
		 *
		 * @param maxRows
		 *            int
		 * @param cargo
		 *            EdEligibilityCargo
		 * @return EdChangeReportingDtlsCargo[]
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findByCaseNumEligIndDeleteSw(int maxRows,
				final long caseNum,final String elig_ind,final String delete_sw) throws GenericRunTimeException {
			try {
				String clause = strLiteralCaseNum2 + caseNum
						+ " AND " + strLiteralCurrentEliInd + "'"+elig_ind +"'" 
						+ " AND " + strLiteralDeleteSw2 + "'" +delete_sw + "'" 
						+ " ORDER BY EDG_NUM";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, clause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}

		/**
		 * Method findByCaseNumEligIndDeleteSw, query by Case Num Curr Elig Ind Delete Sw.
		 *
		 * @param maxRows
		 *            int
		 * @param cargo
		 *            EdEligibilityCargo
		 * @return EdChangeReportingDtlsCargo[]
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findByCaseNumMedNeedy(int maxRows,
				final long caseNum,final String programCodes,final String delete_sw) throws GenericRunTimeException {
			try {
				String clause = strLiteralCaseNum2 + caseNum
						+ " AND " + strLiteralTypeOfAssistanceCd + " in ("+programCodes +")" 
						+ " AND CG_STATUS_CD IN ('AP','PE')"
						+ " AND CURRENT_ELIG_IND IN ('A','P')"
						+ " AND " + strLiteralDeleteSw2 + "'" +delete_sw + "'" 
						+ " ORDER BY EDG_NUM";
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, clause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
	/**
	 * fetch records based on begin date
	 * ND-62359
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findEdgForProgramCasePayBegDt(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		// String dateWherClause;
		try {
			// dateWherClause =
						// DateFormatter.getDateForWhereClauseAnsi(eligCargo.getEligibilityBegDt());
						StringBuilder sb = new StringBuilder();
						sb.append(strLiteralCaseNum2);
						sb.append(eligCargo.getCaseNum());
						sb.append(" AND PROGRAM_CD = '");
						sb.append(eligCargo.getProgramCd());
						sb.append("' AND (PAYMENT_BEG_DT <= ");
						sb.append(DateFormatter.getDateForWhereClauseAnsi(eligCargo.getPaymentBegDt()));
						sb.append(") AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('A','P') ORDER BY EDBC_RUN_DT DESC, PAYMENT_BEG_DT DESC");
						Map<String, Object> map = new HashMap<String, Object>();
						map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
						return getReturnCargo(map);
					} catch (Exception e) {
						log(ILog.ERROR, e.getMessage());
						throw new GenericRunTimeException(e.getMessage(),e);
					}
	}


	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findSNAPABAWDCaseDueForClosure(int maxRows, long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("SELECT E.* FROM ED_ELIGIBILITY E, ED_INDV_ELIGIBILITY I, DC_INDV_ABAWD D "); 
            clause.append(" WHERE E.EDG_TRACE_ID = I.EDG_TRACE_ID ");
            clause.append(" AND I.INDV_ID = D.INDV_ID ");
            clause.append(" And E.DELETE_SW = 'N' And E.CG_STATUS_CD = 'AP' AND E.CURRENT_ELIG_IND = 'A' ");
            clause.append(" AND E.PROGRAM_CD = 'FS' AND E.BENEFIT_STATUS NOT IN ('TN','DN') ");
            clause.append(" AND D.TOTAL_MONTHS_USED = 3 ");
            clause.append(" AND (D.REGAINED_ELIG_SW IS NULL OR D.REGAINED_ELIG_SW = 'N') ");
            clause.append(" AND (D.REGAINED_WORK_ELIG_SW IS NULL OR D.REGAINED_WORK_ELIG_SW = 'N') ");
            clause.append(" AND D.HIST_NAV_IND IN ('S','P') ");
            clause.append(" AND E.PAYMENT_BEG_DT <= "+DateFormatter.getDateForWhereClause(date));
            clause.append(" AND (E.PAYMENT_END_DT IS NULL OR E.PAYMENT_END_DT >= "+DateFormatter.getDateForWhereClause(date)+")");
            if (caseNum > 0) {
            	clause.append(" AND E.CASE_NUM = "+ caseNum);
			}
            clause.append(" ORDER BY E.PAYMENT_BEG_DT DESC ");
           
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findSNAPExtendABAWDCaseDueForClosure(int maxRows,long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
			clause.append("SELECT E.* FROM ED_ELIGIBILITY E, ED_INDV_ELIGIBILITY I, DC_INDV_ABAWD D "); 
            clause.append(" WHERE E.EDG_TRACE_ID = I.EDG_TRACE_ID ");
            clause.append(" AND I.INDV_ID = D.INDV_ID ");
            clause.append(" And E.DELETE_SW = 'N' And E.CG_STATUS_CD = 'AP' AND E.CURRENT_ELIG_IND = 'A' ");
            clause.append(" AND E.PROGRAM_CD = 'FS' AND E.BENEFIT_STATUS NOT IN ('TN','DN') ");
            clause.append(" AND D.TOTAL_MONTHS_USED >= 6 ");
            clause.append(" AND D.HIST_NAV_IND IN ('S','P') ");
            clause.append(" AND E.PAYMENT_BEG_DT <= "+DateFormatter.getDateForWhereClause(date));
            clause.append(" AND (E.PAYMENT_END_DT IS NULL OR E.PAYMENT_END_DT >= "+DateFormatter.getDateForWhereClause(date)+")");
            if (caseNum > 0) {
            	clause.append(" AND E.CASE_NUM = "+ caseNum);
			}
            clause.append(" ORDER BY E.PAYMENT_BEG_DT DESC ");
            
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findDiversionCaseDueForClosure(int maxRows, long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' ");
            clause.append(" And Cg_Status_Cd = 'AP' ");
            clause.append(" And Program_Cd = 'TF' ");
            clause.append(" And Current_Elig_Ind = 'A' ");
            clause.append(" AND COVERAGE_GROUP = 'DV' ");
            clause.append(" AND Benefit_Status Not In ('TN','DN') ");
            clause.append(" And CASE_NUM In (Select CASE_NUM From Ed_Indv_Counters Where Counter_Type_Cd = 'DV' AND CHILD_INDV_ID >= 4)");
            clause.append(" AND PAYMENT_BEG_DT <= "+DateFormatter.getDateForWhereClause(date));
            clause.append(" AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= "+DateFormatter.getDateForWhereClause(date)+")");
            if (caseNum > 0) {
            	clause.append(" AND CASE_NUM = "+ caseNum);
			}
            clause.append(" ORDER BY PAYMENT_BEG_DT DESC ");
            
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findTANFCaseDueForClosure(int maxRows,long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select E.* From Ed_Eligibility E,Ed_Indv_Eligibility I,Tc_Clock_Details T ");
            clause.append(" Where E.Edg_Trace_Id = I.Edg_Trace_Id ");
            clause.append(" And I.Indv_Id = T.Indv_Id ");
            clause.append(" And E.Delete_Sw = 'N' And E.Cg_Status_Cd = 'AP' AND E.CURRENT_ELIG_IND = 'A' ");
            clause.append(" And E.Program_Cd = 'TF' And E.Benefit_Status Not In ('TN','DN') ");
            clause.append(" And E.Coverage_Group Not In ('DV') ");
            clause.append(" And T.State_Clock_Cntr >=60 ");
            clause.append(" AND E.PAYMENT_BEG_DT <= "+DateFormatter.getDateForWhereClause(date));
            clause.append(" AND (E.PAYMENT_END_DT IS NULL OR E.PAYMENT_END_DT >= "+DateFormatter.getDateForWhereClause(date)+")");
            if (caseNum > 0) {
            	clause.append(" AND E.CASE_NUM = "+ caseNum);
			}
            clause.append(" ORDER BY E.PAYMENT_BEG_DT DESC ");
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @author karraj
	 * @param maxRows
	 * @param caseNumber
	 * @param edNegActionDate
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByConditionForNDHCREN17CaseNotAuth(int maxRows, long caseNumber, String edNegActionDate) throws GenericRunTimeException {
		try {

			String query = "SELECT E.* "
					+ "	FROM ED_ELIGIBILITY E JOIN ED_CASE_RECERT_DATES R "
					+ "		 ON R.CASE_NUM = E.CASE_NUM "
					+ "	     AND R.PROGRAM_CD = E.PROGRAM_CD "
					+ "		 AND R.EDG_NUM = E.EDG_NUM "
					+ "		 AND R.EFF_END_DT IS NULL "
					+ "	     AND LAST_DAY(R.SEMI_ANNUAL_REVIEW_DT) = LAST_DAY (TRUNC(CAST(\'" + edNegActionDate + "\' AS DATE))) "
					+ "	     AND R.FORM_2240_RECEIVED_DT IS NULL "
					+ "		 AND E.APPLICATION_DT = R.RECERT_REVIEW_APP_FILE_DT "
					+ "	WHERE E.DELETE_SW = \'N\' "
					+ "		 AND E.CURRENT_ELIG_IND = \'A\' "
					+ "	     AND E.CG_STATUS_CD = \'AP\' "
					+ "		 AND E.PAYMENT_END_DT IS NULL "
					+ "		 AND E.PRIOR_MEDICAL_CD = \'P0\' "
					+ "		 AND R.HIST_NAV_IND IN (\'S\',\'P\') "
					+ "	     AND E.PROGRAM_CD = \'MA\' ";
			if (caseNumber > 0) {
				query = query + " AND E.CASE_NUM = " + caseNumber;
			}
			query = query + " ORDER BY E.CASE_NUM,E.TARGET_PERSON_ID ";

			String sSQL = query.toString();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sSQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * ND-60876
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findActiveCWDCases(int maxRows, long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' ");
            clause.append(" And Cg_Status_Cd = 'AP' ");
            clause.append(" And Program_Cd = 'MA' ");
            clause.append(" And Current_Elig_Ind = 'A' ");
            clause.append(" AND Benefit_Status Not In ('TN','DN') ");
            clause.append(" AND TYPE_OF_ASSISTANCE_CD = 'CW10' ");
            clause.append(" AND CASE_NUM IN (SELECT DISTINCT(CASE_NUM) FROM ED_ELIGIBILITY WHERE DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'A' AND BENEFIT_STATUS NOT IN ('TN','DN') AND TYPE_OF_ASSISTANCE_CD = 'CW10' AND PAYMENT_END_DT IS NULL ");
            if (caseNum > 0) {
            	clause.append(" AND CASE_NUM = "+ caseNum);
			}
            clause.append(" ) ORDER BY CASE_NUM,PAYMENT_BEG_DT DESC");
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	/**
	 * ND-60876
	 * @param maxRows
	 * @param date
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findActiveWWDCases(int maxRows,long caseNum, Timestamp date) throws GenericRunTimeException {
		try {
			StringBuilder clause = new StringBuilder();
            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' ");
            clause.append(" And Cg_Status_Cd = 'AP' ");
            clause.append(" And Program_Cd = 'MA' ");
            clause.append(" And Current_Elig_Ind = 'A' ");
            clause.append(" AND Benefit_Status Not In ('TN','DN') ");
            clause.append(" AND TYPE_OF_ASSISTANCE_CD = 'WD10' ");
            clause.append(" AND CASE_NUM IN (SELECT DISTINCT(CASE_NUM) FROM ED_ELIGIBILITY WHERE DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'A' AND BENEFIT_STATUS NOT IN ('TN','DN') AND TYPE_OF_ASSISTANCE_CD = 'WD10' AND PAYMENT_END_DT IS NULL ");
            if (caseNum > 0) {
            	clause.append(" AND CASE_NUM = "+ caseNum);
			}
            clause.append(" ) ORDER BY CASE_NUM,PAYMENT_BEG_DT DESC");
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
		} catch (Exception e) {
            throw new GenericRunTimeException(e.getMessage(),e);
		}     
	}
	
	public EdEligibilityCargo[] findByAllTANF(int maxRows, long lCaseNum)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID " + strLiteralFromEdEligibiltyA
					+ strLiteralWhereCaseNum + lCaseNum
					+ strLiteralAndDeleteSWN
					+ " AND PROGRAM_CD='TF' "
					+ " ORDER BY PAYMENT_BEG_DT, PROGRAM_CD desc ";

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(SQL);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	/**for IT6 Notice**/
	public EdEligibilityCargo[] findByIndvId(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByIndvId " + cargo.getIndivId() + " = ");
		try {
			String whereClause = " TARGET_PERSON_ID = "
					+ cargo.getIndivId()
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' "
					+ " AND PROGRAM_CD = 'FS' "
					+ " AND CASE_NUM = " + cargo.getCaseNum();

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}
		
	public EdEligibilityCargo[] findLIHEAPAssistanceClosedCase(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
        try{
        	String whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "
                    + " AND PROGRAM_CD='LI'"
                    + " AND cg_status_cd IN  ('AP','TN')"
                    + " AND PAYMENT_BEG_DT<=CAST(\'" + cargo.getCoe() + "\' AS DATE)"
                    + " AND PAYMENT_END_DT>=CAST(\'" + cargo.getCoe() + "\' AS DATE)"
                    + " order by payment_end_dt desc";
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
		
		public EdEligibilityCargo[] findApprovedAuthStatus(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{
	        	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                    + " AND DELETE_SW = 'N' "
	                    + " AND CURRENT_ELIG_IND = 'A' "
	                    + " AND PROGRAM_CD='LI' "
	                    + " AND CG_STATUS_CD='AP'";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}

	public EdEligibilityCargo[] findByMaPrem(int maxRows,
			Timestamp asOfDateDt)
			throws GenericRunTimeException {
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		
		try {
			
			
			StringBuffer sqlQuery = new StringBuffer();

			sqlQuery.append("SELECT * FROM ED_ELIGIBILITY ");
			sqlQuery.append("WHERE PAYMENT_END_DT IS NULL AND PROGRAM_CD ='MA' AND CURRENT_ELIG_IND ='A' AND CG_STATUS_CD ='AP' AND DELETE_SW ='N' ");
			sqlQuery.append("AND TYPE_OF_ASSISTANCE_CD IN ('CW10', 'WD10')  AND SPEND_DOWN_AMT>0 ");
			
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sqlQuery.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseTfVerf(int maxRows,
			Timestamp asOfDateDt)
			throws GenericRunTimeException {
		
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		
		try {
			
			StringBuffer sqlQuery = new StringBuffer();
			
			String sqlString = "SELECT DISTINCT A.CASE_NUM FROM ED_ELIGIBILITY A, ED_VERIFICATION_CHECKLIST B ";
			
			sqlString = sqlString
					+ "WHERE A.case_num              =B.case_num "
					+ "AND A.EDG_NUM                 =B.EDG_NUM "
					+ "AND A.CURRENT_ELIG_IND        ='P' "
					+ "AND A.CG_STATUS_CD            ='PE' "
					+ "AND A.DELETE_SW               ='N' "
					+ "AND A.PAYMENT_END_DT         IS NULL "
					+ "AND B.DELETE_BY_SUPERVISOR_IND='P' "
					+ "AND A.PROGRAM_CD              ='TF' "
					+ "AND B.VCL_TYPE_CD NOT IN ('V996','V997') "
					+ "AND B.VCL_REQUEST_DT IS NOT NULL "
					+ "AND B.VCL_DUE_DT              < CAST (? as date) ";
				
/*			sqlQuery.append("select distinct A.CASE_NUM from ED_ELIGIBILITY A, ED_VERIFICATION_CHECKLIST B ");
			sqlQuery.append("where A.case_num=B.case_num AND A.EDG_NUM=B.EDG_NUM AND A.CURRENT_ELIG_IND='P' AND A.CG_STATUS_CD='PE' AND A.DELETE_SW='N' AND A.PAYMENT_END_DT IS NULL AND B.DELETE_BY_SUPERVISOR_IND='P' AND A.PROGRAM_CD='TF' ");
			sqlQuery.append("AND  B.VCL_DUE_DT <  cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");*/
			
			params.add(asOfDateDt);
			
			SQLCommand command = new DAOSqlHelper().getSqlCommandForUpdate(
					getDataSource(), sqlString, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			
/*			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sqlQuery.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();*/

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseMaClientShare(int maxRows,
			Timestamp asOfDateDt)
			throws GenericRunTimeException {
		
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
		
		try {
			
			StringBuffer sqlQuery = new StringBuffer();
			
			sqlQuery.append("SELECT DISTINCT A.CASE_NUM FROM IE_APP_R2.ED_ELIGIBILITY A, IE_APP_R2.ED_MA_CLIENT_SHARE B ");
			sqlQuery.append("WHERE A.PROGRAM_CD='MA' AND A.CURRENT_ELIG_IND='A' AND A.CG_STATUS_CD='AP' AND A.PAYMENT_END_DT is null AND A.DELETE_SW='N' AND A.CASE_NUM=B.CASE_NUM AND B.OVRD_CLIENT_SHARE_CLOSURE_SW='N' ");
			sqlQuery.append("AND  A.PAYMENT_BEG_DT = cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
			
			params.add(asOfDateDt);
			
			SQLCommand command = new SQLCommand(
					new ApplicationConnectionFactory(), sqlQuery.toString(),
					params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
		public EdEligibilityCargo[] findByTanfDiv(int maxRows,
				Timestamp asOfDateDt)
				throws GenericRunTimeException {
			
			List<Object> params = new ArrayList<Object>();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			try {
				
				StringBuffer sqlQuery = new StringBuffer();
				
				sqlQuery.append("SELECT DISTINCT A.CASE_NUM FROM ED_INDV_COUNTERS A, ED_INDV_COUNTERS B, ED_ELIGIBILITY C, ED_INDV_ELIGIBILITY D ");
				sqlQuery.append("WHERE A.CHILD_INDV_ID                                    =1 ");
				sqlQuery.append("AND B.CHILD_INDV_ID                                      =4 ");
				sqlQuery.append("AND B.COUNTER_TYPE_CD                                    ='DV' ");
				sqlQuery.append("AND A.COUNTER_TYPE_CD                                    =B.COUNTER_TYPE_CD ");
				sqlQuery.append("AND A.PROGRAM_CD                                         ='TF' ");
				sqlQuery.append("AND A.PROGRAM_CD                                         =B.PROGRAM_CD ");
				sqlQuery.append("AND A.EDG_NUM                                            =B.EDG_NUM ");
				sqlQuery.append("AND MONTHS_BETWEEN(A.COUNTER_BEGIN_DT,B.COUNTER_BEGIN_DT) < 12 ");
				sqlQuery.append("AND B.COUNTER_BEGIN_DT                                  <= cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
				sqlQuery.append("AND A.CASE_NUM                                           =B.CASE_NUM ");
				sqlQuery.append("AND C.CASE_NUM                                           =A.CASE_NUM ");
				sqlQuery.append("AND C.CURRENT_ELIG_IND                                   ='A' ");
				sqlQuery.append("AND C.PAYMENT_END_DT                                    IS NULL ");
				sqlQuery.append("AND C.CG_STATUS_CD                                       ='AP' ");
				sqlQuery.append("AND C.PROGRAM_CD                                         ='TF' ");
				sqlQuery.append("AND C.DELETE_SW                                          = 'N' ");
				sqlQuery.append("AND C.EDG_TRACE_ID                                       =D.EDG_TRACE_ID ");
				sqlQuery.append("AND C.CASE_NUM                                           =D.CASE_NUM ");
				sqlQuery.append("AND A.INDV_ID                                            =D.INDV_ID ");
				
				params.add(asOfDateDt);
				
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), sqlQuery.toString(),
						params);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
	
		public EdEligibilityCargo[] findBySnapAbawd(int maxRows,
				Timestamp asOfDateDt)
				throws GenericRunTimeException {
			
			List<Object> params = new ArrayList<Object>();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			try {
				
				StringBuffer sqlQuery = new StringBuffer();
				
				sqlQuery.append("SELECT DISTINCT B.CASE_NUM FROM IE_APP_R2.DC_INDV_ABAWD A,IE_APP_R2.ED_ELIGIBILITY B, IE_APP_R2.ED_INDV_ELIGIBILITY C ");
				sqlQuery.append("WHERE A.HIST_NAV_IND IN ('S','P') ");
				sqlQuery.append("AND ((A.TOTAL_MONTHS_USED  =6 ");
				sqlQuery.append("AND A.INDV_ABAWD_START_DT<= cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
				sqlQuery.append("AND A.INDV_ABAWD_END_DT  > cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
				sqlQuery.append("AND (A.REGAINED_ELIG_SW   ='Y' OR A.REGAINED_WORK_ELIG_SW='Y')) ");
				sqlQuery.append("OR (A.TOTAL_MONTHS_USED=3 ");
				sqlQuery.append("AND A.INDV_ABAWD_START_DT<= cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
				sqlQuery.append("AND A.INDV_ABAWD_END_DT  > cast(cast(trunc(trunc(?,'MM'),'MM')as varchar(10)) as DATE) ");
				sqlQuery.append("AND (A.REGAINED_ELIG_SW  IN (NULL,'N') AND A.REGAINED_WORK_ELIG_SW IN (NULL,'N')))) AND A.INDV_ID=C.INDV_ID ");
				sqlQuery.append("AND B.CURRENT_ELIG_IND='A' and B.CG_STATUS_CD='AP' and B.PROGRAM_CD='FS' and B.ELIGIBILITY_END_DT IS NULL and B.ABAWD_SW='Y' ");
				sqlQuery.append("AND B.EDG_TRACE_ID=C.EDG_TRACE_ID AND B.CASE_NUM=C.CASE_NUM AND C.PART_STATUS_CD IN ('EA','EC') ");				
				
				params.add(asOfDateDt);
				params.add(asOfDateDt);
				params.add(asOfDateDt);
				params.add(asOfDateDt);
				
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), sqlQuery.toString(),
						params);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
		

		public EdEligibilityCargo[] findByCaseClosureLiheap(int maxRows, Timestamp asOfDateDt) 
				throws GenericRunTimeException {

			try {
				String clause = " PROGRAM_CD = 'LI' "
						+ " AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT = "
						+ DateFormatter.getDateForWhereClauseAnsi(asOfDateDt)
						+ " AND DELETE_SW='N'"
						+ " AND CASE_NUM NOT IN"
						+ " (SELECT DISTINCT CASE_NUM from ED_ELIGIBILITY WHERE"
						+ " PROGRAM_CD='LI' and PAYMENT_END_DT IS NULL and CG_STATUS_CD IN ('TN','DN')"
						+ " AND CURRENT_ELIG_IND='A' and DELETE_SW='N')";
				
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, clause);
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		
		
	public EdEligibilityCargo[] findByCaseProgramDeleteSw(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumber" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralProgarmCd, cargo.getProgramCd());
			map.put(strLiteralDeleteSw, cargo.getDeleteSw());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**Added by asputta
	 * to get canceled recprds
	 * @param maxrows
	 * @param caseNum
	 * @param programCd
	 * @return
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findCanceledRecordsNCH001(int maxrows, long caseNum,String programCd) throws GenericRunTimeException {
		
		try {
			String whereClause = "CASE_NUM =" + caseNum + " AND PROGRAM_CD IN ('"+programCd+"')"+" AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND IN('C','R') " + " AND DELETE_SW  = 'N' ORDER BY PAYMENT_BEG_DT DESC ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		
	}
	
	public EdEligibilityCargo[] findByAuthRecordsForCCAP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthRecords" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			String clause = " EDG_NUM= "
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'A' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

public EdEligibilityCargo[] findforDeniedBenefitsInSameMonth(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException{
        Map<String, Object> map = new HashMap<String, Object>();
        try{
        	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
                    + " AND TARGET_PERSON_ID = "+ cargo.getTargetPersonId()
                    + " AND PAYMENT_BEG_DT = "+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "
                    + " AND EDG_NUM NOT IN "+cargo.getEdgNum()
                    + " AND EDG_TRACE_ID NOT IN "+cargo.getEdgTraceId();
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
  }
	
	
public EdEligibilityCargo[] findCCAPEligUniqueCaseNumIndvId(int rowNum,String programCd , Timestamp lastDtOfPreMonth,String compositeKeyAppender,Timestamp asOfDate) throws GenericRunTimeException{
    List<Object> params = new ArrayList<Object>();
    EdEligibilityCargo tempDataCargo=null;
try{        
	 StringBuffer selectQuery = new StringBuffer();
	/* selectQuery.append("SELECT DISTINCT t1.CASE_NUM || '");
     selectQuery.append(compositeKeyAppender);
     selectQuery.append("' || t1.INDV_ID as KEY_STRING");
     selectQuery.append(" from v_bi_ccdmi_payee t1 WHERE ");
    
   //  selectQuery.append(" CG_STATUS_CD IN ('AP') AND  t1.type_of_assistance_cd='CDCS'");
     selectQuery.append("  TO_CHAR(BENEFIT_MONTH,'MON-RRRR') = TO_CHAR("
    		+ DateFormatter.getDateForWhereClauseAnsi(lastDtOfPreMonth)
     		+ ", 'MON-RRRR')");*/
    /*
     selectQuery.append("with temp as( ");
     selectQuery.append("select SUM(t2.ISSUANCE_AMT) AS AMOUNT, t2.INDV_ID AS INDV_ID, t2.CASE_NUM, t2.T1_EDG_NUM AS EDG_NUM, T2.PROGRAM_CD, ");
     selectQuery.append("TO_CHAR(T2.BENEFIT_MONTH,'MON-RRRR') AS BENEFIT_MONTH ");
     selectQuery.append("from v_bi_ccdmi_payee t2 ");
     selectQuery.append("WHERE TO_CHAR(BENEFIT_MONTH,'MON-RRRR') = TO_CHAR("
                     + DateFormatter
                         .getDateForWhereClauseAnsi(lastDtOfPreMonth)
                     + ", 'MON-RRRR')");
     selectQuery.append("AND t2.PROGRAM_CD=? ");
     selectQuery.append("GROUP BY t2.INDV_ID, t2.CASE_NUM , t2.T1_EDG_NUM, TO_CHAR(T2.BENEFIT_MONTH,'MON-RRRR'), T2.PROGRAM_CD ");
     selectQuery.append("union ");
     selectQuery.append("select SUM(t2.T3_ISSUANCE_AMT) AS AMOUNT, t2.T3_INDV_ID  AS INDV_ID, t2.CASE_NUM, t2.EDG_NUM AS EDG_NUM, T2.PROGRAM_CD, ");
     selectQuery.append("TO_CHAR(T2.BEN_BEGIN_DT,'MON-RRRR') AS BENEFIT_MONTH ");
     selectQuery.append("from v_bi_warrant_detail t2 ");
     selectQuery.append("WHERE TO_CHAR(BEN_BEGIN_DT,'MON-RRRR') = TO_CHAR("
                     + DateFormatter
                         .getDateForWhereClauseAnsi(lastDtOfPreMonth)
                     + ", 'MON-RRRR')");
     selectQuery.append("AND t2.PROGRAM_CD=? ");
     selectQuery.append("GROUP BY t2.T3_INDV_ID, t2.CASE_NUM , t2.EDG_NUM, TO_CHAR(T2.BEN_BEGIN_DT,'MON-RRRR'), T2.PROGRAM_CD) ");
     selectQuery.append("SELECT DISTINCT CASE_NUM || '");
     selectQuery.append(compositeKeyAppender);
     selectQuery.append("' || INDV_ID as KEY_STRING ");
     selectQuery.append("FROM temp");
     */
     
     selectQuery.append("select DISTINCT CASE_NUM || '");
     selectQuery.append(compositeKeyAppender);
     selectQuery.append("' || CHILD_INDV_ID AS KEY_STRING ");
     selectQuery.append("from ( ");
     selectQuery.append("with temp as ");
     selectQuery.append("(select approved_amount, pc.case_num, pc.child_indv_id, TO_CHAR(pp.service_month,'MON-RRRR')  AS BENEFIT_MONTH ");
     selectQuery.append("from PM_PROVIDER_CHILD_ASSOC pc, PM_CCAP_PAYMENT pp ");
     selectQuery.append("where pc.provider_id= pp.provider_id "); 
     selectQuery.append("and pc.case_num = pp.case_num ");
     selectQuery.append("and pc.child_indv_id = pp.child_indv_id ");
     selectQuery.append("and TO_CHAR(pp.service_month,'MON-RRRR') = TO_CHAR("
                     + DateFormatter
                         .getDateForWhereClauseAnsi(lastDtOfPreMonth)
                     + ", 'MON-RRRR') ");
     selectQuery.append("and pp.request_status ='AP' ");
     selectQuery.append("and pp.approved_amount > 0) ");
     selectQuery.append("select sum(approved_amount) AS AMOUNT, case_num, child_indv_id, BENEFIT_MONTH, ");
     selectQuery.append("case when (select count(*) from temp t1 "); 
     selectQuery.append("where t1.child_indv_id=temp.child_indv_id ");
     selectQuery.append("and t1.case_num=temp.case_num) <=1 "); 
     selectQuery.append("then 'No' else 'Yes' end as MULTIPLE_PROVIDERS ");
     selectQuery.append("from temp "); 
     selectQuery.append("GROUP BY CASE_NUM, CHILD_INDV_ID, BENEFIT_MONTH) ");
             
     /* params.add(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPreMonth));
     params.add(DateFormatter.getDateForWhereClauseAnsi(lastDtOfPreMonth));
     params.add(DateFormatter.getDateForWhereClauseAnsi(asOfDate));*/
     
          
     selectQuery.append(" ORDER BY CASE_NUM || '");
     selectQuery.append(compositeKeyAppender);
     selectQuery.append("' || CHILD_INDV_ID ASC");
     
        SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), selectQuery.toString(), params);
        @SuppressWarnings("unchecked")
        Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
        List<String> arrayList = new ArrayList<>();

        for (Map<String, Object> result : results) {
            arrayList.add(result.get("KEY_STRING").toString());
        }
        EdEligibilityCargo[] result = new EdEligibilityCargo[arrayList.size()];
        for (int count = 0; count < arrayList.size(); count++) {
             tempDataCargo= new EdEligibilityCargo();
            if(arrayList.get(count)!=null){
            tempDataCargo.setCreateUserId(arrayList.get(count));  // temporarily stored unique combination of CASE_NUM and TARGET_PERSON_ID into create_user_id field
            }
            result[count] = tempDataCargo;
        }

        return result;

    } catch (Exception e) {
        throw new GenericRunTimeException(e.getMessage(), e);
    }
    }

    
	public EdEligibilityBatchCustomCargo[] findCCAPElig(int maxRows,
			String programCd, Timestamp lastDtOfPreMonth, String fromValue,
			String toValue, String startAfterValue, int pageSize,
			String compositeKeyAppender, Timestamp asOfDate)
			throws GenericRunTimeException, ParseException {
		ObjectPopulator populator;
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityBatchCustomCargo> resultList = new ArrayList<EdEligibilityBatchCustomCargo>();
		EdEligibilityBatchCustomCargo colrows[] = null;
		EdEligibilityBatchCustomCargo newCargo = null;
		StringBuffer selectQuery = new StringBuffer();
	/*	selectQuery
				.append("select SUM(t2.ISSUANCE_AMT) AS AMOUNT, t2.INDV_ID, t2.CASE_NUM, t2.T1_EDG_NUM AS EDG_NUM, T2.PROGRAM_CD, "
						+ "case when (select count(*) from v_bi_ccdmi_payee t1 where t1.indv_id=t2.indv_id) <=1 then 'No' else 'Yes' end as MULTIPLE_PROVIDERS,"
						+ " t2.benefit_month AS BENEFIT_MONTH from v_bi_ccdmi_payee t2 ");
		selectQuery
				.append(" WHERE TO_CHAR(BENEFIT_MONTH,'MON-RRRR') = TO_CHAR("
						+ DateFormatter
								.getDateForWhereClauseAnsi(lastDtOfPreMonth)
						+ ", 'MON-RRRR')");*/

		/*selectQuery.append("select AMOUNT, INDV_ID, CASE_NUM, EDG_NUM, PROGRAM_CD, MULTIPLE_PROVIDERS, BENEFIT_MONTH FROM ( ");
		selectQuery.append("with temp as( ");
		selectQuery.append("select SUM(t2.ISSUANCE_AMT) AS AMOUNT, t2.INDV_ID AS INDV_ID, t2.CASE_NUM, t2.T1_EDG_NUM AS EDG_NUM, T2.PROGRAM_CD, ");
		selectQuery.append("TO_CHAR(T2.BENEFIT_MONTH,'MON-RRRR') AS BENEFIT_MONTH ");
		selectQuery.append("from v_bi_ccdmi_payee t2 ");
		selectQuery.append("WHERE TO_CHAR(BENEFIT_MONTH,'MON-RRRR') = TO_CHAR("
		                + DateFormatter
		                    .getDateForWhereClauseAnsi(lastDtOfPreMonth)
		                + ", 'MON-RRRR')");
		selectQuery.append("AND t2.PROGRAM_CD=? ");
		selectQuery.append("GROUP BY t2.INDV_ID, t2.CASE_NUM , t2.T1_EDG_NUM, TO_CHAR(T2.BENEFIT_MONTH,'MON-RRRR'), T2.PROGRAM_CD ");
		selectQuery.append("union ");
		selectQuery.append("select SUM(t2.T3_ISSUANCE_AMT) AS AMOUNT, t2.T3_INDV_ID  AS INDV_ID, t2.CASE_NUM, t2.EDG_NUM AS EDG_NUM, T2.PROGRAM_CD, ");
		selectQuery.append("TO_CHAR(T2.BEN_BEGIN_DT,'MON-RRRR') AS BENEFIT_MONTH ");
		selectQuery.append("from v_bi_warrant_detail t2 ");
		selectQuery.append("WHERE TO_CHAR(BEN_BEGIN_DT,'MON-RRRR') = TO_CHAR("
        		        + DateFormatter
        		            .getDateForWhereClauseAnsi(lastDtOfPreMonth)
        		        + ", 'MON-RRRR')");
		selectQuery.append("AND t2.PROGRAM_CD=? ");
		selectQuery.append("GROUP BY t2.T3_INDV_ID, t2.CASE_NUM , t2.EDG_NUM, TO_CHAR(T2.BEN_BEGIN_DT,'MON-RRRR'), T2.PROGRAM_CD) ");
		selectQuery.append("select SUM(AMOUNT) AS AMOUNT, INDV_ID, CASE_NUM, EDG_NUM, PROGRAM_CD, ");
		selectQuery.append("case when ");
		selectQuery.append("(select count(*) from temp t1 where t1.indv_id=temp.indv_id) <=1 ");
		selectQuery.append("then 'No' else 'Yes' end as MULTIPLE_PROVIDERS, BENEFIT_MONTH ");
		selectQuery.append("FROM temp WHERE");*/
		

		selectQuery.append("select AMOUNT, CASE_NUM, CHILD_INDV_ID, MULTIPLE_PROVIDERS, BENEFIT_MONTH ");
		selectQuery.append("from ( ");
		selectQuery.append("with temp as ");
		selectQuery.append("(select approved_amount, pc.case_num, pc.child_indv_id, TO_CHAR(pp.service_month,'MON-RRRR')  AS BENEFIT_MONTH ");
		selectQuery.append("from PM_PROVIDER_CHILD_ASSOC pc, PM_CCAP_PAYMENT pp ");
		selectQuery.append("where pc.provider_id= pp.provider_id "); 
		selectQuery.append("and pc.case_num = pp.case_num ");
		selectQuery.append("and pc.child_indv_id = pp.child_indv_id ");
		selectQuery.append("and TO_CHAR(pp.service_month,'MON-RRRR') = TO_CHAR("
                        + DateFormatter
                            .getDateForWhereClauseAnsi(lastDtOfPreMonth)
                        + ", 'MON-RRRR') ");
		selectQuery.append("and pp.request_status ='AP' ");
		selectQuery.append("and pp.approved_amount > 0) ");
		selectQuery.append("select sum(approved_amount) AS AMOUNT, case_num, child_indv_id, BENEFIT_MONTH, ");
		selectQuery.append("case when (select count(*) from temp t1 "); 
		selectQuery.append("where t1.child_indv_id=temp.child_indv_id ");
		selectQuery.append("and t1.case_num=temp.case_num) <=1 "); 
		selectQuery.append("then 'No' else 'Yes' end as MULTIPLE_PROVIDERS ");
		selectQuery.append("from temp WHERE ");	
		
		if (!"".equalsIgnoreCase(toValue) && !"0".equalsIgnoreCase(toValue)) {
			selectQuery.append(" CASE_NUM || '");
			selectQuery.append(compositeKeyAppender);
			selectQuery.append("' || CHILD_INDV_ID ");

			selectQuery.append(" BETWEEN ? AND ? ");
			params.add(fromValue);
			params.add(toValue);
		} else {
			selectQuery.append(" CASE_NUM || '");
			selectQuery.append(compositeKeyAppender);
			selectQuery.append("' || CHILD_INDV_ID = ?");
			params.add(fromValue);
		}

		selectQuery.append(" AND CASE_NUM || '");
		selectQuery.append(compositeKeyAppender);
		selectQuery.append("' || CHILD_INDV_ID > ?");
		params.add(startAfterValue);

		selectQuery
				.append(" GROUP BY CASE_NUM, CHILD_INDV_ID, BENEFIT_MONTH) "
						+ "ORDER BY CASE_NUM || '");
		selectQuery.append(compositeKeyAppender);
		selectQuery.append("' || CHILD_INDV_ID ASC");

		try {
			SQLCommand command = new DAOSqlHelper().getSqlCommandForUpdate(
					getDataSource(), selectQuery.toString(), params, pageSize);
			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			EdEligibilityBatchCustomCargo temp = null;
			String key = null;
			Object value = null;
			colrows = new EdEligibilityBatchCustomCargo[results.size()];
			for (int i = 0; i < results.size(); i++) {
				temp = new EdEligibilityBatchCustomCargo();

				for (Entry<String, Object> rs : results.get(i).entrySet()) {

					key = rs.getKey();
					value = rs.getValue();
					if (key != null && "AMOUNT".equalsIgnoreCase(key)) {
						
						 if (value instanceof BigDecimal) {
							temp.setAmt(((BigDecimal) value).doubleValue());
						} else
							temp.setAmt(Double.parseDouble((String) value));						
					} else if (key != null && "CHILD_INDV_ID".equalsIgnoreCase(key)) {
						
						 if (value instanceof BigDecimal) {
							temp.setIndivId(((BigDecimal) value).longValue());
						} else
							temp.setIndivId(Long.parseLong((String) value));						
					} else if (key != null && "CASE_NUM".equalsIgnoreCase(key)) {
						if (value == null)
							temp.setId("");
						else if (value instanceof BigDecimal) {
							temp.setCaseNum(((BigDecimal) value).longValue());
						} else
							temp.setCaseNum(Long.parseLong((String) value));
					} else if (key != null
							&& "BENEFIT_MONTH".equalsIgnoreCase(key)) {
						if (value == null)
							temp.setCdcBenefitMonth(null);
						else if (value instanceof String){
						    SimpleDateFormat format = new SimpleDateFormat("MMM-yyyy");
						    Date d = format.parse((String) value);
						    Timestamp t = new Timestamp(d.getTime()) ;
							temp.setCdcBenefitMonth(t);
						}

					} else if (key != null
							&& "MULTIPLE_PROVIDERS".equalsIgnoreCase(key)) {
					     if (value == null)
					           temp.setHasMultipleProviders("");
					     else if (value instanceof String)
							temp.setHasMultipleProviders((String) value);

					}/* else if (key != null
							&& "PROGRAM_CD".equalsIgnoreCase(key)) {
						if (value == null)
							temp.setProgramCd("");
						else
							// temp.setBenefitStartDt((Timestamp) value);
							temp.setProgramCd((String) value);

					} else if (key != null && "EDG_NUM".equalsIgnoreCase(key)) {
						
						 if (value instanceof BigDecimal) {
							temp.setEdgNum(Long.valueOf(((BigDecimal) value)
									.toString()));
						} else
							temp.setEdgNum(Long.valueOf((String) value));
					}*/				
				}
				colrows[i] = temp;
			}

			return colrows;

			
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}

	public EdEligibilityCargo[] findByCaseNumProgCdCgStatusPaymentDt(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumProgCdCgStatusPaymentDt" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
			Date serviceDate=new Date(cargo.getPaymentBegDt().getTime());
			String serviceMonth=cargo.getPaymentBegDt().toString();
			serviceMonth = formatter.format(serviceDate);
	        			
			String whereClause = "(CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND PROGRAM_CD = 'CD'"
					+ " AND CG_STATUS_CD='AP'"
					+ " AND CURRENT_ELIG_IND='A'"
					+ " AND DELETE_SW='N'"
					+"AND payment_beg_dt <= '"+serviceMonth+"'"
					+"AND (payment_end_dt > '"+serviceMonth+"'"
					+ " OR PAYMENT_END_DT IS NULL))";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseNumProgCdCgStatusPaymentDtForLevelOfCare(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumProgCdCgStatusPaymentDt" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
			Date serviceDate=new Date(cargo.getPaymentBegDt().getTime());
			String serviceMonth=cargo.getPaymentBegDt().toString();
			serviceMonth = formatter.format(serviceDate);
	        	
			StringBuilder clause = new StringBuilder();
            clause.append("Select DISTINCT(EDG_TRACE_ID) From Ed_Eligibility Where Delete_Sw = 'N' ");
            clause.append(" AND CASE_NUM = "+ cargo.getCaseNum());
            clause.append(" AND PROGRAM_CD = 'CD' ");
            clause.append(" AND CG_STATUS_CD='AP' ");
            clause.append(" AND CURRENT_ELIG_IND='A' ");
            clause.append(" AND payment_beg_dt <= '"+serviceMonth+"'");
            clause.append(" AND (payment_end_dt > '"+serviceMonth+"'");
            clause.append("  OR PAYMENT_END_DT IS NULL)");
            
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
			
			
			
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}


	public EdEligibilityCargo[] coFindforCOVHC(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		String checkDate=new SimpleDateFormat("dd-MMM-yy").format(cargo.getCreateDt());
        try{
        	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "
                    + " AND '"+checkDate+"' >= PAYMENT_BEG_DT"
        			+ " order by PAYMENT_BEG_DT ";
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	
	public EdEligibilityCargo[] coFindforDetailCOVHC(int maxRows,String caseNumbers) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		
        try{
        	String whereClause = " CASE_NUM IN ("+ caseNumbers
                    + " ) AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "                  
        			+ " order by PAYMENT_BEG_DT ";
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	public EdEligibilityCargo[] coFindforReqPayment(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = " CASE_NUM = "+ caseNum
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND Cg_Status_Cd='AP'"
                + " AND PROGRAM_CD='LI' "
				+ " AND  PAYMENT_BEG_DT <="
				+ " CAST(\'" + asOfDate + "\' AS DATE)"
				+ " and (Payment_End_Dt Is Null or Payment_End_Dt>="
				+ " CAST(\'" + asOfDate + "\' AS DATE)) order by payment_beg_dt desc";
				
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}
		/**
	 * This function gets records from EdEligibility When Payment is requested in summer fill months 
	 * @author aayushtyagi
	 * @param caseNum
	 * @param asOfDate
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] coFindforReqPaymentInSummerFill(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = " CASE_NUM = "+ caseNum
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='LI' "
				+ " AND  PAYMENT_BEG_DT <="
				+ " CAST(\'" + asOfDate + "\' AS DATE)"
				+ " order by payment_beg_dt desc";
				
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
    		log(ILog.ERROR, e.getMessage());
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}
	
	/**
 * This function gets records from EdEligibility in summer fill months for Client and Vendor Notice Of Action 
 * @author sunnyagarwal
 * @param caseNum
 * @param asOfDate
 * @return
 * @throws CoException
 */
public EdEligibilityCargo[] coFindEligforReqPaymentInSummerFill(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
Map<String, Object> map = new HashMap<String, Object>();
try{
	String whereClause = " CASE_NUM = "+ caseNum
            + " AND DELETE_SW = 'N' "
            + " AND CURRENT_ELIG_IND = 'A' "
            + " AND CG_STATUS_CD IN ('AP','TN')"
            + " AND PROGRAM_CD='LI' "
			+ " AND  PAYMENT_BEG_DT <="
			+ " CAST(\'" + asOfDate + "\' AS DATE)"
			+ " order by payment_beg_dt desc";
			
map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
return getReturnCargo(map);
} catch(Exception e){
		log(ILog.ERROR, e.getMessage());
       throw new GenericRunTimeException(e.getMessage(), e);
}
}
	
	/**
	 * This function gets records from EdEligibility To get PaymentEnd Dt 
	 * @author aayushtyagi
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] coFindforReqPaymentEndDt(int maxRows,long caseNum) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = " CASE_NUM = "+ caseNum
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='LI' "
				+ " order by payment_beg_dt desc";
				
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
    		log(ILog.ERROR, e.getMessage());
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}
	
	public EdEligibilityCargo[] findByCaseProgramCDStatus(int maxrows, EdEligibilityCargo eligibilityCargo) throws GenericRunTimeException {
		
		try {
			String whereClause = "CASE_NUM =" + eligibilityCargo.getCaseNum() + " AND PROGRAM_CD IN ('"+eligibilityCargo.getProgramCd()+"')"+" AND CG_STATUS_CD IN('AP','PE') "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
		

	}
	/**
 * This function gets records from EdEligibility where program_cd = 'MA' 
 * @author shreyasingh
 * @param EdEligibilityCargo cargo
 * @return
 * @throws CoException
 */

public EdEligibilityCargo[] findEdEligibilityByCaseNumIndvId(int maxRows, EdEligibilityCargo cargo)throws GenericRunTimeException {
    Debug.println("findByCaseNumIndvId" + " maxRows= "+ maxRows + " cargo=" + cargo);
    try {        	        	
    	String whereClause = " DELETE_SW = 'N' AND PROGRAM_CD = 'MA' AND CURRENT_ELIG_IND = 'A' AND CG_STATUS_CD = 'AP' AND PAYMENT_END_DT IS NULL and type_of_assistance_cd IN ('MN45', 'MN50', 'MN55', 'MN60', 'MN65') and case_num = " + cargo.getCaseNum() + " and target_person_id = "+ cargo.getTargetPersonId() + "ORDER BY PAYMENT_BEG_DT DESC";
    	Map <String, Object> map = new HashMap<String, Object>();
 	    map.put(FwConstants.READY_WHERE_CLAUSE,whereClause);
 	    return getReturnCargo(map);
    } catch (Exception e) {
        Debug.println("Error in findByCaseNumIndvId finder "+ e);
        throw new GenericRunTimeException(e.getMessage(), e);
    } 
    
}

public EdEligibilityCargo[] findDiversionCheck(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
	Debug.println("findDiversionCheck " + cargo.getCaseNum() + " = ");
	try {
		String whereClause = " DELETE_SW = 'N' "
				+ " AND CG_STATUS_CD = 'AP' "
				+ " AND CURRENT_ELIG_IND = 'A' "
				+ " AND PROGRAM_CD = 'TF' "
				+ " AND COVERAGE_GROUP = 'DV' "
				+ " AND CASE_NUM = " + cargo.getCaseNum();

		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		return getReturnCargo(map);
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}

}
public EdEligibilityCargo[] findByCaseNumberProgramCd(int maxRows,
		EdEligibilityCargo cargo) throws GenericRunTimeException {
	try {

		StringBuffer stb = new StringBuffer("");
		stb.append(strLiteralCaseNum2 + cargo.getCaseNum());
		stb.append(" AND TYPE_OF_ASSISTANCE_CD = "
				+ cargo.getProgramCd() + " AND DELETE_SW = 'N' ");
		stb.append(strLiteralAndCurrentEligIndA);
		stb.append(strLiteralAndPaymentBegDt2
				+ DateFormatter.getDateForWhereClauseAnsi(cargo
						.getPaymentBegDt()) + " ");
		stb.append(" AND ( PAYMENT_END_DT >= "
				+ DateFormatter.getDateForWhereClauseAnsi(cargo
						.getPaymentEndDt())
						+ " OR PAYMENT_END_DT IS NULL )");

		Map map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, stb.toString());
		Collection<EdEligibilityCargo> coll = getAll(map);
		EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
		coll.toArray(colrows);
		return colrows;
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}

public EdEligibilityCargo[] findAllAuthorizedRecords(int maxRows,
		EdEligibilityCargo cargo) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
	try {
		String whereClause = "(CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND DELETE_SW = \'N\'"
				+ "AND CURRENT_ELIG_IND  IN  ('A','S','C','K','W') "
				+ " AND DISPOSITION_ELIG_BEG_DT IS NOT NULL"
				+"  AND ROWNUM="
				+ 1 
				+ " )";
		
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		return getReturnCargo(map);
	} catch (Exception e) {
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}

public EdEligibilityCargo[] findCurrentEligibilityDetail(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='LI'"
                + " AND cg_status_cd IN  ('AP','TN')"
                + " AND PAYMENT_BEG_DT<=CAST(\'" + cargo.getCoe() + "\' AS DATE)"
                + " AND PAYMENT_END_DT>=CAST(\'" + cargo.getCoe() + "\' AS DATE)"
                + " AND DI_ACTION_DT=CAST(\'" + cargo.getCoe() + "\' AS DATE)"
                + " order by payment_end_dt desc";
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}

public EdEligibilityCargo[] findPreviousEligibilityDetail(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
    	String beginDt=df.format(cargo.getEligibilityBegDt());
    	String whereClause="";
    	if(cargo.getCoverageGroup()!=null){
    		whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'C' "
                    + " AND PROGRAM_CD='LI'"
                    + " AND cg_status_cd='AP'"                 
                    + " AND COVERAGE_GROUP='" + cargo.getCoverageGroup()    
                    + "' AND PAYMENT_BEG_DT=CAST(\'" + beginDt + "\' AS DATE)"
                    +" order by edg_trace_id desc"; 
    	}else{
    		whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'C' "
                    + " AND PROGRAM_CD='LI'"
                    + " AND cg_status_cd='AP'"                 
                    + " AND COVERAGE_GROUP IS NULL"  
                    + " AND PAYMENT_BEG_DT=CAST(\'" + beginDt + "\' AS DATE)"
                    +" order by edg_trace_id desc"; 
    	}
    	                  
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}

public EdEligibilityCargo[] findOngoingCaseByCaseNum(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='TF'";
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}

public EdEligibilityCargo[] findSNAPCasePeriod(int maxRows,
		EdEligibilityCargo cargo) throws GenericRunTimeException {
	Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
			+ cargo);
	try {
		String whereClause = " CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND DELETE_SW = 'N' "
				+ " AND program_cd = 'FS' "
				+ " AND cg_status_cd = 'AP' "
				+ " AND current_elig_ind = 'A' "
				+ " AND payment_end_dt is null "
				+ " AND '"+cargo.getCoe()+"' BETWEEN PAYMENT_BEG_DT AND PAYMENT_END_DT";

		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		return getReturnCargo(map);
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}


	public EdEligibilityCargo[] findAuthorizedLiheapCases(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException
	{
		Debug.println("findAuthorizedLiheapCases" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('A')"
					+" AND CG_STATUS_CD ='AP'"
					+ " AND  ((PAYMENT_END_DT is null and PAYMENT_BEG_DT <="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ ") OR ( PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+ strLiteralAndPaymentBegDt
					+ DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentEndDt())
					+ "))"
					+ " AND  PROGRAM_CD='LI'";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findLiheapCasesVm(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException
	{
		Debug.println("findLiheapCasesVm" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('A')"
					+ " AND CG_STATUS_CD IN ('AP', 'TN') "
					+ " AND PAYMENT_BEG_DT <= "
					+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
					+ " AND (PAYMENT_END_DT >= "
					+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt())
					+ " or PAYMENT_END_DT is null) "
					+ " AND  PROGRAM_CD='LI' "
					+ " and TYPE_OF_ASSISTANCE_CD = 'LH01' ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findLIHEAPByCaseNum(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
                + " AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='LI'";
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}

	public EdEligibilityCargo[] findLIAppDate(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	
	    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                + " AND  program_cd = 'LI' AND coverage_group = 'EL' AND cg_status_cd = 'AP' and fin_elig_rslt_cd = 'PS' and rsc_elig_rslt_cd = 'PS' AND "
	                + "  application_dt > to_date('31-May-17', 'DD-MON')";
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	/**
	* This function gets records from EdEligibility where program_cd = 'MA' and type_of_assistance_cd IN ('MN45', 'MN50', 'MN55', 'MN60', 'MN65')
	* @author shreyasingh
	* @param EdEligibilityCargo cargo
	* @return
	* @throws CoException
	*/
	
		public EdEligibilityCargo[] findAllLiheapClosed(int maxRows, EdEligibilityCargo cargo)throws GenericRunTimeException {
		Debug.println("findAllLiheapClosed" + " maxRows= "+ maxRows + " cargo=" + cargo);
		try {        	        	
			String whereClause = " program_cd = 'LI' and cg_status_cd = 'TN' ";
			Map <String, Object> map = new HashMap<String, Object>();
			    map.put(FwConstants.READY_WHERE_CLAUSE,whereClause);
			    return getReturnCargo(map);
		} catch (Exception e) {
		    Debug.println("Error in findByCaseNumIndvId finder "+ e);
		    throw new GenericRunTimeException(e.getMessage(), e);
		} 
		
	}
	/**	
	 * added by asputta
	 */
	public EdEligibilityCargo[] findPreviousReviewRecords(int maxRows,Timestamp diActionDt,String edgTraceId,long caseNum) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
		    try{
		    	
		    	String whereClause = "CASE_NUM = "+ caseNum+ " AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND in ('C') AND ACTIVITY_TYPE IN ('PR','RE')"
		    			+ " AND DI_ACTION_DT='"+diActionDt+"' AND EDG_TRACE_ID IN ("
		    			+edgTraceId+")";
		    			
		    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		    return getReturnCargo(map);
		    } catch(Exception e){
		           throw new GenericRunTimeException(e.getMessage(), e);
		    }
		}
	
	/**
	 * LDS CONVERSION METHOD
	 *
	  * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByClientProgramCD(int maxRows, long clientid
			) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = "TARGET_PERSON_ID =" + clientid + " AND PROGRAM_CD = 'MA' AND TYPE_OF_ASSISTANCE_CD NOT IN('MS01','MS03','MS04','MS05') ";
			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

	final private String strLiteralPersonIdin = "target_person_id IN (";
	
	public EdEligibilityCargo[] findPaymentBeginDate(int maxRow,EdIndvEligibilityCargo cargo)throws GenericRunTimeException, CheckedApplicationException{
    	StringBuilder query = new StringBuilder();
    	query = new StringBuilder("select t2.* from ED_INDV_ELIGIBILITY t1,ED_ELIGIBILITY t2 where t1.EDG_TRACE_ID=t2.EDG_TRACE_ID    AND t2.CG_STATUS_CD = 'AP'  AND t2.DELETE_SW = 'N'  AND t2.CURRENT_ELIG_IND='A' AND t1.PART_STATUS_CD = 'EC' and t2.program_cd='CD' AND t1.indv_id='"+cargo.getIndvId()+"' and t1.CASE_NUM='"+cargo.getCaseNum()+"' ORDER BY t2.PAYMENT_BEG_DT DESC");
    	return getCargoArray(query.toString(),EdEligibilityCargo.class);
    }
	public EdEligibilityCargo[] findByAuthRecordsForLIHEAP(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try{
			SimpleDateFormat sdf = new  SimpleDateFormat("dd-MMM-yyyy");
			String paymentBegDt = sdf.format(cargo.getPaymentBegDt());
		StringBuffer whereClause=new StringBuffer(" CASE_NUM= ")
									 .append(cargo.getCaseNum())
									 .append(" AND PROGRAM_CD='LI' ")
									/* .append(" AND PAYMENT_BEG_DT <= ")
									 .append(DateFormatter.getDateForWhereClause(cargo.getPaymentBegDt()))
									 .append(" AND PAYMENT_END_DT >= ")
									 .append(DateFormatter.getDateForWhereClause(cargo.getPaymentEndDt()))*/
									 .append(" AND TO_CHAR(To_Date('"+ paymentBegDt +"','DD-MON-yyyy'),'MMYYYY') ")
									 .append(" BETWEEN TO_CHAR(PAYMENT_BEG_DT,'MMYYYY') AND TO_CHAR(PAYMENT_END_DT,'MMYYYY')")
									 .append(" AND DELETE_SW='N' ")
									 .append(" AND CG_STATUS_CD='AP' ")
									 .append(" AND CURRENT_ELIG_IND='A' ");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause.toString());
		return getReturnCargo(map);
		}catch(Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
			
		}
	}
	
public EdEligibilityCargo[] findByCaseNoTargetPersonIdList(int maxRows,
			EdEligibilityCargo cargo,long[] indvId) throws GenericRunTimeException {
		try {
				StringBuffer clause = new StringBuffer(strLiteralPersonIdin);
				for (int i = 0; i < indvId.length; i++) {
					clause.append(indvId[i]);
					if (!((i + 1) == indvId.length)){
						clause.append(",");
					}
				}
				clause.append(")");
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND current_elig_ind = 'P' "
					+ " AND payment_end_dt is null "
					+ " AND " + clause;

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
		
		public EdEligibilityCargo[] findByCaseNumFromCaseRecertMA(int maxRows, long caseNum, 
				Timestamp asOfDateDt)
				throws GenericRunTimeException {
			
			List<Object> params = new ArrayList<Object>();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			EdEligibilityCargo[] colrows = null;
			
			try {

				String sqlString = "SELECT A.* FROM ED_ELIGIBILITY A, ED_CASE_RECERT_DATES B ";

				sqlString = sqlString
						+ " WHERE A.CASE_NUM = ? "
						+ " AND A.DELETE_SW ='N' "
						+ "AND A.CG_STATUS_CD ='AP' AND A.CURRENT_ELIG_IND ='A' "
						+ "AND A.PROGRAM_CD ='MA' "
						+ "AND A.PAYMENT_END_DT IS NULL AND A.CASE_NUM =B.CASE_NUM AND A.EDG_NUM =B.EDG_NUM "
						+ "AND B.EFF_END_DT IS NULL AND A.PROGRAM_CD =B.PROGRAM_CD "
						+ "AND ( B.RECERT_REVIEW_DUE_DT = CAST (? as date) "
						+ " OR  B.SEMI_ANNUAL_REVIEW_DT = CAST (? as date) ) "
						+ " AND B.HIST_NAV_IND IN ('S','P') ";
						
				params.add(caseNum);
				params.add(asOfDateDt);
				params.add(asOfDateDt);
				
				SQLCommand command = new DAOSqlHelper().getSqlCommandForUpdate(
						getDataSource(), sqlString, params);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				colrows = new EdEligibilityCargo[resultList.size()];
				resultList.toArray(colrows);

			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
			return colrows;
		}
		
		public EdEligibilityCargo[] findByIndvIDTOA(int maxRows, long indvId, 
				Timestamp asOfDateDt)
				throws GenericRunTimeException {
			
			List<Object> params = new ArrayList<Object>();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			EdEligibilityCargo[] colrows = null;
			
			try {

				String sqlString = "SELECT * FROM ED_ELIGIBILITY  ";

				sqlString = sqlString
						//+ " WHERE A.CASE_NUM = ? "
						+ " current_elig_ind = 'A' cg_status_cd = 'AP'  "
						+ " target_person_id in (?) "
						+ "AND ((type_of_assistance_cd != 'MA83' AND COE != 'M078') OR (type_of_assistance_cd NOT IN ('MA10','MA77','FM25')))";

						
				params.add(indvId);

				
				SQLCommand command = new DAOSqlHelper().getSqlCommandForUpdate(
						getDataSource(), sqlString, params);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				colrows = new EdEligibilityCargo[resultList.size()];
				resultList.toArray(colrows);

			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
			return colrows;
		}
		
		public EdEligibilityCargo[] findToaForBuyin(int maxRows, long edgNum, boolean isApproved,Timestamp paymentDt)
				throws GenericRunTimeException {
			
			List<Object> params = new ArrayList<Object>();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			try {
				
				StringBuffer sqlQuery = new StringBuffer();
				
				sqlQuery.append("select a.* from ed_eligibility a, in_buyin_trans_cd b where a.edg_num=b.edg_num ");
				sqlQuery.append(" and a.type_of_assistance_cd = b.type_of_assistance_cd and a.CURRENT_ELIG_IND = 'A'  and b.edg_num = ? ");
				if(isApproved){
				sqlQuery.append(" and a.CG_STATUS_CD = 'AP'");
				}else{
				sqlQuery.append(" and a.CG_STATUS_CD = 'TN'");
				}
				sqlQuery.append(" and a.PAYMENT_BEG_DT = ? ");						
				params.add(edgNum);
				params.add(paymentDt);
				
				SQLCommand command = new SQLCommand(
						new ApplicationConnectionFactory(), sqlQuery.toString(),
						params);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
		
		public EdEligibilityCargo[] findForPremium(int maxRows, EdEligibilityCargo cargo)
				throws GenericRunTimeException {
		try {
				
			final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"TARGET_PERSON_ID = ? AND CURRENT_ELIG_IND = 'A' AND TYPE_OF_ASSISTANCE_CD IN ('CW10','WD10') AND PAYMENT_BEG_DT <= CAST(? AS DATE) AND CG_STATUS_CD = 'AP'");
			ArrayList<Object> params = new ArrayList <Object> ();
			params.add(cargo.getTargetPersonId());
			params.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
			final EdEligibilityCargo[] cargoArray = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargoArray;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
		
		public EdEligibilityCargo[] findForSubAdoptIndiv(int maxRows, EdEligibilityCargo cargo)
				throws GenericRunTimeException {
		try {
				
			String whereClause = " TARGET_PERSON_ID = "
					+ cargo.getTargetPersonId()
					+ " AND CURRENT_ELIG_IND = 'A' "
					+ " AND PAYMENT_BEG_DT <= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
					+ " AND (PAYMENT_END_DT IS NULL OR PAYMENT_END_DT >= "
					+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
					+ " ) AND COE IN ('07SAI','07SAO','07NSA')"
					+ " AND CG_STATUS_CD = 'AP' ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
		
	public EdEligibilityCargo[] findByCaseClosureCOLA(int maxRows, String runMonth) throws GenericRunTimeException {
			Debug.println("findByCaseClosureCOLA" + strLiteralMaxRows + maxRows + "Run_Month" + runMonth);
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				
/*				SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
				Date serviceDate=new Date(cargo.getPaymentBegDt().getTime());
				String serviceMonth=cargo.getPaymentBegDt().toString();
				String serviceMonth = formatter.format(runMonth);*/
		        	
				StringBuilder clause = new StringBuilder();
	            
	            clause.append("SELECT distinct A.CASE_NUM,A.TARGET_PERSON_ID from ED_ELIGIBILITY A,");
	            clause.append(" (SELECT distinct INDV_ID,TO_DATE(CREATE_DT) AS CREATE_DT");
	            clause.append(" FROM IN_BENDEX");
	            clause.append(" WHERE create_dt     > '"+runMonth+"'");
	            clause.append(" AND CREATE_USER_ID LIKE ('%RCOLA%')");
	            clause.append(" UNION");
	            clause.append(" SELECT distinct INDV_ID,TO_DATE(CREATE_DT) AS CREATE_DT");
	            clause.append(" FROM IN_SDX");
	            clause.append(" WHERE create_dt     > '"+runMonth+"'");
	            clause.append(" AND CREATE_USER_ID LIKE ('%RSSDX%')");
	            clause.append(" ORDER BY  INDV_ID) B where A.TARGET_PERSON_ID=B.INDV_ID and A.DELETE_SW='N' and A.CURRENT_ELIG_IND='A' and A.CG_STATUS_CD IN ('AP','SP')"); 
	            clause.append(" and A.PROGRAM_CD='MA' and A.PAYMENT_END_DT IS NULL and A.DI_ACTION_DT < B.CREATE_DT");
	            
	            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
	            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
	            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
	            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
	            cargoPopulator.setMapper(new CargoPropertyMapper());
	            for(Map<String, Object> result: results){
	            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
	                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
	                        populator.execute();
	                        resultList.add(newCargo);
	            }

	            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
	            resultList.toArray(colrows);
	            return colrows;
				
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
	
	public EdEligibilityCargo[] CreateCaseClosureCOLA(int maxRows, String runMonth, long caseNum) throws GenericRunTimeException {
		Debug.println("findByCaseClosureCOLA" + strLiteralMaxRows + maxRows + "Run_Month" + runMonth);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
				        	
			StringBuilder clause = new StringBuilder();
            
			clause.append("SELECT A.* from ED_ELIGIBILITY A, ");
			clause.append("(SELECT distinct INDV_ID,TO_DATE(CREATE_DT) AS CREATE_DT ");
			clause.append("FROM IN_BENDEX ");
			clause.append("WHERE create_dt     > '"+runMonth+"'");
			clause.append(" AND CREATE_USER_ID IN ('IN-RCOLA-YLY') ");
			clause.append("UNION ");
			clause.append("SELECT distinct INDV_ID,TO_DATE(CREATE_DT) AS CREATE_DT ");
			clause.append("FROM IN_SDX ");
			clause.append("WHERE create_dt     > '"+runMonth+"'");
			clause.append(" AND CREATE_USER_ID IN ('IN-RSSDX-YLY') ");
			clause.append("ORDER BY  INDV_ID) B where A.TARGET_PERSON_ID=B.INDV_ID and A.DELETE_SW='N' and A.CURRENT_ELIG_IND='A' and A.CG_STATUS_CD='AP' ");
			clause.append("and A.PROGRAM_CD='MA' and A.PAYMENT_END_DT IS NULL and A.CASE_NUM="+caseNum);
			clause.append(" and A.DI_ACTION_DT < B.CREATE_DT");
            
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
			
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
		public EdEligibilityCargo[] coFindforReqPaymentMass(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{
	        	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                    + " AND DELETE_SW = 'N' "
	                    + " AND CURRENT_ELIG_IND = 'A' "
	                    + " AND PROGRAM_CD='LI' ";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		
		public EdEligibilityCargo[] findByAuthApprovedOngoingRecordsMA(int maxRows,
				long caseNum) throws GenericRunTimeException {
			try {
				String clause = " CASE_NUM = " + caseNum + " AND DELETE_SW = 'N' "
						+ " AND PROGRAM_CD = 'MA'"
						+ " AND CURRENT_ELIG_IND = 'A'"
						+ " AND payment_end_dt Is Null "
						+ " AND CG_STATUS_CD='AP'"
						+ " ORDER BY PAYMENT_BEG_DT ASC ";

				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, clause);
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}


		public EdEligibilityCargo[] biFindEligIndvForLiheap(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{
	        	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                    + " AND DELETE_SW = 'N' "
	                    + " AND CURRENT_ELIG_IND IN ('A', 'P', 'R')"
	                    + " AND PROGRAM_CD = 'LI' "
	        			+ " AND ((PAYMENT_BEG_DT <= " + DateFormatter.getDateForWhereClause(cargo.getPaymentBegDt()) + " AND PAYMENT_END_DT IS NULL) "
        				+ " OR (PAYMENT_BEG_DT <= " + DateFormatter.getDateForWhereClause(cargo.getPaymentEndDt()) + " AND PAYMENT_END_DT IS NULL) "
        				+ " OR (" + DateFormatter.getDateForWhereClause(cargo.getPaymentBegDt()) + " BETWEEN PAYMENT_BEG_DT AND PAYMENT_END_DT)"
        				+ " OR (" + DateFormatter.getDateForWhereClause(cargo.getPaymentEndDt()) + " BETWEEN PAYMENT_BEG_DT AND PAYMENT_END_DT))";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		
			/** ND-65484
	 * Query to find AP ongoing records
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
		public EdEligibilityCargo[] findByIndvApprovedOngoing(int maxRows, EdEligibilityCargo cargo)
                    throws GenericRunTimeException {
             EdEligibilityCargo colrows[] = null;
             // StringBuffer sbClause = new StringBuffer();

             try {
                    Map<String, Object> map = new HashMap<String, Object>();
                    StringBuffer clause = new StringBuffer();
                    clause.append(" TARGET_PERSON_ID IN ("+cargo.getTargetPersonId()+")");
                    clause.append(" AND CASE_NUM IN ("+cargo.getCaseNum()+")");
                    clause.append(" AND DELETE_SW='N' AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND CG_STATUS_CD = 'AP' ");
                    Debug.println(clause.toString());
                    map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
                    return getReturnCargo(map);
             } catch (Exception e) {
                    log(ILog.ERROR, e.getMessage());
                    throw new GenericRunTimeException(e.getMessage(),e);
             }
       }



	/**
	 * Method findByCaseNumAndStatusCd, query by Cg Status Code.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgNumAndVerifStatusCd(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseNumEdgNumAndVerifStatusCd" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "case_num = " + cargo.getCaseNum()
					+ " and cg_status_cd in ('PE', 'DN', 'TN') " + " and current_elig_ind = 'P'"
					//+ " and edg_num = " + cargo.getEdgNum()   // ND-84345 fix
					//+ " and DELETE_SW = 'N' order by payment_beg_dt ";
					+ " and DELETE_SW = 'N'  order by payment_beg_dt ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}

	
	
	/**
	 * ND-69798 fetching coe for W record
	 * find Cannot Change segment for No Change authorized edg num
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCannotChangeForNoChangeAuthorizedEdgNum(int maxRows, EdEligibilityCargo cargo)
	        throws GenericRunTimeException
    {
        try
        {
        	StringBuffer clause = new StringBuffer();
            clause.append("SELECT * FROM ED_ELIGIBILITY where EDG_NUM=? AND CASE_NUM=? AND TARGET_PERSON_ID=? ");
            clause.append(" AND trunc(PAYMENT_BEG_DT) = ? AND trunc(PAYMENT_END_DT) = ?");
            clause.append(" AND DELETE_SW='N' AND CURRENT_ELIG_IND IN ('W') AND CG_STATUS_CD IN ('AP') AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y') ");
            clause.append(" and COVERAGE_GROUP IN ('MA','HS') ORDER BY PAYMENT_BEG_DT DESC");
            List params = new ArrayList();
           params.add(Long.valueOf(cargo.getEdgNum()));
            params.add(Long.valueOf(cargo.getCaseNum()));
            params.add(Long.valueOf(cargo.getTargetPersonId()));
            params.add(cargo
					.getPaymentBegDt());
            params.add(cargo
					.getPaymentEndDt());
            EdEligibilityCargo[] cargoArray = getCargoArray(clause.toString(), params, EdEligibilityCargo.class);

			return cargoArray;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
    } 

	
	/**
     * This method is used in InSndDlyMmisReferralXMLBuilder.java
     * @param maxRows
     * @param cargo
     * @return
     * @throws GenericRunTimeException
     */
    public EdEligibilityCargo[] findByIndvForMMISLivingArrangement(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append( "(TARGET_PERSON_ID =" + cargo.getTargetPersonId());
            clause.append(" AND CURRENT_ELIG_IND = 'A'");        
            clause.append(" AND CG_STATUS_CD IN ('AP')");
			clause.append(" AND DELETE_SW='N'");
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");    
            clause.append(" AND COVERAGE_GROUP != 'MX' ");
            
            clause.append(")");
            
            clause.append(" ORDER BY BENEFIT_START_DT ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
	
	public EdEligibilityCargo[] findByCaseIndvForELE35(int maxRows, EdEligibilityCargo cargo) 
            throws GenericRunTimeException {

        try {
            StringBuilder clause = new StringBuilder();
            clause.append(strLiteralCaseNum + cargo.getCaseNum());
            clause.append(" AND CURRENT_ELIG_IND IN ('A')  AND DELETE_SW = 'N' ");    
            clause.append(" AND CG_STATUS_CD IN ('AP', 'TN')"); // Eligible, Terminated
            clause.append(" AND (NOT_COVERED_SW IS NULL OR NOT_COVERED_SW <> 'Y')");
            clause.append(" AND COVERAGE_GROUP !='MX' ");
            clause.append(" AND COE != 'M092' ");
            clause.append(" AND TARGET_PERSON_ID = " + cargo.getTargetPersonId());
                        
            clause.append(")");
            
            clause.append(" ORDER BY PAYMENT_BEG_DT, CG_STATUS_CD DESC ");
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
            return getReturnCargo(map);
        } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(), e);
        }
    }
	
	
/*	public EdEligibilityCargo[] findForACF801ReportsCopay(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
	try {
			
		String whereClause = " CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND EDG_TRACE_ID = "
				+ cargo.getEdgTraceId()
				+ " AND PROGRAM_CD = 'CD' "
				+ " AND CURRENT_ELIG_IND = 'A' "
				+ " AND CG_STATUS_CD = 'AP' "
				+ " AND DELETE_SW = 'N' "
				+ " AND PAYMENT_BEG_DT BETWEEN ? AND ?";
				+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()) + " AND "
				+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt());
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		return getReturnCargo(map);
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
		}
	}*/
	
	public EdEligibilityCargo[] findForACF801ReportsCopay(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		String clause = null;
		List<Object> params = new ArrayList<Object>();
		List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

		try {
			clause = "SELECT * FROM ED_ELIGIBILITY WHERE CASE_NUM = ? "
				+ " AND EDG_TRACE_ID =  ? "
				+ " AND PROGRAM_CD = 'CD' "
				+ " AND CURRENT_ELIG_IND = 'A' "
				+ " AND CG_STATUS_CD = 'AP' "
				+ " AND DELETE_SW = 'N' "
				+ " AND PAYMENT_BEG_DT BETWEEN ? AND ?";

			params.add(cargo.getCaseNum());
			params.add(cargo.getEdgTraceId());
			params.add(cargo.getPaymentBegDt());
			params.add(cargo.getPaymentEndDt());

			SQLCommand command = getSqlCommandForUpdate(clause, params);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findForACF801ReportsPayment(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
	try {
			
		String whereClause = " CASE_NUM = "
				+ cargo.getCaseNum()
				+ " AND EDG_TRACE_ID = "
				+ cargo.getEdgTraceId()
				+ " AND PROGRAM_CD = 'CD' "
				+ " AND CURRENT_ELIG_IND = 'A' "
				+ " AND CG_STATUS_CD = 'AP' "
				+ " AND DELETE_SW = 'N' "
				+ " ORDER BY PAYMENT_BEG_DT ASC";
			

		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		return getReturnCargo(map);
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}
	
	public EdEligibilityCargo[] getEligibilityByJustCaseNum(int maxRows, long caseNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
				        	
			StringBuilder clause = new StringBuilder();
            
			clause.append("SELECT * from ED_ELIGIBILITY where delete_sw = 'N' and program_cd = 'TF' and current_elig_ind ='A' and case_num= "+caseNum);
            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
            cargoPopulator.setMapper(new CargoPropertyMapper());
            for(Map<String, Object> result: results){
            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
                        populator.execute();
                        resultList.add(newCargo);
            }

            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
            resultList.toArray(colrows);
            return colrows;
			
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	public EdEligibilityCargo[] findByIncomeAssetEligible(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	
	    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                + " AND  program_cd = 'LI' AND DELETE_SW = 'N' AND coverage_group = 'EL' AND cg_status_cd = 'AP' and fin_elig_rslt_cd = 'PS' and rsc_elig_rslt_cd = 'PS'";
	               
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	public EdEligibilityCargo[] findLiheapCaseNum(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                + " AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD='LI'"
	                + " AND cg_status_cd = 'AP'";
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
		
	public EdEligibilityCargo[] findByCurrentEligRecordsByProgram(int maxRows, long caseNum, String programCd) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		
		try {
			String whereClause = "CASE_NUM="+caseNum+" AND CURRENT_ELIG_IND = \'A\'"
					+ "AND PROGRAM_CD IN ('"+programCd+"')  AND DELETE_SW=\'N\' AND CG_STATUS_CD='AP'" + " ORDER BY BENEFIT_START_DT ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}	
	
	/*START:client Notice Of Action*/
	public EdEligibilityCargo[] findLICases(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
        try{
        	String whereClause = " CASE_NUM = "+ caseNum
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "
                    + " AND PROGRAM_CD='LI'"
                    + " AND cg_status_cd IN  ('AP','TN')"
                    + " AND PAYMENT_BEG_DT<=CAST(\'" + asOfDate + "\' AS DATE)"
                    + " AND PAYMENT_END_DT>=CAST(\'" + asOfDate + "\' AS DATE)"
                    + " AND DI_ACTION_DT=CAST(\'" + asOfDate + "\' AS DATE)"
                    +" order by payment_end_dt desc";                   
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	
	public EdEligibilityCargo[] findLIPrevEdRecords(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		CoDebugger.debugInformation("Entering findLIPrevEdRecords");

        try{
        	DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
        	String beginDt=df.format(cargo.getPaymentBegDt());
        	CoDebugger.debugInformation("findLIPrevEdRecords beginDt" +cargo.getEligibilityBegDt());
        	CoDebugger.debugInformation("findLIPrevEdRecords Formatted beginDt" +beginDt);
        	String whereClause="";
        	if(cargo.getCoverageGroup()!=null){
        		whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                        + " AND DELETE_SW = 'N' "
                        + " AND CURRENT_ELIG_IND = 'C' "
                        + " AND PROGRAM_CD='LI'"
                        + " AND cg_status_cd='AP'"                 
                        + " AND COVERAGE_GROUP='" + cargo.getCoverageGroup()    
                        + "' AND PAYMENT_BEG_DT=CAST(\'" + beginDt + "\' AS DATE)"
                        +" order by edg_trace_id desc"; 
        	}else{
        		whereClause = " CASE_NUM = "+ cargo.getCaseNum()
                        + " AND DELETE_SW = 'N' "
                        + " AND CURRENT_ELIG_IND = 'C' "
                        + " AND PROGRAM_CD='LI'"
                        + " AND cg_status_cd='AP'"                 
                        + " AND COVERAGE_GROUP IS NULL"  
                        + " AND PAYMENT_BEG_DT=CAST(\'" + beginDt + "\' AS DATE)"
                        +" order by edg_trace_id desc"; 
        	}		
        	CoDebugger.debugInformation("findLIPrevEdRecords whereClause" +whereClause);

        	
        	                  
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
		CoDebugger.debugInformation("Exiting findLIPrevEdRecords");
        return getReturnCargo(map);
        } catch(Exception e){
            CoDebugger.debugException(e.getMessage(), e);
            throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	
	/*END:client Notice Of Action*/
	
	public EdEligibilityCargo[] findEligforAPTNCases(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM = "+ caseNum
	                + " AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND Cg_Status_Cd IN ('AP','TN') "
	                + " AND PROGRAM_CD='LI' "
					+ " AND  PAYMENT_BEG_DT <="
					+ " CAST(\'" + asOfDate + "\' AS DATE)"
					+ " and (Payment_End_Dt Is Null or Payment_End_Dt>="
					+ " CAST(\'" + asOfDate + "\' AS DATE)) order by payment_beg_dt desc";
					
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	/**
	 * 
	 * 
	 * @param maxRows
	 * @param caseNum
	 * @param edgNum
	 * @return
	 * @throws GenericRunTimeException
	 */
	
	public EdEligibilityCargo[] findByCaseNumEdgNumCgstatusCodeCurrenteligIndDeletSw(int maxRows, EdEligibilityCargo edEligibility) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + edEligibility.getCaseNum() + strLiteralAndEdgNum
					+ edEligibility.getEdgNum() + " AND CURRENT_ELIG_IND IN ('A') AND CG_STATUS_CD IN ('AP')  AND DELETE_SW = 'N' ";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
    /**
     * This method finds case details to check eligibility of a payment. Added as a part
     * of CR-59923.
     * @param maxRows
     * @param cargo
     * @return
     * @throws GenericRunTimeException
     */
	public EdEligibilityCargo[] findEligibleLiheapCases(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException
	{
		Debug.println("findLiheapCasesVm" + strLiteralMaxRows
				+ maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND in ('A')"
					+ " AND CG_STATUS_CD  IN ('AP','TN') "
					+ " AND PAYMENT_BEG_DT <= "
					+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
					+ " AND  PROGRAM_CD='LI' "
					+ " AND TYPE_OF_ASSISTANCE_CD = 'LH01' "
					+ " ORDER BY PAYMENT_END_DT DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	
	public EdEligibilityCargo[] findByCancelledLiheapLumpSumRecords(int maxRows, EdEligibilityCargo edEligibility) throws GenericRunTimeException {

		String whereClause = null;

		try {
			whereClause = strLiteralCaseNum2 + edEligibility.getCaseNum() + " AND CURRENT_ELIG_IND IN ('A') AND DELETE_SW = 'N'"
					+ " AND PROGRAM_CD='LI' AND COVERAGE_GROUP='LP'";

			Map map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			Collection<EdEligibilityCargo> coll = getAll(map);

			EdEligibilityCargo colrows[] = new EdEligibilityCargo[coll.size()];
			coll.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/*start:: client Notice Of Action2*/
	public EdEligibilityCargo[] findLICasesCoFromVm(int maxRows,long caseNum,String asOfDate) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
        try{
        	String whereClause = " CASE_NUM = "+ caseNum
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND = 'A' "
                    + " AND PROGRAM_CD='LI'"
                    + " AND cg_status_cd IN  ('AP','TN')"
                    + " AND PAYMENT_BEG_DT<=CAST(\'" + asOfDate + "\' AS DATE)"
                    + " AND PAYMENT_END_DT>=CAST(\'" + asOfDate + "\' AS DATE)"                  
                    +" order by payment_end_dt desc";                   
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	/*end:: client Notice Of Action2*/
	
	
	public EdEligibilityCargo[] getEdEligibilityforDeniedIndv(int maxRows, EdEligibilityCargo edEligibility) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " CURRENT_ELIG_IND = \'A\'"
					+ " AND DELETE_SW=\'N\'" + " AND TARGET_PERSON_ID IN ( "
					+ edEligibility.getTargetPersonId() + " ) AND PROGRAM_CD='MA' AND CG_STATUS_CD='DN' ORDER BY BENEFIT_START_DT ";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(),e);
		}

	}
	public EdEligibilityCargo[] findExpeditedSNAPCaseNum(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = "CASE_NUM = "+ cargo.getCaseNum()
	                + " AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD='FS'"
	                + " AND PAYMENT_END_DT IS NULL";
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	public EdEligibilityCargo[] findByPersonInMonthForTOA(int maxRows,long indvId, Timestamp edm, long caseNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
        try{
        	String whereClause = "CASE_NUM = " +caseNum +" AND TARGET_PERSON_ID = "+ indvId
                    + " AND DELETE_SW = 'N' "
                    + " AND CURRENT_ELIG_IND IN ('I', 'P')"
                    + " AND PROGRAM_CD = 'MA' "
        			+ " AND PAYMENT_BEG_DT = " + DateFormatter.getDateForWhereClause(edm);
        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
        return getReturnCargo(map);
        } catch(Exception e){
               throw new GenericRunTimeException(e.getMessage(), e);
        }
	}
	
	public EdEligibilityCargo[] getEligibilityRecordsMA(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityRecordsMA START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum()
					+ " AND DELETE_SW = 'N'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getEligibilityRecordsMA END");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByPotentialIssuanceCCAP(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("findByPotentialIssuanceCCAP START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum()
					+ " AND DELETE_SW = 'N'"
					+ " AND CG_STATUS_CD = 'AP'"
					+ " AND PROGRAM_CD = 'CD'"
					+ strLiteralAndCurrentEligIndP
					+ " AND EDBC_ACTION_CD = '60'";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("findByPotentialIssuanceCCAP END");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByPotentialIssuanceCCAPAfterAuthorization(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("findByPotentialIssuanceCCAPAfterAuthorization START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"CASE_NUM = ? AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' "
					+ "AND PROGRAM_CD = 'CD' "+strLiteralAndCurrentEligIndA+" AND EDBC_ACTION_CD = '60' ORDER BY PAYMENT_BEG_DT"); 
			ArrayList<Object> params = new ArrayList <Object> ();
			params.add(edEligibilityCargo.getCaseNum());
			final EdEligibilityCargo[] cargo = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
            return cargo;
			
			
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * This function gets records from EdEligibility To get Liheap share percentage and copay amount 
	 * @author aayushtyagi
	 * @param caseNum
	 * @param authStartDt
	 * @param authEndDt
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getRecordsForLSPerc(int maxRows,String caseNumbers) throws GenericRunTimeException {
	Map<String, Object> map = new HashMap<String, Object>();
    try{
    	String whereClause = " CASE_NUM IN ("+ caseNumbers
                + " ) AND DELETE_SW = 'N' "
                + " AND CURRENT_ELIG_IND = 'A' "
                + " AND PROGRAM_CD='LI' "
                + " AND CG_STATUS_CD IN ('AP')"
                + " ORDER BY case_num,PAYMENT_BEG_DT ASC";
             
			
				
    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
    return getReturnCargo(map);
    } catch(Exception e){
    		log(ILog.ERROR, e.getMessage());
           throw new GenericRunTimeException(e.getMessage(), e);
    }
}
	public EdEligibilityCargo[] getAllProgByCaseNum(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM IN ("+ cargo.getCaseNum()
	                + " ) AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD in ('TF','FS') "
	                + " AND CG_STATUS_CD IN ('AP')"
	                + "and ((payment_end_dt is null and payment_beg_dt <=" 
	                +DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+") OR (payment_end_dt IS NOT null and extract(month from payment_end_dt)="
					+ DateFormatter.getSrcToDestDtAnsi(cargo.getPaymentEndDt(), "yyyy-MM-dd",
							"MM")
					+" and payment_beg_dt="
					+DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+"))";
					
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	    		log(ILog.ERROR, e.getMessage());
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	public EdEligibilityCargo[] getConversionMA(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM IN ("+ cargo.getCaseNum()
	                + " ) AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD in ('MA') "
	                + " AND CG_STATUS_CD IN ('AP')"
	                + " AND CREATE_USER_ID='conversion'"
	                + " and (((payment_end_dt is null and payment_beg_dt <=" 
	                +DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+") OR (payment_end_dt IS NOT null and extract(month from payment_end_dt)="
					+ DateFormatter.getSrcToDestDtAnsi(cargo.getPaymentEndDt(), "yyyy-MM-dd",
							"MM")
					+" and payment_beg_dt="
					+DateFormatter.getDateForWhereClauseAnsi(cargo
							.getPaymentBegDt())
					+")) OR ((payment_end_dt is null and payment_beg_dt <="
					
					+DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEligibilityBegDt())
					+") OR (payment_end_dt IS NOT null and extract(month from payment_end_dt)="
					+DateFormatter.getSrcToDestDtAnsi(cargo.getEligibilityEndDt(), "yyyy-MM-dd",
							"MM") 
					+"and payment_beg_dt="
					+DateFormatter.getDateForWhereClauseAnsi(cargo
							.getEligibilityBegDt())
					+ "))) ORDER BY EDG_NUM,PAYMENT_BEG_DT desc";
	             
			
	    	
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	    		log(ILog.ERROR, e.getMessage());
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	// LDS 
		public EdEligibilityCargo[] findByCaseIndvPrgCOECreateUser(int maxRows, EdEligibilityCargo cargo) throws Exception {
			try {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("CASE_NUM", cargo.getCaseNum());
				map.put("TARGET_PERSON_ID", cargo.getIndivId());
				map.put("PROGRAM_CD", cargo.getProgramCd());
				map.put("COE", cargo.getCoe());
				map.put("CREATE_USER_ID", cargo.getCreateUserId());
				return getReturnCargo(map);
			} catch (CheckedApplicationException e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
	
		public EdEligibilityCargo[] findbyCasenumEdgnumPaymentBegdt(int maxRows,
				EdEligibilityCargo edEligibilityCargo)
				throws GenericRunTimeException {
			EDBCLogger.debug("findbyCasenumEdgnumPaymentBegdt START");
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				String whereClause = "CASE_NUM = "
						+ edEligibilityCargo.getCaseNum()
						+ " AND DELETE_SW = 'N'"
						+ strLiteralAndCurrentEligIndA
						+ " AND EDG_NUM = " + edEligibilityCargo.getEdgNum() 
						+ " AND TO_DATE(PAYMENT_BEG_DT) = " + DateFormatter.getDateForWhereClauseAnsi(edEligibilityCargo.getPaymentBegDt());
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				EDBCLogger.debug("findbyCasenumEdgnumPaymentBegdt END");
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
		
		
		public EdEligibilityCargo[] findbyCasenumEdgnumFirstPaymentBegdt(int maxRows,
				EdEligibilityCargo edEligibilityCargo)
				throws GenericRunTimeException {
			EDBCLogger.debug("findbyCasenumEdgnumPaymentBegdt START");
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				String whereClause = "CASE_NUM = "
						+ edEligibilityCargo.getCaseNum()
						+ " AND DELETE_SW = 'N'"
						+ strLiteralAndCurrentEligIndA
						+ " AND EDG_NUM = " + edEligibilityCargo.getEdgNum() 
						+ " AND TO_DATE(trunc(PAYMENT_BEG_DT) - (to_number(to_char(PAYMENT_BEG_DT,'DD')) - 1)) = "+DateFormatter.getDateForWhereClauseAnsi(DateComparisons.getFirstDayOfDate(edEligibilityCargo.getPaymentBegDt()));
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				EDBCLogger.debug("findbyCasenumEdgnumPaymentBegdt END");
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}

		public EdEligibilityCargo[] findSNAPNoIssuanceRecords(int maxRows, long caseNum) throws GenericRunTimeException {
			EdEligibilityCargo[] colrows = null;
			try {
				String sql="Select A.* from ED_ELIGIBILITY A Where CASE_NUM = "+caseNum+" AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND = 'W'  AND PROGRAM_CD = 'FS'" ;
				ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
				SQLCommand command = getSqlCommand(sql);

				ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					v.add(newCargo);
				}
				colrows = new EdEligibilityCargo[v.size()];
				v.toArray(colrows);
			}
			catch (CheckedApplicationException e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}   
			return colrows;	
		}
		
		public EdEligibilityCargo[] findNoIssuanceRecordsProgram(int maxRows, long caseNum, String programCd) throws GenericRunTimeException {
			EdEligibilityCargo[] colrows = null;
			try {
				String sql="Select A.* from ED_ELIGIBILITY A Where CASE_NUM = "+caseNum+" AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND = 'W'  AND PROGRAM_CD = '"+programCd+"'" ;
				ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
				SQLCommand command = getSqlCommand(sql);

				ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
						.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					v.add(newCargo);
				}
				colrows = new EdEligibilityCargo[v.size()];
				v.toArray(colrows);
			}
			catch (CheckedApplicationException e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}   
			return colrows;	
		}
		
		public EdEligibilityCargo[] getEligibilityRecordsPrevAuth(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityRecordsPrevAuth START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum()
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('A','C','W') order by payment_beg_dt,edg_trace_id desc";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getEligibilityRecordsMA END");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	public EdEligibilityCargo[] getEligibilityRecordsClientShare(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityRecordsClientShare START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			StringBuffer SQL = new StringBuffer();
			SQL.append(" select * from ( select * FROM ED_ELIGIBILITY ");
			SQL.append(" where CASE_NUM = "+ edEligibilityCargo.getCaseNum()+" AND DELETE_SW = 'N' ");
			SQL.append(" AND CURRENT_ELIG_IND IN ('A', 'P') order by payment_beg_dt desc)where rownum = 1 ");
    
			EdEligibilityCargo colrows[]=getCargoArray(SQL.toString(),EdEligibilityCargo.class);
			EDBCLogger.debug("getEligibilityRecordsClientShare END");
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findCCAPPaymentPeriod(int maxRow,long caseNum,long indvId)throws GenericRunTimeException, CheckedApplicationException{
	   	StringBuilder query = new StringBuilder();
	   	query = new StringBuilder("SELECT * FROM ED_ELIGIBILITY WHERE CASE_NUM='"+caseNum+"' AND CG_STATUS_CD = 'AP' AND DELETE_SW = 'N' AND CURRENT_ELIG_IND='A' AND PROGRAM_CD='CD' AND EDG_TRACE_ID IN (SELECT EDG_TRACE_ID FROM ED_INDV_ELIGIBILITY WHERE PART_STATUS_CD='EC' AND INDV_ID='"+indvId+"') ORDER BY PAYMENT_BEG_DT ASC");
	   	return getCargoArray(query.toString(),EdEligibilityCargo.class);
	}
	public EdEligibilityCargo[] findRetainableRecords(int maxRow,long caseNum) throws CheckedApplicationException{
		StringBuffer SQL = new StringBuffer();
		SQL.append("select ed.CASE_NUM as caseNumber,ed.net_benefit_amt as transactionAmount,");
		SQL.append("dc_indv.INDV_ID as indvID,ed.payment_beg_dt as benifitMonth,dc_indv.LAST_NAME as lastName, dc_indv.FIRST_NAME as firstName, dc_indv.MID_NAME as middleName ");
		SQL.append("from ed_eligibility ed,DC_INDV dc_indv,in_upa_trigger upa");
		SQL.append("where  ed.case_num=upa.case_num and upa.case_num= "+caseNum+"  and   ed.delete_sw = 'N' and ed.current_elig_ind = 'A' and dc_indv.indv_ID in (");
		SQL.append("select dc_case.INDV_ID from DC_CASE_INDIVIDUAL dc_case where dc_case.CASE_NUM=ed.case_num and HEAD_OF_HOUSEHOLD_SW='Y')");
		EdEligibilityCargo colrows[]=getCargoArray(SQL.toString(),EdEligibilityCargo.class);
		return colrows;
	}
	//ND-93447-akshayas
	public EdEligibilityCargo[] findCCAPeligEndDate(int maxRows,long caseNum) throws GenericRunTimeException {
		Debug.println("findAllPrograms CD = ");
		try {
			String whereClause = " PROGRAM_CD = 'CD'"
					+ " AND CASE_NUM = " 
					+ caseNum
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' AND PRIOR_MEDICAL_CD='P0' ORDER BY BENEFIT_START_DT ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findCCAPApprovedForAP(int maxRows,long caseNum) throws GenericRunTimeException {
		Debug.println("findAllPrograms CD = ");
		try {
			String whereClause = " PROGRAM_CD = 'CD'"
					+ " AND CASE_NUM = " 
					+ caseNum
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A'"
					+ " ORDER BY PAYMENT_BEG_DT DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findSNAPApprovedForAP(int maxRows,long caseNum) throws GenericRunTimeException {
		Debug.println("findAllPrograms CD = ");
		try {
			String whereClause = " PROGRAM_CD = 'FS'"
					+ " AND CASE_NUM = " 
					+ caseNum
					+ " AND DELETE_SW = 'N' "
					+ " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A'"
					+ " ORDER BY PAYMENT_BEG_DT DESC";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}


	/**
	 * Method findByExistingAuthForIndvIdTOA, query by Auth records for IndvId TOA.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByExistingAuthForIndvIdTOA(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByExistingAuthForIndvIdTOA" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(strLiteralCaseNum1, cargo.getCaseNum());
			map.put(strLiteralTargetPersonId, cargo.getTargetPersonId());
			map.put(strLiteralTypeOfAssistanceCd, cargo.getTypeOfAssistanceCd());
			map.put(strLiteralDeleteSw, 'N');
			map.put(strLiteralCurrentEligInd, 'A');
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}	

	
	public EdEligibilityCargo[] findPrevPendRecordsMassUpdate(int maxRows, long personID, long caseNum, Timestamp edm)
			throws GenericRunTimeException {
		try {
			StringBuilder query = new StringBuilder(
					"SELECT A.* from ed_eligibility A where case_num=? AND DELETE_SW='N' and target_person_id=? and current_elig_ind='A' and cg_status_cd='AP' and program_cd='MA' and payment_beg_dt < sysdate order by payment_beg_dt desc");
			
			List<Object> params = new ArrayList<Object>();
			params.add(caseNum);
			params.add(personID);
			//params.add(sysdate);
			
		
            Debug.println(query.toString());
            EdEligibilityCargo[] cargo = getCargoArray(query.toString(), params, EdEligibilityCargo.class);
            
            return cargo;
			
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseForEdm(int maxRows,long caseNum, Timestamp edm) throws GenericRunTimeException {
		Debug.println("findAllPrograms CD = ");
		try {
			String whereClause = " PROGRAM_CD = 'MA'"
					+ " AND CASE_NUM = " 
					+ caseNum
					+ " AND DELETE_SW = 'N' AND CURRENT_ELIG_IND IN ('P','V') "
					+ " AND PAYMENT_BEG_DT = "+ DateFormatter.getDateForWhereClause(edm);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findForPremiumMA(int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
	try {
			
		final StringBuffer sqlString = new StringBuffer(EdEligibilityGenDAO.SELECT_SQL+" WHERE "+"TARGET_PERSON_ID = ? "
				+ "AND ((CURRENT_ELIG_IND = 'P' AND DELETE_SW='N') OR (CURRENT_ELIG_IND='A' AND CG_STATUS_CD = 'AP' )) "
				+ "AND TYPE_OF_ASSISTANCE_CD IN ('CW10','WD10') AND PAYMENT_BEG_DT < CAST(? AS DATE) "
				+ "AND PAYMENT_BEG_DT >= CAST(? AS DATE) "
				+ "AND SPEND_DOWN_AMT > 0");
		ArrayList<Object> params = new ArrayList <Object> ();
		params.add(cargo.getTargetPersonId());
		params.add(DateFormatter.getDateForWhereNoCast(cargo.getPaymentBegDt()));
		params.add(DateFormatter.getDateForWhereNoCast(DateComparisons.addMonths(cargo.getPaymentBegDt(), -3)));
		final EdEligibilityCargo[] cargoArray = getCargoArray(sqlString.toString(), params, EdEligibilityCargo.class);
        return cargoArray;
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}
	
	//Conversion find by menthod to fetch TOA for LDS client share ND-95132
	
		public EdEligibilityCargo[] findByCaseNumConversion(int maxRows,
				EdEligibilityCargo cargo) throws GenericRunTimeException {
			try {
				StringBuilder sb = new StringBuilder();
				sb.append("CASE_NUM =  ");
				sb.append(cargo.getCaseNum());
				sb.append("AND TARGET_PERSON_ID = ");
				sb.append(cargo.getTargetPersonId());
				sb.append(" AND CREATE_USER_ID = '");
				sb.append(cargo.getCreateUserId());
				sb.append("' AND PROGRAM_CD = '");
				sb.append(cargo.getProgramCd());
				sb.append("' AND DELETE_SW = 'N' ");
				sb.append(" AND CURRENT_ELIG_IND = 'A'");
				sb.append(" AND PAYMENT_END_DT IS NULL");
				Map<String, Object> map = new HashMap<String, Object>();
				map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
				return getReturnCargo(map);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}

		/**
		 * 
		 * @param maxRows
		 * @param indvIds
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findClosureIndvsForBENDEX(int maxRows, long indvId) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{
	        	/*Long[] indvs = indvIds.toArray(new Long[0]);
	        	String commaSeperatedList = StringUtils.join(indvs, ",");*/
	        	String whereClause = " EDG_TRACE_ID IN (SELECT EDG_TRACE_ID FROM ED_INDV_ELIGIBILITY WHERE INDV_ID = " + indvId + " AND CONSIDER_INCOME_SW = 'Y') AND ED_ELIGIBILITY.CG_STATUS_CD IN ('AP') AND CURRENT_ELIG_IND = 'A' AND PAYMENT_END_DT IS NULL AND DELETE_SW = 'N'";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		/**
		 * ND-96154
		 * This method checks whether a Medicaid case is closed or denied
		 * @param maxRows
		 * @param cargo
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] checkCaseClosed(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{
	        	String whereClause = "CASE_NUM = " +cargo.getCaseNum()
	                    + " AND DELETE_SW = 'N' "
	                    + " AND CURRENT_ELIG_IND IN ('A')"
	                    + " AND PROGRAM_CD = 'MA'"
	                    + " AND CG_STATUS_CD IN ('TN','DN')"
	        			+ " AND (PAYMENT_END_DT > " + DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentEndDt())
	        			+ " OR PAYMENT_END_DT IS NULL)";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		
		public EdEligibilityCargo[] findLatestEdbcRunDates(int maxRows,long caseNumber) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{	       
	        	String whereClause = " CASE_NUM ="+caseNumber+" AND CURRENT_ELIG_IND IN ('A','C') AND DELETE_SW = 'N' ORDER BY EDBC_RUN_DT DESC";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		
		/**
		 * 
		 * @param maxRows
		 * @param cargo
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] findIndvInLTC(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
			EdEligibilityCargo[] colrows = null;
			try {			
				String clause = "SELECT * FROM ED_ELIGIBILITY E, ED_INDV_ELIGIBILITY I "
						+ " WHERE I.EDG_TRACE_ID = E.EDG_TRACE_ID "
						+ " AND E.DELETE_SW = 'N' "
						+ " AND E.CURRENT_ELIG_IND = 'A' "
						+ " AND E.CG_STATUS_CD IN ('AP', 'SP') "
						+ " AND E.PROGRAM_CD = 'MA' "
						+ " AND E.PAYMENT_BEG_DT <= " + DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
						+ " AND (E.PAYMENT_END_DT IS NULL OR E.PAYMENT_END_DT >= " + DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()) + ") "
						+ " AND I.PART_STATUS_CD IN ('EA','EC') "
						+ " AND I.INDV_ID IN ( "
							+ " SELECT INDV_ID FROM DC_INDV_LIVING_ARNGMNTS "
							+ " WHERE LA_TYPE_CD IN ('LT','SH', 'JH') " 
							+ " AND (EFF_END_DT IS NULL OR EFF_END_DT >=" + DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()) + " )" 
							+ " AND HIST_NAV_IND IN ('S','P') "
							+ " AND CEIL(MONTHS_BETWEEN(LAST_DAY("+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
							+ "	),LAST_DAY(EFF_BEGIN_DT)))=6 "
						+ " ) ";
				
				ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
				SQLCommand command = getSqlCommand(clause);
				ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command.execute();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					v.add(newCargo);
				}
				colrows = new EdEligibilityCargo[v.size()];
				v.toArray(colrows);
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
			return colrows;
		}
		
		/**
	     * Added for ND-96939
	     * find active ed cargos of SNAP,CCAP and LIHEAP for a particular case
	     * @param maxRows
	     * @param caseNum
	     * @param generateDate
	     * @return
	     * @throws GenericRunTimeException
	     */
	     public EdEligibilityCargo[] getEdRecordsForNDCCTFLI51(int maxRows,
	              EdEligibilityCargo cargo) throws GenericRunTimeException {
	         Map<String, Object> map = new HashMap<String, Object>();
	         try {
	              String whereClause = " CURRENT_ELIG_IND='A' AND CG_STATUS_CD='AP' AND DELETE_SW='N' "
	                       + "AND PROGRAM_CD IN ('FS' , 'CD' , 'LI') "
	                       + "AND (BENEFIT_END_DT=NULL OR TRUNC(BENEFIT_END_DT)>="
	                       + DateFormatter.getDateForWhereClauseAnsi(cargo.getBenefitEndDt())
	                       + ") AND CASE_NUM = "+cargo.getCaseNum();
	              map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	              return getReturnCargo(map);
	         } catch (Exception e) {
	              throw new GenericRunTimeException(e.getMessage(), e);
	         }

	     }
		public EdEligibilityCargo[] findByAllProgramsRunModeWithHistoryNew(int maxRows,
				EdEligibilityCargo cargo) throws GenericRunTimeException {

			Debug.println("findByAllProgramsRunModeWithHistory" + strLiteralMaxRows
					+ maxRows + strLiteralCargo + cargo);
			try {

				StringBuffer sb = new StringBuffer();
				sb.append("Select A.*,  A.ROWID as aROWID  ");
				sb.append("from ED_ELIGIBILITY A  WHERE A.CASE_NUM = "+cargo.getCaseNum());
				sb.append(" AND DELETE_SW <> 'Y'  ");
				sb.append(" AND ( A.CURRENT_ELIG_IND in ('T', 'P', 'A', 'S', 'V', 'K', 'Q') ");
				sb.append(" OR ( A.CURRENT_ELIG_IND in ('C','W','R','D')))");
				sb.append(" ORDER BY payment_beg_dt,edg_trace_id desc");

				List<Object> parms = new ArrayList<Object>();
				SQLCommand command = getSqlCommandForUpdate(sb.toString(), parms);
				Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
						.execute();
				List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();

				DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
				cargoPopulator.setMapper(new CargoPropertyMapper());
				for (Map<String, Object> result : results) {
					EdEligibilityCargo newCargo = new EdEligibilityCargo();
					ObjectPopulator populator = new ObjectPopulator(result,
							newCargo, cargoPopulator);
					populator.execute();
					resultList.add(newCargo);
				}

				EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
						.size()];
				resultList.toArray(colrows);
				return colrows;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		
		
		/**
	     * Added for ND-97281
	     * find all record for tanf Jobs Sanction
	     * @param maxRows
	     * @param caseNum
	     * @param Program Code
	     * @return
	     * @throws GenericRunTimeException
	     */
	     public EdEligibilityCargo[] getEdRecordsForTANFJobsSanction(int maxRows,
	              EdEligibilityCargo cargo) throws GenericRunTimeException {
	         Map<String, Object> map = new HashMap<String, Object>();
	         try {
	              String whereClause = "CURRENT_ELIG_IND='A' AND DELETE_SW='N' "
	                       + " AND PROGRAM_CD IN ('TF') "
	                       + " AND CASE_NUM = "+cargo.getCaseNum()
	                       + " ORDER BY PAYMENT_BEG_DT DESC";
	              map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	              return getReturnCargo(map);
	         } catch (Exception e) {
	              throw new GenericRunTimeException(e.getMessage(), e);
	         }

	     }
		 
	public EdEligibilityCargo[] findAllPrevAuth(int maxRows, long lCaseNum, Timestamp tsMaxEDM, Timestamp tsMinEDM, Timestamp edbcRunDate)
			throws GenericRunTimeException {
		try {
			String SQL = "Select A.*, A.ROWID "
					+ strLiteralFromEdEligibiltyA
					+ "Where CASE_NUM = ?"
					+ strLiteralAndDeleteSWN
					+ " AND CURRENT_ELIG_IND = 'C' "
					+ " AND REC_BEGIN_DT <=  CAST(? AS DATE)"
					+ " AND (REC_END_DT  >=  CAST(? AS DATE)" 
					+ strLiteralOr
					+ " REC_END_DT  is Null ) "
					+ " AND EDBC_RUN_DT < CAST(? AS DATE) "
					+  " ORDER BY  PROGRAM_CD, DI_ACTION_DT desc, EDG_TRACE_ID desc, ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ) desc ";

			
			List<Object> params = new ArrayList<Object>();
			params.add(lCaseNum);
			params.add(DateFormatter.getDateForWhereNoCast(tsMaxEDM));
			params.add(DateFormatter.getDateForWhereNoCast(tsMinEDM));
			params.add(DateFormatter.getDateForWhereNoCast(edbcRunDate));
		
            Debug.println(SQL.toString());
            EdEligibilityCargo[] cargo = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
            
			return cargo;
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	
	/**
	 * Added for ND-97908 find all record for Snap Expedite
	 * 
	 * @param maxRows
	 * @param EdEligibilty
	 *            Cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getEdRecordsForSnapExpedite(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String whereClause = " CURRENT_ELIG_IND='A' AND DELETE_SW='N' "
					+ " AND PROGRAM_CD IN ('FS') "
					+ " AND ACTIVITY_TYPE ='IN' " + " AND CASE_NUM = "
					+ cargo.getCaseNum() + " AND FS_EXPEDITED_SW ='Y' "
					+ " AND CG_STATUS_CD ='AP' "
					+ " ORDER BY PAYMENT_BEG_DT DESC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}

	}
	
	/**
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findIfApprovedMA(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
		String whereClause = "CASE_NUM = " + cargo.getCaseNum()
					+ " AND TARGET_PERSON_ID = " + cargo.getTargetPersonId()
					+ " AND DELETE_SW = \'N\' "
					+ " AND CG_STATUS_CD = \'AP\' "
					+ " AND PROGRAM_CD = \'MA\'"
					+ " AND CURRENT_ELIG_IND = \'A\' "
					+ " AND PAYMENT_END_DT IS NULL";
					
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * ND-97521
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCancelledEdWithProgramCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
			String beginDt = df.format(cargo.getPaymentBegDt());
			String whereClause = "";
			if (cargo.getCoverageGroup() != null) {
				whereClause = " CASE_NUM = " + cargo.getCaseNum()
						+ " AND DELETE_SW = 'N' "
						+ " AND CURRENT_ELIG_IND = 'C' " + " AND PROGRAM_CD='"
						+ cargo.getProgramCd() + "' AND cg_status_cd='AP'"
						+ " AND COVERAGE_GROUP='" + cargo.getCoverageGroup()
						+ "' AND PAYMENT_BEG_DT=CAST(\'" + beginDt
						+ "\' AS DATE)" + " order by edg_trace_id desc";
			} else {
				whereClause = " CASE_NUM = " + cargo.getCaseNum()
						+ " AND DELETE_SW = 'N' "
						+ " AND CURRENT_ELIG_IND = 'C' " + " AND PROGRAM_CD='"
						+ cargo.getProgramCd() + "' AND cg_status_cd='AP'"
						+ " AND COVERAGE_GROUP IS NULL"
						+ " AND PAYMENT_BEG_DT=CAST(\'" + beginDt
						+ "\' AS DATE)" + " order by edg_trace_id desc";
			}

			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * ND-97521
	 * @param maxRows
	 * @param edEligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] getEdRecordsForNDEBN111(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEdRecordsForNDEBN111 START");
		String dateToConsider = "";
		if (null != edEligibilityCargo.getPaymentBegDt()) {
			dateToConsider = BiUtils.getMonth(edEligibilityCargo
					.getPaymentBegDt())
					+ " "
					+ BiUtils.getYear(edEligibilityCargo.getPaymentBegDt());
		}
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			String whereClause = " CURRENT_ELIG_IND='A'"
					+ " AND DELETE_SW = 'N'" + " AND PROGRAM_CD='"
					+ edEligibilityCargo.getProgramCd() + "'" + " AND EDG_NUM="
					+ edEligibilityCargo.getEdgNum()
					+ " AND DI_ACTION_DT="
					+ DateFormatter.getDateForWhereClauseAnsi(edEligibilityCargo.getDiActionDt())
					+ " AND to_char(PAYMENT_BEG_DT ,'MM YYYY') = '"
					+ dateToConsider + "'" + " AND EDBC_ACTION_CD=32"
					+ " ORDER BY EDG_TRACE_ID DESC";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getEdRecordsForNDEBN111 ENDS");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * ND-97521
	 * 
	 * @param maxRows
	 * @param cargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findCancelledLiheapEd(
			int maxRows, EdEligibilityCargo cargo)
			throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
			String beginDt = df.format(cargo.getPaymentBegDt());
			String whereClause = "";
			whereClause = " CASE_NUM = " + cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' " + " AND CURRENT_ELIG_IND = 'C' "
					+ " AND PROGRAM_CD ='" + cargo.getProgramCd()
					+ "' AND EDG_NUM ='" + cargo.getEdgNum()
					+ "' AND cg_status_cd='AP'" + " AND (CAST(\'"
					+ beginDt + "\' AS DATE) BETWEEN PAYMENT_BEG_DT and PAYMENT_END_DT)" + " order by edg_trace_id desc";

			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findRecordsForNOEUtility(int maxRows, String caseNum, String noticeNum)
			throws GenericRunTimeException {

		try {
			StringBuffer query = new StringBuffer();
			query.append("SELECT * FROM ED_ELIGIBILITY WHERE EDG_TRACE_ID IN (SELECT EDG_TRACE_ID FROM CO_NOD_REQUEST_DETAIL ");
			query.append("WHERE CASE_NUM= ? AND CO_REQ_SEQ= ? AND DOC_ID='NCH001' AND PROCESS_SW='Y') AND EDBC_ACTION_CD NOT IN ('60') AND CURRENT_ELIG_IND ='A' ORDER BY PAYMENT_BEG_DT asc ");
			
			List<Object> params = new ArrayList<Object>();
			params.add(Long.parseLong(caseNum));
			params.add(Long.parseLong(noticeNum));
			
			String sSQL = query.toString();
			
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommandForUpdate(sSQL, params);
			List<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> obj : results) {
				EdEligibilityCargo theObject = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(obj, theObject,
						cargoPopulator);
				populator.execute();
				resultList.add(theObject);
			}
			EdEligibilityCargo colrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findEdRecordsByTargetPersonIdForUtility(int maxRows,
			EdEligibilityCargo edEligibilityCargo) throws GenericRunTimeException {
		try {
			String clause = " CASE_NUM = " + edEligibilityCargo.getCaseNum() + " AND DELETE_SW = 'N' "
					+ " AND TARGET_PERSON_ID =" + edEligibilityCargo.getTargetPersonId()
					+ " ORDER BY EDG_TRACE_ID DESC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] getPotentialRecords(int maxRows,
				EdEligibilityCargo edEligibilityCargo)
				throws GenericRunTimeException {
			EDBCLogger.debug("getPotentialRecords START");
			Map<String, Object> map = new HashMap<String, Object>();
			try {

				String whereClause = "CASE_NUM = "
						+ edEligibilityCargo.getCaseNum()
						+ " AND DELETE_SW = 'N'"
						+ " AND CURRENT_ELIG_IND = 'I' ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				EDBCLogger.debug("getPotentialRecords END");
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
		
		public EdEligibilityCargo[] allAWRCCargos(int maxRows,long caseNumber,String programCd) throws GenericRunTimeException {
			Map<String, Object> map = new HashMap<String, Object>();
	        try{	       
	        	String whereClause = " CASE_NUM ="+caseNumber+" AND PROGRAM_CD ='"+programCd+"' AND CURRENT_ELIG_IND IN ('A','C','R','W') AND DELETE_SW = 'N' ORDER BY PAYMENT_BEG_DT DESC";
	        map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	        return getReturnCargo(map);
	        } catch(Exception e){
	               throw new GenericRunTimeException(e.getMessage(), e);
	        }
		}
		
		public EdEligibilityCargo[] getRecordsForHccChangeRepDriver(int maxRows,
				EdEligibilityCargo edEligibilityCargo)
				throws GenericRunTimeException {
			EDBCLogger.debug("getRecordsForHccChangeRepDriver START");
			Map<String, Object> map = new HashMap<String, Object>();
			try {

				String whereClause = "CASE_NUM = "
						+ edEligibilityCargo.getCaseNum()
						+ " AND DELETE_SW = 'N'"
						+ " AND PROGRAM_CD = 'MA'"
						+ " AND CURRENT_ELIG_IND = 'P' ";
				map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
				EDBCLogger.debug("getRecordsForHccChangeRepDriver END");
				return getReturnCargo(map);
			} catch (Exception e) {
				throw new GenericRunTimeException(e.getMessage(), e);
			}
		}
		
		
		
		/**
		 * ND-98872 Populating Map For Application Month+1 Fragments
		 * @param maxRows
		 * @param caseNum
		 * @return
		 * @throws GenericRunTimeException
		 */
		public EdEligibilityCargo[] getBenefitsPerMonth(int maxRows, long caseNum) throws GenericRunTimeException {
			try {
				StringBuilder clause = new StringBuilder();
	            clause.append("Select * From Ed_Eligibility Where Delete_Sw = 'N' ");
	            clause.append(" And Current_Elig_Ind = 'A' ");
	            clause.append(" And Program_Cd = 'TF' ");
	            clause.append(" And ((Cg_Status_Cd NOT IN ('TN','DN') AND Benefit_Status Not In ('TN','DN') ) OR (Cg_Status_Cd ='SP' AND Benefit_Status IS NULL)  ) ");

	            if (caseNum > 0) {
	            	clause.append(" AND CASE_NUM = "+ caseNum);
				}
	            clause.append(" ORDER BY PAYMENT_BEG_DT DESC ");
	            
	            SQLCommand command = new SQLCommand(new ApplicationConnectionFactory(), clause.toString());
	            Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command.execute();
	            List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
	            DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
	            cargoPopulator.setMapper(new CargoPropertyMapper());
	            for(Map<String, Object> result: results){
	            	EdEligibilityCargo newCargo = new EdEligibilityCargo();
	                        ObjectPopulator populator = new ObjectPopulator(result, newCargo, cargoPopulator);
	                        populator.execute();
	                        resultList.add(newCargo);
	            }

	            EdEligibilityCargo[] colrows = new EdEligibilityCargo[resultList.size()];
	            resultList.toArray(colrows);
	            return colrows;
			} catch (Exception e) {
	            throw new GenericRunTimeException(e.getMessage(),e);
			}     
		}
		public EdEligibilityCargo[] findByAuthMA(int maxRows, long lCaseNum,
				Timestamp tsMaxEDM, Timestamp tsMinEDM)
				throws GenericRunTimeException {
			try {
				String SQL = "Select A.*, A.ROWID "
						+ strLiteralFromEdEligibiltyA
						+ "Where CASE_NUM = ?"
						+ strLiteralAndDeleteSWN
						+ strLiteralAndCurrentEligIndA
						+ " AND REC_BEGIN_DT <=  CAST(? AS DATE)"
						+ " AND (REC_END_DT  >=  CAST(? AS DATE)" 
						+ strLiteralOr
						+ " REC_END_DT  is Null ) "
						+ " AND PROGRAM_CD = 'MA' "
						+  " ORDER BY  PROGRAM_CD, ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ) desc ";

				
				List<Object> params = new ArrayList<Object>();
				params.add(lCaseNum);
				params.add(DateFormatter.getDateForWhereNoCast(tsMaxEDM));
				params.add(DateFormatter.getDateForWhereNoCast(tsMinEDM));
				
			
	            Debug.println(SQL.toString());
	            EdEligibilityCargo[] cargo = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargo;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		public EdEligibilityCargo[] findByAuthOthers(int maxRows, long lCaseNum,
				Timestamp tsMaxEDM, Timestamp tsMinEDM)
				throws GenericRunTimeException {
			try {
				String SQL = "Select A.*, A.ROWID "
						+ strLiteralFromEdEligibiltyA
						+ "Where CASE_NUM = ?"
						+ strLiteralAndDeleteSWN
						+ strLiteralAndCurrentEligIndA
						+ " AND REC_BEGIN_DT <=  CAST(? AS DATE)"
						+ " AND (REC_END_DT  >=  CAST(? AS DATE)" 
						+ strLiteralOr
						+ " REC_END_DT  is Null ) "
						+ " AND PROGRAM_CD <> 'MA' "
						+ " ORDER BY  PROGRAM_CD, ( extract(year from PAYMENT_BEG_DT)||case when extract(month from PAYMENT_BEG_DT) < 10 then '0' else '' end|| cast(extract(month from PAYMENT_BEG_DT) as varchar(2)) ) desc ";

				
				List<Object> params = new ArrayList<Object>();
				params.add(lCaseNum);
				params.add(DateFormatter.getDateForWhereNoCast(tsMaxEDM));
				params.add(DateFormatter.getDateForWhereNoCast(tsMinEDM));
				
			
	            Debug.println(SQL.toString());
	            EdEligibilityCargo[] cargo = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargo;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
		}
		
		public EdEligibilityCargo[] findForACF801ReportsPayments(int maxRows, EdEligibilityCargo cargo)
				throws GenericRunTimeException {
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW='N' "
					+ " AND CURRENT_ELIG_IND='A' "
					+ " AND CG_STATUS_CD='AP' "
					+ " AND PROGRAM_CD='CD' "
					+ " ORDER BY PAYMENT_BEG_DT ASC";
				
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			Debug.println("EdEligibilityDAO - findForACF801ReportsPayments :e" +e);
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] getEligibilityRecordsClientShareNonAcaOptOut(int maxRows,
			EdEligibilityCargo edEligibilityCargo)
			throws GenericRunTimeException {
		EDBCLogger.debug("getEligibilityRecordsClientShareNonAcaOptOut START");
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			String whereClause = "CASE_NUM = "
					+ edEligibilityCargo.getCaseNum()
					+ " AND CURRENT_ELIG_IND = 'P'"
					+ " AND CG_STATUS_CD = 'AP'"
					+ " AND DELETE_SW = 'N'"
					+ " AND payment_end_dt is null";
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			EDBCLogger.debug("getEligibilityRecordsClientShareNonAcaOptOut END");
			return getReturnCargo(map);
		} catch (Exception e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findEdgForProgramsForManualIssuance(int maxRows,
			EdEligibilityCargo eligCargo) throws GenericRunTimeException {
		
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("( "+strLiteralCaseNum2);
			sb.append(eligCargo.getCaseNum());
			sb.append(strLiteralAndtypeofassistancecd);
			sb.append(eligCargo.getTypeOfAssistanceCd());
			sb.append("' AND PROGRAM_CD = '");
			sb.append(eligCargo.getProgramCd());
			sb.append("' AND DELETE_SW = 'N' ) ORDER BY EDG_NUM DESC ");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByIndvIdForQIPremiumData(int maxRows,long indvId)
	        throws GenericRunTimeException
	    {
	        try
	        {
	            String SQL = " SELECT CASE_NUM AS CASENUM, PAYMENT_BEG_DT AS PAYMENTBEGDT, PAYMENT_END_DT AS PAYMENTENDDT, TYPE_OF_ASSISTANCE_CD AS TYPEOFASSISTANCECD, rowid "
	            		+ "from ED_ELIGIBILITY WHERE TARGET_PERSON_ID =? AND DELETE_SW = 'N' AND CG_STATUS_CD = 'AP' AND CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = 'MA' AND TYPE_OF_ASSISTANCE_CD IN ('MS03','MS05')";
	            List params = new ArrayList();
	            params.add(indvId);
	            Debug.println(SQL.toString());
	          
	            EdEligibilityCargo[] cargoArray = getCargoArray(SQL.toString(), params, EdEligibilityCargo.class);
	            
				return cargoArray;
			} catch (Exception e) {
				log(ILog.ERROR, e.getMessage());
				throw new GenericRunTimeException(e.getMessage(),e);
			}
	   } 
	
	public EdEligibilityCargo[] findByCaseNumberEdgTraceIdforNDHCREN17(int maxRows, long bdCaseNum,
            String edgTraceIdList)
            throws GenericRunTimeException {

      Map<String, Object> map = new HashMap<String, Object>();
      try {
            String whereClause = "CASE_NUM = " + bdCaseNum + " "
                         +  strLiteralAndEdgTraceIdIn
                         + edgTraceIdList + ")";
            map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
            return getReturnCargo(map);
      } catch (Exception e) {
            log(ILog.ERROR, e.getMessage());
            throw new GenericRunTimeException(e.getMessage(),e);
      }

}
	
	public EdEligibilityCargo[] findByEligibilityCertifiedFfmWpDeniedOrTerminatedForMA(int maxRow,
			String runDt) throws GenericRunTimeException, ParseException {

		StringBuffer query = new StringBuffer();
		query.append("SELECT * ");
		query.append(" FROM ED_ELIGIBILITY ");
		query.append(" WHERE CURRENT_ELIG_IND ='A' ");
		query.append(" AND PROGRAM_CD ='MA'");
		query.append(" AND trunc(EDBC_RUN_DT) = to_date(?, 'mm/dd/yyyy') ");
		query.append(" AND PAYMENT_END_DT IS NULL");
		query.append(" AND DELETE_SW ='N'");
		query.append(" AND (CG_STATUS_CD ='TN' OR CG_STATUS_CD = 'DN') AND EL.TARGET_PERSON_ID IS NOT NULL ");
		
		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();
		parms.add(runDt);
	
		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	
	public EdEligibilityCargo[] findByEligibilityCertifiedFfmWpApprovedForMA(int maxRow,
			String runDt) throws GenericRunTimeException, ParseException {

		StringBuffer query = new StringBuffer();
		query.append(" SELECT * FROM ED_ELIGIBILITY WHERE 1=1 AND PAYMENT_END_DT IS NULL AND CURRENT_ELIG_IND = 'A' AND PROGRAM_CD = 'MA' ");
		query.append(" AND CG_STATUS_CD = 'AP' AND DELETE_SW ='N'");
		
		String sSQL = query.toString();
		List<Object> parms = new ArrayList<Object>();
		parms.add(runDt);
	
		try {
			SQLCommand command = getSqlCommandForUpdate(query.toString(),parms);
			Collection<Map<String, Object>> results = (Collection<Map<String, Object>>) command
					.execute();
			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				resultList.add(newCargo);
			}
			EdEligibilityCargo finalColrows[] = new EdEligibilityCargo[resultList
					.size()];
			resultList.toArray(finalColrows);
			return finalColrows;
		} catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findByCaseNumConversionApproved(int maxRows,
		EdEligibilityCargo cargo) throws GenericRunTimeException {
	try {
		StringBuilder sb = new StringBuilder();
		sb.append("CASE_NUM =  ");
		sb.append(cargo.getCaseNum());
		sb.append("AND TARGET_PERSON_ID = ");
		sb.append(cargo.getTargetPersonId());
		sb.append(" AND CREATE_USER_ID = '");
		sb.append(cargo.getCreateUserId());
		sb.append("' AND PROGRAM_CD = '");
		sb.append(cargo.getProgramCd());
		sb.append("' AND DELETE_SW = 'N' ");
		sb.append(" AND CURRENT_ELIG_IND = 'A'");
		sb.append(" AND CG_STATUS_CD = 'AP'");
		sb.append(" AND PAYMENT_END_DT IS NULL");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
		return getReturnCargo(map);
	} catch (Exception e) {
		log(ILog.ERROR, e.getMessage());
		throw new GenericRunTimeException(e.getMessage(),e);
	}
}
	
	public EdEligibilityCargo[] getCcapByCaseNum(int maxRows,long caseNum) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM IN ("+ caseNum
	                + " ) AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD in ('CD') "
	                + " AND CG_STATUS_CD IN ('AP')"
	                + "and payment_end_dt is null";
					
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	    		log(ILog.ERROR, e.getMessage());
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	public EdEligibilityCargo[] findByCaseNumNotDeletedForPayee(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuffer whereClause = new StringBuffer();
			whereClause.append(" CASE_NUM = "+ cargo.getCaseNum());
			whereClause.append(" AND DELETE_SW = 'N' AND TYPE_OF_ASSISTANCE_CD = 'TP01' AND ROWNUM = 1");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Find latest eligible records.
	 *
	 * @param maxRows the max rows
	 * @param cargo the cargo
	 * @return the ed eligibility cargo[]
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] findLatestEligibleRecords(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException{

		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND current_elig_ind in ('A','P','V') "
					+ " AND payment_end_dt is null "
					+ " ORDER BY PAYMENT_BEG_DT DESC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	
	}
	
	/**
	 * Find TANF latest eligible records.
	 *
	 * @param maxRows the max rows
	 * @param cargo the cargo
	 * @return the ed eligibility cargo[]
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] findTANFLatestEligibleRecords(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException{

		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND CURRENT_ELIG_IND  NOT IN ('C') "
					+ " AND PROGRAM_CD='TF' "
					+ " ORDER BY PAYMENT_BEG_DT DESC,EDG_TRANSACTION_ID DESC ";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	
	}
	
	/**
	 * Find by case program delete sw order by payment beg dt.
	 *
	 * @param maxRows the max rows
	 * @param cargo the cargo
	 * @return the ed eligibility cargo[]
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] findByCaseProgramDeleteSwOrderByPaymentBegDt(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByCaseProgramDeleteSwOrderByPaymentBegDt" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		try {
			StringBuilder whereClause = new StringBuilder();
			whereClause.append(strLiteralCaseNum2 + cargo.getCaseNum());
			whereClause.append(strLiteralAndProgramCd + "'" + cargo.getProgramCd()+"' ");
			whereClause.append(strLiteralAndDeleteSw + cargo.getDeleteSw()+"' ");
			whereClause.append(strLiteralCurrentEligIndPV);
			whereClause.append(strLiteralOrderByPaymentBegDtDesc);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findAllRecordsForProgram(int maxRows, long caseNum, String programCd) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		try {
			String sql="Select A.* from ED_ELIGIBILITY A Where CASE_NUM = "+caseNum+" AND DELETE_SW = 'N'  AND CURRENT_ELIG_IND IN ('W','A','C','R')  AND PROGRAM_CD = '"+programCd+"'"+" ORDER BY PAYMENT_BEG_DT" ;
			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sql);

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
		}
		catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}   
		return colrows;	
	}
	
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdList(int maxRows,long caseNum,String edgTraceIds) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM IN ("+ caseNum
	                + " ) AND EDG_TRACE_ID IN ("+edgTraceIds
	                + " )";
					
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	    		log(ILog.ERROR, e.getMessage());
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}

	public EdEligibilityCargo[] findByCaseNumForEligibilityExp(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		
		Timestamp endDate = ALSOPUtil.getLastDayOfMonth(cargo.getPaymentEndDt());			

		Debug.println("findByCaseNumForEligibility" + maxRows);
		try {
			String whereClause = strLiteralCaseNum1 + " = "
					+ cargo.getCaseNum() + " AND CG_STATUS_CD = 'AP' "
					+ " AND CURRENT_ELIG_IND = 'A' " + " AND DELETE_SW  = 'N' " + "AND PROGRAM_CD in ('FS')"
					+ " AND ( PAYMENT_END_DT IS NULL OR"
					+ " PAYMENT_END_DT = "
					+ DateFormatter.getDateForWhereClauseAnsi(endDate)
					+ " )";

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			Debug.println("Error in findByCaseNumForEligibility finder "
					+ e);
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}

    /**
	 * Method findByLateDetermination, query for Late Determination.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByFSExpiditedSnap(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLateDetermination" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND IN ('P', 'S') AND  DELETE_SW = 'N'");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}	
	
	public EdEligibilityCargo[] findByVerifExpiditedSnap(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByLateDetermination" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'FS' AND PAYMENT_END_DT is NULL AND CURRENT_ELIG_IND IN ('P', 'V') AND  DELETE_SW = 'N' AND FS_EXPEDITED_SW = 'Y'");
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}	

	/**
	 * @author agsaraswat
	 *
	 * @param maxRows the max rows
	 * @param BiIssuanceTriggerCargo
	 * @return the ed eligibility cargo[]
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] findGrantAuthorizedRecord(int maxRows,BiIssuanceTriggerCargo cargo) throws GenericRunTimeException{

		Debug.println("findByCase " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		try {
			
			Timestamp endDate = ALSOPUtil.getLastDayOfMonth(cargo.getPaymentBeginDt());
			
			String whereClause = " CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND DELETE_SW = 'N' "
					+ " AND COVERAGE_GROUP = '"+cargo.getCoverageGroup()
					+ "' AND current_elig_ind in ('A','D','W') "
					+ " AND PROGRAM_CD='TF' AND CG_STATUS_CD  NOT IN ('TN','DN')"
					+ " AND TRUNC(last_day(PAYMENT_BEG_DT)) ="+
					DateFormatter.getDateForWhereClauseAnsi(endDate);

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	
	}
	
	
	
	/**
	 * CR-932
	 * Returns CCAP ED records updated on asOfDate
	 * @author tdatta
	 * @param maxRows 
	 * @param asOfDate
	 * @return EdEligibilityCargo
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] getCCAPCertificateTriggersForED(int maxRows, String asOfDate) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
	
		try {
			StringBuffer sqlQuery = new StringBuffer();
			sqlQuery.append("SELECT  DISTINCT PA.CASE_NUM, PA.CHILD_INDV_ID, PA.PROVIDER_ID, EL.TITLE_CODE, EL.ISP_ID, EL.COPAY_AMT, EL.EDG_SIZE, IE.LEVEL_OF_CARE_CD, EL.EDBC_ACTION_CD"	
					+" FROM ed_eligibility EL"
					+" INNER JOIN ED_INDV_ELIGIBILITY IE"			
					+" ON IE.case_num                  = EL.case_num"			
					+" AND IE.edg_trace_id             = EL.edg_trace_id"			
					+" INNER JOIN PM_PROVIDER_CHILD_ASSOC PA"			
					+" ON IE.case_num                  = PA.case_num"			
					+" AND IE.INDV_ID                  = PA.CHILD_INDV_ID"			
					+" WHERE EL.PROGRAM_CD             = 'CD'"			
					+" AND EL.DELETE_SW                = 'N'"		
					+" AND EL.CG_STATUS_CD            IN ('AP')"			
					+" AND EL.TITLE_CODE IN ('IN', 'DE', 'SU')"	
					+" AND EL.CURRENT_ELIG_IND        IN ('A')"			
					+" AND TRUNC(EL.EDBC_RUN_DT)       = Trunc(CAST ('"+asOfDate+"' AS DATE))"		
					+" AND Trunc(EL.ELIGIBILITY_BEG_DT)<=Trunc(CAST ('"+asOfDate+"' AS DATE))"		
					+" AND EL.PAYMENT_END_DT IS NULL"	
					+" AND IE.PART_STATUS_CD='EC'"			
					+" AND PA.ASSOCIATION_STATUS='AS'"			
					+" AND PA.HIST_NAV_IND IN ('S','P')"			
					+" AND (PA.ASSIGN_END_DT>=Trunc(CAST ('"+asOfDate+"' AS DATE)) OR PA.ASSIGN_END_DT IS NULL )"			
					+" AND (PA.CREATE_DT<>Trunc(CAST ('"+asOfDate+"' AS DATE)) OR PA.UPDATE_DT<>Trunc(CAST ('"+asOfDate+"' AS DATE)))");			


			
			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sqlQuery.toString());

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				if (null != rs.get("CASE_NUM")) {
					row.setCaseNum(((BigDecimal) rs.get("CASE_NUM")).longValue());
				}
				if (null != rs.get("PROVIDER_ID")) {
					row.setProviderId(((BigDecimal) rs.get("PROVIDER_ID")).intValue());
				}
				if(null != rs.get("CHILD_INDV_ID")){
					row.setChildIndvId(((BigDecimal) rs.get("CHILD_INDV_ID")).longValue());
				}
				if(null != rs.get("COPAY_AMT")){
					row.setCopayAmt(((BigDecimal) rs.get("COPAY_AMT")).intValue());
				}
				if(null != rs.get("EDG_SIZE")){
					row.setEdgSize(((BigDecimal) rs.get("EDG_SIZE")).longValue());
				}
				if(null != rs.get("LEVEL_OF_CARE_CD")){
					row.setLevelOfCareCd((String) rs.get("LEVEL_OF_CARE_CD"));
				}
				if (null != rs.get("TITLE_CODE")) {
					 row.setTitleCode((String)(rs.get("TITLE_CODE")));
				}				
				if (null != rs.get("ISP_ID")) {
					row.setIspId(((BigDecimal)rs.get("ISP_ID")).longValue());
				}		
				if (null != rs.get("EDG_TRACE_ID")) {
					row.setEdgTraceId(((BigDecimal)rs.get("EDG_TRACE_ID")).longValue());
				}
				resultList.add(row);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		}
		catch (Exception e) {
			Debug.println("EdEligibilityDAO - getCCAPCertificateTriggersForED :e" +e);
			throw new GenericRunTimeException(e.getMessage(), e);
		}
		return colrows;
	}

	
	/**
	 * CR-932
	 * Returns CCAP ED cancelled records 
	 * @author tdatta
	 * @param maxRows 
	 * @param ispIds
	 * @param childIndvIds
	 * @return EdEligibilityCargo
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] getCancelledEDRecordsForCCAPCerts(int maxRows, long[] ispIds) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
	
		
		final int length = ispIds.length;
		final StringBuffer ispIdsString = new StringBuffer();
	

		for (int i = 0; i < length; i++) {
			ispIdsString.append(ispIds[i]);
			

			if (!(i + 1 == length)) {
				ispIdsString.append(",");		
				
			}
		}
		ispIdsString.append(")");

		
		try {
			String sqlQuery = "SELECT  IE.INDV_ID AS CHILD_INDV_ID, PA.PROVIDER_ID, EL.COPAY_AMT, EL.EDG_SIZE,EL.edg_trace_id, IE.LEVEL_OF_CARE_CD, EL.EDBC_ACTION_CD	"
						+" FROM ed_eligibility EL"		
						+" INNER JOIN ED_INDV_ELIGIBILITY IE"		
						+" ON IE.case_num                  = EL.case_num"		
						+" AND IE.edg_trace_id             = EL.edg_trace_id"	
						+" INNER JOIN PM_PROVIDER_CHILD_ASSOC PA"			
						+" ON IE.case_num                  = PA.case_num"			
						+" AND IE.INDV_ID                  = PA.CHILD_INDV_ID"	
						+" WHERE EL.edg_trace_id IN ("+ispIdsString
						+" AND IE.PART_STATUS_CD='EC'";	

			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sqlQuery.toString());

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				if (null != rs.get("CASE_NUM")) {
					row.setCaseNum(((BigDecimal) rs.get("CASE_NUM")).longValue());
				}
				if (null != rs.get("PROVIDER_ID")) {
					row.setProviderId(((BigDecimal) rs.get("PROVIDER_ID")).intValue());
				}
				if(null != rs.get("CHILD_INDV_ID")){
					row.setChildIndvId(((BigDecimal) rs.get("CHILD_INDV_ID")).longValue());
				}
				if(null != rs.get("COPAY_AMT")){
					row.setCopayAmt(((BigDecimal) rs.get("COPAY_AMT")).intValue());
				}
				if(null != rs.get("EDG_SIZE")){
					row.setEdgSize(((BigDecimal) rs.get("EDG_SIZE")).longValue());
				}
				if(null != rs.get("LEVEL_OF_CARE_CD")){
					row.setLevelOfCareCd((String) rs.get("LEVEL_OF_CARE_CD"));
				}
				if (null != rs.get("TITLE_CODE")) {
					 row.setTitleCode((String)(rs.get("TITLE_CODE")));
				}				
				if (null != rs.get("ISP_ID")) {
					row.setIspId(((BigDecimal)rs.get("ISP_ID")).longValue());
				}		
				if (null != rs.get("EDG_TRACE_ID")) {
					row.setEdgTraceId(((BigDecimal)rs.get("EDG_TRACE_ID")).longValue());
				}
				resultList.add(row);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		}
		catch (Exception e) {
			Debug.println("EdEligibilityDAO - getCCAPCertificateTriggersForED :e" +e);
			throw new GenericRunTimeException(e.getMessage(), e);
		}
		return colrows;
	}
	
	public EdEligibilityCargo[] getOngoingRecordReviewOverride(int maxRows,EdEligibilityCargo cargo) throws GenericRunTimeException {
		Map<String, Object> map = new HashMap<String, Object>();
	    try{
	    	String whereClause = " CASE_NUM IN ("+ cargo.getCaseNum()
	                + " ) AND DELETE_SW = 'N' "
	                + " AND CURRENT_ELIG_IND = 'A' "
	                + " AND PROGRAM_CD = '" + cargo.getProgramCd() + "'"
	                + " and payment_end_dt is null";
					
	    map.put(FwConstants.READY_WHERE_CLAUSE, whereClause);
	    return getReturnCargo(map);
	    } catch(Exception e){
	    		log(ILog.ERROR, e.getMessage());
	           throw new GenericRunTimeException(e.getMessage(), e);
	    }
	}
	
	/**
	 * Added for ND-98930 to pick ongoing record based on EDG_NUM 
	 * @param maxRows
	 * @param edEligibilityCargo
	 * @return
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByEdgNumCurrentRecord(int maxRows, EdEligibilityCargo edEligibilityCargo) throws GenericRunTimeException {
		try {
			StringBuilder queryBuilder = new StringBuilder(SELECT_SQL).append(" WHERE 1 = 1");
			queryBuilder.append(" AND EDG_NUM = "+ edEligibilityCargo.getEdgNum());
			queryBuilder.append(" AND CURRENT_ELIG_IND = 'A' ");
			queryBuilder.append(" AND DELETE_SW = 'N' ");
			queryBuilder.append(" AND PAYMENT_END_DT IS NULL");
			return getCargoArray(queryBuilder.toString(),EdEligibilityCargo.class);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(), e);
		}
	}
	
	public EdEligibilityCargo[] findIfThisMonthIsAuthorized(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findIfThisMonthIsAuthorized" + strLiteralMaxRows + maxRows
				+ strLiteralCargo + cargo);
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			StringBuffer clause = new StringBuffer();
			clause.append("CASE_NUM = "
					+ cargo.getCaseNum()
					+ " AND  PROGRAM_CD = 'FS' AND CURRENT_ELIG_IND IN ('A') AND  DELETE_SW = 'N'"
					+ " AND PAYMENT_BEG_DT = "+DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt()));
			Debug.println(clause.toString());
			map.put(FwConstants.READY_WHERE_CLAUSE, clause.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	/**
	 * Method findByAuthRecordsFromBegDt, query by Authorized Records.
	 *
	 * @param maxRows
	 *            int
	 * @param cargo
	 *            EdEligibilityCargo
	 * @return EdEligibilityCargo[]
	 * @throws GenericRunTimeException
	 */
	public EdEligibilityCargo[] findByAuthRecordsFromBegDt(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		Debug.println("findByAuthRecordsFromBegDt" + strLiteralMaxRows + maxRows + strLiteralCargo + cargo);
		try {
			String clause = strLiteralCaseNum2
					+ cargo.getCaseNum()
					+ " AND  EDG_NUM= "
					+ cargo.getEdgNum()
					+ strLiteralAndDeleteSWN
					+ " AND  CURRENT_ELIG_IND = 'A' "
					+ " AND ((PAYMENT_END_DT is null) OR (PAYMENT_END_DT>="
					+ DateFormatter.getDateForWhereClauseAnsi(cargo.getPaymentBegDt())
					+ strLiteralclparenthesis;

			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, clause);
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByProgStatusCode(int maxRows,
			EdEligibilityCargo cargo) throws GenericRunTimeException {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append(" CASE_NUM = '"+cargo.getCaseNum()+"'");
			sb.append(" AND PROGRAM_CD = '"+cargo.getProgramCd()+"'");
			sb.append(" AND CG_STATUS_CD = '"+cargo.getCgStatusCd()+"'");
			sb.append(" AND PAYMENT_END_DT  IS NULL");
			sb.append(" AND DELETE_SW = 'N'");
			sb.append(" AND CURRENT_ELIG_IND = 'A'");
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(FwConstants.READY_WHERE_CLAUSE, sb.toString());
			return getReturnCargo(map);
		} catch (Exception e) {
			log(ILog.ERROR, e.getMessage());
			throw new GenericRunTimeException(e.getMessage(),e);
		}
	}
	
	public EdEligibilityCargo[] findByProgStatusCodeMA(int maxRows, EdEligibilityCargo cargo) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		try {
			StringBuilder sb = new StringBuilder();
			sb.append("SELECT * FROM ( ");
			sb.append("SELECT * FROM ED_ELIGIBILITY WHERE");
			sb.append(" CASE_NUM = '"+cargo.getCaseNum()+"'");
			sb.append(" AND PROGRAM_CD = '"+cargo.getProgramCd()+"'");
			sb.append(" AND CG_STATUS_CD = '"+cargo.getCgStatusCd()+"'");
			sb.append(" AND PAYMENT_END_DT  IS NULL");
			sb.append(" AND DELETE_SW = 'N'");
			sb.append(" AND CURRENT_ELIG_IND = 'A'");
			sb.append( "ORDER BY DI_ACTION_DT DESC");
			sb.append( " ) T WHERE ROWNUM = 1 ");
			
			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sb.toString());

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			DefaultPropertyPopulator cargoPopulator = new DefaultPropertyPopulator();
			cargoPopulator.setMapper(new CargoPropertyMapper());
			for (Map<String, Object> result : results) {
				EdEligibilityCargo newCargo = new EdEligibilityCargo();
				ObjectPopulator populator = new ObjectPopulator(result,
						newCargo, cargoPopulator);
				populator.execute();
				v.add(newCargo);
			}
			colrows = new EdEligibilityCargo[v.size()];
			v.toArray(colrows);
		}
		catch (CheckedApplicationException e) {
			throw new GenericRunTimeException(e.getMessage(), e);
		}   
		return colrows;	
	}
	
	/**
	 * ND-110228
	 * Returns CCAP ED records updated on asOfDate
	 * @author tdatta
	 * @param maxRows 
	 * @param asOfDate
	 * @return EdEligibilityCargo
	 * @throws GenericRunTimeException the generic run time exception
	 */
	public EdEligibilityCargo[] getCCAPCertificateTriggersWithoutAssocsForED(int maxRows, String asOfDate, Long[] activeCaseNumbersWithAssoc) throws GenericRunTimeException {
		EdEligibilityCargo[] colrows = null;
		
		final int length = activeCaseNumbersWithAssoc.length;
		final StringBuffer activeCaseNumbersWithAssocString = new StringBuffer();
	
		if (activeCaseNumbersWithAssoc!=null && activeCaseNumbersWithAssoc.length>0 && activeCaseNumbersWithAssoc[0]!=null ){
			for (int i = 0; i < length; i++) {
				activeCaseNumbersWithAssocString.append(activeCaseNumbersWithAssoc[i]);		
	
				if (!(i + 1 == length)) {
					activeCaseNumbersWithAssocString.append(",");							
				}
			}
			activeCaseNumbersWithAssocString.append(")");
		}
	
		try {
			StringBuffer sqlQuery = new StringBuffer();
			sqlQuery.append("SELECT  DISTINCT PA.CASE_NUM, PA.CHILD_INDV_ID, PA.PROVIDER_ID, EL.TITLE_CODE, EL.ISP_ID, EL.COPAY_AMT, EL.EDG_SIZE, IE.LEVEL_OF_CARE_CD, EL.EDBC_ACTION_CD"	
					+" FROM ed_eligibility EL"
					+" INNER JOIN ED_INDV_ELIGIBILITY IE"			
					+" ON IE.case_num                  = EL.case_num"			
					+" AND IE.edg_trace_id             = EL.edg_trace_id"			
					+" INNER JOIN PM_PROVIDER_CHILD_ASSOC PA"			
					+" ON IE.case_num                  = PA.case_num"			
					+" AND IE.INDV_ID                  = PA.CHILD_INDV_ID"			
					+" WHERE EL.PROGRAM_CD             = 'CD'"			
					+" AND EL.DELETE_SW                = 'N'"		
					+" AND EL.CG_STATUS_CD            IN ('AP')"			
					+" AND EL.TITLE_CODE IN ('IN', 'DE', 'SU')"	
					+" AND EL.CURRENT_ELIG_IND        IN ('A')"			
					+" AND TRUNC(EL.EDBC_RUN_DT)       = Trunc(CAST ('"+asOfDate+"' AS DATE))"		
					+" AND Trunc(EL.ELIGIBILITY_BEG_DT)<=Trunc(CAST ('"+asOfDate+"' AS DATE))"		
					+" AND EL.PAYMENT_END_DT IS NULL"	
					+" AND IE.PART_STATUS_CD='XC'"			
					+" AND PA.ASSOCIATION_STATUS='AS'"			
					+" AND PA.HIST_NAV_IND IN ('S','P')"			
					+" AND (PA.ASSIGN_END_DT>=Trunc(CAST ('"+asOfDate+"' AS DATE)) OR PA.ASSIGN_END_DT IS NULL )"			
					+" AND (PA.CREATE_DT<>Trunc(CAST ('"+asOfDate+"' AS DATE)) OR PA.UPDATE_DT<>Trunc(CAST ('"+asOfDate+"' AS DATE)))");
			
			if (activeCaseNumbersWithAssoc!=null && activeCaseNumbersWithAssoc.length>0 && activeCaseNumbersWithAssoc[0]!=null &&  !activeCaseNumbersWithAssocString.toString().contains("null")){
				sqlQuery.append(" AND CASE_NUM IN ("+activeCaseNumbersWithAssocString);			
			}

			
			ArrayList<EdEligibilityCargo> v = new ArrayList<EdEligibilityCargo>();
			SQLCommand command = getSqlCommand(sqlQuery.toString());

			ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) command
					.execute();

			List<EdEligibilityCargo> resultList = new ArrayList<EdEligibilityCargo>();
			
			for (Map<String, Object> rs : results) {
				EdEligibilityCargo row = new EdEligibilityCargo();
				if (null != rs.get("CASE_NUM")) {
					row.setCaseNum(((BigDecimal) rs.get("CASE_NUM")).longValue());
				}
				if (null != rs.get("PROVIDER_ID")) {
					row.setProviderId(((BigDecimal) rs.get("PROVIDER_ID")).intValue());
				}
				if(null != rs.get("CHILD_INDV_ID")){
					row.setChildIndvId(((BigDecimal) rs.get("CHILD_INDV_ID")).longValue());
				}
				if(null != rs.get("COPAY_AMT")){
					row.setCopayAmt(((BigDecimal) rs.get("COPAY_AMT")).intValue());
				}
				if(null != rs.get("EDG_SIZE")){
					row.setEdgSize(((BigDecimal) rs.get("EDG_SIZE")).longValue());
				}
				if(null != rs.get("LEVEL_OF_CARE_CD")){
					row.setLevelOfCareCd((String) rs.get("LEVEL_OF_CARE_CD"));
				}
				if (null != rs.get("TITLE_CODE")) {
					 row.setTitleCode((String)(rs.get("TITLE_CODE")));
				}				
				if (null != rs.get("ISP_ID")) {
					row.setIspId(((BigDecimal)rs.get("ISP_ID")).longValue());
				}		
				if (null != rs.get("EDG_TRACE_ID")) {
					row.setEdgTraceId(((BigDecimal)rs.get("EDG_TRACE_ID")).longValue());
				}
				resultList.add(row);
			}
			colrows = new EdEligibilityCargo[resultList.size()];
			resultList.toArray(colrows);
		}
		catch (Exception e) {
			Debug.println("EdEligibilityDAO - getCCAPCertificateTriggersForED :e" +e);
			throw new GenericRunTimeException(e.getMessage(), e);
		}
		return colrows;
	}
}