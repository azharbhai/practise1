/**
 * This package is used for all Correspondence related rules classes.
 */
package gov.state.nextgen.common.bo;
import gov.state.nextgen.common.cargo.custom.*;
import gov.state.nextgen.common.cargo.custom.*;
import gov.state.nextgen.common.cargo.custom.*;
import gov.state.nextgen.common.cargo.custom.*;
import gov.state.nextgen.common.cargo.custom.*;
import gov.state.nextgen.common.collection.custom.ArApplicationForAidCollection;
import gov.state.nextgen.common.collection.custom.BiFsDetailCollection;
import gov.state.nextgen.common.collection.custom.BiSupportiveServicesCollection;
import gov.state.nextgen.common.collection.custom.CiAppRelationshipCollection;
import gov.state.nextgen.common.collection.custom.CoManualDataCollection;
import gov.state.nextgen.common.collection.custom.CoMassMailingReqCollection;
import gov.state.nextgen.common.collection.custom.CoNodRequestDetailCollection;
import gov.state.nextgen.common.collection.custom.CoRequestHistoryCollection;
import gov.state.nextgen.common.collection.custom.CoRequestHistoryDetailCollection;
import gov.state.nextgen.common.collection.custom.CoRequestPosoCollection;
import gov.state.nextgen.common.collection.custom.CoRequestRecipientsCollection;
import gov.state.nextgen.common.collection.custom.CoTempXmlCollection;
import gov.state.nextgen.common.collection.custom.DcAuthRepCollection;
import gov.state.nextgen.common.collection.custom.DcCaseAddressesCollection;
import gov.state.nextgen.common.collection.custom.DcCaseProgramCollection;
import gov.state.nextgen.common.collection.custom.DcEmailDetailsCollection;
import gov.state.nextgen.common.collection.custom.DcEmergencyAssistCollection;
import gov.state.nextgen.common.collection.custom.DcHeadOfHouseholdCollection;
import gov.state.nextgen.common.collection.custom.DcIndvCollection;
import gov.state.nextgen.common.collection.custom.DcIndvNonCooperationCollection;
import gov.state.nextgen.common.collection.custom.DcPhnDetailsCollection;
import gov.state.nextgen.common.collection.custom.DcVehiclesCollection;
import gov.state.nextgen.common.collection.custom.EdCaseRecertDatesCollection;
import gov.state.nextgen.common.collection.custom.EdChangeReportingDtlsCollection;
import gov.state.nextgen.common.collection.custom.EdDcIndvDisqPenaltiesCollection;
import gov.state.nextgen.common.collection.custom.EdEligibilityCollection;
import gov.state.nextgen.common.collection.custom.EdEmerAssistCollection;
import gov.state.nextgen.common.collection.custom.EdIndvEligibilityCollection;
import gov.state.nextgen.common.collection.custom.EdSnapWorkRegCollection;
import gov.state.nextgen.common.collection.custom.EdSnapWorkRegIndvCollection;
import gov.state.nextgen.common.collection.custom.EdVerificationChecklistCollection;
import gov.state.nextgen.common.collection.custom.In1095bNormalizedCollection;
import gov.state.nextgen.common.collection.custom.InStDelinquentNoticeCollection;
import gov.state.nextgen.common.collection.custom.MoEmployeesCollection;
import gov.state.nextgen.common.collection.custom.TcClockDetailsCollection;
import gov.state.nextgen.common.collection.custom.TcExtendedBnftDetailsCollection;
import gov.state.nextgen.common.collection.custom.TcTransactionsCollection;
import gov.state.nextgen.common.collection.custom.VCiCaseIndvDetailsCollection;
import gov.state.nextgen.common.collection.custom.VCoEligIndvAgeTypeAssistCollection;
import gov.state.nextgen.common.collection.custom.VCoRequestCollection;
import gov.state.nextgen.common.collection.custom.VDcCaseIndvDetailsCollection;
import gov.state.nextgen.common.collection.custom.VMoEmployeeOfficeCollection;
import gov.state.nextgen.common.collection.custom.WcActivityAssignmentCollection;
import gov.state.nextgen.common.collection.custom.WcEmpPlanCollection;
import gov.state.nextgen.common.collection.custom.WcReconPartHrsCollection;
import gov.state.nextgen.common.exception.CoException;
import gov.state.nextgen.common.exception.NoDataFoundException;
import gov.state.nextgen.common.util.ALSOPUtil;
import gov.state.nextgen.common.util.CoConstants;
import gov.state.nextgen.common.util.CoDAOFactory;
import gov.state.nextgen.common.util.CoDateFactory;
import gov.state.nextgen.common.util.CoDebugger;
import gov.state.nextgen.common.util.CoRequestGenerator;
import gov.state.nextgen.common.util.CorrespondenceServices;
import gov.state.nextgen.common.util.DateFormatter;
import gov.state.nextgen.common.util.IZeroToleranceBO;
import gov.state.nextgen.common.util.ReferenceTableAccess;
import gov.state.nextgen.common.util.RpUtils;
import gov.state.nextgen.common.util.StringUtils;
import gov.state.nextgen.common.util.ZeroToleranceBO;
import gov.state.nextgen.framework.business.bo.AbstractBO;
import gov.state.nextgen.framework.business.entities.FwDataElementListCargo;
import gov.state.nextgen.framework.business.entities.cargo.custom.FwDate;
import gov.state.nextgen.framework.dao.custom.IConnection;
import gov.state.nextgen.framework.exception.ApplicationException;
import gov.state.nextgen.framework.exception.FrameworkException;
import gov.state.nextgen.framework.exception.GenericBatchException;
import gov.state.nextgen.framework.util.FwServiceFactory;
import gov.state.nextgen.framework.util.ILog;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import com.deloitte.common.objects.domain.BinaryDocument;
import com.deloitte.common.objects.domain.TextDocument;


/**
 * Methods calls are static and calls collection and DAOs to access Data from
 * respective database tables.
 * 
 */


@SuppressWarnings({ "rawtypes", "unchecked", "unused" ,"static-access", "deprecation"})
public class CoDAOServices extends AbstractBO {
	private transient Connection conn;
	private boolean isOnline = true;
	ILog log = CoDebugger.getLogger();
	/**
	 * The old method signature was getConnection(). This will be used in case
	 * the calling program does not need to sgetDcCaseIndvByCaseNumet the connection. The calling
	 * program may either pass a connection using setConnection(Connection conn)
	 * or ask CoDAOServices to obtain its own connection using this method.
	 * 
	 * @return boolean
	 */
	public boolean setConnection() {
		long initialTimeInMillisec = new FwDate().getTimeInMillis();
		boolean freshConnection = false;
		try {
			if ((conn == null) || conn.isClosed()) {
				IConnection conManager = (IConnection) FwServiceFactory.getInstance().create(IConnection.class);
				conn = conManager.getDefaultConnection();
				freshConnection = true;
			}
		} catch (Exception e) {
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException("CoDAOServices - setConnection - exception -Problem in getting the database connection "	+ e.getMessage(), e);
		}
		long finalTimeinMillisec =  new FwDate().getTimeInMillis();
		if (freshConnection) {
			long elapsedTimeInMillisec = finalTimeinMillisec - initialTimeInMillisec;
		}
		return freshConnection;
	}

	/**
	 * 
	 * @return
	 */
	public boolean openConnection() {
		return setConnection();
	}

	/**
	 * Overloaded openConnection
	 * @param aConn
	 * @return
	 */
	private Connection openConnection(Connection aConn) {
		long initialTimeInMillisec =  new FwDate().getTimeInMillis();
		boolean freshConnection = false;
		try {
			if ((aConn == null) || aConn.isClosed()) {
				IConnection conManager = (IConnection) FwServiceFactory.getInstance().create(IConnection.class);
				aConn = conManager.getDefaultConnection();
				freshConnection = true;
			}
		} catch (Exception e) {
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException("CoDAOServices - setConnection - exception -Problem in getting the database connection "	+ e.getMessage(), e);
		}
		long finalTimeinMillisec =  new FwDate().getTimeInMillis();
		
		return aConn;
	}

	/**
	 * This method is used to pass a connection to this class.
	 * 
	 * @param argConnection
	 *            Connection
	 */
	public void setConnection(Connection argConnection) {
		conn = argConnection;
	}

	/**
	 * Method to get the connection from this class to use elsewhere.
	 * 
	 * @return Connection
	 */
	public Connection getConnection() {
		return conn;
	}

	/**
	 * Method to close the connection.
	 */
	public void closeConnection() {
		try {
			if ((conn != null) && !conn.isClosed()) {
				conn.close();
			}
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - closeConnection - exception - Unable to close Connection " + e.getMessage(), e);
		} 
	}

	/**
	 * Overloaded closeConnection method.
	 * @param aConn
	 */
	public void closeConnection(Connection aConn) {
		try {
			if ((aConn != null) && !aConn.isClosed()) {
				aConn.close();
			}
			closeConnection();// Closes the class level connection also.
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - closeConnection - exception - Unable to close Connection " + e.getMessage(), e);
		}
	}

	/**
	 * Method to get data from CO_TEXT based on DOC_ID and LANGUAGE_CD.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param languageCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCoTextData(COCorrespondence coRequest,
			String languageCode) throws CoException {

		Object[] result = null;
		CoTextCargo coTextCargo = new CoTextCargo();
		coTextCargo.setDocId(coRequest.getDocId());
		coTextCargo.setLanguageCd(languageCode);
		coTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoText", "findByLanguageCode", coTextCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getCoTextData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoTextData - exception - Select failed for CO_TEXT", 16031);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getCoTextData - exception - No data in CO_TEXT", 16031);
		}
		return result;
	}

	/**
	 * Method to get all mass generatable documents findAllMassEnableRows.
	 * 
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAllMassEnableDocs() throws CoException {
		Object[] result = null;
		CoMasterCargo coMasterCargo = new CoMasterCargo();
		coMasterCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMaster", "findAllMassEnableRows", coMasterCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getAllMassEnableDocs - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getAllMassEnableDocs - exception - Select failed for CO_MASTER", 16096);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getAllMassEnableDocs - exception - No data in CO_MASTER", 16028);
		}
		return result;
	}

	/**
	 * Method to get data from CO_MASTER based on DOC_ID.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoMasterData(COCorrespondence coRequest)
			throws CoException {

		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoMasterData - started");
		Object[] result = null;
		CoMasterCargo coMasterCargo = new CoMasterCargo();
		coMasterCargo.setDocId(coRequest.getDocId());

		coMasterCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMaster", "findByDocId", coMasterCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getCoMasterData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoMasterData - exception - Select failed for CO_MASTER FOR DOC id"+coRequest.getDocId(), 16096);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getCoMasterData - exception - No data in CO_MASTER", 16028);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoMasterData - timeTaken : " + (System.currentTimeMillis() - start));
		return result;
	}

	/**
	 * Method to get All docIds from CO_MASTER 
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getActiveDocIds() throws CoException {
		Object[] result = null;
		CoMasterCargo coMasterCargo = new CoMasterCargo();		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMaster", "findByAllActiveDocIds", coMasterCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getActiveDocIds - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getActiveDocIds - exception - Select failed for fetch DocIds from CO_MASTER");
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getActiveDocIds - exception - No data in CO_MASTER", 16028);
		}
		return result;
	}

	/**
	 * Method to get data from CO_MASTER_TEMPLETE based on DOC_ID and
	 * LANGUAGE_CD.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoMasterTemplateData(COCorrespondence coRequest)
			throws CoException {
		Object[] result = null;
		CoMasterTemplateCargo coMasterTemplateCargo = new CoMasterTemplateCargo();
		coMasterTemplateCargo.setDocId(coRequest.getDocId());
		coMasterTemplateCargo.setLanguageCd(coRequest.getLangCd());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMasterTemplate", "findByDocIdAndLangCd",
					coMasterTemplateCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getCoMasterTemplateData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoMasterTemplateData - exception - Select failed for CO_MASTER_TEMPLATE", 16097);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getCoMasterTemplateData - exception - No data in CO_MASTER_TEMPLATE",
					16029);
		}
		return result;
	}

	/**
	 * Method to get data from CO_TEMPLATE based on TEMPLATE_ID.
	 * 
	 * @param templateID
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getStaticData(String templateID) throws CoException {
		Object[] result = null;
		CoTemplateCargo coTemplateCargo = new CoTemplateCargo();
		coTemplateCargo.setTemplateId(templateID);
		coTemplateCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoTemplate", "findByTemplateIdAndDate", coTemplateCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getStaticData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getStaticData - exception - Select failed for CO_TEMPLATE", 16301);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getStaticData - exception - No data in CO_TEMPLATE", 16030);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APP_ADDR based on APP_NUMBER.
	 * 
	 * @param aAppNumberI
	 *            int
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAddresseeAddress(int aAppNumberI) throws CoException {
		Object[] result = null;
		ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
		arAppAddrCargo.setAppNum(String.valueOf(aAppNumberI));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppAddr", "findByapplicationNumber", arAppAddrCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getAddresseeAddress - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getAddresseeAddress - exception - Select failed for AR_APP_ADDR", 16081);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getAddresseeAddress - exception - No data in AR_APP_ADDR", 16016);
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_ADDRESSES based on CASE_NUM.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getNODAddresseeAddress(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(aAppNumberI);
		dcCaseAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByCaseNumber",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getNODAddresseeAddress - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getNODAddresseeAddress - exception - Select failed for DC_CASE_ADDRESSES", 16310);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getNODAddresseeAddress - exception - No data in DC_CASE_ADDRESSES",16035);
		}
		return result;
	}

	/**
	 * Method to get data from MO_OFFICES based on OFFICE_NUM.
	 * 
	 * @param aOfficeNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getOfficeInfo(long aOfficeNum) throws CoException {
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
		moOfficesCargo.setOfficeNum(aOfficeNum);
		moOfficesCargo.setEffBeginDt(today);
		moOfficesCargo.setEffEndDt(today);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByOfficeNumber", moOfficesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getOfficeInfo - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getOfficeInfo - exception - Select failed for MO_OFFICES", 16358);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getOfficeInfo - exception - No data in MO_OFFICES", 16064);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APP_INDV based on APP_NUM.
	 * 
	 * @param aAppNumberI
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualID(String aAppNumberI) throws CoException {
		Object[] result = null;
		ArAppIndvCargo arAppIndvCargo = new ArAppIndvCargo();
		arAppIndvCargo.setAppNum(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppIndv", "findByAppHOH", arAppIndvCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getIndividualID - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getIndividualID - exception - Select failed for AR_APP_INDV", 16083);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getIndividualID - exception - No data in AR_APP_INDV", 16018);
		}
		return getDcIndividual(((ArAppIndvCargo) result[0]).getIndvId());
	}

	/**
	 * Method to get data from DC_INDIVIDUAL based on INDV_ID
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcIndividual(long individualID) throws CoException {
		Object[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		dcIndvCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndividualIDandDate", dcIndvCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+individualID+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+individualID, 16319);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on EMP_ID.
	 * 
	 * @param empID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAdvisorInfo(long empID) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpId(empID);
		moEmployeesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		moEmployeesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpIdDates", moEmployeesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getAdvisorInfo - exception - " +e.getMessage(), e);
			throw new CoException("CoDAOServices - getAdvisorInfo - exception - Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getAdvisorInfo - exception - No data in MO_EMPLOYEES", 16061);
		}
		return result;
	}

	
	
	/**
	 * Method to get data from MO_OFFICE_ADDRESSES based on OFFICE_NUM.
	 * 
	 * @param officeNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getOfficeAddress(long officeNo) throws CoException {
		Object[] result = null;
		MoOfficeAddressesCargo moOfficeAddressesCargo = new MoOfficeAddressesCargo();
		moOfficeAddressesCargo.setOfficeNum(officeNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByOfficeNumber",
					moOfficeAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getOfficeAddress - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getOfficeAddress - exception - Select failed for MO_OFFICE_ADDRESSES",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getOfficeAddress - exception - No data in MO_OFFICE_ADDRESSES",
					16063);
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on CASE_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcCaseIndividual(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseAppNo);
		dcCaseIndividualCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseIndividualCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCoCaseNum",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getDcCaseIndividual - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcCaseIndividual - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getDcCaseIndividual - exception - No data in DC_CASE_INDIVIDUAL",
					16037);
		}
		return result;
	}

	/**
	 * Method to get data from V_DC_CASE_INDIVIDUALS based on CASE_NUM
	 * @author rparanjpe
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcCaseIndividualDetails(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseAppNo);
		dcCaseIndividualCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseIndividualCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCaseNumber",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getDcCaseIndividualDetails - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcCaseIndividualDetails - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getDcCaseIndividualDetails - exception - No data in DC_CASE_INDIVIDUAL",
					16037);
		}
		return result;
	}




	/**
	 * Method to get data from DC_CASE_INDIVIDUALS based on CASE_NUM
	 * @author mbhende
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcCaseIndividualCaseNumDate(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		Object [] params= new Object[3];
		params[0] = CoDateFactory.getTimestamp();
		params[1] = CoDateFactory.getTimestamp();
		params[2] = caseAppNo;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCaseNum",
					dcCaseIndividualCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getDcCaseIndividualCaseNumDate - exception - " +e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcCaseIndividualCaseNumDate - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getDcCaseIndividualCaseNumDate - exception - No data in DC_CASE_INDIVIDUAL",16037);
		}
		return result;
	}

	public DcRelationshipsCargo[] findAbsentParentByCase(long caseNum) throws CoException {
		DcRelationshipsCargo[] result = null;
		DcRelationshipsCargo dcRelationsCargo = new DcRelationshipsCargo();
		Object [] params= new Object[1];
		params[0] = caseNum;

		try {
			result = (DcRelationshipsCargo []) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRelationships", "findAbsentParentByCase", dcRelationsCargo, params,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - findAbsentParentByCase - exception - " +e.getMessage(), e);
			throw new CoException("CoDAOServices - findAbsentParentByCase - exception - Select failed for findAbsentParentByCase", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - findAbsentParentByCase - exception - No data in findAbsentParentByCase", 16061);
		}
		return result;
	}



	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on CASE_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return long -- Head of Household
	 * @throws CoException
	 * 
	 */
	public long getDcHeadOfHousehold(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseAppNo);
		dcCaseIndividualCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseIndividualCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCoCaseNum",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getDcHeadOfHousehold - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcHeadOfHousehold - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getDcHeadOfHousehold - exception - No data in DC_CASE_INDIVIDUAL",16037);
		}
		long hohID = -1;
		for (int i = 0; i < result.length; i++) {
			if (((DcCaseIndividualCargo) result[i]).getHeadOfHouseholdSw() == CoConstants.CHAR_Y) {
				hohID = ((DcCaseIndividualCargo) result[i]).getIndvId();
			}
		}
		return hohID;
	}

	/**
	 * Method to get data from MO_EMPLOYEE_CASES based on CASE _NUM.
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getMoEmployeeCases(long caseAppNo) throws CoException {
		Object[] result = null;
		MoEmployeeCasesCargo moEmployeeCasesCargo = new MoEmployeeCasesCargo();
		moEmployeeCasesCargo.setCaseNum(caseAppNo);
		moEmployeeCasesCargo.setAssignBeginDt(CoDateFactory.getTimestamp());
		moEmployeeCasesCargo.setAssignEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeCases", "findByCaseAssignment",
					moEmployeeCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getMoEmployeeCases - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getMoEmployeeCases - exception - Select failed for MO_EMPLOYEE_CASES", 16353);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getMoEmployeeCases - exception - No data in MO_EMPLOYEE_CASES",
					16059);
		}
		return result;
	}
	
	

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM, PROGRAM_CD,
	 * EDG_TRACE_ID, EDG_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param programCd
	 *            String
	 * @param traceId
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibility(long caseNum, String programCd,
			long traceId, long edgNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setProgramCd(programCd);
		edEligibilityCargo.setEdgTraceId(traceId);
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumber", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdEligibility - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdEligibility - exception - Select failed for ED_ELIGIBILITY", 16335);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM and for Type of
	 * assistance code = TP60.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityTp60(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumAndTypeCd",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdEligibilityTp60 - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdEligibilityTp60 - exception - Select failed for ED_ELIGIBILITY", 16335);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getEdEligibilityTp60 - exception - No data in ED_ELIGIBILITY: getEdEligibilityTp60", 16491);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_ELIGIBILITY based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvEligibility(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo edIndvEligibilityCargo = new EdIndvEligibilityCargo();
		edIndvEligibilityCargo.setCaseNum(caseNum);
		edIndvEligibilityCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCaseNumberEdgTraceIdForRP",
					edIndvEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdIndvEligibility - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdIndvEligibility - exception - Select failed for ED_INDV_ELIGIBILITY",
					16342);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_NOTICE_REASONS based on CASE_NUM and
	 * TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligReasons(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligNoticeReasonsCargo edEligNoticeReasonsCargo = new EdEligNoticeReasonsCargo();
		edEligNoticeReasonsCargo.setCaseNum(caseNum);
		edEligNoticeReasonsCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligNoticeReasons", "findByCaseNumber",
					edEligNoticeReasonsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdEligReasons - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdEligReasons - exception - Select failed for ED_ELIG_NOTICE_REASONS",
					16341);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_ELIG_REASONS based on CASE_NUM,
	 * EDG_TRACE_ID and INDV_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indivId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvEligReasons(long caseNum, long traceId,
			long indivId) throws CoException {
		Object[] result = null;
		EdIndvNoticeReasonsCargo edIndvNoticeReasonsCargo = new EdIndvNoticeReasonsCargo();
		edIndvNoticeReasonsCargo.setCaseNum(caseNum);
		edIndvNoticeReasonsCargo.setEdgTraceId(traceId);
		edIndvNoticeReasonsCargo.setIndvId(indivId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "findByCaseNumber",
					edIndvNoticeReasonsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdIndvEligReasons - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdIndvEligReasons - exception - Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_ELIG_REASONS based on CASE_NUM,
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvEligReasons(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdIndvNoticeReasonsCargo edIndvNoticeReasonsCargo = new EdIndvNoticeReasonsCargo();
		edIndvNoticeReasonsCargo.setCaseNum(caseNum);
		edIndvNoticeReasonsCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "findByCaseNum",
					edIndvNoticeReasonsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdIndvEligReasons - exception - Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}
		return result;
	}

	/**
	 * Method to get data from dc_employment based on indvID.
	 * 
	 * @param indvID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEmployementDetails(long indvID) throws CoException {
		Object[] result = null;
		DcEmploymentCargo dcEmploymentCargo = new DcEmploymentCargo();
		dcEmploymentCargo.setIndvId(indvID);
		dcEmploymentCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcEmploymentCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"DcEmployment", "findByIndvId", dcEmploymentCargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEmployementDetails - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEmployementDetails - exception - Select failed for DC_EMPLOYMENT", 16307);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getEmployementDetails - exception - No data in DC_EMPLOYMENT", 16033);
		}
		return result;
	}

	/**
	 * Method to get data from CO_REASON_TEXT based on REASON_ID, LANGUAGE_CD.
	 * 
	 * @param reason
	 *            String
	 * @param languageCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTextReasons(String reason, String languageCode)
			throws CoException {
		Object[] result = null;
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setReasonId(reason);
		coRTextCargo.setLanguageCd(languageCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByReasonCode", coRTextCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getCoTextReasons - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoTextReasons - exception - SELECT FAILED FOR CO_REASON_TEXT", 16871);
		}
		return result == null ? new CoReasonTextCargo[0] : result;
	}

	/**
	 * Method to get data from FW_DATA_ELEMENT_LIST based on DE_ELEMENT_ID.
	 * 
	 * @param elementId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getManualFields(long elementId) throws CoException {
		long startTime =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - started - elementId = " + elementId);
		Object[] result = null;
		FwDataElementListCargo fwDataElementListCargo = new FwDataElementListCargo();
		fwDataElementListCargo.setDeElementId(elementId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.framework.business.entities",
					"FwDataElementList", "findByPrimaryKey",
					fwDataElementListCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getManualFields - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getManualFields - exception - No data in FW_DATA_ELEMENT_LIST", 16092);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - timeTaken : " + (System.currentTimeMillis() - startTime));
		return result == null ? new FwDataElementListCargo[0] : result;
	}

	/**
	 * Method to get data from CO_MANUAL_FIELDS based on DOC_ID.
	 * 
	 * @param docId
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getManualFields(String docId) throws CoException {
		long startTime =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - started - docId = " + docId);
		Object[] result = null;
		CoManualFieldsCargo coManualFieldsCargo = new CoManualFieldsCargo();
		coManualFieldsCargo.setDocId(docId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoManualFields", "findByDocId", coManualFieldsCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getManualFields - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getManualFields - exception - No data in CO_MANUAL_FIELDS", 16091);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - timeTaken : " + (System.currentTimeMillis() - startTime));
		return result == null ? new CoManualFieldsCargo[0] : result;
	}

	/**
	 * Method to get data from CO_MANUAL_DATA based on CO_REQ_SEQ and
	 * FIELD_ORDER_NUM.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param fieldOrderNum
	 *            long
	 * @return CoManualDataCargo
	 * @throws CoException
	 * 
	 */
	public CoManualDataCargo getManualData(long coReqSeq, long fieldOrderNum)
			throws CoException {
		Object[] result = null;
		CoManualDataCargo coManualDataCargo = new CoManualDataCargo();
		coManualDataCargo.setCoReqSeq(coReqSeq);
		coManualDataCargo.setFieldOrderNum(fieldOrderNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoManualData", "findBySeqNum", coManualDataCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getManualData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getManualData - exception - Error in getting data CO_MANUAL_DATA", 16002);
		}
		return result == null || result.length == 0 ? null
				: (CoManualDataCargo) result[0];
	}

	/**
	 * Method to get all the manual data based on coReqSeq number.
	 * 
	 * @param coReqSeq
	 *            long
	 * @return CoManualDataCargo[]
	 * @throws CoException
	 * 
	 */
	public CoManualDataCargo[] getManualData(long coReqSeq) throws CoException {
		Object[] result = null;
		CoManualDataCargo coManualDataCargo = new CoManualDataCargo();
		coManualDataCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoManualData", "findAllBySeqNum", coManualDataCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getManualData - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getManualData - exception - Error in getting data CO_MANUAL_DATA", 16001);
		}
		return result == null || result.length == 0 ? null
				: (CoManualDataCargo[]) result;
	}

	/**
	 * Method to get data from CO_REQUEST based on CAES_APP_NUM, T2_CO_REQ_SEQ
	 * and T2_DOC_ID.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return String PrintString
	 * 
	 */
	public String getHistoryPrint(COCorrespondence coRequest) throws CoException{
		if (coRequest.getCoRptSeq() == 0) {

			try {
				CoRequestRecipientsCargo[] result0 = null;
				result0 = (CoRequestRecipientsCargo[]) getCoRequestAllRecipients(coRequest
						.getCoReqSeq());
				if (result0 != null && result0.length > 0) {
					coRequest.setCoRptSeq(result0[0].getCoRptSeq());
				}
			} catch (Exception ex) {
				CoDebugger.debugException("CoDAOServices - getHistoryPrint - exception - getting RPT_SEQ...", ex);
				throw new CoException("CoDAOServices - getHistoryPrint - exception - Error in getting data CO_MANUAL_DATA " + ex.getMessage());
			}
			CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection(
					conn);
			coRequestRecipientsCollection.setEJBSupported(false);
			CoRequestRecipientsCargo[] result = null;
			CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
			coRequestRecipientsCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestRecipientsCargo.setCoRptSeq(coRequest.getCoRptSeq());
			coRequestRecipientsCargo.setActivate("GETPRINTSTRING");
			Object[] obj = { coRequestRecipientsCargo };
			try {
				result = (CoRequestRecipientsCargo[]) coRequestRecipientsCollection
						.select("findByReadFromBlob", obj);
			} catch (Exception e) {				
				if (result != null) {
					result[0].setRptPrintString(CoConstants.EMPTY_STRING);
				}
				CoDebugger.debugException("CoDAOServices - getHistoryPrint - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - getHistoryPrint - exception - Error in getting data CO_MANUAL_DATA " + e.getMessage());
			}
			return (result != null && result.length == 0) ? CoConstants.EMPTY_STRING
					: result[0].getRptPrintString();

		} else {
			CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection(
					conn);
			coRequestRecipientsCollection.setEJBSupported(false);
			CoRequestRecipientsCargo[] result = null;
			CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
			coRequestRecipientsCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestRecipientsCargo.setCoRptSeq(coRequest.getCoRptSeq());
			coRequestRecipientsCargo.setActivate("GETPRINTSTRING");
			Object[] obj = { coRequestRecipientsCargo };
			try {
				result = (CoRequestRecipientsCargo[]) coRequestRecipientsCollection
						.select("findByReadFromBlob", obj);
			} catch (Exception e) {
				if (result != null) {
					result[0].setRptPrintString(CoConstants.EMPTY_STRING);
				}
				CoDebugger.debugException("CoDAOServices - getHistoryPrint - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - getHistoryPrint - exception - Error in getting data CO_MANUAL_DATA " + e.getMessage());
			}
			return (result != null && result.length == 0) ? CoConstants.EMPTY_STRING
					: result[0].getRptPrintString();
		}
	}

	/**
	 * Update exception Records in Batch into Co Request History.
	 * 
	 * @param coRequest
	 *            ArrayList
	 * @param connection
	 *            Connection
	 * @return boolean
	 * @throws CoException
	 * 
	 */
	public boolean updateExceptionRecords(List coRequest,
			Connection aConn) throws CoException {
		boolean successFlag = false;
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection(
				aConn);
		coRequestHistoryCollection.setEJBSupported(false);
		int sizeOfRecords = coRequest.size();
		CoRequestHistoryCargo coRequestHistoryCargo = null;
		for (int counter = 0; counter < sizeOfRecords; counter++) {
			coRequestHistoryCargo = new CoRequestHistoryCargo();

			// On hold logic is implemented for DHS-0805, 0198 and 0198-C

			if (((COCorrespondence) coRequest.get(counter)).isOnHoldTriggerSw() == true) {

				// do not update trigger as E; keep it as pending only

				return true;
			}

			// Begin BRGUS00108564 - bhattaj - Cancel the trigger if trigger
			// cancel flag is true

			try {

				COCorrespondence cOCorrespondence = (COCorrespondence) coRequest
						.get(counter);

				if (cOCorrespondence != null
						&& CoConstants.BATCH_CD.equals(cOCorrespondence
								.getRunMode())
								&& cOCorrespondence.isTriggerReadyToCancel() == true) {

					CoRequestHistoryCargo[] coRequestHistoryCargos = null;
					coRequestHistoryCargos = (CoRequestHistoryCargo[]) getCaseAppNumber(cOCorrespondence);

					if ((coRequestHistoryCargos != null) && coRequestHistoryCargos.length > 0) {
						// set pending trigger siwtch as 'C' for cancelling the
						// trigger
						coRequestHistoryCargos[0].setPendingTrigSw(CoConstants.CHAR_C);
						coRequestHistoryCargos[0].setActivate(CoConstants.NORMAL);
						coRequestHistoryCollection.setResults(coRequestHistoryCargos);
						coRequestHistoryCollection.setCargo(coRequestHistoryCargos[0]);
						coRequestHistoryCollection.update();

						// Begin BRGUS00121839- bhattaj - update
						// Co_Nod_request_detail table if there are overridden
						// edg
						String overriddenEdgList = cOCorrespondence
								.getOverriddenEdgList();
						if (overriddenEdgList != null) {
							CoNodRequestDetailCargo[] coNodRequestDetailCargos = (CoNodRequestDetailCargo[]) findByCoReqSeqCaseEdgs(
									cOCorrespondence.getCoReqSeq(),
									Long.parseLong(cOCorrespondence
											.getCaseAppNumber()),
											overriddenEdgList);

							// update sas_authorized_sw to X
							if (coNodRequestDetailCargos != null) {
								int coNodLength = coNodRequestDetailCargos.length;
								for (int j = 0; j < coNodLength; j++) {
									coNodRequestDetailCargos[j]
											.setSasAuthorizedSw('X');
								}
								CoNodRequestDetailCollection coNodCollection = new CoNodRequestDetailCollection(aConn);
								coNodCollection.setResults(coNodRequestDetailCargos);
								coNodCollection.update();
							}
						}
						// End BRGUS00121839- bhattaj

						// further processing not needed
						return true;
					}
				}
			} catch (Exception ex) {
				CoDebugger.debugException(
						"Exception while cancelling the trigger...", ex);
			}
			// End BRGUS00108564 - bhattaj

			// this trigger has errored -- must be marked as 'E' in pending trig
			// sw
			coRequestHistoryCargo.setActivate("UCRHE");
			coRequestHistoryCargo.setHistorySw(((COCorrespondence) coRequest.get(counter)).getHistorySwitch());
			coRequestHistoryCargo.setDocId(((COCorrespondence) coRequest.get(counter)).getDocId());
			coRequestHistoryCargo.setCoReqSeq(((COCorrespondence) coRequest.get(counter)).getCoReqSeq());
			CorrespondenceServices.formatCoObject(coRequestHistoryCargo,(COCorrespondence) coRequest.get(counter));
			coRequestHistoryCargo.setCreateDt(CoDateFactory.getSystemTimestamp());
			coRequestHistoryCargo.setUpdateDt(CoDateFactory.getSystemTimestamp());
			coRequestHistoryCargo.setUpdateUserId(((COCorrespondence) coRequest.get(counter)).getRequestUserId());
			coRequestHistoryCollection.add(coRequestHistoryCargo);
		}
		try {
			if (coRequestHistoryCollection.size() > 0) {
				successFlag = coRequestHistoryCollection.update();
			} else {
				CoDebugger.debugInformation("No records to Update --updateExceptionRecords()");
			}
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - updateExceptionRecords - exception - "+e.getMessage(), e);
			throw new CoException(" CoDAOServices - updateExceptionRecords - exception - Error while doing updateHistory() for exception triggers"
					+ e, 329);
		} finally {
			closeConnection(aConn);
		}
		return successFlag;
	}

	/**
	 * Method to update CO_REQUEST_HISTORY.
	 * 
	 * @param coRequestList
	 *            ArrayList
	 * @param printStringList
	 *            ArrayList
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int updateHistory(List coRequestList, List printStringList) throws CoException {
		int commitFlag = 0;
		boolean finalResult = false;
		// BRGUS00127047 - bhattaj - Partial trigger processing
		boolean multipleReprints = false;
		String casenum = "";
		String userid = "";
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
		coRequestHistoryDetailCollection.setEJBSupported(false);
		int sizeOfRecords = coRequestList.size();
		CoRequestHistoryCargo coRequestHistoryCargo = null;
		String str = null;
		java.sql.Timestamp tempPrintDate = null;
		CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = null;
		COCorrespondence coObject = null;


		for (int counter = 0; counter < sizeOfRecords; counter++) {
			coRequestHistoryCargo = new CoRequestHistoryCargo();
			coRequestHistoryCargo.setActivate("UCRH");
			str = printStringList.size() > counter ? (String) printStringList
					.get(counter) : "";
					coObject = (COCorrespondence) coRequestList.get(counter);
					// BRGUS00127047 - bhattaj - Partial trigger Processing
					if (CoConstants.CHAR_Y == coObject.getHistorySwitch()
							&& CoConstants.CHAR_B == coObject.getPendingTrigSw()) {
						CoRequestHistoryDetailCargo cargoDetail = new CoRequestHistoryDetailCargo();
						cargoDetail.setCoReqSeq(coObject.getCoReqSeq());
						multipleReprints = checkMultipleReprints(cargoDetail);
					}

					casenum =  coObject.getCaseAppNumber();
					userid = coObject.getRequestUserId();
					BinaryDocument is = new BinaryDocument(str.getBytes());
					coRequestHistoryCargo.setHstPrintString(is);
					coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
					coRequestHistoryCargo.setHistorySw((coObject).getHistorySwitch());
					// BRGUS00107480 - NaredlaS Group 8 - CR 66557
					coRequestHistoryCargo.setMassGeneratedSw((coObject)
							.getMassGeneratedSw());
					coRequestHistoryCargo.setCoReqSeq(coObject.getCoReqSeq());
					CorrespondenceServices.formatCoObject(coRequestHistoryCargo,
							(COCorrespondence) coRequestList.get(counter));
					coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
					coRequestHistoryCargo.setUpdateBlob(coObject
							.getUpdateRequestHistoryBlob());
					coRequestHistoryCollection.add(coRequestHistoryCargo);
					finalResult = true;
					tempPrintDate = null;
					//if (finalResult) { commented since finalResult is always set true
						finalResult = false;
						coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
						coRequestHistoryDetailCargo.setActivate("UCRHD");
						coRequestHistoryDetailCargo.setPrintMode(coObject
								.getPrintMode());
						coRequestHistoryDetailCargo.setCoReqSeq(coObject.getCoReqSeq());
						coRequestHistoryDetailCargo.setCoDetSeq(coObject.getCoDetSeq());
						tempPrintDate = CoDateFactory.getTimestamp();
						coRequestHistoryDetailCargo.setPrintDt(tempPrintDate);
						coRequestHistoryDetailCargo.setUpdateDt(CoDateFactory
								.getTimestamp());
						coRequestHistoryDetailCargo.setCreateDt(CoDateFactory
								.getTimestamp());
						coObject.setPrintDate(tempPrintDate);
						coRequestHistoryDetailCollection
						.add(coRequestHistoryDetailCargo);
						// BRGUS00126421 - thatiparthis - Begin
						// BRGUS00160565 - NaredlaS - Added DOC Id FXX259 for 1010-SP
						if (coObject.getHistorySwitch() == CoConstants.CHAR_N
								&& compareDoc(coObject)) {
							try {
								if ((!coObject.getIsManualyGenerated())
										&& coObject.getReasonCdList() != null) {
									update1830PrintDt(coObject);
								}
								// draft sw is checked in doc builder in online, and in
								// Batch -
								// Draft sw == Y is not expected
							} catch (Exception e) {
								CoDebugger.debugException("CoDAOServices - updateHistory - exception -  Error while doing update1830PrintDt()"
										+ e.getMessage(), e);
								throw new CoException("CoDAOServices - updateHistory - exception - Error while doing update1830PrintDt()"
										+ e.getMessage(), 329);
							} // try catch ends here
						} // if ends here

						// BRGUS00132339 - NaredlaS - DHS - 1605 - TMA alert
						if (coObject.isPotentialTmapEligSw()
								&& CoConstants.TF0001_DOC_ID
								.equals(coObject.getDocId())) {
							CoHelper coHelper = new CoHelper();
							coHelper.generateAlertFor1605TMA(coObject, isOnline, conn);
						}
						// BRGUS00146620 - thatiparthis - CO Changes For STFS (DHS1078
						// and DHS-403)
						if (coObject.getHistorySwitch() == CoConstants.CHAR_N
								&& (("FXX326").equals(coObject.getDocId()) || ("FXX327").equals(coObject
										.getDocId()))) {
							try {
								if (coObject.getReasonCdList() != null) {
									update1078PrintDueDt(coObject);
								}
							} catch (Exception e) {
								CoDebugger.debugException(
										"CoDAOServices - updateHistory - exception - Error while doing update1078PrintDueDt()"
												+ e.getMessage(), e);
							} // try catch ends here
						}
						// Bhattaj - CR 20172
						if ("FXX089".equals(coObject.getDocId())
								&& coObject.getHistorySwitch() == CoConstants.CHAR_N) {
							Co1099BO co1099BO = new Co1099BO();
							co1099BO.update1099PrintSw(coObject);
						}



						// ////added by Jagannath dated on 01/11/2007
						if (coObject.getHistorySwitch() == CoConstants.CHAR_N
								&& coObject.getDocId().equals(CoConstants.FXX237)) {
							try {						
								update1830ZeroTolerance(coObject);
							} catch (Exception e) {
								CoDebugger.debugException("CoDAOServices - updateHistory - exception - Error while doing update1830ZeroTolerance()"
										+ e.getMessage(), e);
								throw new CoException(
										"CoDAOServices - updateHistory - exception -  Error while doing update1830ZeroTolerance()"
												+ e.getMessage(), 329);
							} // try catch ends here
						} // if ends here

					//}
		}
		try {
			// BRGUS00127047 - bhattaj - Partial update if multiple reprints
			// exist
			if (coRequestHistoryCollection.size() > 0
					&& multipleReprints == false) {
				String actionname = "Update:CoRequestHistory:" + casenum;
				StringBuffer issued = new StringBuffer("Issued by:");
				issued.append(userid);
				logStatement("CoDAOServices:updateHistory", actionname,issued.toString(),conn);
				finalResult = coRequestHistoryCollection.update();
				logStatement("","","",conn);
			}
			if (coRequestHistoryDetailCollection.size() > 0) {


				finalResult = coRequestHistoryDetailCollection.update();
			}
		} catch (Exception e) {
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			commitFlag = -1;
			throw new CoException(" Error while doing updateHistory()" + e, 329);
		} finally {
			closeConnection();
		}

		return commitFlag;
	}

	private boolean compareDoc(COCorrespondence coObject) {
		return  (compareFxDocIds(coObject))
				|| (compareFxDoc(coObject))
				|| (compareDocID(coObject));
	}

	private boolean compareFxDocIds(COCorrespondence coObject) {
		return coObject.getDocId().equals(
				CoConstants.FXX300_DOC_ID)
				|| coObject.getDocId().equals(
						CoConstants.FXX259_DOC_ID)
						|| coObject.getDocId().equals(
								CoConstants.FXX325_DOC_ID); 
	}

	private boolean compareFxDoc(COCorrespondence coObject) {
		return coObject.getDocId().equals(
				CoConstants.FXX323_DOC_ID)
				|| coObject.getDocId().equals(
						CoConstants.FXX310_DOC_ID)
						|| ("FXX042").equals(coObject.getDocId());
	}

	private boolean compareDocID(COCorrespondence coObject) {
		return ("FXX117").equals(coObject.getDocId())
				|| ("FXX041").equals(coObject.getDocId()) || ("FXX124").equals(coObject
						.getDocId());
	}

	public void logStatement(String moduleName, String actionName, String clientid, Connection con) throws SQLException{
	    log.log(CoConstants.CO_NAME,ILog.FATAL ,"CoDAOServices - logStatement - started");
	    CallableStatement callStmt = null;
	    boolean openedConnection = false;
	    try{
	    	CoDebugger.debugMessage("ND-89611 actionName :"+actionName);
	   // String sql = "{call DBMS_Application_INFO.SET_MODULE('"+ moduleName +"','"+ actionName+"')}";
	    String sqlNew = "{call DBMS_Application_INFO.SET_MODULE(?,?)}";
	    
	    	
	    	CoDebugger.debugMessage("ND-89611 actionName new  sql:"+sqlNew);
	    if (con == null || con.isClosed()) {
	        setConnection();
	        con = conn;
	        openedConnection = true;
	    }
	    callStmt = con.prepareCall(sqlNew);
	    callStmt.setString(1, moduleName);
	    callStmt.setString(2, actionName);
	    boolean result= callStmt.execute();	  
        log.log(CoConstants.CO_NAME,ILog.FATAL ,"CoDAOServices - logStatement - result : " + result);
	    }
	    catch(Exception ex){
	        CoDebugger.debugException("Exception  " + ex.getMessage(), ex);
	    }
	    finally{
	        if(callStmt != null){
	            callStmt.close();
	        }
	        if (openedConnection && con != null) {
	        	con.close();
	        }
	    }
	}



	/**
	 * Overloaded method to update Co History Tables using its own connection
	 * used during Batch.
	 * 
	 * @param coRequestList
	 *            ArrayList
	 * @param printStringList
	 *            ArrayList
	 * @param connection
	 *            Connection
	 * @param allRecipientCargo
	 *            ArrayList
	 * @param allPrintStringlist
	 *            ArrayList
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int updateHistory(List coRequestList,
			List printStringList, Connection aConn,
			List allRecipientCargo, List allPrintStringlist)
					throws CoException {
		int commitFlag = 0;
		boolean finalResult = false;
		// BRGUS00127047 - bhattaj - Partial trigger Processing for batch
		boolean multipleReprints = false;
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection(	aConn);
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection(aConn);
		coRequestHistoryDetailCollection.setEJBSupported(false);
		int sizeOfRecords = coRequestList.size();
		CoRequestHistoryCargo coRequestHistoryCargo = null;
		String str = null;
		java.sql.Timestamp tempPrintDate = null;
		CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = null;
		COCorrespondence coObject = null;
		for (int counter = 0; counter < sizeOfRecords; counter++) {
			coRequestHistoryCargo = new CoRequestHistoryCargo();
			coRequestHistoryCargo.setActivate("UCRH");
			coObject = (COCorrespondence) coRequestList.get(counter);
			// BRGUS00127047 - bhattaj - Partial Processing of trigger for batch
			if ((CoConstants.CHAR_Y == coObject.getHistorySwitch()) && (CoConstants.CHAR_B == coObject.getPendingTrigSw())) {
				CoRequestHistoryDetailCargo cargoDetail = new CoRequestHistoryDetailCargo();
				cargoDetail.setCoReqSeq(coObject.getCoReqSeq());
				multipleReprints = checkMultipleReprints(cargoDetail);
			}
			str = printStringList.size() > counter ? (String) printStringList.get(counter) : "";
			BinaryDocument is = new BinaryDocument(str.getBytes());
			coRequestHistoryCargo.setHstPrintString(is);
			coRequestHistoryCargo.setHistorySw(coObject.getHistorySwitch());
			coRequestHistoryCargo.setCoReqSeq(coObject.getCoReqSeq());
			// BRGUS00107480 - bhattaj - set Original Request Mass_generated_Sw
			// as it is
			coRequestHistoryCargo.setMassGeneratedSw(coObject
					.getMassGeneratedSw());
			CorrespondenceServices.formatCoObject(coRequestHistoryCargo,
					(COCorrespondence) coRequestList.get(counter));
			coRequestHistoryCargo.setCreateDt(CoDateFactory
					.getSystemTimestamp());
			coRequestHistoryCargo.setUpdateBlob(coObject
					.getUpdateRequestHistoryBlob());
			coRequestHistoryCargo.setUpdateDt(CoDateFactory
					.getSystemTimestamp());
			coRequestHistoryCargo.setUpdateUserId(coObject.getRequestUserId());
			coRequestHistoryCollection.add(coRequestHistoryCargo);
			finalResult = true;
			tempPrintDate = null;
			//if (finalResult) {  commented since finalResult is alw
				finalResult = false;
				coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
				coRequestHistoryDetailCargo.setActivate("UCRHD");
				coRequestHistoryDetailCargo.setPrintMode(coObject
						.getPrintMode());
				coRequestHistoryDetailCargo.setCoReqSeq(coObject.getCoReqSeq());
				coRequestHistoryDetailCargo.setCoDetSeq(coObject.getCoDetSeq());
				tempPrintDate = CoDateFactory.getTimestamp();
				coRequestHistoryDetailCargo.setPrintDt(tempPrintDate);
				coRequestHistoryDetailCargo.setUpdateDt(CoDateFactory
						.getSystemTimestamp());
				coRequestHistoryDetailCargo.setUpdateUserId(coObject
						.getRequestUserId());
				coObject.setPrintDate(tempPrintDate);
				coRequestHistoryDetailCollection
				.add(coRequestHistoryDetailCargo);

				// Bhattaj - CR 20172
				if ("FXX089".equals(coObject.getDocId())
						&& coObject.getHistorySwitch() == CoConstants.CHAR_N) {
					Co1099BO co1099BO = new Co1099BO(aConn);
					co1099BO.update1099PrintSw(coObject);
				}
				// BRGUS00146620 - thatiparthis - CO Changes For STFS (DHS1078
				// and DHS-403)
				if (coObject.getHistorySwitch() == CoConstants.CHAR_N
						&& (("FXX326").equals(coObject.getDocId()) || ("FXX327").equals(coObject.getDocId()))) {
					try {
						if (coObject.getReasonCdList() != null) {
							update1078PrintDueDt(coObject);
						}
					} catch (Exception e) {
						CoDebugger.debugException(
								" Error while doing update1078PrintDueDt()"
										+ e.getMessage(), e);
					} // try catch ends here
				}
				// BRGUS00160565 - NaredlaS - Added DOC Id FXX259 for 1010-SP
				if (coObject.getHistorySwitch() == CoConstants.CHAR_N
						&& compareDoc(coObject)) {
					try {
						if ((!coObject.getIsManualyGenerated())
								&& (coObject.getReasonCdList() != null)) {
							update1830PrintDt(coObject);
						}
						// draft sw is checked in doc builder in online, and in
						// Batch -
						// Draft sw == Y is not expected
					} catch (Exception e) {
						CoDebugger.debugException(
								" Error while doing update1830PrintDt() "
										+ e.getMessage(), e);
						throw new CoException(
								" Error while doing update1830PrintDt()"
										+ e.getMessage(), 329);
					} finally {
						closeConnection();
					}
					// try catch ends here
				} // if ends here
				// BRGUS00140034 - bhattaj
				// Bhattaj - CR 20680

				// BRGUS00132339 - NaredlaS - DHS - 1605 - TMA alert
				if (coObject.isPotentialTmapEligSw()
						&& CoConstants.TF0001_DOC_ID
						.equals(coObject.getDocId())) {
					CoHelper coHelper = new CoHelper();
					coHelper.generateAlertFor1605TMA(coObject, isOnline, conn);
				}



			//}

		}

		try {
			// BRGUS00127047 - bhattaj - Partial update if multiple reprints
			// exist
			if (coRequestHistoryCollection.size() > 0
					&& multipleReprints == false) {
				finalResult = coRequestHistoryCollection.update();

			}
			if (coRequestHistoryDetailCollection.size() > 0) {

				finalResult = coRequestHistoryDetailCollection.update();

			}
			for (int counter = 0; counter < sizeOfRecords; counter++) {
				if (coObject.getHistorySwitch() != CoConstants.HISTORY_TRIGGER_YES) {

					if (coObject.getAttachedDocs() != null) {
						updateRecipientBlobToHistory(
								(ArrayList) allRecipientCargo.get(counter),
								(ArrayList) allPrintStringlist.get(counter),
								aConn, null, coObject.getAttachedDocs());
					} else {

						updateRecipientBlobToHistory(
								(ArrayList) allRecipientCargo.get(counter),
								(ArrayList) allPrintStringlist.get(counter),
								aConn, null);
					}
				}
			}

		} catch (Exception e) {

			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			commitFlag = -1;
			throw new CoException(" Error while doing updateHistory()" + e, 329);
		} finally {
			closeConnection(aConn);
		}

		return commitFlag;
	}

	/**
	 * Overloaded method to update Co History Tables using its own connection
	 * used during Batch.
	 * 
	 * @param coRequestRecipientList
	 *            ArrayList
	 * @param printStringList
	 *            ArrayList
	 * @param connection
	 *            Connection
	 * @param createOrUpdateUserid
	 *            String
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int updateRecipientBlobToHistory(List coRequestRecipientList, List printStringList, Connection aConn, String createOrUpdateUserid) throws CoException {
		int commitFlag = 0;		
		int sizeOfRecords = 0;
		openConnection(aConn);
		if (coRequestRecipientList != null && printStringList != null
				&& coRequestRecipientList.size() == printStringList.size()) {
			sizeOfRecords = coRequestRecipientList.size();
		} else {
			closeConnection(aConn);
			throw new CoException("inconsistent recipient and printStringList --",329);
		}

		try {
			aConn = openConnection(aConn);
			CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection(aConn);
			coRequestRecipientsCollection.setEJBSupported(false);
			CoRequestRecipientsCargo coRequestRecipientsCargo = null;
			for (int counter = 0; counter < sizeOfRecords; counter++) {
				coRequestRecipientsCargo = (CoRequestRecipientsCargo) coRequestRecipientList
						.get(counter);
				coRequestRecipientsCargo.setRptPrintString((String) printStringList
						.get(counter));
				coRequestRecipientsCargo.setActivate("UpdateRequestRecipient");
				coRequestRecipientsCargo.setUpdateDt(CoDateFactory.getSystemTimestamp());
				coRequestRecipientsCargo.setUpdateUserId(createOrUpdateUserid);
				coRequestRecipientsCollection.add(coRequestRecipientsCargo);
			}
			if (coRequestRecipientsCollection.size() > 0) {
				coRequestRecipientsCollection.update();
			}
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - updateRecipientBlobToHistory - exception - "+e.getMessage(), e);
			CoDebugger.debugException("Exception " + e.getMessage(), e);
			commitFlag = -1;
			throw new CoException(
					" Error while doing updateRecipientBlobToHistory() sizeOfRecords = "
							+ sizeOfRecords + e, 329);
		} finally {
			closeConnection(aConn);
		}
		return commitFlag;
	}

	/**
	 * Overloaded method to update Co History Tables using its own connection
	 * used during Batch.
	 * 
	 * @param coRequestRecipientList
	 *            ArrayList
	 * @param printStringList
	 *            ArrayList
	 * @param connection
	 *            Connection
	 * @param createOrUpdateUserid
	 *            String
	 * @param attachedDocIds
	 *            String
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int updateRecipientBlobToHistory(List coRequestRecipientList,
			List printStringList, Connection aConn, String createOrUpdateUserid, String attachedDocIds) throws CoException {
		int commitFlag = 0;

		int sizeOfRecords = 0;
		if (coRequestRecipientList != null && printStringList != null
				&& coRequestRecipientList.size() == printStringList.size()) {
			sizeOfRecords = coRequestRecipientList.size();
		} else {
			try {
				throw new CoException(
						"inconsistent recipient and printStringList --", 000);
			} catch (Exception e) {
				log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
				throw new CoException(
						"inconsistent recipient and printStringList --", 000);
			} finally {
				closeConnection(aConn);
			}
		}
		try {
			CoRequestRecipientsCargo coRequestRecipientsCargo = null;
			String originalRecipientData = null;
			aConn = openConnection(aConn);
			CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection(aConn);
			coRequestRecipientsCollection.setEJBSupported(false);
			for (int counter = 0; counter < sizeOfRecords; counter++) {
				coRequestRecipientsCargo = (CoRequestRecipientsCargo) coRequestRecipientList
						.get(counter);

				// get recipient data and append docIDs
				originalRecipientData = getRecipientData(coRequestRecipientsCargo);
				if (originalRecipientData != null) {
					coRequestRecipientsCargo.setRecipientData(originalRecipientData
							+ CoConstants.FLATFILE_SEPARATOR + attachedDocIds);
				} else {
					coRequestRecipientsCargo.setRecipientData(CoConstants.SPACE
							+ CoConstants.FLATFILE_SEPARATOR + CoConstants.SPACE
							+ CoConstants.FLATFILE_SEPARATOR + attachedDocIds);
				}
				coRequestRecipientsCargo.setRptPrintString((String) printStringList
						.get(counter));
				coRequestRecipientsCargo
				.setActivate("UpdateRequestRecipientWithAttachedDocs");
				coRequestRecipientsCargo.setUpdateDt(CoDateFactory
						.getSystemTimestamp());
				coRequestRecipientsCargo.setUpdateUserId(createOrUpdateUserid);
				coRequestRecipientsCollection.add(coRequestRecipientsCargo);
			}
		
			if (coRequestRecipientsCollection.size() > 0) {
				coRequestRecipientsCollection.update();
			}
			} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - updateRecipientBlobToHistory - exception - "+e.getMessage(), e);
			CoDebugger.debugException("Exception " + e.getMessage(), e);
			commitFlag = -1;
			throw new CoException(
					" Error while doing updateRecipientBlobToHistory() sizeOfRecords = "
							+ sizeOfRecords + e, 329);
		} finally {
			closeConnection(aConn);
		}
		return commitFlag;
	}

	/**
	 * Method to update CO_REQUEST_HISTORY table.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return int
	 * 
	 */
	public int updateRequestHistory(COCorrespondence coRequest) {
		int commitFlag = 0;
		CoDebugger.debugMessage("updateRequestHistory:coRequest-->"+coRequest.toString());
		log.log(CoConstants.CO_NAME,ILog.INFO ,"At the start of updateRequestHistory");

		boolean finalResult = false;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("URH");
		coRequestHistoryCargo.setPendingTrigSw(coRequest.getPrintMode());
		coRequestHistoryCargo.setCoReqSeq(coRequest.getCoReqSeq());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);
		coRequestHistoryCargo.setRequestTypeCd(coRequest.getCaseAppFlag());
		coRequestHistoryCargo.setMiscParms(coRequest.getMiscParameters());
		coRequestHistoryCargo.setProgramCd(coRequest.getAssistanceProgramCode());
		try {
			if(null!=coRequest && 0==coRequest.getEmpId() && null!=coRequest.getCaseAppNumber()) {
				MoEmployeeCasesCargo[] moEmpCaseCargos = null;
				MoEmployeesCargo[] moEmPCargos = null;
				moEmpCaseCargos = (MoEmployeeCasesCargo[])getMoEmployeeCasesFromRequest(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmpCaseCargos != null && moEmpCaseCargos.length > 0) {
					coRequest.setEmpId(moEmpCaseCargos[0].getEmpId());
					moEmPCargos = (MoEmployeesCargo[])getBridgesWorkerOffice(coRequest.getEmpId());
					if (moEmPCargos != null && moEmPCargos.length > 0) {
						coRequest.setOfficeNumber(moEmPCargos[0].getPriOfficeNum());
					}
				}
			}            
		} catch (CoException e) {
			CoDebugger.debugInformation("No Employee ID or Office Num for Casenum "+ coRequest.getCaseAppNumber());
			CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
		}

		coRequestHistoryCargo.setEmpId(coRequest.getEmpId());
		coRequestHistoryCargo.setReasonCdList(coRequest.getReasonCdList());
		coRequestHistoryCargo.setActionCd(coRequest.getActionCode());
		coRequestHistoryCargo.setArchiveDt(Timestamp
				.valueOf("2999-12-31 00:00:00.0"));

		coRequestHistoryCargo.setCreateUserId(coRequest.getRequestUserId());
		coRequestHistoryCargo.setIndvId(coRequest.getIndvId());
		coRequestHistoryCargo.setLanguageCd(CoConstants.LANG_ENGLISH);		
		coRequestHistoryCargo.setOfficeNum(coRequest.getOfficeNumber());
		coRequestHistoryCargo.setDraftSw(coRequest.getDraftSwitch());
		coRequestHistoryCargo.setHistorySw(coRequest.getHistorySwitch());
		coRequestHistoryCargo.setDocTypeCd(coRequest.getDocType());

		coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setOrigPrintDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		// important in documents like 1033 where the gaining officenum is
		// passed
		// also languageCd, apptid, edgNum, benefitNum, appealId are some
		// attributes
		// that may need to be updated
		coRequestHistoryCargo.setAssistanceList(coRequest.getTypeOfAssistanceList());
		coRequestHistoryCargo.setUpdateUserId(coRequest.getRequestUserId());
		coRequestHistoryCargo.setApptId(coRequest.getApptId());
		coRequestHistoryCargo.setDocId(coRequest.getDocId());
		//ND-75793 Set locationId for MCC Notice in preview flow
		if(null!=coRequest.getLocationId()){
			coRequestHistoryCargo.setLocationId(coRequest.getLocationId());
		}
		
		//ND-82325-R1-R2-Merge
		if(null!=coRequest.getHstPrintString()){
			coRequestHistoryCargo.setHstPrintString(coRequest.getHstPrintString());
		}
		//ND-82325-END
		// BRGUS00139711 - NaredlaS - Setting the generate date
		java.util.Date dt = null;
		if (coRequest.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = coRequest.getGenerateDate();
		}
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		coRequestHistoryCargo.setGenerateDt(new java.sql.Timestamp(dt.getTime()));
		coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
		CoDebugger.debugMessage("udpateRequestHistory:coRequestHistoryCargo-->"
				+ coRequestHistoryCargo.toString());
		try {

			StringBuffer actionName = new StringBuffer("Update:CoRequestHistory:");
			actionName.append(coRequest.getCaseAppNumber());
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(coRequest.getRequestUserId());
			logStatement("CoDAOServices:updtRequestHistory", actionName.toString(),issued.toString(),conn);


			finalResult = coRequestHistoryCollection.update();
			logStatement("","","",conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		if (finalResult) {
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setActivate("URHD");
			coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode());
			coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestHistoryDetailCargo.setCoDetSeq(coRequest.getCoDetSeq());
			if (null!=coRequest && coRequest.getGenerateDate()!=null){
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(coRequest.getGenerateDate()));
			} else {
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(CoDateFactory.getTimestamp()));
			}
			coRequestHistoryDetailCargo.setReprintSw(CoConstants.PRINT_ORIGINAL);
			coRequestHistoryDetailCargo.setCreateUserId(coRequest.getRequestUserId());
			coRequestHistoryDetailCargo.setPrintDt(CoDateFactory
					.getTimestamp());
			coRequestHistoryDetailCargo.setCreateDt(coRequest.getGenerateDate());
			coRequestHistoryDetailCargo.setUpdateDt(CoDateFactory
					.getTimestamp());
			coRequestHistoryDetailCargo.setUpdateUserId(coRequest
					.getRequestUserId());
			coRequestHistoryDetailCargo.setArchiveDt(Timestamp
					.valueOf("2999-12-31 00:00:00.0"));
			coRequestHistoryDetailCollection
			.setCargo(coRequestHistoryDetailCargo);
			CoDebugger.debugMessage("udpateRequestHistory:coRequestHistoryDetailCargo-->"
					+ coRequestHistoryDetailCargo.toString());
			try {
				finalResult = coRequestHistoryDetailCollection.update();
				log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coRequestHistoryDetailCollection.update() , Success :: " + finalResult);
				commitFlag = 1;
			} catch (Exception e) {
				log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in updateRequestHistory third try :: " + e.getMessage());
				CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
		} else {
			commitFlag = -1;
		}
		try {
			if (conn != null && ("I").equals(coRequest.getRunMode())) {
				CoDebugger.debugInformation("updateRequestHistory to not close for online");
			}
		} catch (Exception e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in updateRequestHistory fourth try :: " + e.getMessage());
			CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
			commitFlag = -1;
		}
		return commitFlag;
	}

	/**
	 * 
	 * @param coRequest
	 * @return
	 */
	public boolean updateRequestHistoryForLocalPrint(long coReqSeq,COCorrespondence coCorrespondence) {
		boolean success = false;
		try {
			openConnection();
			CoRequestHistoryCargo[]  coRequestHistoryCargos = (CoRequestHistoryCargo[]) getCoRequestHistoryByCoReqSeq(coReqSeq);
			if(coRequestHistoryCargos != null && coRequestHistoryCargos.length>0){
				CoRequestHistoryCargo coRequestHistoryCargo = coRequestHistoryCargos[0];
				if(coRequestHistoryCargo != null){
					coRequestHistoryCargo.setHistorySw(CoConstants.CHAR_N);
					//ND-45320 : updated Pending_Trig_Sw to C for all Local Print and Local Re print Notices
					coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_C);
					coRequestHistoryCargo.setDraftSw(CoConstants.CHAR_N);
					coRequestHistoryCargo.setOrigPrintDt(null);
					//ND-82325-R1-R2-Merge
					if(CoConstants.CHAR_Y==coCorrespondence.getIsModeLocalPrint() && null!=coCorrespondence.getXmlStr()){
						//ND-82325-END
						BinaryDocument bd = new BinaryDocument(coCorrespondence.getXmlStr().getBytes());
						coRequestHistoryCargo.setHstPrintString(bd);
					}
					String casenum="";
					if(coRequestHistoryCargo.getCaseNum()!=null && coRequestHistoryCargo.getRequestTypeCd()=='C'){
						casenum =  coRequestHistoryCargo.getCaseNum().toString();
					}else if(coRequestHistoryCargo.getAppNum()!=null && coRequestHistoryCargo.getRequestTypeCd()=='A'){
						casenum =  coRequestHistoryCargo.getAppNum().toString();
					}

					String userid = coRequestHistoryCargo.getUpdateUserId();
					CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
					coRequestHistoryCollection.setEJBSupported(false);
					coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
					success = updateForLocalPrint(coReqSeq, success, casenum, userid, coRequestHistoryCollection);
				}
			}

			if(success){
				CoRequestHistoryDetailCargo[]  coRequestHistoryDetailCargos = (CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailByCoReqSeq(coReqSeq);
				if(coRequestHistoryDetailCargos != null && coRequestHistoryDetailCargos.length>0){
					CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = coRequestHistoryDetailCargos[0];
					if(coRequestHistoryDetailCargo != null){
						openConnection();
						coRequestHistoryDetailCargo.setPrintDt(null);
						coRequestHistoryDetailCargo.setPrintMode(CoConstants.CHAR_B);

						CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
						coRequestHistoryDetailCollection.setEJBSupported(false);
						coRequestHistoryDetailCollection.setCargo(coRequestHistoryDetailCargo);
						log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling updateHistoryDetailCollection , Co Req Seq :: " + coRequestHistoryDetailCargo.getCoReqSeq());
						success = updateHistoryDetailCollection(coReqSeq, success, coRequestHistoryDetailCollection);
						log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling updateHistoryDetailCollection , Status :: " + success);
					}
				}
			}

			if(success){
				CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection();
				coRequestRecipientsCollection.setEJBSupported(false);
				CoRequestRecipientsCargo[] coRequestRecipientsCargos = null;
				coRequestRecipientsCargos = getRequestRecepientByCoReqSeq(coReqSeq, coRequestRecipientsCollection);
				if (coRequestRecipientsCargos != null && coRequestRecipientsCargos.length>0) {
					openConnection();
					for(CoRequestRecipientsCargo coRequestRecipientsCargo : coRequestRecipientsCargos){
						if(coRequestRecipientsCargo != null){
							coRequestRecipientsCargo.setPrintSw(CoConstants.CHAR_N);
							coRequestRecipientsCargo.setPrintType(CoConstants.CHAR_B);
							coRequestRecipientsCollection.setCargo(coRequestRecipientsCargo);
							log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling updatecoRequestRecipients , Co Req Seq :: " + coRequestRecipientsCargo.getCoReqSeq());
							success = updatecoRequestRecipients(coReqSeq, success, coRequestRecipientsCollection);
							log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling updatecoRequestRecipients , Status :: " + success);
						}
					}
				}
			}			
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - updateRequestHistoryForLocalPrint - exception - "+e.getMessage(), e);
			success = false;
		} finally {
			closeConnection();
		}
		return success;

	}

	/**
	 * 
	 * @param coReqSeq
	 * @param success
	 * @param coRequestRecipientsCollection
	 * @return
	 */
	private boolean updatecoRequestRecipients(long coReqSeq, boolean success, CoRequestRecipientsCollection coRequestRecipientsCollection) {
		boolean flag = success;
		try{
			flag = coRequestRecipientsCollection.update();
			log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coRequestRecipientsCollection.update() , Status :: " + flag);
		}catch(Exception e){
			//e.ce(); JIRA ND-12735
			CoDebugger.debugException("Error "+coReqSeq+" detailed message"+e.getMessage(), e);
		}
		return flag;
	}

	private CoRequestRecipientsCargo[] getRequestRecepientByCoReqSeq(long coReqSeq, CoRequestRecipientsCollection coRequestRecipientsCollection)
			throws FrameworkException, ApplicationException {
		CoRequestRecipientsCargo[] coRequestRecipientsCargos;
		try {
			coRequestRecipientsCargos = (CoRequestRecipientsCargo[]) getCoRequestRecepientByCoReqSeq(coReqSeq);
		} catch (Exception e) {
			//e.printStackTrace(); JIRA ND-12735
			CoDebugger.debugException("Error "+coReqSeq+" detailed message"+e.getMessage(), e);
			coRequestRecipientsCollection.getCargo().setCoReqSeq(coReqSeq);
			Object[] objParams = new Object[1];
			objParams[0] = coRequestRecipientsCollection.getCargo();
			coRequestRecipientsCargos = (CoRequestRecipientsCargo[]) coRequestRecipientsCollection.select("findByAllRecipients", objParams);
		}
		return coRequestRecipientsCargos;
	}

	private boolean updateHistoryDetailCollection(long coReqSeq, boolean success, CoRequestHistoryDetailCollection coRequestHistoryDetailCollection) {
		boolean flag = success;
		try{
			flag = coRequestHistoryDetailCollection.update();
		}catch(Exception e){
			// e.printStackTrace(); JIRA ND-12735
			CoDebugger.debugException("Error "+coReqSeq+" detailed message"+e.getMessage(), e);
		}
		return flag;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @param success
	 * @param casenum
	 * @param userid
	 * @param coRequestHistoryCollection
	 * @return
	 */
	private boolean updateForLocalPrint(long coReqSeq, boolean success, String casenum, String userid,
			CoRequestHistoryCollection coRequestHistoryCollection) {
		boolean flag = success;
		try{
			String actionname = "Update:CoRequestHistory:" + casenum;
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(userid);
			logStatement("CoDAOServices:updateForLocalPrint", actionname,issued.toString(),conn);
			flag = coRequestHistoryCollection.update();
			logStatement("", "","",conn);
		} catch(Exception e){
			CoDebugger.debugException("Error "+coReqSeq+" detailed message"+e.getMessage(), e);
		}
		return flag;
	}



	/**
	 * 
	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	public int insertRequestForNoticeNCH034(EdVerificationChecklistCargo edVerificationChecklist, long officeNumber, long empId) throws CoException{

		int ret = 0;
		boolean flagFCH130 = false;
		boolean flagFCH543A = false;
		boolean flagNCH019 = false;
		//CH-23959-Kunal-Start
		boolean duplicateRequest = false;
		//CH-23959-Kunal-End

		CoDebugger.debugInformation("In insertRequestForNoticeNCH034");




		COCorrespondence coRequest = new COCorrespondence();
		coRequest.setCaseAppNumber(String.valueOf(edVerificationChecklist.getCaseNum()));
		coRequest.setCaseAppFlag('C');
		coRequest.setDocId("NCH034");
		coRequest.setDocType('N');
		coRequest.setEdgeNumber(edVerificationChecklist.getEdgNum());
		coRequest.setAssistanceProgramCode(edVerificationChecklist.getProgramCd());
		coRequest.setPendingTrigSw('B');
		coRequest.setPrintMode('B');
		coRequest.setIndvId(edVerificationChecklist.getIndvId());
		coRequest.setEmpId(empId);
		coRequest.setOfficeNumber(officeNumber);
		//Kunal-Start-CHIMESMO-59302
		java.util.Date dt = null;
		if (coRequest.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = coRequest.getGenerateDate();
		}
		coRequest.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		//Kunal-End-CHIMESMO-59302
		//CH-23959-Kunal-Start
		duplicateRequest = checkExistingRequestForDocIdCaseNumEdgeNum (coRequest);

		if (!duplicateRequest) {
			ret= insertOriginalRequest(coRequest);
		} else {
			ret = 1; //This is done to indicate that there is no error. We are just skipping the insert
		}
		//CH-23959-Kunal-End
		CoDebugger.debugInformation("In insertRequestForNoticeNCH034 edVerificationChecklist.getVclTypeCd()="
				+ edVerificationChecklist.getVclTypeCd() + "==");

		//CHIMESMO-45914 VCL_TYPE_CD = -V083- AND the shelter expense type is SURE (Rent), then trigger FCH130
		if ((("V083").equalsIgnoreCase(edVerificationChecklist.getVclTypeCd()))
				&& ((edVerificationChecklist.getVclDetailRef() != null) && (edVerificationChecklist.getVclDetailRef().contains("sure")))){
			flagFCH130 = true;
		}
		if (("V123").equalsIgnoreCase(edVerificationChecklist.getVclTypeCd())) {
			flagFCH543A = true;
		}
		if (("V019").equalsIgnoreCase(edVerificationChecklist.getVclTypeCd())) {
			flagNCH019 = true;
		}

		/**
		 * Attach when SNAP is pending for verification of shelter expenses. - V083
		 */
		if(flagFCH130) {
			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - before inserting FORM_FCH130");
			COCorrespondence coReqFCH130 = coRequest;
			coReqFCH130.setDocId(CoConstants.FORM_FCH130);


			duplicateRequest = false;
			duplicateRequest = checkExistingRequestForDocIdCaseNumEdgeNum (coRequest);

			if (!duplicateRequest) {
				ret = insertOriginalRequest(coReqFCH130);	
			} else {
				ret = 1; //This is done to indicate that there is no error. We are just skipping the insert
			}
			//CH-23959-Kunal-End
			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - after inserting FORM_FCH130");
		}

		/**
		 * Attach when SNAP is pending for signature of the work registration form when at 
		 * least one household member is a SNAP mandatory work registrant. - V123
		 */
		if(flagFCH543A){
			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - before inserting FORM_FCH543A");
			COCorrespondence coReqFCH543A = coRequest;
			coReqFCH543A.setDocId(CoConstants.FORM_FCH543A);


			duplicateRequest = false;
			duplicateRequest = checkExistingRequestForDocIdCaseNumEdgeNum (coRequest);

			if (!duplicateRequest) {
				ret = insertOriginalRequest(coReqFCH543A);
			} else {
				ret = 1; //This is done to indicate that there is no error. We are just skipping the insert
			}
			//CH-23959-Kunal-End

			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - after inserting FORM_FCH543A");
		}

		/**
		 * Insert Trigger for "Request for School Verification"
		 */
		if(flagNCH019){
			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - before inserting NOTICE_NCH019");
			COCorrespondence coReqNCH019 = coRequest;
			coReqNCH019.setDocId(CoConstants.NOTICE_NCH019);


			duplicateRequest = false;
			duplicateRequest = checkExistingRequestForDocIdCaseNumEdgeNum (coRequest);

			if (!duplicateRequest) {
				ret = insertOriginalRequest(coReqNCH019);
			} else {
				ret = 1; //This is done to indicate that there is no error. We are just skipping the insert
			}

			CoDebugger.debugInformation("In insertRequestForNoticeNCH034 - after inserting NOTICE_NCH019");
		}
		closeConnection();
		return ret;
	}



	/**
	 * 
	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	public int insertRequestForMANoticeNDHCELN18(EdVerificationChecklistCargo edVerificationChecklist, long officeNumber, long empId) throws CoException{

		int ret = 0;

		boolean duplicateRequest = false;		
		CoDebugger.debugInformation("In insertRequestForNoticeNCH034");

		COCorrespondence coRequest = new COCorrespondence();
		
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = null;
		if(edVerificationChecklist.getCaseNum() > 0){
			dcHeadOfHouseholdCargo = getHoHByCaseNum(edVerificationChecklist.getCaseNum(), dcHeadOfHouseholdCargo);
		}
		if(null != dcHeadOfHouseholdCargo && 0L != dcHeadOfHouseholdCargo.getIndvId()){
			coRequest.setIndvId(dcHeadOfHouseholdCargo.getIndvId());
		}
		coRequest.setCaseAppNumber(String.valueOf(edVerificationChecklist.getCaseNum()));
		coRequest.setCaseAppFlag('C');
		coRequest.setDocId("NDHCELN18");
		coRequest.setDocType('N');
		coRequest.setEdgeNumber(edVerificationChecklist.getEdgNum());
		coRequest.setAssistanceProgramCode(edVerificationChecklist.getProgramCd());
		coRequest.setPendingTrigSw('B');
		coRequest.setPrintMode('B');
		coRequest.setEmpId(empId);
		coRequest.setOfficeNumber(officeNumber);
		//Kunal-Start-CHIMESMO-59302
		java.util.Date dt = null;
		if (coRequest.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = coRequest.getGenerateDate();
		}
		coRequest.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		//Kunal-End-CHIMESMO-59302
		//CH-23959-Kunal-Start
		CoDebugger.debugInformation("In insertRequestForNoticeNCH034 edVerificationChecklist.getVclTypeCd()=" + edVerificationChecklist.getVclTypeCd() + "==");
		duplicateRequest = checkExistingRequestForDocIdCaseNumEdgeNum (coRequest);

		if (!duplicateRequest) {
			ret= insertOriginalRequest(coRequest);
		} else {
			ret = 1; //This is done to indicate that there is no error. We are just skipping the insert
		}

		return ret;
	}


		/**
	 * 
	 * @param coRequestHistoryCollection
	 */
	public void cancelExistingEligibilityRunTriggersForNCH034 (long caseNum) {
		CoRequestHistoryCargo[] coRequestHistoryCargos = null;
		openConnection();
		CoDebugger.debugInformation("In cancelExistingEligibilityRunTriggersForNCH034 for Case = " + caseNum);

		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		CoRequestHistoryCargo paramCargo = new CoRequestHistoryCargo();
		paramCargo.setCaseNum(caseNum);
		
		coRequestHistoryCollection.setCargo(paramCargo);


		try {
			coRequestHistoryCargos = (CoRequestHistoryCargo[]) coRequestHistoryCollection.select("findByCaseHistorySwPendTrigForSameIndvForNCH034");
			openConnection();
			CoRequestHistoryCollection coRequestHistoryColl = new CoRequestHistoryCollection(); 
			CoRequestHistoryCargo tempCoRequestHistoryCargo = new CoRequestHistoryCargo();

			if(null != coRequestHistoryCargos && coRequestHistoryCargos.length > 0) {
				for(int i = 0; i < coRequestHistoryCargos.length; i++){
					tempCoRequestHistoryCargo = new CoRequestHistoryCargo();
					tempCoRequestHistoryCargo =  coRequestHistoryCargos[i];
					CoDebugger.debugInformation("Cancelling Record Co_Req_Seq = " + tempCoRequestHistoryCargo.getCoReqSeq());
					tempCoRequestHistoryCargo.setPendingTrigSw('C');
					coRequestHistoryColl.add(tempCoRequestHistoryCargo);
				}
			}
			String caseNumber =   caseNum + "";
			String userId = "";

			String actionName = "Update:CoRequestHistory:" + caseNumber;
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(userId);
			logStatement("CoDAOServices:updateTrigger34", actionName,issued.toString(),conn);
			coRequestHistoryColl.update();
			logStatement("", "","",conn);

		} catch (Exception e) {
			CoDebugger.debugException("Exception while cancelling the trigger for  Case Num = " + caseNum, e);
		}
		finally{
			closeConnection();
		}
	}

	/**
	 * 
	 * @param coRequestHistoryCollection
	 */
	public void cancelExistingEligibilityRunTriggersForNCH034 (long caseNum, String programCode) {
		CoRequestHistoryCargo[] coRequestHistoryCargos = null;
		openConnection();
		CoDebugger.debugInformation("In cancelExistingEligibilityRunTriggersForNCH034 for Case = " + caseNum);

		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		CoRequestHistoryCargo paramCargo = new CoRequestHistoryCargo();
		paramCargo.setCaseNum(caseNum);
		paramCargo.setProgramCd(programCode);
		coRequestHistoryCollection.setCargo(paramCargo);


		try {
			coRequestHistoryCargos = (CoRequestHistoryCargo[]) coRequestHistoryCollection.select("findByCaseHistorySwPendTrigForSameIndvForProgCDForNCH034");
			openConnection();
			CoRequestHistoryCollection coRequestHistoryColl = new CoRequestHistoryCollection(); 
			CoRequestHistoryCargo tempCoRequestHistoryCargo = new CoRequestHistoryCargo();

			if(null != coRequestHistoryCargos && coRequestHistoryCargos.length > 0) {
				for(int i = 0; i < coRequestHistoryCargos.length; i++){
					tempCoRequestHistoryCargo = new CoRequestHistoryCargo();
					tempCoRequestHistoryCargo =  coRequestHistoryCargos[i];
					CoDebugger.debugInformation("Cancelling Record Co_Req_Seq = " + tempCoRequestHistoryCargo.getCoReqSeq());
					tempCoRequestHistoryCargo.setPendingTrigSw('C');
					coRequestHistoryColl.add(tempCoRequestHistoryCargo);
				}
			}
			String caseNumber =   caseNum + "";
			String userId = "";

			String actionName = "Update:CoRequestHistory:" + caseNumber;
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(userId);
			logStatement("CoDAOServices:updateTrigger34", actionName,issued.toString(),conn);
			coRequestHistoryColl.update();
			logStatement("", "","",conn);

		} catch (Exception e) {
			CoDebugger.debugException("Exception while cancelling the trigger for  Case Num = " + caseNum, e);
		}
		finally{
			closeConnection();
		}
	}
	/**
	 * Method to insert trigger for NCH042.This will insert trigger for DPHHS-HCS-101
																	DPHHS-HCS-220
																	DPHHS-HCS-272
																	DPHHS-HCS-543A


	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	private int insertRequestForNoticeNCH042(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		// insert trigger for NCH042
		ret= insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-101
		coRequest.setDocId(CoConstants.FORM_FCH101);
		ret = insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-220
		coRequest.setDocId(CoConstants.FORM_FCH220);
		ret = insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-272
		coRequest.setDocId(CoConstants.FORM_FCH272);
		ret = insertOriginalRequest(coRequest);


		return ret;
	}


	/**
	 * Method to insert trigger for NCH038.This will insert trigger for DPHHS-HCS-175
																DPHHS-HCS-176
																DPHHS-HCS-177
																DPHHS-HCS-181
																DPHHS-HCS-209


	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	private int insertRequestForNoticeNCH038(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		// insert trigger for NCH042
		ret= insertOriginalRequest(coRequest);
		if (coRequest.getIsManualyGenerated()) {
			// insert trigger for DPHHS-HCS-175
			coRequest.setDocId(CoConstants.FORM_FCH175);
			ret = insertOriginalRequest(coRequest);
			// insert trigger for DPHHS-HCS-276
			coRequest.setDocId(CoConstants.FORM_FCH176);
			ret = insertOriginalRequest(coRequest);
			// insert trigger for DPHHS-HCS-177
			coRequest.setDocId(CoConstants.FORM_FCH177);
			ret = insertOriginalRequest(coRequest);
			// insert trigger for DPHHS-HCS-181
			coRequest.setDocId(CoConstants.FORM_FCH181);
			ret = insertOriginalRequest(coRequest);
			// insert trigger for DPHHS-HCS-209
			coRequest.setDocId(CoConstants.FORM_FCH209);
			ret = insertOriginalRequest(coRequest);
		}
		return ret;
	}

	/**
	 * Method to insert trigger for NCH041.This will insert trigger for DPHHS-HCS-101
																	DPHHS-HCS-220
																	DPHHS-HCS-272
																	DPHHS-HCS-543A


	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	private int insertRequestForNoticeNCH041(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		// insert trigger for NCH041
		ret= insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-101
		coRequest.setDocId(CoConstants.FORM_FCH101);
		ret = insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-220
		coRequest.setDocId(CoConstants.FORM_FCH220);
		ret = insertOriginalRequest(coRequest);
		// insert trigger for DPHHS-HCS-272
		coRequest.setDocId(CoConstants.FORM_FCH272);
		ret = insertOriginalRequest(coRequest);
		//insert trigger for DPHHS-HCS-543A
		coRequest.setDocId(CoConstants.FORM_FCH543A);
		ret = insertOriginalRequest(coRequest);

		return ret;
	}

	private int insertRequestForForm774(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		coRequest.getMiscParameters();
		List<Object> miscParams = getDataFromMiscParameters(coRequest.getMiscParameters());
		if (miscParams!=null && miscParams.size()>0)  {
			Map worcDateDetails = (Map) miscParams.get(0);
			Calendar endDate = Calendar.getInstance();
			Calendar startDate = Calendar.getInstance();
			String startDt = (String) worcDateDetails.get(CoConstants.ACTIVITY_START_DATE);
			java.util.Date strdate;
			try {
				strdate = DateFormatter.getDateFromString(startDt);
				startDate.setTime(strdate);
			} catch (ParseException e) {
				//e.printStackTrace(); JIRA ND-12735
				CoDebugger.debugException("Error "+coRequest.getCoReqSeq()+" detailed message"+e.getMessage(), e);
			}
			java.util.Date eddate;
			String endDt = (String) worcDateDetails.get(CoConstants.ACTIVITY_END_DATE);
			if (endDt != null) {
				try	{
					eddate = DateFormatter.getDateFromString(endDt);
					endDate.setTime(eddate);
				} catch (ParseException e) {
					CoDebugger.debugException("Error "+coRequest.getCoReqSeq()+" detailed message"+e.getMessage(), e);
				}
			}
			Calendar spanStartDate[] = new Calendar[100];
			Calendar spanEndDate[] = new Calendar[100];
			int i = 0;
			while (startDate.before(endDate)) {
				Calendar firstDate = (Calendar) startDate.clone();
				spanStartDate[i] = firstDate;
				startDate.add(startDate.DATE, 7);
				Calendar secondDate = (Calendar)startDate.clone();
				spanEndDate[i] = secondDate;
				startDate.add(startDate.DATE, 1);
				i++;
			}
			COCorrespondence newCoRequest = new COCorrespondence();
			newCoRequest = coRequest;
			for (int j = 0; j < i; j++) {
				newCoRequest.setMiscParameters(CoConstants.WEEK_SPAN_START_DATE
						+ "=" + DateFormatter
						.dateToString(spanStartDate[j].getTime()) + "|"
						+ CoConstants.WEEK_SPAN_END_DATE + "="
						+  DateFormatter
						.dateToString(spanEndDate[j].getTime()) + "|" + CoConstants.JOB_SPAN
						+ "=" + (j + 1) + "|" + CoConstants.JOB_TOTAL_SPANS
						+ "=" + i);
				ret = insertOriginalRequest(newCoRequest);
			}
		}
		return ret;
	}

	/**
	 * 
	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	public boolean generateCorrespondenceRequest(COCorrespondence coRequest)
			throws CoException {

		// printtype= B not avialable
		coRequest.setPendingTrigSw(CoConstants.CHAR_B);
		coRequest.setPrintMode(CoConstants.CHAR_B);
		// coRequest.setPrint
		int ret = 0;
		try {   
			if (null != coRequest && 0 == coRequest.getEmpId() && null != coRequest.getCaseAppNumber()) {
				MoEmployeesCargo[] moEmPCargos = null;
				moEmPCargos = (MoEmployeesCargo[]) getCaseWorkerDetails(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmPCargos != null && moEmPCargos.length > 0) {
					coRequest.setEmpId(moEmPCargos[0].getEmpId());
					coRequest.setOfficeNumber(moEmPCargos[0].getPriOfficeNum());
				}

				MoEmployeesCargo[] moEmPCargosNew = null;
				moEmPCargosNew = (MoEmployeesCargo[]) getCaseWorkerDetailsNew(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmPCargosNew != null && moEmPCargosNew.length > 0) {
					coRequest.setEmpId(moEmPCargosNew[0].getEmpId());

				}

			}
		} catch (CoException e) {
			CoDebugger.debugInformation("No Employee ID or Office Num for Casenum "+ coRequest.getCaseAppNumber());
			CoDebugger.debugException("Error "+coRequest.getCoReqSeq()+" detailed message"+e.getMessage(), e);
		}
		if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.FORM_FCH774)) {
			ret = insertRequestForForm774(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH034)) {
			CoDebugger.debugInformation("NOTICE_NCH034 in generateCorrespondenceRequest");
			CoDebugger.debugMessage("NOTICE_NCH034 in generateCorrespondenceRequest");
		} /*else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH041)) {
			ret = insertRequestForNoticeNCH041(coRequest);
		}else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH042)) {
			ret = insertRequestForNoticeNCH042(coRequest);
		}*/

		else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH038)) {
			ret = insertRequestForNoticeNCH038(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.DOC_NDHCN0067)) {
			ret = insertRequestRecipientForNoticeNDHCN0067(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NDLIHP093)) {
			ret = insertRequestRecipientForNoticeNDLIHP093(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.DOC_ID_NDCCAP65)) {
			ret = insertRequestRecipientForNoticeNDCCAP65(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NDSNAP074)){
			ret = insertRequestRecipientForNoticeNDSNAP074(coRequest);
		}
		else {
			ret = insertOriginalRequest(coRequest);
		}

		if (ret < 0) {
			return false;
		}
		return true;

	}

	
	private int insertRequestRecipientForNoticeNDSNAP074(
			COCorrespondence coRequest) throws CoException {
		int ret = 0;
		long caseNumber=0L;
		coRequest.setAssistanceProgramCode(CoConstants.PROGRAM_FS);
		if(null!=coRequest.getCaseAppNumber()){
			caseNumber=Long.parseLong(coRequest.getCaseAppNumber().trim());
		}
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = null;
		if(caseNumber>0){
			dcHeadOfHouseholdCargo = getHoHByCaseNum(caseNumber, dcHeadOfHouseholdCargo);
		}
		if(null != dcHeadOfHouseholdCargo && 0L != dcHeadOfHouseholdCargo.getIndvId()){
			coRequest.setIndvId(dcHeadOfHouseholdCargo.getIndvId());
		}
		
		ret= insertOriginalRequest(coRequest);
		return ret;
	}
	
	/**
	 * This method is an overloaded method of generateCorrespondenceRequest()
	 * using spring batch's input objects instead of DB hits. This method
	 * generates Correspondence request and inserts the request data in DB.
	 * 
	 * @param coRequest
	 * @return
	 * @throws CoException
	 * @author mohchaturvedi
	 */
	public boolean generateCorrRequestForBatch(COCorrespondence coRequest)
			throws CoException {

		// printtype= B not avialable
		coRequest.setPendingTrigSw(CoConstants.CHAR_B);
		coRequest.setPrintMode(CoConstants.CHAR_B);
		int ret = 0;
		if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.FORM_FCH774)) {
			ret = insertRequestForForm774(coRequest);
		} else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH034)) {
			CoDebugger
			.debugInformation("NOTICE_NCH034 in generateCorrespondenceRequest");
			CoDebugger
					.debugMessage("NOTICE_NCH034 in generateCorrespondenceRequest");
		} /*else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH041)) {
			ret = insertRequestForNoticeNCH041(coRequest);
		}else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH042)) {
			ret = insertRequestForNoticeNCH042(coRequest);
		} */
		else if (coRequest.getDocId() != null
				&& coRequest.getDocId().equals(CoConstants.NOTICE_NCH038)) {
			ret = insertRequestForNoticeNCH038(coRequest);
		} else {
			ret = insertOriginalRequest(coRequest);
		}
		if (ret < 0) {
			return false;
		}
		return true;
	}

	/**
	 * Method to insert original request into CO_REQUEST_HISTORY table.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return int
	 *  
	 */
	public int insertOriginalRequestForCC(COCorrespondence coRequest) {
		int commitFlag = 0;
		String userId="";
		long employeeId=0L;
		boolean finalResult = false;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("IOR");
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);
		coRequestHistoryCargo.setRequestTypeCd(coRequest.getCaseAppFlag());
		coRequestHistoryCargo.setDocId(coRequest.getDocId());
		coRequestHistoryCargo.setDocTypeCd(coRequest.getDocType());
		coRequestHistoryCargo.setIndvId(coRequest.getIndvId());
		coRequestHistoryCargo
		.setProgramCd(coRequest.getAssistanceProgramCode());
		coRequestHistoryCargo.setActionCd(coRequest.getActionCode());
		coRequestHistoryCargo.setReasonCdList(coRequest.getReasonCdList());
		coRequestHistoryCargo.setDraftSw(coRequest.getDraftSwitch());
		coRequestHistoryCargo.setLanguageCd(coRequest.getLangCd());

		coRequestHistoryCargo.setMiscParms(coRequest.getMiscParameters());
		coRequestHistoryCargo.setHistorySw(coRequest.getHistorySwitch());
		coRequestHistoryCargo.setPendingTrigSw(coRequest.getPendingTrigSw());
		coRequestHistoryCargo.setApptId(coRequest.getApptId());
		coRequestHistoryCargo.setOfficeNum(coRequest.getOfficeNumber());
		coRequestHistoryCargo.setEdgNum(coRequest.getEdgeNumber());
		coRequestHistoryCargo.setBenefitNum(coRequest.getBenefitNumber());
		if(null != coRequest.getLocationId()) {
			coRequestHistoryCargo.setLocationId(coRequest.getLocationId());
		}
		coRequestHistoryCargo.setEdgTraceId(coRequest.getEdgTraceId());
		coRequestHistoryCargo.setAssistanceList(coRequest
				.getTypeOfAssistanceList());
		coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());

		try {        	
			if(null!=coRequest && 0==coRequest.getEmpId() && null!=coRequest.getCaseAppNumber()){
				MoEmployeeCasesCargo[] moEmpCaseCargos = null;
				MoEmployeesCargo[] moEmPCargos = null;
				moEmpCaseCargos = (MoEmployeeCasesCargo[]) 
						getMoEmployeeCasesFromRequest(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmpCaseCargos != null && moEmpCaseCargos.length > 0) {
					coRequest.setEmpId(moEmpCaseCargos[0].getEmpId());
					moEmPCargos = (MoEmployeesCargo[])getBridgesWorkerOffice(coRequest.getEmpId());
					if (moEmPCargos != null && moEmPCargos.length > 0) {
						coRequest.setOfficeNumber(moEmPCargos[0].getPriOfficeNum());
					}
				}
			}            
		} catch (CoException e) {
			CoDebugger.debugInformation("No Employee ID or Office Num for Casenum "+ coRequest.getCaseAppNumber());
			CoDebugger.debugException("Error "+coRequest.getCaseAppNumber()+" detailed message"+e.getMessage(), e);
		} finally {
			closeConnection();
		}
		//Added by Manoj Sinha 03/09/2011 to pulate userID & employeeId

		if(coRequest.getRequestUserId()!=null && !"".equals(coRequest.getRequestUserId())){
			userId=coRequest.getRequestUserId();
		}
		if(coRequest.getEmpId()>0){
			employeeId=coRequest.getEmpId();
		} else {
			employeeId=getEmployeeIdByUserId(userId);
		}

		coRequestHistoryCargo.setEmpId(employeeId);
		coRequestHistoryCargo.setCreateUserId(userId);

		//Added By Lakshmi - for adding providerId to CoRequestHistory Table
		coRequestHistoryCargo.setProviderId(coRequest.getProviderId());

		if (coRequest.getIsManualyGenerated()) {
			coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_Y);
		} else {
			coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_N);
		}
		java.util.Date dt = null;
		if (coRequest.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = coRequest.getGenerateDate();
		}
		coRequestHistoryCargo.setGenerateDt(new java.sql.Timestamp(dt.getTime()));
		coRequestHistoryCargo.setMassGeneratedSw(coRequest.getMassGeneratedSw());
		setHstStringInCoRequestHistory(coRequestHistoryCargo,coRequest);
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.insert();
			coRequest.setCoReqSeq(coRequestHistoryCollection.getCargo()
					.getCoReqSeq());
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - insertOriginalRequestForCC - exception - "+e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		if (finalResult) {
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setActivate("IRD");
			coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode());
			coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestHistoryDetailCargo.setCreateUserId(userId);
			coRequestHistoryDetailCargo.setCreateDt(CoDateFactory
					.getTimestamp());
			if (null!=coRequest && coRequest.getGenerateDate()!=null) {
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(coRequest.getGenerateDate()));
			} else {
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(CoDateFactory.getTimestamp()));
			}
			if (coRequest.getHistorySwitch() == CoConstants.CHAR_Y) {
				coRequestHistoryDetailCargo.setReprintSw('R');
			} else {
				coRequestHistoryDetailCargo.setReprintSw('O');
			}
			coRequestHistoryDetailCollection
			.setCargo(coRequestHistoryDetailCargo);
			try {
				finalResult = coRequestHistoryDetailCollection.insert();
				coRequest.setCoDetSeq(coRequestHistoryDetailCollection
						.getCargo().getCoDetSeq());
				//Added by Manoj Sinha:VaCMS 04-01-2011 to insert comments in CORequestRecipients
				CoRecipientsManager coRecipientsManager = new CoRecipientsManager(this);
				coRecipientsManager.configureRecipientsForCoReqSeq(coRequest);


				commitFlag = 1;
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - insertOriginalRequestForCC - exception - "+e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
		}
		if ((finalResult == true) && (coRequest.getEnrlmntId() > 0)) {
			openConnection();
			CoRequestPosoCollection coRequestPosoCollection = new CoRequestPosoCollection();

			coRequestPosoCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestPosoCargo coRequestPosoCargo = new CoRequestPosoCargo();
			coRequestPosoCargo.setEnrlmntId(coRequest.getEnrlmntId());
			coRequestPosoCargo.setEnrlmntEffBeginDt(coRequest.getEnrlmntEffBeginDt());
			coRequestPosoCargo.setIncludeAllCases(coRequest.getIncludeAllCases());
			coRequestPosoCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestPosoCargo.setCreateUserId(userId);
			coRequestPosoCargo.setCreateDt(CoDateFactory.getTimestamp());
			coRequestPosoCollection.setCargo(coRequestPosoCargo);
			try {
				finalResult = coRequestPosoCollection.insert();
				commitFlag = 1;
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - insertOriginalRequestForCC - exception - "+e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
		} else {
			commitFlag = -1;
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * 
	 * @param coRequestHistoryCargo
	 * @param coRequest
	 */
	private void setHstStringInCoRequestHistory(CoRequestHistoryCargo coRequestHistoryCargo, COCorrespondence coRequest) {
		// convert String into BinaryDocument and set it into CO_REQUEST_HISTORY
		String xmlStr = coRequest.getXmlStr();
		if(xmlStr != null) {
			BinaryDocument bd = new BinaryDocument(xmlStr.getBytes());
			coRequestHistoryCargo.setHstPrintString(bd);
		}
	}

	/**
	 * 
	 * @param userId
	 * @return
	 */
	public long getEmployeeIdByUserId(String userId){
		long employeeId=0L;
		MoEmployeesCargo employeesCargo=new MoEmployeesCargo();
		MoEmployeesCargo[] moEmployeesCargos=null;
		MoEmployeesCollection employeesCollection=new MoEmployeesCollection();
		employeesCargo.setUserId(userId);
		employeesCollection.add(employeesCargo);
		try {
			moEmployeesCargos=(MoEmployeesCargo[])employeesCollection.select("findEmployeeByUserId");
			employeeId=(moEmployeesCargos!=null && moEmployeesCargos.length>0)?moEmployeesCargos[0].getEmpId():0;
		} catch (GenericBatchException e) {
			employeeId=0;
			CoDebugger.debugException("Error "+ userId +" detailed message"+e.getMessage(), e);
		}catch(Exception ex){
			CoDebugger.debugException("Error "+ userId +" detailed message"+ex.getMessage(), ex);
		}
		//System.out.println("EmployeeId: ["+employeeId+"] for UserID: ["+userId+"]"); JIRA ND-12735
		CoDebugger.debugInformation("EmployeeId: ["+employeeId+"] for UserID: ["+userId+"]");
		return employeeId;
	}


	/**
	 * Method to insert original request into CO_REQUEST_HISTORY table.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return int
	 * 
	 */
	public int insertOriginalRequest(COCorrespondence coRequest) throws CoException {

		long startTime =  new FwDate().getTimeInMillis();
		log.log(CoConstants.CO_NAME,ILog.INFO ,"At the start of insertOriginalRequest after removing constructor with connection.");
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - insertOriginalRequest - started");
		int commitFlag = 0;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		boolean finalResult = false;
		// The Print Mode is I when Local reprint button is clicked.
		// For record to be visible on History screen instead of Pending screen
		// resetting the print mode to O for Local Reprint
		if (coRequest.getPrintMode() == CoConstants.PRINT_MODE_IMMIDIATE) {
			coRequest.setPrintMode(CoConstants.PRINT_MODE_ONLINE);
		}
		long oldReqSeqNum = 0;
		if(null!=coRequest && coRequest.getCoReqSeq()>0){
			oldReqSeqNum = coRequest.getCoReqSeq();
			BinaryDocument rePrintXMLStr = null;
			try {
				CoRequestHistoryCargo coRequestHistoryCargoArray[] = (CoRequestHistoryCargo[]) getCoRequestHistoryByCoReqSeq(oldReqSeqNum);
				log.log(CoConstants.CO_NAME,ILog.INFO ,"In getCoRequestHistoryByCoReqSeq :: Step 1");
				if (coRequestHistoryCargoArray != null && coRequestHistoryCargoArray.length > 0) {
					CoRequestHistoryCargo oldCargo = coRequestHistoryCargoArray[0];
					rePrintXMLStr = oldCargo.getHstPrintString();
					log.log(CoConstants.CO_NAME,ILog.INFO ,"In getCoRequestHistoryByCoReqSeq :: Step 2");
					String xmlStr = null;
					if(rePrintXMLStr != null){
						xmlStr = new String(rePrintXMLStr.getBytes());
					}
					log.log(CoConstants.CO_NAME,ILog.INFO ,"In getCoRequestHistoryByCoReqSeq :: Step 3");
					if(xmlStr != null && xmlStr.length()>0){
						coRequest.setXmlStr(xmlStr);
					}
					log.log(CoConstants.CO_NAME,ILog.INFO ,"In getCoRequestHistoryByCoReqSeq :: Step 4");
					if(oldCargo.getHistorySw()== CoConstants.CHAR_Y && (!coRequest.getDocId().equalsIgnoreCase(CoConstants.DOC_ID_NDTFMNN76))){
						java.util.Date dt = CoDateFactory.getUtilDate();
						if (dt != null) {
							coRequest.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
						}
					}
					log.log(CoConstants.CO_NAME,ILog.INFO ,"In getCoRequestHistoryByCoReqSeq :: Step 5");
				}
			} catch (Exception e) {
				log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in getCoRequestHistoryByCoReqSeq or coRequest.setGenerateDate:: " + e.getMessage());
				CoDebugger.debugException("Error while fetching Binary Document for coReqSeq: " + oldReqSeqNum, e);				
			}
		}
		openConnection();
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("IOR");
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);

		java.sql.Timestamp tempPrintDate = null;
		tempPrintDate = CoDateFactory.getTimestamp();

		// Allwyn : Checking for default char valaue
		coRequestHistoryCargo.setRequestTypeCd(coRequest.getCaseAppFlag() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getCaseAppFlag() : CoConstants.CHAR_N);

		coRequestHistoryCargo.setDocId(coRequest.getDocId());
		// Allwyn : Checking for default char valaue
		coRequestHistoryCargo.setDocTypeCd(coRequest.getDocType() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getDocType() : CoConstants.CHAR_N);

		//Fix for ND-77944 .... Generating the Primary Individual for Notices 
		
				if (coRequest.getDocId() != null
						&& (("NDFSN0106").equalsIgnoreCase(coRequest.getDocId()) || ("NDTANF078")
								.equalsIgnoreCase(coRequest.getDocId()))) {
					coRequest.setMiscParameters(Long.toString(coRequest.getIndvId()));
				}


			if((coRequest.getDocId() != null) && (("NCH049").equalsIgnoreCase(coRequest.getDocId()) || ("NDHCGNF15").equalsIgnoreCase(coRequest.getDocId()) || ("NDHCREN17").equalsIgnoreCase(coRequest.getDocId()) || ("NDFSN0106").equalsIgnoreCase(coRequest.getDocId()) || ("NDFSN0055").equalsIgnoreCase(coRequest.getDocId()) || ("NDTANF078").equalsIgnoreCase(coRequest.getDocId()) || ("NDCCAP064").equalsIgnoreCase(coRequest.getDocId()))){
			long indvId = 0;
			try {
				DcHeadOfHouseholdCargo[] dcHeadOfHouseholdCargoArray = null;
				DcHeadOfHouseholdCollection dcHeadOfHouseholdCollection = new DcHeadOfHouseholdCollection();
				DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = new DcHeadOfHouseholdCargo();
				dcHeadOfHouseholdCargo.setCaseNum(Long.parseLong(coRequest.getCaseAppNumber()));
				dcHeadOfHouseholdCollection.setCargo(dcHeadOfHouseholdCargo);
				dcHeadOfHouseholdCargoArray = (DcHeadOfHouseholdCargo[]) dcHeadOfHouseholdCollection.select("findByHoH");
				if (dcHeadOfHouseholdCargoArray != null && dcHeadOfHouseholdCargoArray.length > 0) {
					indvId = dcHeadOfHouseholdCargoArray[0].getIndvId();												
				}
			} catch (Exception e) {
				log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in dcHeadOfHouseholdCollection.select :: " + e.getMessage());
				CoDebugger.debugException("Exception while getting HOH for caseNumber ---> "+coRequest.getCaseAppNumber(), e);
			}

			if (indvId > 0) {
				coRequest.setIndvId(indvId);
			}else{
				CoDebugger.debugInformation("Failed to get HOH for caseNumber ---> "+coRequest.getCaseAppNumber());
			}			
		}

		coRequestHistoryCargo.setIndvId(coRequest.getIndvId());
		coRequestHistoryCargo.setProgramCd(coRequest.getAssistanceProgramCode());

		// Allwyn : Checking for default char valaue
		coRequestHistoryCargo.setActionCd(coRequest.getActionCode() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getActionCode() : CoConstants.CHAR_N);

		coRequestHistoryCargo.setReasonCdList(coRequest.getReasonCdList());		

		// Allwyn : Checking for default char valaue
		coRequestHistoryCargo.setDraftSw(coRequest.getDraftSwitch() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getDraftSwitch() : CoConstants.CHAR_N);

		coRequestHistoryCargo.setLanguageCd(coRequest.getLangCd());

		try {
			if (null != coRequest && 0 == coRequest.getEmpId() && null != coRequest.getCaseAppNumber()) {
				MoEmployeeCasesCargo[] moEmpCaseCargos = null;
				MoEmployeesCargo[] moEmPCargos = null;
				moEmpCaseCargos = (MoEmployeeCasesCargo[]) getMoEmployeeCasesFromRequest(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmpCaseCargos != null && moEmpCaseCargos.length > 0) {
					coRequest.setEmpId(moEmpCaseCargos[0].getEmpId());
					moEmPCargos = (MoEmployeesCargo[]) getBridgesWorkerOffice(coRequest.getEmpId());
					if (moEmPCargos != null && moEmPCargos.length > 0) {
						coRequest.setOfficeNumber(moEmPCargos[0].getPriOfficeNum());
					}
				}
			}
		} catch (CoException e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in getMoEmployeeCasesFromRequest :: " + e.getMessage());
			CoDebugger.debugInformation("No Employee ID or Office Num for Casenum " + coRequest.getCaseAppNumber());
			CoDebugger.debugException("Error "+e.getMessage(), e);
		}
		try {
			if (null != coRequest && 0 == coRequest.getEmpId() && null != coRequest.getCaseAppNumber()) {
				MoEmployeeCasesCargo[] moEmpCaseCargos = null;
				MoEmployeesCargo[] moEmPCargos = null;
				moEmpCaseCargos = (MoEmployeeCasesCargo[]) getMoEmployeeCasesFromRequest(Long.parseLong(coRequest.getCaseAppNumber().trim()));
				if (moEmpCaseCargos != null && moEmpCaseCargos.length > 0) {
					coRequest.setEmpId(moEmpCaseCargos[0].getEmpId());
					moEmPCargos = (MoEmployeesCargo[]) getBridgesWorkerOffice(coRequest.getEmpId());
					if (moEmPCargos != null && moEmPCargos.length > 0) {
						coRequest.setOfficeNumber(moEmPCargos[0].getPriOfficeNum());
					}
				}
			}
		} catch (CoException e) {
			CoDebugger.debugInformation("No Employee ID or Office Num for Casenum " + coRequest.getCaseAppNumber());
			CoDebugger.debugException("Error "+e.getMessage(), e);
		}
		coRequestHistoryCargo.setEmpId(coRequest.getEmpId());
		coRequestHistoryCargo.setMiscParms(coRequest.getMiscParameters());

		// Allwyn : Checking for default char valaue
		coRequestHistoryCargo.setHistorySw(coRequest.getHistorySwitch() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getHistorySwitch() : CoConstants.CHAR_N);

		// Allwyn : Checking for default char valaue
		if (coRequest.getPrintMode() == CoConstants.PRINT_MODE_ONLINE) {
			coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_N);
		} else {
			coRequestHistoryCargo.setPendingTrigSw(coRequest.getPendingTrigSw() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getPendingTrigSw() : CoConstants.CHAR_N);
		}

		coRequestHistoryCargo.setApptId(coRequest.getApptId());
		coRequestHistoryCargo.setOfficeNum(coRequest.getOfficeNumber());
		coRequestHistoryCargo.setEdgNum(coRequest.getEdgeNumber());
		coRequestHistoryCargo.setBenefitNum(coRequest.getBenefitNumber());
		if (null != coRequest.getLocationId()) {
			coRequestHistoryCargo.setLocationId(coRequest.getLocationId());
		}
		coRequestHistoryCargo.setEdgTraceId(coRequest.getEdgTraceId());
		coRequestHistoryCargo.setAssistanceList(coRequest.getTypeOfAssistanceList());
		coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setCreateUserId(coRequest.getRequestUserId());

		coRequestHistoryCargo.setMassMailingId(coRequest.getMassMailingId());

		// when a central reprint is clicked history switch should be set to N
		// again
		Object[] objParams = new Object[1];
		CoRequestRecipientsCollection coReqRecipientsCol = new CoRequestRecipientsCollection();
		CoRequestRecipientsCargo[] coReqRptCargos = null;

		coReqRecipientsCol.getCargo().setCoReqSeq(coRequest.getCoReqSeq());
		objParams[0] = coReqRecipientsCol.getCargo();
		if (coRequest.getHistorySwitch() == 'Y' && coRequest.getPrintMode() == 'B') {
			coRequest.setReprintHoldCoReqSeq(coRequest.getCoReqSeq());
			try {
				openConnection();
				log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling coReqRecipientsCol.select ");
				coReqRptCargos = (CoRequestRecipientsCargo[]) coReqRecipientsCol.select("findByAllRecipients", objParams);
				if (coReqRptCargos != null && coReqRptCargos.length > 0) {


					String locationOfPDF = coReqRptCargos[0].getLocationPath();
					coRequest.setFileLocation(locationOfPDF);
				}
				log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coReqRecipientsCol.select ");
			} catch (Exception e) {
				log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in coReqRecipientsCol.select :: " + e.getMessage());
				CoDebugger.debugInformation("after calling printpreview" + e.getMessage());
				CoDebugger.debugException("Error "+e.getMessage(), e);
			} finally{
				closeConnection();
				coReqRecipientsCol.clear();
			}
			coRequestHistoryCargo.setHistorySw('N');
		}

		if (coRequest.getIsManualyGenerated()) {
			coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_Y);
			coRequestHistoryCargo.setProgramCd(coRequest.getAssistanceProgramCode());
		} else {
			coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_N);
		}
		//if(!coRequestHistoryCargo.getDocId().equalsIgnoreCase(CoConstants.DOC_ID_NDTFMNN76)){
		java.util.Date dt = null;
		if (coRequest.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = coRequest.getGenerateDate();
		}
		coRequestHistoryCargo.setGenerateDt(new java.sql.Timestamp(dt.getTime()));
	//	}
		

		coRequestHistoryCargo.setMassGeneratedSw(coRequest.getMassGeneratedSw() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getMassGeneratedSw() : CoConstants.CHAR_N);


		coRequestHistoryCargo.setLanguageCd("EN");


		if (coRequest.getEdgTraceId() != 0) {
			coRequestHistoryCargo.setEdgTraceId(coRequest.getEdgTraceId());
			coRequestHistoryCargo.setEdgNum(coRequest.getEdgeNumber());
		} else {
			coRequestHistoryCargo.setEdgTraceId(null);
		}

		// Locally printed 
		if (coRequest.getPrintMode() == CoConstants.PRINT_MODE_ONLINE) {
			coRequestHistoryCargo.setOrigPrintDt(tempPrintDate);
				if("NDHCELN19".equals(coRequestHistoryCargo.getDocId()) || "NDMAELN13".equals(coRequestHistoryCargo.getDocId())){
					coRequestHistoryCargo.setHistorySw(CoConstants.YES_CHAR);
					coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_B);
				}else {
					coRequestHistoryCargo.setHistorySw(CoConstants.NO_CHAR);
					coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_C);
				}
		}
		coRequestHistoryCargo.setProviderId(coRequest.getProviderId());

		//Added Attachments in the CO_REQUEST_HISTORY table
		if(null!=coRequest.getDocId() && coRequest.getDocId().equalsIgnoreCase("NDFSN0055")){
			coRequestHistoryCargo.setAttachments(CoConstants.AFFIDAVIT_FOR_SNAP_BEST_WORK_REGISTRANTS);
		}
		if(null!=coRequest.getAttachments()){
			coRequestHistoryCargo.setAttachments(coRequest.getAttachments());
		}
		
		setHstStringInCoRequestHistory(coRequestHistoryCargo, coRequest);
		

		coRequestHistoryCollection.add(coRequestHistoryCargo);
		// End of changes to persist
		try {
			openConnection();
			CoDebugger.logWithLevel("OPENED CONNECTION***************", ILog.FATAL);
			finalResult = coRequestHistoryCollection.insert();
			log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coRequestHistoryCollection.insert() ,  Status :: " + finalResult);
			coRequest.setCoReqSeq(coRequestHistoryCollection.getCargo().getCoReqSeq());
		} catch (Exception e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in insertOriginalRequest :: " + e.getMessage());
			CoDebugger.debugException("CoDAOServices - insertOriginalRequest - exception - "+e.getMessage(), e);			
			commitFlag = -1;
			return commitFlag;
		} finally {
			closeConnection();
			CoDebugger.logWithLevel("CLOSED CONNECTION***************", ILog.FATAL);

		}

		CoRecipientsManager coRecipientsManager = new CoRecipientsManager(this);
		coRecipientsManager.configureRecipientsForCoReqSeq(coRequest);



		// Allwyn : End of changes
		if (finalResult) {
			
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			
			CoDebugger.debugInformation("insertOriginalRequest -----> insert in co_request_history_details");
			CoDocumentRecipientCargo coDocumentRecipientCargo = coRecipientsManager.getCoDocumentRecipientCargo();
			if(null != coDocumentRecipientCargo && null != coDocumentRecipientCargo.getRecipientCargosList() && coDocumentRecipientCargo.getRecipientCargosList().size()>0){
				CoDebugger.debugInformation("insertOriginalRequest -----> number of records to be inserted " +coDocumentRecipientCargo.getRecipientCargosList().size());
				for(int j=0;j<coDocumentRecipientCargo.getRecipientCargosList().size();j++){
					CoRecipientsCargo coRecipientsCargo = (CoRecipientsCargo)coDocumentRecipientCargo.getRecipientCargosList().get(j);
					CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
					coRequestHistoryDetailCargo.setActivate("IRD");
					// Allwyn : Checking for default char valaue
					coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode() != CoConstants.DEFAUTL_CHAR_VALUE ? coRequest.getPrintMode() : CoConstants.CHAR_N);
					coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
					coRequestHistoryDetailCargo.setCreateUserId(coRequest.getRequestUserId());
					coRequestHistoryDetailCargo.setCreateDt(CoDateFactory.getTimestamp());
					coRequestHistoryDetailCargo.setCreateUserId(coRequest.getRequestUserId());
					if (null != coRequest && coRequest.getGenerateDate() != null) {
						coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(coRequest.getGenerateDate()));
					} else {
						coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(CoDateFactory.getTimestamp()));
					}

					if (coRequest.getHistorySwitch() == CoConstants.CHAR_Y) {
						coRequestHistoryDetailCargo.setReprintSw(CoConstants.PRINT_REPRINT);
					} else {
						coRequestHistoryDetailCargo.setReprintSw(CoConstants.PRINT_ORIGINAL);
					}

					if (coRequest.getPrintMode() == CoConstants.PRINT_MODE_ONLINE) {
						coRequestHistoryDetailCargo.setPrintDt(tempPrintDate);
					}
					coRequestHistoryDetailCargo.setCoRptSeq(coRecipientsCargo.getCoRptSeq());
					coRequestHistoryDetailCollection.add(coRequestHistoryDetailCargo);

				}
				// End of changes.
				try {
					openConnection();
					finalResult = coRequestHistoryDetailCollection.insert();
					log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coRequestHistoryDetailCollection.insert() ,  Status :: " + finalResult);
					coRequest.setCoDetSeq(coRequestHistoryDetailCollection.getCargo().getCoDetSeq());
					commitFlag = 1;
				} catch (Exception e) {
					log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception while saving coRequestHistoryDetail :: " + e.getMessage());
					CoDebugger.debugException(e.getMessage(), e);
					commitFlag = -1;
				}finally {
					closeConnection();
				}
			}

			//updating co manual fields data
			try{
				CoManualDataCargo[] allManualData = null;
				if (coRequest!=null && coRequest.getHistorySwitch() == 'Y' && oldReqSeqNum != 0) {
					if(coRequest.getCoReqSeq()!=0 && oldReqSeqNum!=coRequest.getCoReqSeq()){
						allManualData = getManualData(oldReqSeqNum);
						if(null!=allManualData && allManualData.length>0){
							CoManualDataCollection collection = new CoManualDataCollection();
							for(CoManualDataCargo mdCargo:allManualData){
								CoManualDataCargo myCargo = new CoManualDataCargo();
								myCargo.setCoReqSeq(coRequest.getCoReqSeq());
								myCargo.setSeqNum(mdCargo.getSeqNum());
								myCargo.setFieldOrderNum(mdCargo.getFieldOrderNum());
								myCargo.setFieldContent(mdCargo.getFieldContent());
								collection.add(myCargo);
							}
							if(collection.size()>0){
								openConnection();
								boolean manData = collection.insert();
								log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coRequestHistoryDetailCollection.insert() ,  Status :: " + manData);
								CoDebugger.debugInformation("Manula data insert --- "+manData);
							}
						}
					}
				}
			} catch(Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			} finally {
				closeConnection();
			}

		} else {
			commitFlag = -1;
			closeConnection();
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - insertOriginalRequest - timeTaken : " + (System.currentTimeMillis() - startTime));
		return commitFlag;
	}

	/**
	 * Method to insert reprint request into CO_REQUEST_HISTORY.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return int
	 * 
	 */
	public int insertReprintRequest(COCorrespondence coRequest) {
		int commitFlag = 0;
		boolean finalResult = true;

		//if (finalResult) { commented since finalResult is always true
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection(
					conn);
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setActivate("IRD");
			coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode());
			coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
			if(null!=coRequest && coRequest.getGenerateDate()!=null){
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(coRequest.getGenerateDate()));
			}else{
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(CoDateFactory.getTimestamp()));
			}
			coRequestHistoryDetailCargo.setCoRptSeq(coRequest.getCoRptSeq());
			if (coRequest.getHistorySwitch() == CoConstants.CHAR_Y) {
				coRequestHistoryDetailCargo.setReprintSw('R');
			} else {
				coRequestHistoryDetailCargo.setReprintSw('O');
			}
			coRequestHistoryDetailCargo.setCreateDt(CoDateFactory
					.getTimestamp());
			coRequestHistoryDetailCargo.setCreateUserId(coRequest
					.getRequestUserId());
			coRequestHistoryDetailCargo.setArchiveDt(Timestamp
					.valueOf("2999-12-31 00:00:00.0"));
			coRequestHistoryDetailCargo.setCreateUserId("user01");
			coRequestHistoryDetailCargo.setCoRptSeq(null);
			coRequestHistoryDetailCollection
			.setCargo(coRequestHistoryDetailCargo);
			try {

				finalResult = coRequestHistoryDetailCollection.insert();
				coRequest.setCoDetSeq(coRequestHistoryDetailCollection
						.getCargo().getCoDetSeq());
				commitFlag = 1;
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
	//	} else
		 if (finalResult && coRequest.getEnrlmntId() > 0) {
			openConnection();
			CoRequestPosoCollection coRequestPosoCollection = new CoRequestPosoCollection();
			
			coRequestPosoCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestPosoCargo coRequestPosoCargo = new CoRequestPosoCargo();
			coRequestPosoCargo.setEnrlmntId(coRequest.getEnrlmntId());
			coRequestPosoCargo.setEnrlmntEffBeginDt(coRequest.getEnrlmntEffBeginDt());
			coRequestPosoCargo.setIncludeAllCases(coRequest.getIncludeAllCases());
			coRequestPosoCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestPosoCargo.setCreateUserId("user01");
			coRequestPosoCargo.setCreateDt(CoDateFactory.getTimestamp());

			coRequestPosoCollection
			.setCargo(coRequestPosoCargo);
			try {
				finalResult = coRequestPosoCollection.insert();
				commitFlag = 1;
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
		} else {
			commitFlag = -1;
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * Method to select batch requests from CO_REQUEST_HISTORY.
	 * 
	 * @param asOfDate
	 *            String
	 * @param massCoSw
	 *            char
	 * @return Object[]
	 * 
	 */
	public Object[] selectBatchRequest(String asOfDate, char massCoSw) {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		SimpleDateFormat sdfSource = new SimpleDateFormat("MM/dd/yyyy");
		java.util.Date parsedDate = null;
		try {
			parsedDate = sdfSource.parse(asOfDate);
			java.sql.Timestamp sqlDt = new java.sql.Timestamp(
					parsedDate.getTime());
			vCoRequestCargo.setGenerateDt(sqlDt);
			vCoRequestCargo.setMassGeneratedSw(massCoSw);
		} catch (Exception e) {

			CoDebugger.debugException(
					"exception in CoDAOServices.selectBatchRequest  "
							+ e.getMessage(), e);
		}
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByBatchRequest", vCoRequestCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"exception in CoDAOServices.selectBatchRequest  "
							+ e.getMessage(), e);
		}
		return finalResult;
	}

	/**
	 * Method to undo print update.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return int
	 * 
	 */
	public int undoPrintUpdate(COCorrespondence coRequest) {
		int commitFlag = 0;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		boolean finalResult = false;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("UPU");
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);
		coRequestHistoryCargo.setCoReqSeq(coRequest.getCoReqSeq());
		coRequestHistoryCargo.setPendingTrigSw(coRequest.getPendingTrigSw());
		coRequestHistoryCargo.setHistorySw(coRequest.getHistorySwitch());
		coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		}
		if (finalResult) {
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setActivate("UPU");
			coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode());
			coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestHistoryDetailCargo.setCoDetSeq(coRequest.getCoDetSeq());
			coRequestHistoryDetailCargo.setCreateDt(CoDateFactory
					.getTimestamp());
			coRequestHistoryDetailCollection
			.setCargo(coRequestHistoryDetailCargo);
			if ((coRequest.getHistorySwitch() == CoConstants.CHAR_Y)
					&& (coRequest.getPrintMode() == CoConstants.CHAR_N)) {
				try {
					finalResult = coRequestHistoryDetailCollection.delete();
					commitFlag = 1;
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					commitFlag = -1;
				}
			} else {
				try {
					finalResult = coRequestHistoryDetailCollection.update();
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					commitFlag = -1;
				}
			}
		} else {
			commitFlag = -1;
		}
		try {
			if (conn != null && ("I").equals(coRequest.getRunMode())) {
				CoDebugger.debugInformation("undoPrintUpdate to close");
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * Method to check existing original request.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequest(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setIndvId(aCoObj.getIndvId());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setT1DocId(aCoObj.getDocId());
		vCoRequestCargo.setLanguageCd(aCoObj.getLangCd());
		vCoRequestCargo.setProgramCd(aCoObj.getAssistanceProgramCode());
		// vCoRequestCargo.setProviderId(aCoObj.getProviderId());//Added for
		// BRGUS00084865
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		vCoRequestCargo.setT2DocTypeCd(aCoObj.getDocType());
		vCoRequestCargo.setT1DocTypeCd(aCoObj.getDocType());
		try {
			/*
			 * Defect ID : BRGUS00084865 Added By : deshmukha Date : 02/15/2008
			 * Change : Added the "if-else" block for 4327 series triggers. If a
			 * trigger with 4327 series has to be inserted or updated then in
			 * that case set the provider id as an extra parameter.
			 */

			if (CorrespondenceServices.co4327SeriesDocIdList.contains(aCoObj.getDocId())) {

				vCoRequestCargo.setProviderId(aCoObj.getProviderId());

				finalResult = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VCoRequest", "findByExisting4327Series",
						vCoRequestCargo, null, conn);

			} else {

				finalResult = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VCoRequest", "findByExistingOriginalRequest",
						vCoRequestCargo, null, conn);
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16098);
		}
		return finalResult;
	}

	/**
	 * This method queries both Request and Detail tables separately We expect
	 * maximum ONE record with printdate null in detail table The
	 * VCoRequestCargo object returned from this method is created and populated
	 * within this method.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingReprintRequest(COCorrespondence aCoObj)
			throws CoException {
		VCoRequestCargo[] vcargoArr = new VCoRequestCargo[0];
		// to be returned in case no records match.
		VCoRequestCargo vcargo = null;
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setCoReqSeq(aCoObj.getCoReqSeq());
		CorrespondenceServices.formatCoObject(cargo, aCoObj);
		cargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		cargo.setDocId(aCoObj.getDocId());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByReqSeqPendingTrig", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length != 0) { // then check in Detail
			// table
			Object[] resultDetail = null;
			CoRequestHistoryDetailCargo cargoDetail = new CoRequestHistoryDetailCargo();
			cargoDetail.setCoReqSeq(aCoObj.getCoReqSeq());
			cargoDetail.setCoRptSeq(aCoObj.getCoRptSeq());
			cargoDetail.setCreateDt(CoDateFactory.getTimestamp());
			try {
				if (aCoObj.getCoRptSeq() == 0) { // for Stage II compatibility
					resultDetail = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"CoRequestHistoryDetail",
							"findByReqSeqNullPrintDate", cargoDetail, null,
							conn);
				} else {
					resultDetail = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"CoRequestHistoryDetail",
							"findByReqSeqNullPrintDateWithRpt", cargoDetail,
							null, conn);
				}
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for CoRequestDetail",
						16099);
			}
			if (resultDetail != null && resultDetail.length != 0) {
				// this means there must be exactly one record
				vcargoArr = new VCoRequestCargo[1]; // create a new array
				vcargo = new VCoRequestCargo();
				// Set the misc params
				CoRequestHistoryCargo coDbObj = (CoRequestHistoryCargo) result[0];
				vcargo.setMiscParms(coDbObj.getMiscParms());
				// set the DetSeq
				CoRequestHistoryDetailCargo coDbDetObj = (CoRequestHistoryDetailCargo) resultDetail[0];
				vcargo.setCoDetSeq(coDbDetObj.getCoDetSeq());
				vcargoArr[0] = vcargo;
			}
		}
		return vcargoArr;
	}

	/**
	 * Method to get data from MO_EMPLOYEE for emp_ID.
	 * 
	 * @param empID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getHearingOfficerName(long empID) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpId(empID);
		moEmployeesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		moEmployeesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpIdDates", moEmployeesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for MoEmployees, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16061);
		}
		return result;
	}

	/**
	 * Method to get data from MO_Employee for Supervisor Details with UNIT_NUM.
	 * 
	 * @param unitNUM
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getSupervisorInfo(long unitNUM) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setUnitNum(unitNUM);
		moEmployeesCargo.setJobTitleCd("14");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findBySearchCriteria", moEmployeesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for MO_EMPLOYEES for Supervisor, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_EMPLOYEES for Supervisor", 16354);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_EMPLOYEES for Supervisor for Unit Number = "
							+ unitNUM, 16060);
		}
		return result;
	}

	/**
	 * Method to get data from HE_APPEAL and HE_APPEAL_PROGRAM based on
	 * Appeal_ID.
	 * 
	 * @param coAppealID
	 *            long
	 * @param caseNumber
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAppealDetails(long coAppealID, String caseNumber)
			throws CoException {
		Object[] result = null;
		VHeAppealProgramCargo heAppealCargo = new VHeAppealProgramCargo();
		heAppealCargo.setAppealId(coAppealID);
		heAppealCargo.setCaseNum(new Long(caseNumber).longValue());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VHeAppealProgram", "findByCaseNumber", heAppealCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for HE_APPEAL, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for HE_APPEAL ", 16348);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in HE_APPEAL", 16057);
		}
		return result;
	}

	/**
	 * Method to get data from HE_APPEAL_ADDRESS based on Appeal_ID.
	 * 
	 * @param coAppealID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRepMailingAddress(long coAppealID) throws CoException {
		Object[] result = null;
		HeAppealAddressCargo heAppealAddressCargo = new HeAppealAddressCargo();
		heAppealAddressCargo.setAppealGroupId(coAppealID);
		heAppealAddressCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"HeAppealAddress", "findByAppealIDandDate",
					heAppealAddressCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for HE_APPEAL_ADDRESS, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for HE_APPEAL_ADDRESS ", 16349);
		}
		return result;
	}

	/**
	 * Method to get data from DC_EDUCATION based on INDV_ID.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcEducation(long individualID) throws CoException {
		Object[] result = null;
		DcEducationCargo dcEducationCargo = new DcEducationCargo();
		dcEducationCargo.setIndvId(individualID);
		dcEducationCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEducation", "findByIndvIdCurrRow", dcEducationCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_EDUCATION", 16316);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_EDUCATION", 16040);
		}
		return result;
	}

	/**
	 * Method to get data from DC_DEMOGRAPHICS based on INDV_ID.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcDemographics(long individualID) throws CoException {
		Object[] result = null;
		DcDemographicsCargo dcDemographicsCargo = new DcDemographicsCargo();
		dcDemographicsCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDemographics", "findByIndivId", dcDemographicsCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DEMOGRAPHICS", 16315);
		}
		return result;
	}

	/**
	 * Method to get spouse indv ID data from DC_RELATIONSHIPS based on client's
	 * INDV_ID.
	 * 
	 * @param individualID
	 *            long
	 * @return long Indv ID
	 * @throws CoException
	 * 
	 */
	public long getSpouseId(long individualID) throws CoException {
		Object[] result = null;
		DcRelationshipsCargo dcRelationshipsCargo = new DcRelationshipsCargo();
		dcRelationshipsCargo.setIndvId(individualID);
		dcRelationshipsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcRelationshipsCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRelationships", "findByIndividualIDandDate",
					dcRelationshipsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_RELATIONSHIPS", 16322);
		}
		long refIndvId = -1;
		if (result != null) {
			for (int i = 0; i < result.length; i++) {
				if ((("WI").equals(((DcRelationshipsCargo) result[i]).getRelationshipTypeCd()))
						|| ("HU").equals(((DcRelationshipsCargo) result[i]).getRelationshipTypeCd())) {
					refIndvId = ((DcRelationshipsCargo) result[i])
							.getRefIndvId();
					break;
				}
			}
		}
		return refIndvId;
	}

	/**
	 * Method to get data from CoMassRecipientCriteria table based on generate
	 * date.
	 * 
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getMassCoCriteria() throws CoException {

		Object[] result = null;
		CoMassRecipientCriteriaCargo coMassRecipientCriteriaCargo = new CoMassRecipientCriteriaCargo();
		coMassRecipientCriteriaCargo
		.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMassRecipientCriteria", "findByGenerateDate",
					coMassRecipientCriteriaCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for Mass Correspondence Criteria", 16352);
		}
		return result;
	}

	/**
	 * Method to get the Next sequence number.
	 * 
	 * @param aSeqName
	 *            String
	 * @return long
	 * 
	 */
	public long getNextSeqNum(String aSeqName) {
		long oraSeqNum = 0;
		PreparedStatement tmpstmt = null;
		ResultSet tmprs = null;
		try {
			CoDebugger.debugMessage("ND-89611 aSeqName :"+aSeqName);
			String query = "select " + aSeqName + ".nextval from dual";
			String newquery = "select ?.nextval from dual";
			
			CoDebugger.debugMessage("ND-89611 aSeqName old sql:"+query);
			CoDebugger.debugMessage("ND-89611 aSeqName new sql:"+newquery);
			tmpstmt = conn.prepareStatement(newquery);
		    tmpstmt.setString(1, aSeqName);
			tmprs = tmpstmt.executeQuery();
			tmprs.next();
			oraSeqNum = tmprs.getLong(1);
		} catch (SQLException e) {
			CoDebugger.debugException(
					"Exception in getNextSeqNum while generating the number -  "
							+ e.getMessage(), e);
		} finally {
			if(null!=tmprs){
			try {
				tmprs.close();
			} catch (Exception e) {
				CoDebugger.debugException(
						"Exception while closing the resultset  "
								+ e.getMessage(), e);
			}
			}
			if(null!=tmpstmt){
			try {
				tmpstmt.close();
			} catch (Exception e) {
				CoDebugger.debugException(
						"Exception while closing the statement  "
								+ e.getMessage(), e);
			}
		 }
		}
		return oraSeqNum;
	}

	/**
	 * Method to get data for BI_FS_DETAIL for Case Num , Edg num and Program
	 * code.
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgnum
	 *            long
	 * @param programCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBiFSDetails(long caseNumber, long edgnum,
			String programCode) throws CoException {
		Object[] result = null;
		BiFsDetailCargo biFsBenefitsCargo = new BiFsDetailCargo();
		biFsBenefitsCargo.setCaseNum(caseNumber);
		biFsBenefitsCargo.setEdgNum(edgnum);
		biFsBenefitsCargo.setProgramCd(programCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiFsDetail", "findByCaseEdgeAndProgram",
					biFsBenefitsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed on BI_FS_DETAIL, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed on BI_FS_DETAIL ", 16373);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_FS_DETAIL", 16024);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APPLICATION_FOR_AID based on CASE_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getArApplication(long caseNum) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arAppCargo = new ArApplicationForAidCargo();
		arAppCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByCaseNum", arAppCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
					16079);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APPLICATION_FOR_AID",
					16014);
		}
		return result;
	}

	/**
	 * Method to get Physical or Mailing Address for a Case Number from
	 * DC_CASE_ADDRESSES.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @param addressType
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPhysicalAddresseeAddress(long aAppNumberI,
			String addressType) throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(aAppNumberI);
		dcCaseAddressesCargo.setAddrTypeCd(addressType);
		dcCaseAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByCaseNumberAddressType",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16311);
		}
		return result;
	}



	/**
	 * Method to get Absent Parent Address for a sequenceNumber from
	 * DC_ABSENT_PARENT_ADDRESS.
	 * 
	 * @param seqNumber
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAbsentParentAddressBySeqNum(long seqNumber)
			throws CoException {
		Object[] result = null;
		DcAbsentParentAddressesCargo dcAbsentParentAddressesCargo = new DcAbsentParentAddressesCargo();
		dcAbsentParentAddressesCargo.setAbsentParentSeqNum(seqNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcAbsentParentAddresses", "findBySeqNumber",
					dcAbsentParentAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_ABSENT_PARENT_ADDRESSES", 16309);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_ABSENT_PARENT_ADDRESSES", 16034);
		}
		return result;
	}

	/**
	 * Method to get Absent Parent Children for a Case Number from
	 * Dc_Children_Link.
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getAbsentParentChildren(long caseNumber) throws CoException {
		Object[] result = null;
		DcChildrenLinkCargo dcChildrenLinkCargo = new DcChildrenLinkCargo();
		Object[] params = new Object[1];

		params[0] = caseNumber;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcChildrenLink", "findByCaseNumber", dcChildrenLinkCargo,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CHILDREN_LINK", 16314);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CHILDREN_LINK", 16039);
		}
		return result;
	}

	/**
	 * Method to get data from RL_RECEPTION_LOG based on LOG_ID.
	 * 
	 * @param receptionID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRlReceptionLog(long receptionID) throws CoException {
		Object[] result = null;
		RlReceptionLogCargo cargo = new RlReceptionLogCargo();
		cargo.setRlLogId(receptionID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"RlReceptionLog", "findByLogId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for RL_RECEPTION_LOG", 16362);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in RL_RECEPTION_LOG", 16066);
		}
		return result;
	}

	/**
	 * Method to get data from RL_ENTRY_PURPOSE based on LOG_ID.
	 * 
	 * @param receptionID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRlEntryPurpose(long receptionID) throws CoException {
		RlEntryPurposeCargo cargo = new RlEntryPurposeCargo();
		cargo.setRlLogId(receptionID);
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"RlEntryPurpose", "findByLogId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for RL_ENTRY_PURPOSE", 16361);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in RL_ENTRY_PURPOSE", 16065);
		}
		return result;
	}

	/**
	 * Method to get data from BI_TANF_DETAIL based on EDG_NUM.
	 * 
	 * @param edgNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBiTanfDetail(long edgNum) throws CoException {
		Object[] result = null;
		BiTanfDetailCargo cargo = new BiTanfDetailCargo();
		cargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiTanfDetail", "findByEdgNum", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_TANF_DETAIL", 16088);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_TANF_DETAIL", 16026);
		}
		return result;
	}

	/**
	 * Method to get SSClaim Number or Rail Code from DC_INDV_SSCN.
	 * 
	 * @param indvId
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getSscnRailCode(long indvId, String typeCd)
			throws CoException {
		Object[] result = null;
		DcIndvSscnCargo dcIndvSscnCargo = new DcIndvSscnCargo();
		dcIndvSscnCargo.setIndvId(indvId);
		dcIndvSscnCargo.setTypeCd(typeCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvSscn", "findByIndividualIdTypeCd", dcIndvSscnCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_SSCN", 16320);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_INDV_SSCN", 16044);
		}
		return result;
	}

	/**
	 * Method to get Case Phone Number from DC_CASES.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCasePhone(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();
		dcCasesCargo.setCaseNum(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByCaseNum", dcCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}

		return result;
	}


	/**
	 * Method to get data from CO_RECIPIENT_CRITERIA based on case details The
	 * RecipientCriteriaDriver uses this method to get the doc ids needs to be
	 * attched.
	 * 
	 * @param coMassRecipientCriteriaCargo
	 *            CoMassRecipientCriteriaCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDocIDsForRecipientCriteria(

			CoMassRecipientCriteriaCargo coMassRecipientCriteriaCargo)
					throws CoException {
		Object[] result = null;
		coMassRecipientCriteriaCargo
		.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMassRecipientCriteria", "findByCaseCriteria",
					coMassRecipientCriteriaCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Error while getting recipient doc " + e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method to check if a Recipient Log has been created for the recipient.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingRLRequest(COCorrespondence aCoObj)
			throws CoException {
		Object[] result = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		// changing for RI
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setT1DocId(aCoObj.getDocId());
		vCoRequestCargo.setHistorySw(aCoObj.getHistorySwitch());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingRLRequest", vCoRequestCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for RL triggers in CoRequest",
					16360);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on USER_ID.
	 * 
	 * @param userID
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAdvisorByUserID(String userID) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setUserId(userID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findBySearchCriteria", moEmployeesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16356);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16062);
		}
		return result;
	}

	/**
	 * Method used to populate edgNum dropdown. Gets the trace ID based on
	 * indvid.
	 * 
	 * @param caseNum
	 *            long
	 * @param indvID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getTraceID(long caseNum, long indvID) throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo edIndvEligibilityCargo = new EdIndvEligibilityCargo();
		edIndvEligibilityCargo.setCaseNum(caseNum);
		edIndvEligibilityCargo.setIndvId(indvID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByIndvId",
					edIndvEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ELIGIBILITY",
					16345);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ELIGIBILITY",
					16056);
		}
		return result;
	}

	/**
	 * Method used to populate edgNum dropdown. Gets the edgNum based on traceID
	 * deprecated dont use this method as this does not use casenum (index) to
	 * search use getEdgnum instead.
	 * 
	 * @param traceID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgNumber(long traceID) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setEdgTraceId(traceID);
		java.sql.Timestamp sqlTimestamp = CoDateFactory.getTimestamp();
		edEligibilityCargo.setEligibilityBegDt(sqlTimestamp);
		edEligibilityCargo.setRecBeginDt(sqlTimestamp);
		edEligibilityCargo.setRecEndDt(sqlTimestamp);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByEdgTraceIdCurRow",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16053);
		}
		return result;
	}

	/**
	 * Method used to populate edgNum dropdown. Gets the edgNum based on traceID
	 * The finder used here does not look for a open elig end date.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgNum(long caseNum, long traceID) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgTraceId(traceID);
		java.sql.Timestamp sqlTimestamp = CoDateFactory.getTimestamp();
		edEligibilityCargo.setEligibilityBegDt(sqlTimestamp);
		edEligibilityCargo.setEligibilityEndDt(sqlTimestamp);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByEdgTraceIdEffBegDt",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16053);
		}
		return result;
	}

	/**
	 * Method used to get the EdgNum without any eff dates. The finder only
	 * searches by the void sw,casenum and traceid The finder used here does not
	 * look for a open elig end date.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgNumNoDates(long caseNum, long traceID)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgTraceId(traceID);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByEdgTraceIdVoidSW",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16053);
		}
		return result;
	}

	/**
	 * Method to get data from VBICCDMIPAYEE based on CASE_NUM, EDG_NUM and
	 * CCDMI_MUM.
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgnum
	 *            long
	 * @param ccdmiNumber
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCCDMIPayee(long caseNumber, long edgnum,
			String ccdmiNumber) throws CoException {
		Object[] result = null;
		VBiCcdmiPayeeCargo vBiCCDMICargo = new VBiCcdmiPayeeCargo();
		vBiCCDMICargo.setCaseNum(caseNumber);
		vBiCCDMICargo.setT1EdgNum(edgnum);
		vBiCCDMICargo.setCcdmiNum(ccdmiNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiCcdmiPayee", "findByCaseEdgeAndCCDMINumber",
					vBiCCDMICargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for View Ccdmi Payee, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for View Ccdmi Payee", 16370);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in View CCDMI Payee", 16073);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM.
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLInfo(long caseNumber) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumberNotNullDates",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for ED_VERIFICATION_CHECKLIST, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in ED_VERIFICATION_CHECKLIST", 16009);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM (for 1020-A FXX055).
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLInfo1020A(long caseNumber) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseDueDtNull",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for ED_VERIFICATION_CHECKLIST, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in ED_VERIFICATION_CHECKLIST", 16009);
		}
		return result;
	}



	/**
	 * Method to get [Verification Due Date] for notice 23.02.20
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgNum
	 *            long
	 * @param indvId
	 *            long         
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdVerificationChecklistForSchoolAttdnceTypeCd(long caseNumber, long edgNum, long indvId) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setEdgNum(edgNum);
		edVerificationCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByVCLTypeCdForSchoolAttendance",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for ED_VERIFICATION_CHECKLIST, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in ED_VERIFICATION_CHECKLIST", 16009);
		}
		return result;
	}



	/**
	 * Method to get data from DC_FINGER_IMAGES based on Indvid.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getImagingDate(long individualID) throws CoException {
		Object[] result = null;
		DcFingerImagesCargo dcFingerCargo = new DcFingerImagesCargo();
		dcFingerCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.customnonfinancial",
							"DcFingerImages", "findByIndvId", dcFingerCargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for DC_FINGER_IMAGES, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for DC_FINGER_IMAGES", 16317);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FINGER_IMAGES", 16041);
		}
		return result;
	}

	/**
	 * Method to get data from DC_3RD_PARTY_RES based on caseNum.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getThirdPartyInfo(long caseNum) throws CoException {
		Object[] result = null;
		Dc3RdPartyResCargo dc3rdPartyResCargo = new Dc3RdPartyResCargo();
		dc3rdPartyResCargo.setCaseNum(caseNum);
		dc3rdPartyResCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dc3rdPartyResCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPartyRes", "findByCaseNumAndDatePolicy",
					dc3rdPartyResCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_3RD_PARTY_RES", 16308);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_3RD_PARTY_RES", 16308);
		}
		return result;
	}

	/**
	 * Method to get data from DC_INDIVIDUAL_ALIEN based on Indvid.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAlienInfo(long individualID) throws CoException {
		Object[] result = null;
		DcIndividualAlienCargo dcIndividualAlienCargo = new DcIndividualAlienCargo();
		dcIndividualAlienCargo.setIndvId(individualID);
		dcIndividualAlienCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcIndividualAlienCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndividualAlien",
					"findByIndvIdEffectiveStartAndEndDate",
					dcIndividualAlienCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDIVIDUAL_ALIEN",
					16318);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_INDIVIDUAL_ALIEN",
					16042);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM, EDG_CREATE_SEQ
	 * and PROGRAM_CD.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @param programCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEligibilityDates(long caseNum, long edgTraceId,
			String programCd) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);		
		edEligibilityCargo.setEdgTraceId(edgTraceId);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setProgramCd(programCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByEdgCreateSeq", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16338);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16052);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEligibilityInfo(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCase", edEligibilityCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16334);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16050);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_FMA_BUDGET based on CASE_NUM,
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getSpendDownAmount(long caseNum, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdEligFmaBudgetCargo edEligFmaBudgetCargo = new EdEligFmaBudgetCargo();
		edEligFmaBudgetCargo.setCaseNum(caseNum);
		edEligFmaBudgetCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFmaBudget", "findByCoCaseNumEdgTraceId",
					edEligFmaBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_FMA_BUDGET", 16332);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIG_FMA_BUDGET",
					16048);
		}
		return result;
	}

	/**
	 * Method to get all Offices from MO_OFFICES.
	 * 
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getOffices() throws CoException {
		Object[] result = null;
		MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findBySearchCriteria", moOfficesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES", 16359);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for case in MO_OFFICES",
					16011);
		}
		return result;
	}

	/**
	 * Method to get all Employees from an Office.
	 * 
	 * @param offNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEmployees(long offNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setPriOfficeNum(offNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findBySearchCriteria", moEmployeesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16356);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for case in MO_EMPLOYEES",
					16062);
		}
		return result;
	}

	/**
	 * Gets the isOnline
	 * 
	 * @return boolean
	 */
	public boolean getIsOnline() {
		return isOnline;
	}

	/**
	 * Sets the isOnline
	 * 
	 * @param online
	 *            boolean
	 */
	public void setIsOnline(boolean online) {
		isOnline = online;
	}

	/**
	 * Sets the auto commit
	 * 
	 * @param commitFlag
	 *            boolean
	 */
	public void setAutoCommit(boolean commitFlag) {
		try {
			conn.setAutoCommit(commitFlag);
		} catch (java.sql.SQLException e) {
			CoDebugger.debugException("error setting connection properties "
					+ e.getMessage(), e);
		}
	}

	/**
	 * Method to get data from AR_APPLICATION_FOR_AID based on APP_NUM (XML
	 * Referred : APPLICATIONSTATUS.xml) DE(Denied), AP(Application pending),
	 * CP(Case pending), DI(Disposed) and AC(Application Complete).
	 * 
	 * @param caseAppNo
	 *            App Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDeniedApplication(String caseAppNo) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arAppAidCargo = new ArApplicationForAidCargo();
		arAppAidCargo.setAppNum(caseAppNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByAppNum", arAppAidCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for AR_APPLICATION_FOR_AID "
							+ e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
					16078);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APPLICATION_FOR_AID",
					16013);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APP_INDV based on APP_NUM.
	 * 
	 * @param caseAppNo
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getHOHAppIndv(String caseAppNo) throws CoException {
		Object[] result = null;
		ArAppIndvCargo arAppIndvCargo = new ArAppIndvCargo();
		arAppIndvCargo.setAppNum(caseAppNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppIndv", "findByAppHOH", arAppIndvCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_INDV", 16083);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_INDV", 16018);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APP_PROGRAM based on APP_NUM.XML :
	 * EDEDGSTATUS.xml.
	 * 
	 * @param caseAppNo
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getApplicationPrograms(String caseAppNo) throws CoException {
		Object[] result = null;
		ArAppProgramCargo arAppProgramCargo = new ArAppProgramCargo();
		arAppProgramCargo.setAppNum(caseAppNo);
		arAppProgramCargo.setProgStatusCd(CoConstants.DN);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgram", "findByAppStatus", arAppProgramCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_PROGRAM", 16086);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_PROGRAM", 16022);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APP_ADDR based on APP_NUMBER.
	 * 
	 * @param caseAppNo
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getApplicationAddress(String caseAppNo) throws CoException {
		Object[] result = null;
		ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
		arAppAddrCargo.setAppNum(caseAppNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppAddr", "findByAppNum", arAppAddrCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_ADDR", 16082);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_ADDR", 16017);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on EMP_ID.
	 * 
	 * @param empID
	 *            long
	 * @param generateDate
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAdvisorInfo(long empID, String generateDate)
			throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpId(empID);
		Object[] obj = { moEmployeesCargo, generateDate };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpId", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16061);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on EMP_NUM.
	 * 
	 * @param empNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAdvisorInfoByEmpNum(String empNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpNum(empNum);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"MoEmployees", "findByEmpNum", moEmployeesCargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16061);
		}
		return result;
	}

	/**
	 * Method to get all Employees from an Office.
	 * 
	 * @param offNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEmployees(String offNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setPriOfficeNum(Long.parseLong(offNum));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findBySearchCriteria", moEmployeesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16356);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for case in MO_EMPLOYEES",
					16010);
		}
		return result;
	}

	/**
	 * Method to get data from BI_TANF_DETAIL table for a given Edge Number,
	 * Case Number, and Benefit Number.
	 * 
	 * @param edgeNum
	 *            long
	 * @param benefitNum
	 *            String
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBITanfDetail(long edgeNum, String benefitNum,
			long caseNum) throws CoException {
		Object[] result = null;
		BiTanfDetailCargo biTanfDetailCargo = new BiTanfDetailCargo();
		biTanfDetailCargo.setEdgNum(edgeNum);
		biTanfDetailCargo.setBenefitNum(benefitNum);
		biTanfDetailCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiTanfDetail", "findByEdgeWarrantCaseNum",
					biTanfDetailCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_TANF_DETAIL", 16087);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_TANF_DETAIL", 16025);
		}
		return result;
	}

	/**
	 * Method to get data from SH_APPOINTMENTS based on APPT_ID AND STATUS_CD.
	 * 
	 * @param apptID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAppointmentDetails(long apptID) throws CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		shAppointmentsCargo.setApptId(apptID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointments", "findByAppointmentID",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16364);
		}
		return result;
	}

	/**
	 * Method to get data from SH_APPOINTMENT_PROGRAM based on APPT_ID.
	 * 
	 * @param apptID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAppointmentPrograms(long apptID) throws CoException {
		Object[] result = null;
		ShAppointmentProgramsCargo shAppointmentProgramsCargo = new ShAppointmentProgramsCargo();
		shAppointmentProgramsCargo.setApptId(apptID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointmentPrograms", "findByAppointmentID",
					shAppointmentProgramsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Sh Appointment Programs",
					16363);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Sh Appointment Programs", 16067);
		}
		return result;
	}

	/**
	 * The method to get data from CO_REASON_TEXT based on REASON_ID and
	 * LANGUAGE_CD.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param languageCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTextNoticeReasons(COCorrespondence coRequest,
			String languageCode) throws CoException {
		Object[] result = null;
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setLanguageCd(languageCode);
		Object[] obj = { coRTextCargo, coRequest.getReasonCdList() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByNoticeReasonCode", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REASON_TEXT", 16871);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REASON_TEXT", 16872);
		}
		return result;
	}

	/**
	 * Method to get all individuals from V_DC_CASE_INDV_DETAILS based on Case
	 * Number.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAllIndvByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		VDcCaseIndvDetailsCargo cargo = new VDcCaseIndvDetailsCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"VDcCaseIndvDetails", "findBycaseNumber", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_DC_CASE_INDV_DETAILS",
					16369);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_DC_CASE_INDV_DETAILS",
					16072);
		}
		return result;
	}

	/**
	 * Method to get all EDG Numbers from ED_ELIGIBILITY based on Case Number.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAbawdEdgNumber(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumberAndAbawdSw", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16336);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16051);
		}
		return result;
	}

	/**
	 * Method to get all ABAWD Individuals from ED_INDV_ELIGIBILITY based on EDG
	 * Trace Id.
	 * 
	 * @param edgTraceId
	 *            long
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAbawdIndv(long edgTraceId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo cargo = new EdIndvEligibilityCargo();
		cargo.setEdgTraceId(edgTraceId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCaseNumberAndAbawdSw", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ELIGIBILITY",
					16343);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ELIGIBILITY",
					16054);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APPLICATION_FOR_AID based on APP_NUM.
	 * 
	 * @param appNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAppTelephone(String appNum) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arAppCargo = new ArApplicationForAidCargo();
		arAppCargo.setAppNum(appNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByAppNum", arAppCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception " + e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
					16080);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APPLICATION_FOR_AID",
					16015);
		}
		return result;
	}

	/**
	 * Method to get data from V_BI_WARRANT_PAYEE based on EDG NUM and WARRANT
	 * NUM.
	 * 
	 * @param edgNum
	 *            long
	 * @param warrantNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getWarrantPayeeInfo(long edgNum, String warrantNum)
			throws CoException {
		Object[] result = null;
		VBiWarrantPayeeCargo vBiCargo = new VBiWarrantPayeeCargo();
		vBiCargo.setT1EdgNum(edgNum);
		vBiCargo.setWarrantNum(warrantNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantPayee", "findByWarrantNumber", vBiCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_BI_WARRANT_PAYEE", 16367);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_BI_WARRANT_PAYEE",
					16071);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_FS_BUDGET based on EDG TRACE ID and CASE
	 * NUM.
	 * 
	 * @param caseNum
	 *            String
	 * @param edgNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getAbawdFsAmount(String caseNum, String edgNum)
			throws CoException {
		Object[] result = null;

		return result;
	}

	/**
	 * Method to get data from ED_CASE_RECERT_DATES based on EDG NUM and CASE
	 * NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getReviewDate(long caseNum, long edgNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRecertCargo = new EdCaseRecertDatesCargo();
		edCaseRecertCargo.setCaseNum(caseNum);
		edCaseRecertCargo.setEdgNum(edgNum);
		edCaseRecertCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseEdgNumAndEffDate",
					edCaseRecertCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_CASE_RECERT_DATES",
					16323);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_CASE_RECERT_DATES",
					16047);
		}
		return result;
	}

	/**
	 * Get the appropriate Language Code for the case or application.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getLanguageCode(COCorrespondence aCoObj) throws CoException {
		Object[] result = null;
		Object[] result1 = null;
		Object cargo = null;
		char caseAppFlag = aCoObj.getCaseAppFlag();
		String caseAppNum = aCoObj.getCaseAppNumber();

		if (caseAppFlag == CoConstants.CHAR_C) {
			cargo = new DcCasesCargo();
			((DcCasesCargo) cargo).setCaseNum(Long.parseLong(caseAppNum));
		} else if (caseAppFlag == CoConstants.CHAR_A) {
			cargo = new ArApplicationForAidCargo();
			((ArApplicationForAidCargo) cargo).setAppNum(caseAppNum);
		}
		try {
			if (caseAppFlag == CoConstants.CHAR_C) {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCases", "findByCaseNum", (DcCasesCargo) cargo, null,
						conn);
			} else if (caseAppFlag == CoConstants.CHAR_A) {
				result1 = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"ArApplicationForAid", "findByAppNum",
						(ArApplicationForAidCargo) cargo, null, conn);
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		if (caseAppFlag == CoConstants.CHAR_C) {
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DC_CASES", 16038);
			}
		} else if (caseAppFlag == CoConstants.CHAR_A) {
			if (result1 == null || result1.length == 0) {
				throw new NoDataFoundException(
						"No data in AR_APPLICATION_FOR_AID", 16020);
			}
		}
		return CoConstants.CHAR_A == caseAppFlag ? result1 : result;
	}

	/**
	 * The method to get data from ED_ELIGIBILY based on Request Paramters.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param dispositionMap
	 *            HashMap
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEligiblityViewDetails(COCorrespondence coRequest,
			Map dispositionMap) throws CoException {

		List tIdresult = (ArrayList) dispositionMap.get(CoConstants.EDGTRACEID);
		StringBuffer traceIds = new StringBuffer();
		int resSize = tIdresult.size();
		for (int i = 0; i < resSize; i++) {
			if (i > 0) {
				traceIds.append(CoConstants.COMMA).append(
						(tIdresult.get(i).toString()));
			} else {
				traceIds.append(tIdresult.get(i).toString());
			}
		}
		List cSresult = (ArrayList) dispositionMap
				.get(CoConstants.CREATESEQ);
		StringBuffer createSeqs = new StringBuffer();
		int restSize = cSresult.size();
		for (int i = 0; i < restSize; i++) {
			if (i > 0) {
				createSeqs.append(CoConstants.COMMA).append(
						cSresult.get(i).toString());
			} else {
				createSeqs.append(cSresult.get(i).toString());
			}
		}
		Object[] result = null;
		VRpEligDetailsCargo vRpEligCargo = new VRpEligDetailsCargo();
		Object[] obj = { vRpEligCargo, coRequest.getCaseAppNumber(),
				traceIds.toString(), createSeqs.toString() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findbyCoAllAP", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException(
					"V_RP_ELIG_DETAILS.findbyCoAllAP() is having a problem ---  "
							+ e.getClass().getName(), e);
			throw new CoException(
					"Select failed in VRpEligDetails :getEligiblityViewDetails",
					16495);
		}
		return result == null ? new VRpEligDetailsCargo[0] : result;
	}

	/**
	 * Method to get data from ED_INDV_RSC_BUDGET based on CASE_NUM,
	 * EDG_TRACE_ID and Indv_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvRscBudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvRscBudgetCargo edIndvRscBudgetCargo = new EdIndvRscBudgetCargo();
		edIndvRscBudgetCargo.setCaseNum(caseNum);
		edIndvRscBudgetCargo.setEdgTraceId(traceId);
		edIndvRscBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvRscBudget", "findByIndvId", edIndvRscBudgetCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed Indv RSC Budget", 16330);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_FS_BUDGET based on CASE_NUM, EDG_TRACE_ID
	 * and Indv_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvFSBudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvFsBudgetCargo edIndvFsBudgetCargo = new EdIndvFsBudgetCargo();
		edIndvFsBudgetCargo.setCaseNum(caseNum);
		edIndvFsBudgetCargo.setEdgTraceId(traceId);
		edIndvFsBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvFsBudget", "findByIndvIdEdgTrace",
					edIndvFsBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed Indv FS Budget", 16329);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_TF_BUDGET based on CASE_NUM, EDG_TRACE_ID
	 * and Indv_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvTFBudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvTanfBudgetCargo edIndvTanfBudgetCargo = new EdIndvTanfBudgetCargo();
		edIndvTanfBudgetCargo.setCaseNum(caseNum);
		edIndvTanfBudgetCargo.setEdgTraceId(traceId);
		edIndvTanfBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvTanfBudget", "findByCoIndvId",
					edIndvTanfBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed Indv Tanf Budget",
					16331);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_FS_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgFSBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligFsBudgetCargo edEligFsBudgetCargo = new EdEligFsBudgetCargo();
		edEligFsBudgetCargo.setCaseNum(caseNum);
		edEligFsBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFsBudget", "findByIndvId", edEligFsBudgetCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG FS Budget", 16325);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_RSC_BUDGET based on EDG_TRACE_ID.
	 * 
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdgRSCBudget(long traceId) throws CoException {
		Object[] result = null;
		EdEligRscBudgetCargo edEligRscBudgetCargo = new EdEligRscBudgetCargo();
		edEligRscBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligRscBudget", "findByEdgTraceId",
					edEligRscBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG RSC Budget", 16326);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_RSC_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRSCBudgetDetails(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligRscBudgetCargo edEligRscBudgetCargo = new EdEligRscBudgetCargo();
		edEligRscBudgetCargo.setCaseNum(caseNum);
		edEligRscBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligRscBudget", "findByCaseEdgTraceId",
					edEligRscBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG RSC Budget", 16326);
		}
		return result;
	}

	/**
	 * Method for getting the appeal-id.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getVCORequest(COCorrespondence aCoObj) throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setT2CoReqSeq(aCoObj.getCoReqSeq());
		// changing for RI
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setT1DocId(aCoObj.getDocId());
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByCaseAppNumAndCoReqSeq",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_REQUEST", 16368);
		}
		return finalResult;
	}

	/**
	 * Method to get data from ED_ELIG_FS_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgTFBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligTanfBudgetCargo edEligTanfBudgetCargo = new EdEligTanfBudgetCargo();
		edEligTanfBudgetCargo.setCaseNum(caseNum);
		edEligTanfBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTanfBudget", "findByCaseEdgTraceId",
					edEligTanfBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG TANF Budget",
					16327);
		}
		return result;
	}

	/**
	 * The method to get data from DC_PRIMARY_PAYEE based on CASE_NUM and
	 * EDG_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPrimaryPayeeIndvId(long caseNum, long edgNum)
			throws CoException {
		Object[] result = null;
		DcPrimaryPayeeCargo dCPrimaryCargo = new DcPrimaryPayeeCargo();
		dCPrimaryCargo.setCaseNum(caseNum);
		dCPrimaryCargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcPrimaryPayee", "findByCaseNumberAndEdgNumber",
					dCPrimaryCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in DcPrimaryPayee", 16321);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcPrimaryPayee", 16150);
		}
		return result;
	}

	/**
	 * The method to get data from ED_INDV_ELIGIBILITY based on CASE_NUM,
	 * EDG_TRACE_ID AND CHIP_REFERRAL_SW.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getChipChildren(long caseNum, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo edIndvEligCargo = new EdIndvEligibilityCargo();
		edIndvEligCargo.setCaseNum(caseNum);
		edIndvEligCargo.setEdgTraceId(edgTraceId);
		edIndvEligCargo.setChipReferralSw(CoConstants.CHAR_Y);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCOCHIPReferalSw",
					edIndvEligCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ELIGIBILITY",
					16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ELIGIBILITY",
					16055);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityByCaseTP(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByTP07TP37", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16340);
		}
		return result;
	}

	/**
	 * Method to get data from CO_MASS_RECIPIENT_CRITERIA based on report date.
	 * 
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getMassReportData() throws CoException {

		Object[] result = null;
		CoMassRecipientCriteriaCargo massRecipientCargo = new CoMassRecipientCriteriaCargo();
		massRecipientCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMassRecipientCriteria", "findByReportDate",
					massRecipientCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CO_MASS_RECIPIENT_CRITERIA", 16093);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in CO_MASS_RECIPIENT_CRITERIA", 16027);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on edg number and type of
	 * assistance code.
	 * 
	 * @param edgNum
	 *            long
	 * @param tp
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEligibilityByEdgTP(long edgNum, String tp)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCargo.setTypeOfAssistanceCd(tp);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByEdgAndTP", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16337);
		}
		return result;
	}

	/**
	 * The method to get data from CO_TEXT based on DOC_ID.
	 * 
	 * @param docId
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTextInfo(String docId) throws CoException {
		Object[] result = null;
		CoTextCargo coTextCargo = new CoTextCargo();
		coTextCargo.setDocId(docId);
		coTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoText",
					"findByDocId", coTextCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("No data in CO_TEXT", 16094);
		}
		return result;
	}

	/**
	 * The method to get data from IN_NEW_BORN based on trace_id.
	 * 
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getNewBornInfo(long traceId) throws CoException {
		Object[] result = null;
		InNewBornCargo cargo = new InNewBornCargo();
		cargo.setNewBornTraceId(traceId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InNewBorn", "findByTraceIdAndEffectiveDates", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("No Data in IN_NEW_BORN", 16350);
		}

		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for case in IN_NEW_BORN",
					16350);
		}

		return result;
	}

	/**
	 * Method to get the data from IN_PROVIDER.
	 * 
	 * @param providerNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getProviderDetails(String providerNum) throws CoException {

		Object[] result = null;

		PmProvidersCargo cargo = new PmProvidersCargo();

		cargo.setProviderId(Long.valueOf(providerNum));

		try {

			result = CoDAOFactory.select(

					"gov.state.nextgen.common.collection.custom",

					"PmProviders", "findByProviderId", cargo, null,

					conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);

			throw new CoException("Select failed for IN_PROVIDER", 9966);

		}

		return result;

	}



	/**
	 * Method to get the data from In_Prescriber.
	 * 
	 * @param physiciansLicenseNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPrescriberDetailsByPhyLicNum(String physiciansLicenseNum)
			throws CoException {
		Object[] result = null;
		InPrescriberCargo cargo = new InPrescriberCargo();
		cargo.setPrescriberNum(physiciansLicenseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InPrescriber", "findByPrescriberNum", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_PRESCRIBER", 16007);
		}
		return result;
	}

	/**
	 * Calls updateHistory for CO track. To be used only by CO track.
	 * 
	 * @param coRequestList
	 *            ArrayList
	 * @param printStringList
	 *            ArrayList
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int updateCorrespondenceHistory(List coRequestList,
			List printStringList) throws CoException {
		return updateHistory(coRequestList, printStringList);
	}

	/**
	 * Method to get data from ED_ELIG_FS_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID. Introduced Newly for TF0001 and TF0002.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgMABudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligFmaBudgetCargo edEligFmaBudgetCargo = new EdEligFmaBudgetCargo();
		edEligFmaBudgetCargo.setCaseNum(caseNum);
		edEligFmaBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFmaBudget", "findByCaseNumEdgTraceId",
					edEligFmaBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG FMA Budget", 16324);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_FMA_BUDGET based on CASE_NUM,
	 * EDG_TRACE_ID and Indv_ID. Introduced Newly for TF0001 and TF0002.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvMABudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvFmaBudgetCargo edIndvFmaBudgetCargo = new EdIndvFmaBudgetCargo();
		edIndvFmaBudgetCargo.setCaseNum(caseNum);
		edIndvFmaBudgetCargo.setEdgTraceId(traceId);
		edIndvFmaBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvFmaBudget", "findByIndvIdEdgTrace",
					edIndvFmaBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed Indv FMA Budget", 16328);
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_SP_IND based on CASE_NUM Introduced Newly
	 * for TF0001 and TF0002.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseSpecialAccomodations(long caseNum) {
		Object[] result = null;
		DcCaseSpIndCargo dcCaseSpIndCargo = new DcCaseSpIndCargo();
		dcCaseSpIndCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseSpInd", "findByCaseNum", dcCaseSpIndCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(
					"Select Failed for DC_CASE_SP_IND for caseNum " + caseNum
					+ "  ", e);
		}
		return result;
	}

	/**
	 * Method to get data from AL_INDV_TANF_TL_SUMMAARY based on INDV_ID.
	 * Introduced Newly for TF0001 and TF0002.
	 * 
	 * @param indvid
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualTimeLimits(long indvid) throws CoException {
		Object[] result = null;
		AlIndvTanfTlSummaryCargo alIndvTanfTlSummaryCargo = new AlIndvTanfTlSummaryCargo();
		alIndvTanfTlSummaryCargo.setIndvId(indvid);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"AlIndvTanfTlSummary", "findByIndvIdByTimeLimitTypeForIQ",
					alIndvTanfTlSummaryCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AL_INDV_TANF_TL_SUMMARY",
					16076);
		}
		return result;
	}

	/**
	 * Method to get data from DC_INDV_TANF_TIER_LEVEL based on INDV_ID
	 * 
	 * @param indvid
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualTimeLimitsFromDC(long indvid)
			throws CoException {
		Object[] result = null;
		DcIndvTanfTierLevelCargo dcIndvTanfTierLevelCargo = new DcIndvTanfTierLevelCargo();
		dcIndvTanfTierLevelCargo.setIndvId(indvid);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcIndvTanfTierLevel", "findByIndvIdForIQ",
					dcIndvTanfTierLevelCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_TANF_TIER_LEVEL",
					16076);
		}
		return result;
	}

	/**
	 * The method to get data from V_RP_ELIG_DETAILS based on Request Paramters
	 * Creation Date: Sept-6th-2002
	 * 
	 * Introduced Newly for TF0001 and TF0002
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param dispostionMaps
	 *            HashMap
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEligiblityDenialView(COCorrespondence coRequest,
			Map dispostionMaps) throws CoException {
		List tIdresult = (ArrayList) dispostionMaps.get(CoConstants.EDGTRACEID);
		StringBuffer traceIds = new StringBuffer();
		int resSize = tIdresult.size();
		for (int i = 0; i < resSize; i++) {
			if (i > 0) {
				traceIds.append(CoConstants.COMMA).append(
						tIdresult.get(i).toString());
			} else {
				traceIds.append(tIdresult.get(i).toString());
			}
		}
		Object[] result = null;
		VRpEligDetailsCargo vRpEligCargo = new VRpEligDetailsCargo();
		vRpEligCargo.setCurrentEligInd(CoConstants.CHAR_A);
		Object[] obj = { vRpEligCargo, coRequest.getCaseAppNumber(),
				traceIds.toString(), "'DN','TN'" };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByCaseNumTraceIDStatus", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception in VRpEligDetails", 16371);
		}
		return result == null ? new VRpEligDetailsCargo[0] : result;
	}

	/**
	 * Method to get all program code based on indvid
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */

	public Object[] getAllProgramsForEdgIndv(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		VRpEligDetailsCargo vRpEligDetailsCargo = new VRpEligDetailsCargo();
		vRpEligDetailsCargo.setT1CaseNum(caseNum);
		vRpEligDetailsCargo.setIndvId(indvId);
		vRpEligDetailsCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		vRpEligDetailsCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByCaseNumIndvIdCurRow",
					vRpEligDetailsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_RP_ELIG_DETAILS", 000);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_RP_ELIG_DETAILS", 000);
		}
		return result;
	}

	/**
	 * Method to get data for Missed Appointemnts from SH_APPOINTMENTS based on
	 * APPT_ID Creation Date: (08/14/2002 3:30:00 PM)
	 * 
	 * Introduced Newly for SHM001 Reason Code
	 * 
	 * @param apptID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getMissedAppointmentID(long apptID) throws CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		shAppointmentsCargo.setApptId(apptID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointments", "findByMissedAppointments",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16365);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in SH_APPOINTMENTS", 16069);
		}
		return result;
	}

	/**
	 * Method to get Data Broker Information based on Case Number Creation Date:
	 * (08/14/2002 3:30:00 PM)
	 * 
	 * Introduced Newly for SHM001 Reason Code
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getDataBrokerID(long caseNumber) throws CoException {
		Object[] result = null;
		DcCreditAgencyInfoCargo dcCreditAgencyInfoCargo = new DcCreditAgencyInfoCargo();
		dcCreditAgencyInfoCargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCreditAgencyInfo", "findByCaseNumber",
					dcCreditAgencyInfoCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception " + e.getMessage(), e);
			throw new CoException("Select failed for DC_CREDIT_AGENCUY_INFO",
					16305);
		}
		return result;
	}

	/**
	 * The method to get data from EdIndvPenalties
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param indvId
	 *            Indv ID
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIPVSanction(long caseNum, long indvId, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdIndvPenaltiesCargo edIndvPenaltiesCargo = new EdIndvPenaltiesCargo();
		edIndvPenaltiesCargo.setCaseNum(caseNum);
		edIndvPenaltiesCargo.setEdgTraceId(edgTraceId);
		edIndvPenaltiesCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPenalties", "findByIndvId", edIndvPenaltiesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("Exception " + e.getMessage(), e);
			throw new CoException("Select failed for EdIndvPenalties ", 16306);
		}
		return result;
	}

	/**
	 * The method to get data from DC_INDV_IPV_SANCTION based on INDV_ID
	 * Creation Date: (08/30/2002 2:30:00 AM) Introduced Newly for SHM001 Reason
	 * Code
	 * 
	 * @param indvID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIPVSanction(long indvID) throws CoException {
		Object[] result = null;
		DcIndvIpvSanctionsCargo dcIndvIpvSanctionsCargo = new DcIndvIpvSanctionsCargo();
		dcIndvIpvSanctionsCargo.setIndvId(indvID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcIndvIpvSanctions", "findByindvIDIpvSanction",
					dcIndvIpvSanctionsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_IPV_SANCTION",
					16306);
		}
		return result;
	}

	/**
	 * 
	 * @param aCoRequest
	 * @return
	 */
	public void updateVclRequestDateForNCH034(COCorrespondence aCoRequest){
		Object[] objLst = new Object[1];
		EdVerificationChecklistCollection coll = null;
		EdVerificationChecklistCargo[] cargosArr = null;

		try {
			openConnection();
			objLst[0] = new Long(aCoRequest.getCaseAppNumber()); //case number
			coll =  new EdVerificationChecklistCollection();		
			cargosArr = (EdVerificationChecklistCargo[]) coll.select("findByVCLRequestDtandCommentsNull", objLst);
			openConnection();
			if(cargosArr != null) {
				EdVerificationChecklistCollection edVerificationChecklistCollection = null;

				for(int i = 0; i < cargosArr.length; i++){
					EdVerificationChecklistCargo cargos = null;
					edVerificationChecklistCollection = new EdVerificationChecklistCollection();
					cargos = cargosArr[i];
					cargos.setVclRequestDt(new Timestamp((new java.util.Date()).getTime()));
					edVerificationChecklistCollection.setCargo(cargos);
					edVerificationChecklistCollection.update(edVerificationChecklistCollection);	
				}
			}
		} catch (FrameworkException e) {
			CoDebugger.debugException("FrameworkException " + e.getMessage(), e);
		} catch (ApplicationException e) {
			CoDebugger.debugException("ApplicationException " + e.getMessage(), e);
		} catch (Exception e) {
			CoDebugger.debugException("Exception " + e.getMessage(), e);
		} finally {
			closeConnection();
		}
	}
	/**
	 * For update of Vcl_Due_Date
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @return EdVerificationChecklistCargo[]
	 * @throws CoException
	 * 
	 */
	public EdVerificationChecklistCargo[] updateVclDueDate(COCorrespondence aCoRequest) throws CoException {
		EdVerificationChecklistCargo cargo = new EdVerificationChecklistCargo();
		EdVerificationChecklistCargo[] result = null;
		cargo.setCaseNum(Long.parseLong(aCoRequest.getCaseAppNumber()));
		Map map = new HashMap();
		map.put("CARGO", cargo);
		map.put("USER_ID", aCoRequest.getRequestUserId());
		map.put("PRINT_DATE", CoDateFactory.getTimestamp());
		// BRGUS00121860 - thatiparthis - based on this doc_id EDBC will update
		// the record.
		map.put("DOCID", aCoRequest.getDocId());
		char draftSw = aCoRequest.getDraftSwitch();

		if (draftSw != CoConstants.CHAR_Y) {
			draftSw = CoConstants.CHAR_N;
		}
		map.put("DRAFT_SW", String.valueOf(draftSw));

		if (isOnline) {
			map.put("CONNECTION", null);
		} else {
			map.put("CONNECTION", conn);
		}
		boolean tryAgain = true;
		int maxReTrys = 5;
		int attempts = 0;
		while (tryAgain) {
			try {
				tryAgain = false;
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				attempts++;
				tryAgain = true;
				if (attempts >= maxReTrys) {
					CoDebugger
					.debugInformation("EBDC Interface Failed to Update/Incomplete(1020)--> EdVCLUpdate "
							+ e + e.getMessage());
					CoDebugger.debugInformation(e.getMessage());
					tryAgain = false;
					throw new CoException(
							"EBDC Interface Update failed/Imcomplete- Check EDBC Date Comparison(1020) "
									+ e + e.getMessage(), 16487);
				}
			} finally {
				closeConnection();
			}
		}
		return result;
	}

	/**
	 * For update of 1830_Print_Dt
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @throws CoException
	 * 
	 */
	public void update1830PrintDt(COCorrespondence aCoRequest)
			throws CoException {

		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();
		String docId = aCoRequest.getDocId();
		cargo.setRdFormDocCd(aCoRequest.getDocId());
		cargo.setCaseNum(Long.parseLong(aCoRequest.getCaseAppNumber()));
		cargo.setUpdateUserId(aCoRequest.getRequestUserId());
		cargo.setUpdateDt(aCoRequest.getPrintDate());
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		String dueDate = aCoRequest.getMiscParameters();
		java.sql.Timestamp dueDt = null;
		String[] params = new String[2];
		if ((dueDate != null)	&& !(dueDate.equalsIgnoreCase(CoConstants.EMPTY_STRING))) {
			params = dueDate.split("\\|");
			dueDate = params[0];
			if (dueDate.indexOf('-') >= 0) {
				dueDt = java.sql.Timestamp.valueOf(dueDate);
			} else {
				String[] vars = new String[3];
				vars = dueDate.split("\\/");
				dueDate = vars[2] + "-" + vars[0] + "-" + vars[1]
						+ " 00:00:00.0";
				dueDt = java.sql.Timestamp.valueOf(dueDate);
			}
		}
		// date form misc_parameter
		// BRGUS00146822 - NaredlaS
		if ((("FXX041").equals(docId) || ("FXX124").equals(docId))) {
			cargo.setForm1046DueDt(dueDt);
			cargo.setForm1046PrintDt(aCoRequest.getPrintDate());
		} else if (("FXX042").equals(docId) || ("FXX117").equals(docId)) {
			cargo.setForm2240DueDt(dueDt);
			cargo.setForm2240PrintDt(aCoRequest.getPrintDate());
		} else {
			cargo.setForm1830DueDt(dueDt);
			cargo.setForm1830PrintDt(aCoRequest.getPrintDate());
		}

		Map map = new HashMap();
		if (isOnline) {
			map.put("CONNECTION", null);
		} else {
			map.put("CONNECTION", conn);
		}
		map.put("TRACK_CODE", "CO");

		String temp = aCoRequest.getReasonCdList();
		if (temp != null) {
			try {
				temp = temp.trim();
				if (temp.length() > 0) {
					String numberString = null;
					StringTokenizer st = null;
					boolean multiple = false;
					if (temp.contains(",")) {
						st = new StringTokenizer(temp, ",");
						multiple = true;
					} else {
						cargo.setEdgNum(new Long(temp).longValue());
					}
					long num = 0;
					while (multiple && st.hasMoreElements()) {
						numberString = (String) st.nextElement();
						numberString = numberString.trim();
						num = Long.parseLong(numberString);
						cargo.setEdgNum(num);						
					}
				} // if ends here
			} catch (Exception e) {
				CoDebugger.debugException(
						"EDBC Recerts Interface Failed for (FXX300_DOC_ID)  Edg-->"
								+ e.getMessage(), e);
				throw new CoException(
						"EDBC Recerts Interface[updateRecerts] Failed for (FXX300_DOC_ID) for  Edg-->",
						16490);
			} finally {
				closeConnection();
			}
		} // if ends here
		else {
			closeConnection();
		}
	}

	/**
	 * Method to get data for Warrants Creation Date: (08/14/2002 3:30:00 PM)
	 * Introduced Newly for Form 5799(9-91)
	 * 
	 * @param t1edgNum
	 *            long
	 * @param warrantNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getWarrants(long t1edgNum, String warrantNum)
			throws CoException {
		Object[] result = null;
		VBiWarrantPayeeCargo vBiWarrantPayeeCargo = new VBiWarrantPayeeCargo();
		vBiWarrantPayeeCargo.setT1EdgNum(t1edgNum);
		vBiWarrantPayeeCargo.setWarrantNum(warrantNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantPayee", "findByWarrantNumber",
					vBiWarrantPayeeCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed on View V_BI_WARRANT_PAYEE",
					16367);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_BI_WARRANT_PAYEE",
					16071);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027- all medicaid edgs for the
	 * case
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getMedicaidEdg(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setPaymentBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setPaymentEndDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByMAPaymentDt", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 348);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 348);
		}
		return result;
	}

	/**
	 * Method to get groupAppealID for a Case Number from HE_APPEAL
	 * gov.state.nextgen.co.bo.CoDAOServices.getAppealID()
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getAppealID(long caseNumber) throws CoException {
		Object[] result = null;
		VHeAppealProgramCargo heAppealCargo = new VHeAppealProgramCargo();
		heAppealCargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VHeAppealProgram", "findAllByCaseNumber", heAppealCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_HE_APPEAL_PROGRAM",
					16422);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_HE_APPEAL_PROGRAM",
					16423);
		}
		return result;
	}

	/**
	 * Method to get data from HE_APPEAL_ADDRESS based on Appeal_ID
	 * gov.state.nextgen.co.bo.CoDAOServices.getRepMailingAddress() Creation
	 * date: (4/14/2002 11:09:12 AM)
	 * 
	 * @param coAppealID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] get4803Addressee(long coAppealID) throws CoException {
		Object[] result = null;
		HeAppealAddressCargo heAppealAddressCargo = new HeAppealAddressCargo();
		heAppealAddressCargo.setAppealGroupId(coAppealID);
		heAppealAddressCargo.setAddrTypeCd("NN");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"HeAppealAddress", "findByAppealIdAndType",
					heAppealAddressCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for HEAPPEALADDRESS Multiple Addressee, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for HEAPPEALADDRESS Multiple Addressee ",
					16411);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in HEAPPEALADDRESS Multiple Addressee", 16406);
		}
		return result;
	}

	/**
	 * Cancel a requested trigger
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int cancelRequestedTrigger(COCorrespondence aCoObject) throws CoException {
		//System.out.println("------- INSIDE cancelRequestedTrigger -------- start"); JIRA ND-12735
		CoDebugger.debugInformation("------- INSIDE cancelRequestedTrigger -------- start");
		boolean finalResult = false;
		openConnection();
		//System.out.println(" Connection set for CoRequestHistoryCollection"); JIRA ND-12735
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();

		coRequestHistoryCargo.setActivate("UPDATECANCEL");

		// System.out.println("CoRequestHistoryCollection set ejbsupport"); JIRA ND-12735
		CoDebugger.debugInformation("CoRequestHistoryCollection set ejbsupport");
		COCorrespondence aCoObj = aCoObject;
		if (aCoObj.getCoReqSeq() == 0) {
			aCoObj = getRequestedTrigger(aCoObj);
			CoDebugger
			.debugInformation("CO_REQ_SEQ after making a call for existing records:  "
					+ aCoObj.getCoReqSeq());
			//System.out.println("CO_REQ_SEQ after making a call for existing records:  "+ aCoObj.getCoReqSeq()); JIRA ND-12735
			// retrun success if there is no trigger for that day to update or
			// delete
			// so no need to call update or delete method
			if (aCoObj.getCoReqSeq() == 0) {
				// System.out.println("inside CO_REQ_SEQ =0"); JIRA ND-12735
				CoDebugger.debugInformation("inside CO_REQ_SEQ =0");
				closeConnection();
				return 0;
			}
		}


		coRequestHistoryCargo.setCoReqSeq(aCoObj.getCoReqSeq());
		
		

		CoDebugger.debugInformation("aco seq --->"+aCoObj.getCoReqSeq());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, aCoObj);		
		if (null!=aCoObj.getDocId()) {
			coRequestHistoryCargo.setDocId(aCoObj.getDocId());
		}

		coRequestHistoryCargo.setEmpId(aCoObj.getEmpId());
		CoDebugger.debugInformation("emp id---->"+aCoObj.getEmpId());

		coRequestHistoryCargo.setPendingTrigSw(aCoObj.getActionCode());
		CoDebugger.debugInformation("action code ----->"+aCoObj.getActionCode());

		if (null!=CoDateFactory.getTimestamp()) {
			coRequestHistoryCargo.setOrigPrintDt(CoDateFactory.getTimestamp());
			CoDebugger.debugInformation("orgin print dt ----->"+CoDateFactory.getTimestamp());
		}

		if(null!=CoDateFactory.getTimestamp()) {
			coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
			CoDebugger.debugInformation("update dt ---->"+CoDateFactory.getTimestamp());
		}

		if(null!=aCoObj.getRequestUserId()){
			coRequestHistoryCargo.setUpdateUserId(aCoObj.getRequestUserId());
		}

		if(aCoObj.getHistorySwitch()!='\0'){
			coRequestHistoryCargo.setHistorySw(aCoObj.getHistorySwitch());
		}

		if(null!=CoDateFactory.getTimestamp()){
			coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		}

		if(null!=aCoObj.getRequestUserId()){
			coRequestHistoryCargo.setUpdateUserId(aCoObj.getRequestUserId());
		}

		if(aCoObj.getHistorySwitch()!='\0'){
			coRequestHistoryCargo.setHistorySw(aCoObj.getHistorySwitch());
		}

		if(aCoObj.getDraftSwitch()!='\0'){
			coRequestHistoryCargo.setDraftSw(aCoObj.getDraftSwitch());
		}

		if(aCoObj.getDocType()!='\0'){
			coRequestHistoryCargo.setDocTypeCd(aCoObj.getDocType());
		}

		if(null!=aCoObj.getGenerateDate()) {
			coRequestHistoryCargo.setGenerateDt(aCoObj.getGenerateDate());
		}
		if(null!=aCoObj.getLangCd()){
			coRequestHistoryCargo.setLanguageCd(aCoObj.getLangCd());
		}


		coRequestHistoryCargo.setIndvId(aCoObj.getIndvId());
		CoDebugger.debugInformation("acod indiv id----->"+aCoObj.getIndvId());

		if(aCoObj.getActionCode()!='\0'){
			coRequestHistoryCargo.setActionCd(aCoObj.getActionCode());
		}
		//validate
		if(null!=aCoObj.getAssistanceProgramCode()){
			coRequestHistoryCargo.setProgramCd(aCoObj.getAssistanceProgramCode());
		}
		if(null!=aCoObj.getTypeOfAssistanceList()){
			coRequestHistoryCargo.setAssistanceList(aCoObj.getTypeOfAssistanceList());
		}

		if(null != aCoObj.getReasonCdList()) {
			coRequestHistoryCargo.setReasonCdList(aCoObj.getReasonCdList());
		}

		if(null != aCoObj.getMiscParameters()) {
			coRequestHistoryCargo.setMiscParms(aCoObj.getMiscParameters());
		}

		coRequestHistoryCargo.setApptId(aCoObj.getApptId());
		coRequestHistoryCargo.setOfficeNum(aCoObj.getOfficeNumber());

		if(null != aCoObj.getBenefitNumber()) {
			coRequestHistoryCargo.setBenefitNum(aCoObj.getBenefitNumber());
		}

		if(null != aCoObj.getLocationId()) {
			coRequestHistoryCargo.setLocationId(aCoObj.getLocationId());
		}

		coRequestHistoryCargo.setEdgNum(aCoObj.getEdgeNumber());
		CoDebugger.debugInformation("acoobj edge number --->"+aCoObj.getEdgeNumber());

		if(aCoObj.getMassGeneratedSw()!='\0'){
			coRequestHistoryCargo.setMassGeneratedSw(aCoObj.getMassGeneratedSw());
		}


		if(null != aCoObj.getChipAppNum()) {
			coRequestHistoryCargo.setChipAppNum(aCoObj.getChipAppNum());
		}

		coRequestHistoryCargo.setEdgTraceId(null);


		coRequestHistoryCargo.setProviderId(aCoObj.getProviderId());
		//System.out.println("aco obj provider id ----->"+aCoObj.getProviderId()); JIRA ND-12735
		CoDebugger.debugInformation("aco obj provider id ----->"+aCoObj.getProviderId());
		
		CoRequestHistoryCargo[] coReqHisCargo = (CoRequestHistoryCargo[]) getCoRequestHistoryByCoReqSeq(coRequestHistoryCargo.getCoReqSeq());
		if(coReqHisCargo != null && coReqHisCargo.length >0 && coReqHisCargo[0].getCreateUserId() != null){
			coRequestHistoryCargo.setCreateUserId(coReqHisCargo[0].getCreateUserId());
		}
		else if(null!=aCoObj.getRequestUserId()){
			coRequestHistoryCargo.setCreateUserId(aCoObj.getRequestUserId());
		}


		coRequestHistoryCargo.setUniqueTransId(258229);

		coRequestHistoryCargo.setArchiveDt(Timestamp
				.valueOf("2999-12-31 00:00:00.0"));

		if(null!=CoDateFactory.getTimestamp()){
			coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
		}
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		/**
		 * If the Action Code is CoConstants.CHAR_C ie) New trigger is being
		 * cancelled If the Action Code is CoConstants.CHAR_N ie) History
		 * trigger is being rolled back to make it not pending and also the
		 * detail record needs to be deleted.
		 */
		try {
			String caseNum =  aCoObj.getCaseAppNumber();
			String userId = aCoObj.getRequestUserId(); 

			String actionName = "Update:CoRequestHistory:" + caseNum;
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(userId);
			logStatement("CoDAOServices:cancelTrigger", actionName,issued.toString(),conn);
			finalResult = coRequestHistoryCollection.update();
			logStatement("", "","",conn);
		} catch (Exception e) {
			// e.printStackTrace(); JIRA ND-12735
			CoDebugger.debugException(
					"Exception while cancelling the requested trigger "
							+ e.getMessage(), e);
		}finally{
			closeConnection();
		}

		if (finalResult && aCoObj.getActionCode() == CoConstants.CHAR_N) {
			/**
			 * This means that this is a history reprint cancellation ie) the
			 * detail record for a history print is being deleted.
			 */
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection(
					conn);
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setCoReqSeq(aCoObj.getCoReqSeq());
			//System.out.println("aco obj req seq--->"+aCoObj.getCoReqSeq()); JIRA ND-12735
			CoDebugger.debugInformation("aco obj req seq--->"+aCoObj.getCoReqSeq());
			coRequestHistoryDetailCargo.setCoDetSeq(aCoObj.getCoDetSeq());
			//System.out.println("aco obj det seq req"+aCoObj.getCoDetSeq()); JIRA ND-12735
			CoDebugger.debugInformation("aco obj det seq req"+aCoObj.getCoDetSeq());

			if(null!=CoDateFactory.getTimestamp())
				coRequestHistoryDetailCargo.setUpdateDt(CoDateFactory
						.getTimestamp());

			if(null!=aCoObj.getRequestUserId())
				coRequestHistoryDetailCargo.setUpdateUserId(aCoObj
						.getRequestUserId());
			coRequestHistoryDetailCollection
			.setCargo(coRequestHistoryDetailCargo);
			try {
				finalResult = coRequestHistoryDetailCollection.delete();
			} catch (Exception e) {

				CoDebugger.debugException(
						"Exception while cancelling the requested detail trigger "
								+ e.getMessage(), e);
			} finally{
				closeConnection();
			}
		}
		if (!(finalResult)) {
			throw new CoException(
					"Exception while cancelling the requested trigger", 318);
		}
		return 0;
	}

	/**
	 * This method is to Trasnfer to requested Office
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int transferRequestedOffice(COCorrespondence aCoObj)
			throws CoException {
		boolean finalResult = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("UPDATEOFFICE");
		coRequestHistoryCargo.setOfficeNum(aCoObj.getOfficeNumber());
		coRequestHistoryCargo.setMiscParms(aCoObj.getMiscParameters());
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {

			CoDebugger.debugException(
					"Exception while trasnferring for  requested Office " + e,
					e);
		} finally {
			closeConnection();
		}

		if (!(finalResult)) {
			throw new CoException(
					"Exception while trasnferring for  requested Office", 318);
		}
		return 0;
	}

	/**
	 * Transfer a requested Individual trigger
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int transferRequestedIndividual(COCorrespondence aCoObj) throws CoException {
		boolean finalResult = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("UPDATEINDIVIUAL");
		coRequestHistoryCargo.setIndvId(aCoObj.getIndvId());
		coRequestHistoryCargo.setMiscParms(aCoObj.getMiscParameters());
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {
			CoDebugger.debugException("Exception while trasnferring for  requested Individual" + e, e);
		} finally {
			closeConnection();
		}

		if (!(finalResult)) {
			throw new CoException("Exception while trasnferring for  requested Individual", 318);
		}
		return 0;
	}

	/**
	 * Transfer a requested Employee trigger
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int transferRequestedEmployee(COCorrespondence aCoObj)
			throws CoException {
		boolean finalResult = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection ();
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("UPDATETRANSFER");
		coRequestHistoryCargo.setEmpId(aCoObj.getEmpId());
		coRequestHistoryCargo.setMiscParms(aCoObj.getMiscParameters());
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {

			CoDebugger.debugException(
					"Exception while trasnferring for  requested Employee" + e,
					e);
		} finally {
			closeConnection();
		}

		if (!(finalResult)) {
			throw new CoException(
					"Exception while trasnferring for  requested Employee", 318);
		}
		return 0;
	}

	/**
	 * USED BY ABOVE METHOD
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return COCorrespondence
	 * @throws CoException
	 * 
	 */
	public COCorrespondence getRequestedTrigger(COCorrespondence aCoObj)
			throws CoException {
		openConnection();
		VCoRequestCollection vCoRequestCollection = new VCoRequestCollection();
		vCoRequestCollection.setEJBSupported(false);
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setApptId(aCoObj.getApptId());
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT1DocId(aCoObj.getDocId());
		vCoRequestCargo.setEdgNum(aCoObj.getEdgeNumber());
		vCoRequestCargo.setGenerateDt(new Timestamp(aCoObj.getGenerateDate()
				.getTime()));

		// For Cancellation of 1830 Review Initiated before time,
		// No need to send already pending 1830
		vCoRequestCargo.setEdgNum(aCoObj.getEdgeNumber());

		vCoRequestCollection.add(vCoRequestCargo);
		Object[] obj = { vCoRequestCargo };
		Object[] result = null;
		try {
			if (aCoObj.getDocId().equals(CoConstants.FXX014_DOC_ID)) {
				result = (VCoRequestCargo[]) vCoRequestCollection.select(
						"findByCaseAppAndApptId", obj);
			} else {
				result = (VCoRequestCargo[]) vCoRequestCollection.select(
						"findByCaseAppDocIdAndGenDt", obj);
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			return aCoObj;
		} finally {
			closeConnection();
		}
		if (result != null && result.length > 0) {
			aCoObj.setCoReqSeq(((VCoRequestCargo) result[0]).getT2CoReqSeq());
		}
		return aCoObj;
	}

	/**
	 * Method to get Superviosor Emplopee ID based on Unit Number of Emplopyee
	 * gov.state.nextgen.co.bo.CoDAOServices.getUnitSupervisior
	 * 
	 * @param unitNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getUnitSupervisior(long unitNumber) throws CoException {
		Object[] result = null;
		MoUnitsCargo moUnitsCargo = new MoUnitsCargo();
		moUnitsCargo.setUnitNum(unitNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "MoUnits",
					"findByCaseAssignmentCd", moUnitsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_UNITS", 16424);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_UNITS", 16425);
		}
		return result;
	}

	/**
	 * This method is used to get the SIG Code used in 1132. Added by Mathew
	 * 
	 * @param aedgeNum
	 *            long
	 * @param aindvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getSigCode(long aedgeNum, long aindvId) throws CoException {
		Object[] result = null;
		InSigCargo cargo = new InSigCargo();
		cargo.setEdgNum(aedgeNum);
		cargo.setIndvId(aindvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "InSig",
					"findByEdgNumIndvIdCurRow", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSig", 16426);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in InSig", 16427);
		}
		return result;
	}

	/**
	 * Method to get all the recipientCriteria for the docID
	 * 
	 * @param docID
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getAllRecipientCriteriaForDoc(String docID)

			throws CoException {
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		CoMassRecipientCriteriaCargo massRecipientCargo = new CoMassRecipientCriteriaCargo();
		massRecipientCargo.setDocId(docID);
		massRecipientCargo.setEffBeginDt(today);
		massRecipientCargo.setEffEndDt(today);
		massRecipientCargo.setCriteriaBeginDt(today);
		massRecipientCargo.setCriteriaEndDt(today);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMassRecipientCriteria",
					"findByDocIdCriteriaBeginEndDate", massRecipientCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CO_MASS_RECIPIENT_CRITERIA", 16428);
		}
		return result;
	}

	/**
	 * Method to get Programs Based on Case Number
	 * gov.state.nextgen.co.bo.CoDAOServices.getCasePrograms
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCasePrograms(long caseNumber) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
		dcCaseProgramCargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findOnlyByCaseNum", dcCaseProgramCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM", 16429);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_PROGRAM", 16430);
		}
		return result;
	}

	/**
	 * This method returns the relevant Edges for an individual and case and
	 * program code
	 * 
	 * @param acaseNum
	 *            long
	 * @param aindvId
	 *            long
	 * @param aprogcd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgesByIndvCaseProgramCd(long acaseNum, long aindvId,
			String aprogcd) throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setProgramCd(aprogcd);
		cargo.setT1EligibilityBegDt(CoDateFactory.getTimestamp());
		cargo.setT1EligibilityEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findByCaseNumIndvIdProgramCd",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Edges by Program code", 16431);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in VEdEligibilityIndv",
					16432);
		}
		return result;
	}

	/**
	 * This method is used to calculate the Grant Amt(TANF) for an individual --
	 * 1016
	 * 
	 * @param acaseNum
	 *            long
	 * @param atraceId
	 *            long
	 * @param aindvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualTANFBudget(long acaseNum, long atraceId,
			long aindvId) throws CoException {
		Object[] result = null;
		EdIndvTanfBudgetCargo cargo = new EdIndvTanfBudgetCargo();
		cargo.setCaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setEdgTraceId(atraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvTanfBudget", "findByPrimaryKey", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Individual TANF Amount", 16433);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdIndvTanfBudget", 16434);
		}
		return result;
	}

	/**
	 * This method returns the relevant Edges for an individual and case
	 * 
	 * @param acaseNum
	 *            long
	 * @param aindvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getProgramsByIndvCase(long acaseNum, long aindvId)
			throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findByCaseNumIndvId", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting Programs By Indv",
					16435);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in VEdEligibilityIndv",
					16436);
		}
		return result;
	}

	/**
	 * Method to get data from SH_APPOINTMENTS based on APPT_ID AND STATUS_CD
	 * Creation Date: November 4th
	 * 
	 * @param apptID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getMissedAppointmentDetails(long apptID) throws CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		shAppointmentsCargo.setApptId(apptID);
		shAppointmentsCargo.setApptStatusCd("NS");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointments", "findByAppointmentIDandStatusCD",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16364);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in SH_APPOINTMENTS [Missed Appt]", 16068);
		}
		return result;
	}

	/**
	 * This method returns the AbsentParentSupportAmount Info - used in 1701
	 * 
	 * @param absentSeqNo
	 *            long
	 * @param acaseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getAbsentParentSupportInfo(long absentSeqNo, long acaseNum)
			throws CoException {
		Object[] result = null;
		DcAbsentParentSupportCargo cargo = new DcAbsentParentSupportCargo();
		cargo.setAbsentParentSeqNum(absentSeqNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcAbsentParentSupport", "findByCaseNumSeqNum", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Absent Parent Support Info", 16461);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AbsentParentSupport",
					16462);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM and PROGARM CD
	 * gov.state.nextgen.co.bo.CoDAOServices.getCaseVCLInfo() Creation Date:
	 * November 18th-2002
	 * 
	 * @param caseNumber
	 *            long
	 * @param programCode
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPostPonedVerifications(long caseNumber,
			String programCode) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setProgramCd(programCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByProgranDueDtNull",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for ED_VERIFICATION_CHECKLIST, Exception = "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM
	 * gov.state.nextgen.co.bo.CoDAOServices.getCaseVCLInfo() Creation Date:
	 * November 18th-2002
	 * 
	 * @param caseNumber
	 *            long
	 * @param programCode
	 *            String
	 * @param edgNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLPrintInfo(long caseNumber, String programCode,
			long edgNum) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setProgramCd(programCode);
		edVerificationCargo.setEdgNum(edgNum);
		edVerificationCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByProgranEffEndDtNull",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for EdVerificationChecklist, Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist",
					16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in PostPoned EdVerificationChecklist",
					16009);
		}
		return result;
	}

	/**
	 * For update of Vcl_Due_Date for Program Code and case Number Creation date
	 * : November-18th-2002
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @param programCode
	 *            String
	 * @param edgNum
	 *            long
	 * @param draftSw
	 *            char
	 * @return EdVerificationChecklistCargo[]
	 * @throws CoException
	 * 
	 */
	public EdVerificationChecklistCargo[] updateVclDueDate(
			COCorrespondence aCoRequest, String programCode, long edgNum,
			char draftSw) throws CoException {

		EdVerificationChecklistCargo cargo = new EdVerificationChecklistCargo();
		EdVerificationChecklistCargo[] result = null;
		cargo.setCaseNum(Long.parseLong(aCoRequest.getCaseAppNumber()));
		cargo.setProgramCd(programCode);
		cargo.setEdgNum(edgNum);
		Map map = new HashMap();
		map.put("CARGO", cargo);
		map.put("USER_ID", aCoRequest.getRequestUserId());
		map.put("PRINT_DATE", CoDateFactory.getTimestamp());
		char draft = draftSw;
		if (draft != CoConstants.CHAR_Y) {
			draft = CoConstants.CHAR_N;
		}
		map.put("DRAFT_SW", String.valueOf(draft));

		if (isOnline) {
			map.put("CONNECTION", null);
		} else {
			map.put("CONNECTION", conn);
		}
		boolean tryAgain = true;
		int maxReTrys = 5;
		int attempts = 0;
		while (tryAgain) {
			try {

				tryAgain = false;
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				attempts++;

				if (attempts >= maxReTrys) {
					CoDebugger
					.debugInformation("EBDC Interface Failed to Update/Incomplete(TF0001) --> EdVCLUpdate "
							+ e + e.getMessage());
					CoDebugger.debugInformation(e.getMessage());
					tryAgain = false;
					throw new CoException(
							"EBDC Interface Update failed/Incomplete- Check EDBC Date Comparison(TF0001)"
									+ e + e.getMessage(), 16488);
				} 
			} finally {
				closeConnection();
			}
		}
		return result;
	}

	/**
	 * This method returns the EdgeInfo - used in 1031. This method may return
	 * duplicate edge numbers.
	 * 
	 * @param acaseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgesByCaseNum(long acaseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(acaseNum);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEDGES", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting All edges in Case",
					16463);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_ELIGIBILITY getting all edges for case",
					16464);
		}
		return result;
	}

	/**
	 * This method returns the relevant CERTIFIED Edges for an individual and
	 * case and program code <BR>
	 * Used by 1027A- for Medicaid Edges.
	 * 
	 * @param acaseNum
	 *            long
	 * @param aindvId
	 *            long
	 * @param aprogcd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCertEdgesByIndvCaseProgCd(long acaseNum, long aindvId,
			String aprogcd) throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setProgramCd(aprogcd);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findByCaseNumCertIndvIdProgCd",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Certified Edges by Program Code",
					16465);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_ED_ELIGIBILITY_INDV",
					16466);
		}
		return result;
	}

	/**
	 * Method to get postponed verification pending month
	 * 
	 * @param caseNum
	 *            long
	 * @param progCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPostponedVerificationPendingDt(long caseNum,
			String progCd) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProgramCd(progCd);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumAndStatusCd", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting postponed verification pending dt",
					16467);
		}
		return result;
	}

	/**
	 * Method to get the Primary Card holder (Primary payee - for 1172)
	 * 
	 * @param caseNum
	 *            long
	 * @param issMthdCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPrimaryCardHolder(long caseNum, String issMthdCd)
			throws CoException {
		Object[] result = null;
		DcPrimaryPayeeCargo cargo = new DcPrimaryPayeeCargo();
		cargo.setCaseNum(caseNum);
		cargo.setIssuanceMethodCd(issMthdCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcPrimaryPayee", "findByCaseNumIssMethodCd", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Primary Card Holder Info", 16469);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No Data in Dc Primary Payee for Primary Card Holder",
					16470);
		}
		return result;
	}

	/**
	 * Method to get the Prescriber or Pharmacy Number in Lockin used in 1027-A
	 * 
	 * @param indvId
	 *            long
	 * @param recTypeCd
	 *            char
	 * @param provActType
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getLockinActivityDetails(long indvId, char recTypeCd,
			long provActType) throws CoException {
		Object[] result = null;
		InLockinActivityCargo cargo = new InLockinActivityCargo();
		cargo.setIndvId(indvId);
		cargo.setRecordType(recTypeCd);
		cargo.setProvActivityType(provActType);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InLockinActivity",
					"findByIndvIdRecordTypeProvActivityTypeCurRow", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting In Lockin Activity - details",
					16471);
		}
		return result;
	}

	/**
	 * Method to get the Prescriber Info - used in 1027A
	 * 
	 * @param prescriberNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPrescriberDetails(String prescriberNum)
			throws CoException {
		Object[] result = null;
		InPrescriberCargo inPrescriberCargo = new InPrescriberCargo();
		inPrescriberCargo.setPrescriberNum(prescriberNum);
		inPrescriberCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		inPrescriberCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InPrescriber", "findByPrescriberNo", inPrescriberCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting In Prescriber - Details", 16473);
		}
		return result;
	}

	/**
	 * Method to get the Pharmacy Info - used in 1027-A
	 * 
	 * @param phmcyNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPharmacyDetails(String phmcyNum) throws CoException {
		Object[] result = null;
		InPharmacyCargo inPharmacyCargo = new InPharmacyCargo();
		inPharmacyCargo.setPhmcyNbr(phmcyNum);
		inPharmacyCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		inPharmacyCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InPharmacy", "findByPharmacyNo", inPharmacyCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting In Pharmacy - Details", 16475);
		}
		return result;
	}

	/**
	 * Method to get the Dc indv SSCN Details - used in 1027A
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getDCIndVSSCNDetails(long indvId) throws CoException {
		Object[] result = null;
		DcIndvSscnCargo dcIndvSscnCargo = new DcIndvSscnCargo();
		dcIndvSscnCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvSscn", "findByIndv", dcIndvSscnCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting Dc Indv SSCN - Details", 16477);
		}
		return result;
	}

	/**
	 * Method to get the EdIndvDateSpecificCargo - used in TF0001
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getDateSpecific(long caseNum, long indvId, long traceId)
			throws CoException {
		Object[] result = null;
		EdIndvDateSpecificCargo edIndvDateSpecificCargo = new EdIndvDateSpecificCargo();
		edIndvDateSpecificCargo.setCaseNum(caseNum);
		edIndvDateSpecificCargo.setIndvId(indvId);
		edIndvDateSpecificCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvDateSpecific", "findByIndvAndTraceId",
					edIndvDateSpecificCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting EdIndvDateSpecificCargo - Details",
					16479);
		}
		return result;
	}

	/**
	 * Method to get the InLockinLimtedMcCargo - used in MU001
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */

	/**
	 * Method to get the DCSSICargo - used in 1830 to check whether 1840 is
	 * required
	 * 
	 * @param caseNum
	 *            Long
	 * @param benTypeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getDCSSIInfo(Long caseNum, String benTypeCd)
			throws CoException {
		Object[] result = null;
		Timestamp currtime = CoDateFactory.getTimestamp();
		Object[] params = { currtime, currtime, caseNum, benTypeCd };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcSsi",
					"findByCaseIndvBenType", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting DCSSICargo : getDCSSIInfo", 16492);
		}
		return result;
	}
	/**
	 * Method to find case worker for casenum then find office details
	 * @param caseNum
	 * @return
	 * @throws CoException 
	 */
	public Object[] getCaseWorkerOfficeAddress(long caseNum) throws CoException{
		Object[] result = null;
		MoOfficeAddressesCargo cargo = new MoOfficeAddressesCargo();
		cargo.setAddressTypeCd("MA");
		Object [] params = new Object[4];
		params[0]=caseNum;
		params[1]=cargo;
		params[2]=CoDateFactory.getTimestamp();
		params[3]=CoDateFactory.getTimestamp();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByCaseNumAddressType",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_OFFICE_ADDRESSES findByCaseNumAddressType",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_OFFICE_ADDRESSES findByCaseNumAddressType",
					16063);
		}
		return result;


	}
	//CH-24187
	/**
	 * Method to find case worker for casenum then find office details
	 * @param caseNum
	 * @return
	 * @throws CoException 
	 */
	public Object[] getCaseWorkerOfficeAddressWithOutJobTitle(long caseNum) throws CoException{
		Object[] result = null;
		MoOfficeAddressesCargo cargo = new MoOfficeAddressesCargo();
		cargo.setAddressTypeCd("MA");
		Object [] params = new Object[4];
		params[0]=caseNum;
		params[1]=cargo;
		params[2]=CoDateFactory.getTimestamp();
		params[3]=CoDateFactory.getTimestamp();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByCaseNumAddressTypeWithOutJobTitle",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_OFFICE_ADDRESSES findByCaseNumAddressTypeWithOutJobTitle",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_OFFICE_ADDRESSES findByCaseNumAddressTypeWithOutJobTitle",
					16063);
		}
		return result;


	}
	//CH-24187


	/**@author mbhende
	 * Method to find case manager for casenum then find office details
	 * to find the value for CASE_MNGR_ADD
	 * @param caseNum
	 * @return
	 * @throws CoException 
	 */
	public Object[] getCaseManagerOfficeAddress(long caseNum) throws CoException{
		Object[] result = null;
		MoOfficeAddressesCargo cargo = new MoOfficeAddressesCargo();
		cargo.setAddressTypeCd("PA");
		Object [] params = new Object[4];
		params[0]=caseNum;
		params[1]=cargo;
		params[2]=CoDateFactory.getTimestamp();
		params[3]=CoDateFactory.getTimestamp();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByManagerCaseNumAddressType",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_OFFICE_ADDRESSES findByCaseNumAddressType",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_OFFICE_ADDRESSES findByCaseNumAddressType",
					16063);
		}
		return result;


	}



	/**@author mbhende
	 * Method to find case manager for casenum then find office details
	 * to find the value for CASE_MNGR_OFFICE
	 * @param caseNum
	 * @return
	 * @throws CoException 
	 */
	public Object[] getCaseManagerCaseNum(long caseNum) throws CoException{
		Object[] result = null;
		MoOfficesCargo cargo = new MoOfficesCargo();

		Object [] params = new Object[3];
		params[0]=caseNum;
		params[1]=CoDateFactory.getTimestamp();
		params[2]=CoDateFactory.getTimestamp();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByCaseManagerCaseNum",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for Mo_Offices_Cargo findByCaseManagerCaseNum",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Mo_Offices_Cargo findByCaseManagerCaseNum",
					16063);
		}
		return result;
	}



	/**@author mbhende
	 * Method to find case manager for casenum then find office details
	 * to find the value for COUNTY_OFFICE_NM and COUNTY_PHONE_NUM
	 * @param caseNum
	 * @return
	 * @throws CoException 
	 */
	public Object[] getCaseWorkerCaseNum(long caseNum) throws CoException{
		Object[] result = null;
		MoOfficesCargo cargo = new MoOfficesCargo();

		Object [] params = new Object[1];
		params[0]=caseNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByCaseWorkerCaseNum",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for Mo_Offices_Cargo findByCaseWorkerCaseNum",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Mo_Offices_Cargo findByCaseWorkerCaseNum",
					16063);
		}
		return result;
	}



	/**
	 * Method to find Phone details for all authorised reps
	 * @author mbhende
	 * @param caseNum
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcPhnDetailsCargo[] getAuthorizedRepPhnDetails(long caseNum) throws FrameworkException, ApplicationException,CoException{
		DcAuthRepCargo[] authRepsCargos = getAuthorizedRepDetails(caseNum);
		if (authRepsCargos!=null && authRepsCargos.length>0 ) {
			long[] authReps = new long[authRepsCargos.length];
			for (int i = 0; i < authRepsCargos.length; i++) {
				authReps[i] = authRepsCargos[i].getAuthrepSeqNum();
			}
			Object[] params= new Object[1];

			params[0]=authReps;
			DcPhnDetailsCollection addrCol = new DcPhnDetailsCollection();
			return (DcPhnDetailsCargo[]) addrCol.select("findByAuthRepSeqNum",params);
		}
		else{
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}
	}




	/**
	 * Method to find Email details for all authorised reps
	 * @author mbhende
	 * @param caseNum
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcEmailDetailsCargo[] getAuthorizedRepEmailDetails(long caseNum) throws FrameworkException, ApplicationException,CoException{
		DcAuthRepCargo[] authRepsCargos = getAuthorizedRepDetails(caseNum);
		if (authRepsCargos!=null && authRepsCargos.length>0 ) {
			long[] authReps = new long[authRepsCargos.length];
			for (int i = 0; i < authRepsCargos.length; i++) {
				authReps[i] = authRepsCargos[i].getAuthrepSeqNum();
			}
			Object[] params= new Object[1];

			params[0]=authReps;
			DcEmailDetailsCollection addrCol = new DcEmailDetailsCollection();
			return (DcEmailDetailsCargo[]) addrCol.select("findByAuthRepSeqNum",params);
		}
		else{
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}

	}


	/**
	 * @author mbhende
	 * Method to get data from MO_OFFICE_ADDRESSES based on OFFICE_NUM AND TYPE
	 * CODE
	 * 
	 * @param officeNo
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getOfficeAddressByTypeCodeMAPA(long officeNo)
			throws CoException {
		Object[] result = null;
		MoOfficeAddressesCargo moOfficeAddressesCargo = new MoOfficeAddressesCargo();
		moOfficeAddressesCargo.setOfficeNum(officeNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByOffNumAdrrTypMaPa",
					moOfficeAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_OFFICE_ADDRESSES findByOffNumAdrrTypMaPa",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_OFFICE_ADDRESSES findByOffNumAdrrTypMaPa",
					16063);
		}
		return result;
	}








	/**
	 * Method to get data from MO_OFFICE_ADDRESSES based on OFFICE_NUM AND TYPE
	 * CODE
	 * 
	 * @param officeNo
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getOfficeAddressByTypeCode(long officeNo, String typeCd)
			throws CoException {
		Object[] result = null;
		MoOfficeAddressesCargo moOfficeAddressesCargo = new MoOfficeAddressesCargo();
		moOfficeAddressesCargo.setOfficeNum(officeNo);
		moOfficeAddressesCargo.setAddressTypeCd(typeCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByOfficeAddressType",
					moOfficeAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for MO_OFFICE_ADDRESSES findByOfficeAddressType",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in MO_OFFICE_ADDRESSES findByOfficeAddressType",
					16063);
		}
		return result;
	}

	/**
	 * Method to get data from BI_WARRANTR_DETAIL based on case num, edg num,
	 * and TP code - used in 1082
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @param tpCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */	
	/**
	 * returns the CoText data for DocId and Language
	 * 
	 * @param docId
	 *            - The document Id --- TF0001 or TF0002
	 * @param languageCode
	 *            - The language
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTextData(String docId, String languageCode)
			throws CoException {
		Object[] result = null;
		CoTextCargo coTextCargo = new CoTextCargo();
		coTextCargo.setDocId(docId);
		coTextCargo.setLanguageCd(languageCode);
		coTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoText",
					"findByLanguageCode", coTextCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_TEXT", 16031);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_TEXT", 16031);
		}
		return result;
	}

	/**
	 * Returns the CoText data Language Creation date 03/18/2003
	 * 
	 * @param languageCode
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCoTextAllReasons(String languageCode) throws CoException {
		Object[] result = null;
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setLanguageCd(languageCode);
		coRTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByAllReasonCodes", coRTextCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("SELECT FAILED FOR CO_REASON_TEXT", 16871);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REASON_TEXT", 16872);
		}
		return result;
	}

	/**
	 * This method returns the DC_CASE_SP_IND (SP_IND_CD = "7" - visually
	 * impaired) SPECIALACCOMMODATION reference table should have this entry.
	 * Creation date - 10/27/2003
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getVisuallyImpairedIndividuals(long caseNum) {
		Object[] result = null;
		DcCaseSpIndCargo dcCaseSpIndCargo = new DcCaseSpIndCargo();
		dcCaseSpIndCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseSpInd", "findByVisuallyImpairedCaseNum",
					dcCaseSpIndCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("Select failed for DC_CASE_SP_IND ", e);
		}
		return result;
	}

	/**
	 * This method returns the DC DISABILITY DETAIL ("VI" - visually impaired)
	 * data relevant for the individual list. We might not have any record for
	 * Visually Impaired. Implying that we can get 0 rows. Hence we are not
	 * checking if the resulting[] has a zero length or not. Creation date -
	 * 03/04/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceIds
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getVisuallyImpairedIndividuals(long caseNum, String traceIds)
			throws CoException {
		Object[] result = null;
		DcDisabilityDetailCargo dcDisabilityDetailCargo = new DcDisabilityDetailCargo();
		dcDisabilityDetailCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcDisabilityDetailCargo.setEffEndDt(CoDateFactory.getTimestamp());
		Object[] obj = { dcDisabilityDetailCargo, String.valueOf(caseNum),
				traceIds };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisabilityDetail", "findByVisuallyImpaired", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DISABILITY_DETAIL",
					16304);
		}
		return result;
	}

	/**
	 * Method to get data from BI_WARRANTR_DETAIL based on case num, and TP code
	 * - used in 1082 Edg Drop down on Manual
	 * 
	 * @param caseNum
	 *            long
	 * @param tpCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */

	/**
	 * This method returns the InManagedCare Details for a given Individual Id
	 * Creation date - April 19, 2003
	 * 
	 * @param indvId
	 *            long
	 * @param eligBegindt
	 *            java.sql.Timestamp
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getInManagedCareInfo(long indvId,
			java.sql.Timestamp eligBegindt) throws CoException {

		Object[] result = null;
		InManagedCareCargo inManagedCareCargo = new InManagedCareCargo();
		inManagedCareCargo.setIndvId(indvId);
		inManagedCareCargo.setBeginDt(eligBegindt);
		inManagedCareCargo.setEndDt(eligBegindt);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InManagedCare", "findByIndvId1027ADetails",
					inManagedCareCargo, null, conn);
		} catch (Exception e) {
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for InManagedCare: getInManagedCareInfo",
					16000);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_MANAGED_CARE", 16000);
		}
		return result;
	}

	/**
	 * Method to get all Certified Individuals from ED_INDV_ELIGIBILITY based on
	 * EDG Trace Id. Creation Date: (05/05/2003 05.41.10 PM)
	 * 
	 * @param edgTraceId
	 *            long
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCertifiedIndv(long edgTraceId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo cargo = new EdIndvEligibilityCargo();
		cargo.setEdgTraceId(edgTraceId);
		cargo.setCaseNum(caseNum);
		cargo.setGroupInd(CoConstants.CHAR_C);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCaseNumEDGTraceIDGrpInd",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ELIGIBILITY",
					16343);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ELIGIBILITY",
					16054);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027- all medicaid edgs for the
	 * case Creation Date: (05/06/2003 04.45.10 PM)
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAllMedicaidEdgNumbers(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setProgramCd(CoConstants.MA);
		edEligibilityCargo.setEligibilityBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setEligibilityEndDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCOOngoingApprovedEdg",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_OT_GP_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgOTGPTFBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligOtgpBudgetCargo edEligOtgpBudgetCargo = new EdEligOtgpBudgetCargo();
		edEligOtgpBudgetCargo.setCaseNum(caseNum);
		edEligOtgpBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligOtgpBudget", "findByCaseNumEdgTraceId",
					edEligOtgpBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_OTGP_BUDGET",
					16327);
		}
		return result;
	}

	/**
	 * Retrieve CoText data for a reason code list and Language Creation date
	 * June 03, 2003
	 * 
	 * @param reasonCdList
	 *            String
	 * @param languageCode
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCoTextReasonCodeList(String reasonCdList,
			String languageCode) throws CoException {
		Object[] result = null;
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setLanguageCd(languageCode);
		coRTextCargo.setReasonId(reasonCdList);
		coRTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByReasonAndLanguage", coRTextCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("SELEECT FAILED FOR CO_REASON_TEXT", 16871);
		}
		if (result == null || result.length == 0) {
			CoDebugger.debugMessage("NO DATA FOUND FOR REASON_ID(S) --> "
					+ reasonCdList);
		}
		return result;
	}

	/**
	 * Method to get all Primary payee for the case, used for 1026 manual
	 * dropdown
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPrimaryPayee(long caseNum) throws CoException {
		Object[] result = null;
		DcPrimaryPayeeCargo cargo = new DcPrimaryPayeeCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcPrimaryPayee", "findByCaseNumber", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting Primary payee",
					16469);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_PRIMARY_PAYEE for the case", 16470);
		}
		return result;
	}

	/**
	 * Method to get case profile from dc_case_profile, used for 1020 for TSI_SW
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCaseProfile(long caseNum) throws CoException {
		Object[] result = null;
		DcCaseProfileCargo cargo = new DcCaseProfileCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProfile", "findByCaseNumber", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting case profile", 16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Dc DC_CASE_PROFILE for the case", 16830);
		}
		return result;
	}

	/**
	 * BRGUS00117479 - bhattaj - Method modifed to change finder method name to
	 * get correct payee, use join between dc_payee and dc_primary_payee tables
	 * Method to get all alternate payees for the case.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCasePayees(long caseNum) throws CoException {
		Object[] result = null;
		DcPayeeCargo cargo = new DcPayeeCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcPayee",
					// "findByCaseNum",
					"findByCaseAltPayeeSw", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting case payee", 16827);
		}
		return result;
	}

	/**
	 * Method to get data from CO_TEXT for Title on 1830
	 * 
	 * @param docId
	 *            String
	 * @param textOrderNO
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCoTextTitles(String docId, long textOrderNO)
			throws CoException {
		Object[] result = null;
		CoTextCargo coTextCargo = new CoTextCargo();
		coTextCargo.setDocId(docId);
		coTextCargo.setTextOrderNum(textOrderNO);
		coTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoText",
					"findByDocIdAndTextOrderNumber", coTextCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in CO_TEXT " + e, 16095);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_TEXT", 16095);
		}
		return result;
	}

	/**
	 * Gets user's email id and uses it as from user
	 * 
	 * @param userId
	 *            String
	 * @return String
	 */
	public String getUserEmailId(String userId) {
		Object[] result = null;
		MoEmployeesCargo cargo = new MoEmployeesCargo();
		cargo.setUserId(userId);
		String userEmail = null;
		try {
			result = (MoEmployeesCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpUserID", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(
					"User " + userId
					+ "  email id cannot be determined for reasons : "
					+ e.getMessage(), e);
			return null;
		}
		if (result != null && result.length > 0) {
			CoDebugger.debugInformation("User " + userId + "  email id s = "
					+ ((MoEmployeesCargo) result[0]).getEmail());

			if (((MoEmployeesCargo) result[0]).getEmail() != null
					&& ((MoEmployeesCargo) result[0]).getEmail().trim()
					.length() != 0) {
				userEmail = ((MoEmployeesCargo) result[0]).getEmail();
			}
		}
		return userEmail;
	}
	
	public MoEmployeesCargo getUserName(String userId) {
		Object[] result = null;
		MoEmployeesCargo cargo = new MoEmployeesCargo();
		cargo.setUserId(userId);
		String userName = null;
		MoEmployeesCargo moEmpCargo =  new MoEmployeesCargo();
		try {
			result = (MoEmployeesCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpUserID", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("User " + userId+ "  user Name cannot be determined for reasons : "+ e.getMessage(), e);
			return null;
		}
		if (result != null && result.length > 0) {

			moEmpCargo = (MoEmployeesCargo) result[0];

			
		}
		return moEmpCargo;
	}
		
	

	/**
	 * Method to retrieve an EMP_ID of the worker who receives a Client
	 * Requested Change alert for a case
	 * 
	 * @param aCaseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getAlEmpID(long aCaseNum) throws CoException {
		Object[] result = null;
		AlCaseAssignmentsCargo alCaseAssignmentsCargo = new AlCaseAssignmentsCargo();
		alCaseAssignmentsCargo.setCaseNum(aCaseNum);
		alCaseAssignmentsCargo.setAlertTypeCd(CoConstants.CC);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"AlCaseAssignments", "findByCaseAlertTypeCC",
					alCaseAssignmentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AL_CASE_ASSIGNMENTS",
					16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AL_CASE_ASSIGNMENTS",
					16061);
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on CASE_NUM Fetch all
	 * Indvs, do not check for ActiveInCaseSw/EffEndDt
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAllDcCaseIndividuals(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseAppNo);
		dcCaseIndividualCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseIndividualCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCoCaseNumIndvs",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		if (result != null && result.length == 0) {
			throw new CoException("No data in DcCaseIndividual", 16037);
		}
		return result;
	}

	/**
	 * The method to get data from DC_MINERAL_RIGHTS based on INDV_ID AND
	 * MINERAL_SEQ Creation Date: DEC 11th-2002
	 * 
	 * @param indvID
	 *            long
	 * @param mineralSeq
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIndvMineralRightsDetails(long indvID, long mineralSeq)
			throws CoException {
		Object[] result = null;
		DcMineralRightsCargo dcMineralRightsCargo = new DcMineralRightsCargo();
		dcMineralRightsCargo.setIndvId(indvID);
		dcMineralRightsCargo.setSequenceNum(mineralSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMineralRights", "findByIndividualIDAndMineralSeq",
					dcMineralRightsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("Exception " + e.getMessage(), e);
			throw new CoException("Select failed for DC_MINERAL_RIGHTS", 16753);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_MINERAL_RIGHTS",
					16754);
		}
		return result;
	}

	/**
	 * The method to get data from DC_ADDRESS_BOOK based on COMPANY_ID Creation
	 * Date: DEC 11th-2002
	 * 
	 * @param companyID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCompanyAddressDetails(long companyID) throws CoException {
		Object[] result = null;
		DcAddressBookCargo dcAddressBookCargo = new DcAddressBookCargo();
		dcAddressBookCargo.setCompanyId(companyID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcAddressBook", "findByCompanyID", dcAddressBookCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for DC_ADDRESS_BOOK", 16625);
		}
		return result;
	}

	/**
	 * This method returns the relevant Liquid Resources record for an
	 * individual based on account number Creation date - Dec 09, 2002
	 * 
	 * @param szBankAccNum
	 *            String
	 * @param lIndVId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLiquidResourcesDetails(String szBankAccNum, long lIndVId)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setBankAccountNum(szBankAccNum);
		cargo.setIndvId(lIndVId);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findByAccountNumAndIndvId", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * This method returns the relevant JointOwnership record(s) for an
	 * individual based on sequence number Creation date - Dec 12, 2002
	 * 
	 * @param sequenceNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcJointOwnershipDetails(long sequenceNum)
			throws CoException {
		Object[] result = null;
		DcJointOwnershipCargo cargo = new DcJointOwnershipCargo();
		cargo.setSequenceNum(sequenceNum);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcJointOwnership", "findBySequenceNum", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_JOINT_OWNERSHIP", 16643);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_JOINT_OWNERSHIP",
					16644);
		}
		return result;
	}
	/**
	 * This method returns the relevant JointOwnership record(s) for all
	 * individuals in case based for resource type VH .
	 * @author rparanjpe
	 * 
	 * @param sequenceNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcJointOwnershipDetailsForCaseFORVehicle(long caseNum)
			throws CoException {
		Object[] result = null;
		Object [] params = new Object[4];
		params[0]=CoDateFactory.getTimestamp();
		params[1]=CoDateFactory.getTimestamp();
		params[2]=caseNum;
		params[3]="VH";
		DcJointOwnershipCargo cargo = new DcJointOwnershipCargo();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcJointOwnership", "findByCaseIndvResourceType", cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_JOINT_OWNERSHIP", 16643);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_JOINT_OWNERSHIP",
					16644);
		}
		return result;
	}

	/**
	 * This method returns the relevant JointOwnership record(s) for all
	 * individuals in case based on sequence number .
	 * @author rparanjpe
	 * 
	 * @param sequenceNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcJointOwnershipDetailsForCase(long caseNum)
			throws CoException {
		Object[] result = null;
		Object [] params = new Object[3];
		params[0]=CoDateFactory.getTimestamp();
		params[1]=CoDateFactory.getTimestamp();
		params[2]=caseNum;

		DcJointOwnershipCargo cargo = new DcJointOwnershipCargo();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcJointOwnership", "findByCaseIndv", cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_JOINT_OWNERSHIP", 16643);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_JOINT_OWNERSHIP",
					16644);
		}
		return result;
	}

	/**
	 * This method returns the CoText data relevant for that Reason Code
	 * Creation date - Dec 12th 2002
	 * 
	 * @param reasonCd
	 *            String
	 * @param language
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCoText1233Data(String reasonCd, String language)
			throws CoException {
		Object[] result = null;
		CoReasonTextCargo cargo = new CoReasonTextCargo();
		cargo.setReasonId(reasonCd);
		cargo.setLanguageCd(language);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByReasonAndLanguage", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REASON_TEXT", 16871);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REASON_TEXT", 16872);
		}
		return result;
	}

	/**
	 * This method returns the InNeContracts data relevant for that Contract Num
	 * Creation date - Dec 12th 2002
	 * 
	 * @param contractNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getInNeContractsData(long contractNum) throws CoException {
		Object[] result = null;
		InNeContractsCargo cargo = new InNeContractsCargo();
		cargo.setNeconContractNum(contractNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InNeContracts", "findByContractNumCurrRec", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_NE_CONTRACTS", 16602);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_NE_CONTRACTS", 16603);
		}
		return result;
	}

	/**
	 * This method returns the InNeContracts data relevant for that Contract Num
	 * Creation date - Dec 12th 2002
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPayeeForCase(long caseNumber, long edgNumber)
			throws CoException {
		Object[] result = null;
		DcPayeeCargo cargo = new DcPayeeCargo();
		cargo.setCaseNum(caseNumber);
		cargo.setEdgNum(edgNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcPayee",
					"findByCaseEdgCurrRec", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_PAYEE", 16827);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_PAYEE", 16828);
		}
		return result;
	}

	/**
	 * This method returns the DcFacility data relevant for that IndvId Creation
	 * date - Dec 15th 2002
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFacilityDetails(long indvId) throws CoException {
		Object[] result = null;
		DcFacilityCargo cargo = new DcFacilityCargo();
		cargo.setIndvId(indvId);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFacility", "findByIndvDates", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_FACILITY", 16607);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FACILITY", 16608);
		}
		return result;
	}

	/**
	 * This method returns the Dc3RdPartyRes data relevant for that Case, IndvId
	 * and Dates Creation date - Dec 15th 2002
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] get3676ThirdPartyRes(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		Dc3RdPartyResCargo cargo = new Dc3RdPartyResCargo();
		cargo.setCaseNum(caseNum);
		cargo.setIndvId(indvId);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPartyRes", "findByCaseIndvDates", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_3RD_PARTY_RES", 16769);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_3RD_PARTY_RES", 16770);
		}
		return result;
	}

	/**
	 * This method returns the InProvider data relevant for that IndvId Creation
	 * date - Dec 15th 2002
	 * 
	 * @param vendorNo
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAgencyDetails(String vendorNo) throws CoException {
		Object[] result = null;
		InProviderCargo cargo = new InProviderCargo();
		cargo.setProviderNum(vendorNo);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InProvider", "findByProviderNumDates", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_PROVIDER", 16609);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_PROVIDER", 16610);
		}
		return result;
	}

	/**
	 * The method to get data from DC_TRANSFERED_RESOURCES based on INDV_ID,
	 * RESOURCE_TYPE_CD AND CATEGORY_CD Creation Date: DEC 16th-2002
	 * 
	 * @param indvID
	 *            long
	 * @param resoCd
	 *            String
	 * @param cateCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvTransResource(long indvID, String resoCd,
			String cateCd) throws CoException {
		Object[] result = null;
		DcTransferedResourcesCargo dcTransferedResourcesCargo = new DcTransferedResourcesCargo();
		dcTransferedResourcesCargo.setIndvId(indvID);
		dcTransferedResourcesCargo.setResourceTypeCd(resoCd);
		dcTransferedResourcesCargo.setResourceCatagoryCd(cateCd);
		dcTransferedResourcesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcTransferedResources",
					"findByIndividualResourceCategory",
					dcTransferedResourcesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for DC_TRANSFERED_RESOURCES",
					16777);
		}
		return result;
	}

	/**
	 * The method to get data from ED_INDV_PENALITIES based on INDV_ID, TRACE_ID
	 * AND CASE NUMBER Creation Date: DEC 17th-2002
	 * 
	 * @param indvID
	 *            long
	 * @param caseNumber
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvPenalitiesDate(long indvID, long caseNumber,
			long edgTraceId) throws CoException {
		Object[] result = null;
		EdIndvPenaltiesCargo edIndvPenaltiesCargo = new EdIndvPenaltiesCargo();
		edIndvPenaltiesCargo.setIndvId(indvID);
		edIndvPenaltiesCargo.setCaseNum(caseNumber);
		edIndvPenaltiesCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPenalties", "findByIndvId", edIndvPenaltiesCargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PENALITIES", 16619);
		}
		return result;
	}

	/**
	 * The method to get data from Dc_Life_Insurance based on INDV_ID AND
	 * COMPANY_ID Creation Date: DEC 18th-2002
	 * 
	 * @param indvID
	 *            long
	 * @param companyId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvInsuranceDetails(long indvID, long companyId)
			throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo dcLifeInsuranceCargo = new DcLifeInsuranceCargo();
		dcLifeInsuranceCargo.setIndvId(indvID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance", "findByIndividualAndCompanyID",
					dcLifeInsuranceCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		return result;

	}

	/**
	 * This method returns the relevant Liquid Resources records for an
	 * individualID NOTE: uses an existing finder from another track; requested
	 * DC to put a comment that Correspondence also uses this finder
	 * 
	 * Creation date - Dec 18, 2002
	 * 
	 * @param lIndVId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLiquidResourcesDetailsByIndv(long lIndVId)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setIndvId(lIndVId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findByIndvIdCurrRow", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * This method returns the relevant Attending Practioner's records
	 * 
	 * for an individualID NOTE: uses an existing finder from another track;
	 * requested DC to put a comment that Correspondence also uses this finder
	 * Creation date - Dec 21, 2002
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcMedicalApprovalByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcMedicalApprovalCargo cargo = new DcMedicalApprovalCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcMedicalApproval", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICAL_APPROVAL",
					16656);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_MEDICAL_APPROVAL",
					16657);
		}
		return result;
	}

	/**
	 * This method returns the relevant ArAppProgram record(s) for an individual
	 * based on APP_NUM & PROGRAM_CD Creation date - Dec 23, 2002
	 * 
	 * @param caseAppNo
	 *            String
	 * @param programCD
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getArApplicationPrograms(String caseAppNo, String programCD)
			throws CoException {
		Object[] result = null;
		ArAppProgramCargo arAppProgramCargo = new ArAppProgramCargo();
		arAppProgramCargo.setAppNum(caseAppNo);
		arAppProgramCargo.setProgramCd(programCD);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgram", "findByAppNumAndProgramCode",
					arAppProgramCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_PROGRAM", 16535);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_PROGRAM", 16535);
		}
		return result;
	}

	/**
	 * This method returns the DcCareGiverAgency data relevant for that IndvId
	 * Creation date - Dec 23th 2002
	 * 
	 * @param indvId
	 *            long
	 * @param careGiverType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCareGiverAgencyDetails(long indvId, String careGiverType)
			throws CoException {
		Object[] result = null;
		DcCaregiverAgencyCargo cargo = new DcCaregiverAgencyCargo();
		cargo.setIndvId(indvId);
		cargo.setRelationshipCd(careGiverType);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaregiverAgency", "findByIndvRelationTypeDates", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CAREGIVER_AGENCY",
					16614);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CAREGIVER_AGENCY",
					16615);
		}
		return result;
	}

	/**
	 * This method returns the ArAppProgramIndv data relevant for that
	 * Application Number, Program and IndvId I am using an existing finder of
	 * AR. Creation date - Dec 25th 2002
	 * 
	 * @param appNum
	 *            String
	 * @param indvId
	 *            long
	 * @param program
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getArAppProgramIndvData(String appNum, long indvId,
			String program) throws CoException {
		Object[] result = null;
		ArAppProgramIndvCargo cargo = new ArAppProgramIndvCargo();
		cargo.setAppNum(appNum);
		cargo.setIndvId(indvId);
		cargo.setProgramCd(program);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgramIndv", "findByIndvProgram", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_PROGRAM_INDV",
					16617);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_PROGRAM_INDV",
					16618);
		}
		return result;
	}

	/**
	 * The method to get data from V_AR_INTEREST_LIST based on INDV_ID Creation
	 * Date: DEC 26th-2002
	 * 
	 * @param indvID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndividualTOADetails(long indvID) throws CoException {
		Object[] result = null;
		VArInterestListCargo vArInterestListCargo = new VArInterestListCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByIndividualID",
					vArInterestListCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for V_AR_INTEREST_LIST", 16621);
		}
		return result;
	}

	/**
	 * The method to get data from ED_VERIFICATION_CHECKLIST based on INDV_ID,
	 * CASE_NUM, EDGE, PROGRAM_CD AND TYPE_OF_ASSISTANCE
	 * 
	 * @param coObj
	 *            COCorrespondence
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPendingInfo(COCorrespondence coObj) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationChecklistCargo = new EdVerificationChecklistCargo();
		edVerificationChecklistCargo.setIndvId(coObj.getIndvId());
		edVerificationChecklistCargo.setCaseNum(Long.parseLong(coObj
				.getCaseAppNumber()));
		edVerificationChecklistCargo.setEdgNum(coObj.getEdgeNumber());
		edVerificationChecklistCargo.setProgramCd(coObj
				.getAssistanceProgramCode());
		edVerificationChecklistCargo.setTypeOfAssistanceCd(coObj
				.getMiscParameters());
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		edVerificationChecklistCargo.setEffBeginDt(date);
		edVerificationChecklistCargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByIndvSpecific",
					edVerificationChecklistCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16623);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_VERIFICATION_CHECKLIST", 16624);
		}
		return result;
	}

	/**
	 * The method to get data from DC_ADDRESS_BOOK based on PROVIDER_ID or
	 * COMPANY_ID
	 * 
	 * @param id
	 *            long
	 * @param companyIdOrProviderId
	 *            char
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCompanyAddressDetails(long id, char companyIdOrProviderId)
			throws CoException {
		Object[] result = null;
		DcAddressBookCargo dcAddressBookCargo = new DcAddressBookCargo();
		try {
			if (companyIdOrProviderId == CoConstants.CHAR_C) {
				dcAddressBookCargo.setCompanyId(id);
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcAddressBook", "findByCompanyID", dcAddressBookCargo,
						null, conn);
			} else if (companyIdOrProviderId == 'P') {
				dcAddressBookCargo.setProviderId(id);
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcAddressBook", "findByProviderID",
						dcAddressBookCargo, null, conn);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * The method to get data from DC_INDV_LIVING_ARNGMNTS based on INDV_ID
	 * Creation date: 12/30/2002
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLivingArrgtDetails(long indvId) throws CoException {
		Object[] result = null;
		DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
		try {
			dcIndvLivingArngmntsCargo.setIndvId(indvId);
			java.sql.Timestamp date = CoDateFactory.getTimestamp();
			dcIndvLivingArngmntsCargo.setEffBeginDt(date);
			dcIndvLivingArngmntsCargo.setEffEndDt(date);
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvLivingArngmnts", "findByIndvIdCurrRec",
					dcIndvLivingArngmntsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
					16745);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in  DC_INDV_LIVING_ARNGMNTS", 16746);
		}
		return result;
	}

	/**
	 * The method to get data from IN_NE_ADDRESS based on CONTRACT_NUM Creation
	 * date: 12/30/2002
	 * 
	 * @param contractNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getContractAddress(long contractNum) throws CoException {
		Object[] result = null;
		InNeAddressCargo inNeAddressCargo = new InNeAddressCargo();
		try {
			inNeAddressCargo.setNeadrContractNum(contractNum);
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InNeAddress", "findByContractNumCurrRec",
					inNeAddressCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_NE_ADDRESS", 16627);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_NE_ADDRESS", 16628);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcCaseProgramIndv record(s) for an
	 * individual based on INDV_ID & PROGRAM_CD Creation date: Dec 303, 2002
	 * 
	 * @param caseNo
	 *            long
	 * @param indvID
	 *            long
	 * @param programCD
	 *            String
	 * @param priorMedCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcCaseProgramIndvByPriorMedicaidCode(long caseNo,
			long indvID, String programCD, String priorMedCd)
					throws CoException {
		Object[] result = null;
		DcCaseProgramIndvCargo dcCaseProgramIndvCargo = new DcCaseProgramIndvCargo();
		dcCaseProgramIndvCargo.setCaseNum(caseNo);
		dcCaseProgramIndvCargo.setIndvId(indvID);
		dcCaseProgramIndvCargo.setProgCd(programCD);
		dcCaseProgramIndvCargo.setPriorMedicaidCd(priorMedCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		dcCaseProgramIndvCargo.setEffBeginDt(date);
		dcCaseProgramIndvCargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgramIndv",
					"findByIndvProgramAndPriorMedicaidCode",
					dcCaseProgramIndvCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM_INDV",
					16645);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_PROGRAM_INDV",
					16646);
		}
		return result;
	}

	/**
	 * This method returns the relevant ArAppProgramIndv record(s) for an
	 * individual based on INDV_ID,PROGRAM_CD Creation date - Dec 30, 2002
	 * 
	 * @param appNo
	 *            String
	 * @param indvID
	 *            long
	 * @param programCD
	 *            String
	 * @param priorMedCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getArAppProgramIndvByPriorMedicaidCode(String appNo,
			long indvID, String programCD, String priorMedCd)
					throws CoException {
		Object[] result = null;
		ArAppProgramIndvCargo arAppProgramIndvCargo = new ArAppProgramIndvCargo();
		arAppProgramIndvCargo.setAppNum(appNo);
		arAppProgramIndvCargo.setIndvId(indvID);
		arAppProgramIndvCargo.setProgramCd(programCD);
		arAppProgramIndvCargo.setPriorMedicaidCd(priorMedCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgramIndv",
					"findByIndvProgramAndPriorMedicaidCode",
					arAppProgramIndvCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_PROGRAM_INDV",
					16617);
		}
		return result;
	}

	/**
	 * This method returns the DcFacility data relevant for that IndvId Creation
	 * date - Dec 31st, 2002
	 * 
	 * @param indvId
	 *            long
	 * @param facilityType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFacilityDetailsByFacilityType(long indvId,
			String facilityType) throws CoException {
		Object[] result = null;
		DcFacilityCargo cargo = new DcFacilityCargo();
		cargo.setIndvId(indvId);
		cargo.setFacilityTypeCd(facilityType);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFacility", "findByIndvIDAndFacilityType", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_FACILITY", 16647);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FACILITY", 16648);
		}
		return result;
	}

	/**
	 * This method returns the Providers in particular County Creation date -
	 * 01/02/2003
	 * 
	 * @param county
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getProvidersByCounty(String county) throws CoException {
		Object[] result = null;
		InNeCountyCargo cargo = new InNeCountyCargo();
		cargo.setNecnyCounty(county);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InNeCounty", "findByCounty", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_NE_COUNTY", 16633);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_NE_COUNTY", 16634);
		}
		return result;
	}

	/**
	 * This method returns the Providers in particular County and Service Group
	 * Code Creation date - 01/02/2003
	 * 
	 * @param county
	 *            String
	 * @param serviceGroupCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getProvidersByCountyAndTOA(String county,
			String serviceGroupCd) throws CoException {
		Object[] result = null;
		result = getProvidersByCounty(county);
		InNeAgencyCargo cargo = new InNeAgencyCargo();
		cargo.setNeagnServiceGroupCd(serviceGroupCd);
		int length = result.length;
		List contractNumbers = new ArrayList(length);
		for (int i = 0; i < length; i++) {
			contractNumbers.add(String.valueOf(((InNeCountyCargo) result[i])
					.getNecnyContractNum()));
		}
		Object[] obj = { cargo, contractNumbers };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InNeAgency", "findByCoDynamicWhere", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_NE_AGENCY", 16641);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in InNeAgency", 16642);
		}
		return result;
	}

	/**
	 * This method returns the DcToaTlcDetails data relevant for the IndvId
	 * Creation date - 01/02/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcToaTlcDetails(long indvId) throws CoException {
		Object[] result = null;
		DcToaTlcDetailsCargo cargo = new DcToaTlcDetailsCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcToaTlcDetails", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TOA_TLC_DETAILS", 16629);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_TOA_TLC_DETAILS",
					16630);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId
	 * and Type of Assistance Creation date - 01/05/2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetails(long indvId, String typeOfAssistance)
			throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * This method returns the DcDisability data relevant for the IndvId
	 * Creation date - 01/05/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcDisabilityDetails(long indvId) throws CoException {
		Object[] result = null;
		DcDisabilityCargo cargo = new DcDisabilityCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisability", "findByCoDynamicWhere", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DISABILITY ", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_DISABILITY", 16340);
		}
		return result;
	}

	/**
	 * The method to get data from V_AR_INTEREST_LIST based on INDV_ID and
	 * Status_Cd
	 * 
	 * Creation Date: 01/06/2003
	 * 
	 * @param indvID
	 *            long
	 * @param statusCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getInterestListDetails(long indvID, String statusCd)
			throws CoException {
		Object[] result = null;
		VArInterestListCargo vArInterestListCargo = new VArInterestListCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByIndvIdAndStatusCd",
					vArInterestListCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_AR_INTEREST_LIST", 16621);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_AR_INTEREST_LIST",
					16622);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvPraDtls data relevant for the IndvId
	 * Creation date - 01/05/2003 Updated by Praveen on 10/10/2003 Changed
	 * finder name and added edgtraceid in finder.
	 * 
	 * @param indvId
	 *            long
	 * @param praId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvPraDetails(long indvId, long praId)
			throws CoException {
		Object[] result = null;
		EdIndvPraDtlsCargo cargo = new EdIndvPraDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setPraId(praId);
		cargo.setPraStatus("PENDING");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPraDtls", "findByCoDynamicWhere", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PRA_DTLS", 16649);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_PRA_DTLS", 16650);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvPraDtls data relevant for the IndvId
	 * Creation date - 02/21/2005
	 * 
	 * @param indvId
	 *            long
	 * @param praId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvPraApprovedDetails(long indvId, long praId)
			throws CoException {
		Object[] result = null;
		EdIndvPraDtlsCargo cargo = new EdIndvPraDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setPraId(praId);
		cargo.setPraStatus("APPROVED");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPraDtls", "findByCoDynamicWhere", cargo, null, conn);
		} catch (Exception e) {
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PRA_DTLS", 16649);
		}


		return result;
	}

	/**
	 * This method returns the relevant DcUnearnedIncome record(s) for an
	 * individual Creation date: Jan 07, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcUnearnedIncomeDetails(long indvId) throws CoException {
		Object[] result = null;
		DcUnearnedIncomeCargo cargo = new DcUnearnedIncomeCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUnearnedIncome", "findByIndvId",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_UNEARNED_INCOME",
					16752);
		}
		return result;
	}

	/**
	 * This method returns the relevant Program Service details for an
	 * individual Creation date - Jan 08, 2003
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getVRpEligDetails(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		VRpEligDetailsCargo cargo = new VRpEligDetailsCargo();
		cargo.setT1CaseNum(caseNum);
		cargo.setIndvId(indvId);
		cargo.setProgramCd(CoConstants.CC);
		cargo.setTypeOfAssistanceCd("NOT IN('TP69')");
		cargo.setCurrentEligInd(CoConstants.CHAR_A);
		cargo.setCgStatusCd(CoConstants.AP);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setRecBeginDt(date);
		cargo.setRecEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByCoWhereClause", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting V_RP_ELIG_DETAILS",
					16664);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_RP_ELIG_DETAILS",
					16665);
		}
		return result;
	}

	/**
	 * This method returns the relevant Liquid Resourcs individual Creation date
	 * - Jan 08, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcLiquidResources(long indvId) throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * This method returns the relevant Liquid Resourcs for the individual and
	 * type code Creation date - Jan 08, 2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcLiquidResources(long indvId, String typeCd)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setTypeCd(typeCd);
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * This method returns the relevant Real Property for that individualID
	 * Creation date - Jan 08, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getRealPropery(long indvId) throws CoException {
		Object[] result = null;
		DcRealPropertyCargo cargo = new DcRealPropertyCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"DcRealProperty", "findByCoDynamicWhere", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_REAL_PROPERTY", 16757);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_REAL_PROPERTY", 16758);
		}
		return result;
	}

	/**
	 * This method returns the relevant Mineral Rights for that individual
	 * Creation date - Jan 08, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMineralRights(long indvId) throws CoException {
		Object[] result = null;
		DcMineralRightsCargo cargo = new DcMineralRightsCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMineralRights", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MINERAL_RIGHTS", 16754);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in DC_MINERAL_RIGHTS",
					16755);
		}
		return result;
	}

	/**
	 * This method returns the relevant Life Insurance Details for that
	 * individualID Creation date - Jan 10, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLifeInsurance(long indvId) throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo cargo = new DcLifeInsuranceCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIFE_INSURANCE",
					16766);
		}
		return result;
	}

	/**
	 * The method to get data from VRpEligDetails based on Request Paramters
	 * Creation Date: (01/10/2003 10:30:00 AM)
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getVRpEligibilityDetails(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		VRpEligDetailsCargo vRpEligCargo = new VRpEligDetailsCargo();
		vRpEligCargo.setT1CaseNum(caseNum);
		vRpEligCargo.setIndvId(indvId);
		vRpEligCargo.setPaymentBegDt(CoDateFactory.getTimestamp());
		vRpEligCargo.setPaymentEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"VRpEligDetails", "findByPraEdgs", vRpEligCargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_RP_ELIG_DETAILS", 16663);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_RP_ELIG_DETAILS",
					16664);
		}
		return result;
	}

	/**
	 * The method to get data from VRpEligDetails based on Request Paramters for
	 * NF --- Creation Date: (01/10/2003 10:30:00 AM)
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */


	/**
	 * The method to get data from EdIndvServiceDtls based on Request Paramters
	 * for NF Creation Date: (01/10/2003 10:30:00 AM)
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param dataTypeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvServiceDetails(COCorrespondence coRequest,
			String dataTypeCd) throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo edIndvServiceDtlsCargo = new EdIndvServiceDtlsCargo();
		edIndvServiceDtlsCargo.setEdgNum(coRequest.getEdgeNumber());
		edIndvServiceDtlsCargo.setCaseNum(Long.parseLong(coRequest
				.getCaseAppNumber()));
		edIndvServiceDtlsCargo.setIndvId(coRequest.getIndvId());
		edIndvServiceDtlsCargo.setDataTypeCd(dataTypeCd);
		edIndvServiceDtlsCargo.setEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvSpecificData",
					edIndvServiceDtlsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16689);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16690);
		}
		return result;
	}

	/**
	 * This method returns service plan details for an individual Creation date
	 * - Jan 16, 2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getServicePlanDetails(long indvId, String typeCd)
			throws CoException {
		Object[] result = null;
		DcServicePlanCargo cargo = new DcServicePlanCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlan", "findByIndvIdAndTOA", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN", 16550);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN", 16550);
		}
		return result;
	}

	/**
	 * This method returns the relevant Burial Resources records for an
	 * individual
	 * 
	 * Creation date - Jan 20, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcBurialResourcesByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcBurialResourcesCargo cargo = new DcBurialResourcesCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcBurialResources", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_BURIAL_RESOURCES",
					16781);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_BURIAL_RESOURCES",
					16782);
		}
		return result;
	}

	/**
	 * This method returns the relevant Life Insurance records for an individual
	 * Creation date - Jan 20, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcLifeInsuranceByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo cargo = new DcLifeInsuranceCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in DC_LIFE_INSURANCE",
					16766);
		}
		return result;
	}

	/**
	 * The method to get data from VRpEligDetails based on Request Paramters for
	 * Authorization of CBA or CC services Creation Date: (01/20/2003 10:30:00
	 * AM)
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */


	/**
	 * The method to get data from EdIndvServiceDtls based on Request Paramters
	 * for Authorized Services Creation Date: (01/10/2003 10:30:00 AM)
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @param dataTypeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvServiceDtls(COCorrespondence coRequest,
			String dataTypeCd) throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo edIndvServiceDtlsCargo = new EdIndvServiceDtlsCargo();
		edIndvServiceDtlsCargo.setEdgNum(coRequest.getEdgeNumber());
		edIndvServiceDtlsCargo.setCaseNum(Long.parseLong(coRequest
				.getCaseAppNumber()));
		edIndvServiceDtlsCargo.setIndvId(coRequest.getIndvId());
		edIndvServiceDtlsCargo.setDataTypeCd(dataTypeCd);
		edIndvServiceDtlsCargo.setEndDt(CoDateFactory.getTimestamp());
		edIndvServiceDtlsCargo.setEdbcStatusCd(CoConstants.AP);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvSpecificData",
					edIndvServiceDtlsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16689);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16690);
		}
		return result;
	}

	/**
	 * The method to get data from EdEligTlcBudget based on Case Num and Edg
	 * Trace Id Creation Date: (01/21/2003 06:00:00 PM)
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdEligTlcBudget(long caseNum, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdEligTlcBudgetCargo edEligTlcBudgetCargo = new EdEligTlcBudgetCargo();
		edEligTlcBudgetCargo.setCaseNum(caseNum);
		edEligTlcBudgetCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTlcBudget", "findByCaseNumEdgTraceId",
					edEligTlcBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_TLC_BUDGET", 16704);
		}
		return result;
	}

	/**
	 * The method to get data from ArInterestListContact based on App Num and
	 * Indv Id Creation Date: 01/22/2003
	 * 
	 * @param appNum
	 *            String
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getArInterestListContactDtls(String appNum, long indvId)
			throws CoException {
		Object[] result = null;
		ArInterestListContactCargo arInterestContactCargo = new ArInterestListContactCargo();
		arInterestContactCargo.setAppNum(appNum);
		arInterestContactCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArInterestListContact", "findByAppNumAndIndvId",
					arInterestContactCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_INTEREST_LIST_CONTACT",
					16667);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in AR_INTEREST_LIST_CONTACT", 16668);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId,
	 * Type of Assistance and Service Category Cd Creation date - 01/23/2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @param serviceCategoryCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetails(long indvId,
			String typeOfAssistance, String serviceCategoryCd)
					throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		cargo.setSrvCategoryCd(serviceCategoryCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL ",
					16735);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16736);
		}
		return result;
	}

	/**
	 * This method returns the relevant Program Service details for an
	 * individual Creation date - Jan 23, 2003
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param edgNum
	 *            long
	 * @param traceID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId,
	 * Creation date - 01/23/2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetailsByIndvOnly(long indvId,
			String typeOfAssistance) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL ",
					16735);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16736);
		}
		return result;
	}

	/**
	 * This method returns the DcFunAssessment data relevant for the IndvId,
	 * Creation date - 01/28/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFunAssessment(long indvId) throws CoException {
		Object[] result = null;
		DcFunAssessmentCargo cargo = new DcFunAssessmentCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFunAssessment", "findByEffDatesIndvId", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_FUN_ASSESSMENT ", 16669);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FUN_ASSESSMENT",
					16670);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlans data relevant for the IndvId
	 * Creation date - 01/28/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlans(long indvId) throws CoException {
		Object[] result = null;
		DcServicePlanCargo cargo = new DcServicePlanCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlan", "findByCoDynamicWhere", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN ", 16550);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN", 16550);
		}
		return result;
	}

	/**
	 * This method returns the DcAuthorizingAgents data relevant for the IndvId,
	 * and Type of Assistance Creation date - 01/28/2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcAuthorizingAgents(long indvId, String typeOfAssistance)
			throws CoException {
		Object[] result = null;
		DcAuthorizingAgentCargo cargo = new DcAuthorizingAgentCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcAuthorizingAgent", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_AUTHORIZING_AGENT ",
					16673);
		}
		return result;
	}

	/**
	 * This method returns the DcMedicalApproval data relevant for the IndvId,
	 * and PhysicianId Creation date - 01/28/2003
	 * 
	 * @param indvId
	 *            long
	 * @param physicianId
	 *            long
	 * @param orderStatus
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcMedicalApprovalData(long indvId, long physicianId,
			String orderStatus) throws CoException {
		Object[] result = null;
		DcMedicalApprovalCargo cargo = new DcMedicalApprovalCargo();
		cargo.setIndvId(indvId);
		cargo.setPhyLicenseNum(String.valueOf(physicianId));
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		cargo.setDoctorOrderStatusCd(orderStatus);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcMedicalApproval", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICAL_APPROVAL ",
					16656);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_MEDICAL_APPROVAL",
					16657);
		}
		return result;
	}

	/**
	 * This method returns the DcMedicalDiagnosisCode data relevant for the
	 * IndvId and Med_Seq_Num Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcMedicalDiagnosisCode(long indvId) throws CoException {
		Object[] result = null;
		DcMedicalDiagnosisCodeCargo cargo = new DcMedicalDiagnosisCodeCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcMedicalDiagnosisCode", "findByCoDynamicWhere", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_MEDICAL_DIAGNOSIS_CODE ", 16679);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_MEDICAL_DIAGNOSIS_CODE", 16680);
		}
		return result;
	}

	/**
	 * This method returns the DcMiscExpense Descriptions for the IndvId
	 * Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcMiscExpenseInfo(long indvId) throws CoException {
		Object[] result = null;
		DcMiscExpenseCargo cargo = new DcMiscExpenseCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMiscExpense", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MISC_EXPENSE ", 16681);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in DC_MISC_EXPENSE", 16682);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanItem data relevant for the IndvId
	 * and Service Category Code Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @param serviceCategoryCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanItems(long indvId, String serviceCategoryCd)
			throws CoException {
		Object[] result = null;
		DcServicePlanItemCargo cargo = new DcServicePlanItemCargo();
		cargo.setIndvId(indvId);
		cargo.setSrvCategoryCd(serviceCategoryCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanItem", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_ITEM ",
					16564);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No dta in DC_SERVICE_PLAN_ITEM",
					16564);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvIspSummary data relevant for the IndvId,
	 * CaseNum, EdgNum, and IspId Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @param edgNumber
	 *            long
	 * @param ispId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvIspSummary(long indvId, long caseNum,
			long edgNumber, long ispId) throws CoException {
		Object[] result = null;
		EdIndvIspSummaryCargo cargo = new EdIndvIspSummaryCargo();
		cargo.setIndvId(indvId);
		cargo.setEdgNum(edgNumber);
		cargo.setCaseNum(caseNum);
		cargo.setIspId(ispId);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvIspSummary", "findByIndvSpecific", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SUMMARY ",
					16685);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ISP_SUMMARY",
					16686);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvIspServiceList data relevant for the
	 * IndvId, CaseNum, EdgNum Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @param edgNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvIspServiceList(long indvId, long caseNum,
			long edgNumber) throws CoException {
		Object[] result = null;
		EdIndvIspServiceListCargo cargo = new EdIndvIspServiceListCargo();
		cargo.setIndvId(indvId);
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIspServiceList", "findByIndvSpecific", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_INDV_ISP_SERVICE_LIST ", 16687);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_ISP_SERVICE_LIST", 16688);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvServiceDtls data relevant for the IndvId,
	 * CaseNum, EdgNum, IspId, and ServiceIds Creation date - 01/29/2003
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @param edgNumber
	 *            long
	 * @param ispId
	 *            long
	 * @param serviceIds
	 *            String[]
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvServiceDtls(long indvId, long caseNum,
			long edgNumber, long ispId, String[] serviceIds) throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo cargo = new EdIndvServiceDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNumber);
		cargo.setIspId(ispId);
		cargo.setDataTypeCd(CoConstants.SERVICE);
		cargo.setEdbcStatusCd(CoConstants.EDBC_STATUS_CD_APPROVED);
		/**
		 * These are Service_Begin and Service_End dates and FW's Effective
		 * dates. so use ONLY ENDDT
		 */
		cargo.setEndDt(CoDateFactory.getTimestamp());
		Object[] obj = { cargo, serviceIds };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvIsp", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS ",
					16689);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16690);
		}
		return result;
	}

	/**
	 * The method to get data from VRpEligDetails based on Map Creation Date:
	 * (01/31/2003 10:30:00 AM)
	 * 
	 * @param map
	 *            - Can contain CASENUM, PROGRAM, INDVID, EDG_TRACE_ID,
	 *            EDG_CREATE_SEQ, and EDG_NUM
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * This method returns the getEdIndvServices data relevant for the IndvId,
	 * CaseNum, EdgNum, ServiceGroups Creation date - 02/01/2003
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @param edgNumber
	 *            long
	 * @param serviceGroup
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvServices(long indvId, long caseNum,
			long edgNumber, String serviceGroup) throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo cargo = new EdIndvServiceDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNumber);
		cargo.setServiceGroupCd(serviceGroup);
		cargo.setDataTypeCd(CoConstants.SERVICE);
		cargo.setEdbcStatusCd(CoConstants.EDBC_STATUS_CD_APPROVED);
		/*
		 * These are Service_Begin and Service_End dates and FW's Effective
		 * dates. so USE ONLY ENDDT
		 */
		cargo.setEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvServiceGroup", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS ",
					16689);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16690);
		}
		return result;
	}

	/**
	 * This method returns the getEdIndvServiceItems data relevant for the
	 * IndvId, CaseNum, EdgNum, ServiceGroups Creation date - 02/01/2003
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @param edgNumber
	 *            long
	 * @param serviceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvServiceItems(long indvId, long caseNum,
			long edgNumber, long serviceId) throws CoException {
		Object[] result = null;
		EdIndvServiceItemDtlsCargo cargo = new EdIndvServiceItemDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNumber);
		cargo.setServiceId(serviceId);
		cargo.setEdbcStatusCd(CoConstants.AP);
		/**
		 * These are Service_Begin and Service_End dates and FW's Effective
		 * dates. so should not be in the where clause. But Services Map to
		 * Effective Dates
		 */
		cargo.setBeginDt(CoDateFactory.getTimestamp());
		cargo.setEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceItemDtls", "findByIndvServicItems", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS ",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16659);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlans data relevant for the IndvId based
	 * on TOA and PlanApprovedSw Creation date - 02/03/2003
	 * 
	 * @param indvId
	 *            long
	 * @param toa
	 *            String
	 * @param planApprSw
	 *            char
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlansInfo(long indvId, String toa,
			char planApprSw) throws CoException {
		Object[] result = null;
		DcServicePlanCargo cargo = new DcServicePlanCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(toa);
		cargo.setIsPlanApprovedSw(planApprSw);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlan", "findByCoDynamicWhere", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN ", 16550);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN", 16550);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId.
	 * For Referral of Services to Provider Creation date - 02/10/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndividualToas(long indvId) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByIndvToas", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL ",
					16735);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16736);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvLtcPendingReason data For Referral of
	 * Services to Provider Creation date - 02/10/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLtcPendingReasons(long caseNum, long edgTraceId,
			long indvId) throws CoException {
		Object[] result = null;
		EdIndvLtcPendingReasonCargo cargo = new EdIndvLtcPendingReasonCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgTraceId(edgTraceId);
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvLtcPendingReason", "findByIndvId", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_INDV_LTC_PENDING_REASON ", 16693);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_LTC_PENDING_REASON", 16694);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId.
	 * For Referral of Services to Provider Creation Date: 12/23/2002
	 * 
	 * @param indvId
	 *            long
	 * @param serviceCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getServiceDtlsForServiceCode(long indvId, String serviceCd)
			throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setSrvCategoryCd(serviceCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL ",
					16735);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16736);
		}
		return result;
	}

	/**
	 * This method returns the DcCareGiverAgency data relevant for that IndvId
	 * Creation Date: 12/23/2002
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCareGiverDetails(long indvId) throws CoException {
		Object[] result = null;
		DcCaregiverAgencyCargo cargo = new DcCaregiverAgencyCargo();
		cargo.setIndvId(indvId);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaregiverAgency", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CAREGIVER_AGENCY",
					16717);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CAREGIVER_AGENCY",
					16718);
		}
		return result;
	}

	/**
	 * This method returns the relevant Program Service details for an
	 * individualID Creation Date: 02/22/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * The method is to get data from V_AR_INTEREST_LIST based on Indv Id and
	 * adminId Creation Date: 02/24/2003
	 * 
	 * @param adminId
	 *            long
	 * @param indvID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	// Modified May 14th-2003
	public Object[] getViewInterestListDetails(long adminId, long indvID)
			throws CoException {
		Object[] result = null;
		VArInterestListCargo vArInterestListCargo = new VArInterestListCargo();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByCoDynamicWhere",
					vArInterestListCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_AR_INTEREST_LIST", 16621);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_AR_INTEREST_LIST",
					16622);
		}
		return result;
	}

	/**
	 * The method is to get data from V_AR_INTEREST_LIST based on Indv id and
	 * Status Cd Creation Date: 02/24/2003
	 * 
	 * @param indvID
	 *            long
	 * 
	 * @param openRLRecords
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	// Modified Ravinder Walia May 14th-2003
	public Object[] getOpenOrReleasedInterestLists(long indvID,
			String openRLRecords) throws CoException {
		Object[] result = null;
		VArInterestListCargo vArInterestListCargo = new VArInterestListCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByIndvIdAndStatusCd",
					vArInterestListCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_AR_INTEREST_LIST", 16621);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_AR_INTEREST_LIST",
					16622);
		}
		return result;
	}

	/**
	 * This method returns the Eligibility End Date for an individual Creation
	 * date - Feb 24, 2003
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param edgNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */


	/**
	 * This method returns the DcFunAssessmentService data relevant for the
	 * IndvId and FAS_SEQ_NUM Creation date - 02/24/2003
	 * 
	 * @param indvId
	 *            long
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * @param fasSeqNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFunAssessmentServiceDetails(long indvId,
			long fasSeqNumber) throws CoException {
		Object[] result = null;
		DcFunAssesmentServiceCargo cargo = new DcFunAssesmentServiceCargo();
		cargo.setIndvId(indvId);
		cargo.setFasSeqNum(fasSeqNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFunAssesmentService", "findByFunctionalNeeds", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_FUN_ASSESSMENT_SERVICE", 16671);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_FUN_ASSESSMENT_SERVICE", 16672);
		}
		return result;
	}

	/**
	 * This method returns the Case Special Accomodations data relevant for the
	 * CASE_NUM We might not have any record for Visually Impaired. Implying
	 * that we can get 0 rows. Hence we are not checking if the resulting[] has
	 * a zero length or not. Creation date - 03/04/2003
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
	public Object[] getLtcCaseSplAccomodations(long caseNum) throws CoException {
		Object[] result = null;
		DcCaseSpIndCargo dcCaseSpIndCargo = new DcCaseSpIndCargo();
		dcCaseSpIndCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"DcCaseSpInd", "findBySplInd", dcCaseSpIndCargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_SP_IND", 16304);
		}
		return result;
	}

	/**
	 * This method returns the ME, or MC data relevant for the CASE_NUM and
	 * EDG_TRACE_ID. Creation date - 03/05/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgMEMCBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligMeBudgetCargo edEligMeBudgetCargo = new EdEligMeBudgetCargo();
		edEligMeBudgetCargo.setCaseNum(caseNum);
		edEligMeBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",

					"EdEligMeBudget", "findByCoCaseNumEdgTraceId",
					edEligMeBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_ME_BUDGET", 16700);
		}
		return result;
	}

	/**
	 * This method returns the CCAD apart from CMPAS, IHFS, and TLC data
	 * relevant for the CASE_NUM and EDG_TRACE_ID. For some TOA's, we might not
	 * have Budget data. Implying that we can get 0 rows. Hence we are not
	 * checking if the resulting[] has a zero length or not. Creation date -
	 * 03/05/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgCcadBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligCcadBudgetCargo edEligCcadBudgetCargo = new EdEligCcadBudgetCargo();
		edEligCcadBudgetCargo.setCaseNum(caseNum);
		edEligCcadBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCcadBudget", "findByCoCaseNumEdgTraceId",

					edEligCcadBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_CCAD_BUDGET",
					16698);
		}
		return result;
	}

	/**
	 * This method returns the CMPAS data relevant for the CASE_NUM and
	 * EDG_TRACE_ID Creation date - 03/05/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgCmpasBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligCmpasBudgetCargo edEligCmpasBudgetCargo = new EdEligCmpasBudgetCargo();
		edEligCmpasBudgetCargo.setCaseNum(caseNum);
		edEligCmpasBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCmpasBudget", "findByCoCaseNumEdgTraceId",
					edEligCmpasBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_CMPAS_BUDGET",
					16707);
		}
		return result;
	}

	/**
	 * This method returns the TLC data relevant for the CASE_NUM and
	 * EDG_TRACE_ID Creation date - 03/05/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgTlcBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligTlcBudgetCargo edEligTlcBudgetCargo = new EdEligTlcBudgetCargo();
		edEligTlcBudgetCargo.setCaseNum(caseNum);
		edEligTlcBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTlcBudget", "findByCaseNumEdgTraceId",
					edEligTlcBudgetCargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_TLC_BUDGET", 16704);
		}
		return result;
	}

	/**
	 * This method returns the Medicaid Begin Date for a given IndividualID and
	 * Benefit TypeCode. Creation date - 03/05/2003
	 * 
	 * @param indvId
	 *            long
	 * 
	 * 
	 * 
	 * @param benefitTypeCode
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getSsiMedicaidBeginDate(long indvId, String benefitTypeCode)
			throws CoException {
		Object[] result = null;
		DcSsiCargo ssiCargo = new DcSsiCargo();
		ssiCargo.setIndvId(indvId);
		ssiCargo.setBenefitTypeCd(benefitTypeCode);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		ssiCargo.setEffBeginDt(date);
		ssiCargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcSsi",
					"findByIndvIdAndApproved",

					ssiCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SSI", 16696);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SSI", 16697);
		}
		return result;
	}

	/**
	 * This method returns the relevant Trust records for an individual Creation
	 * date - Mar 06, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcTrustByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcTrustCargo cargo = new DcTrustCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcTrust",
					"findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TRUST", 16761);
		}
		if (result == null || result.length == 0) {
			throw new CoException("No data in DC_TRUST", 16762);
		}
		return result;
	}

	/**
	 * This method returns the IHFS data relevant for the CASE_NUM and
	 * EDG_TRACE_ID Creation date - 03/11/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgIhfsBudget(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdEligIhfsBudgetCargo edEligIhfsBudgetCargo = new EdEligIhfsBudgetCargo();
		edEligIhfsBudgetCargo.setCaseNum(caseNum);
		edEligIhfsBudgetCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",

					"EdEligIhfsBudget", "findByCaseNumEdgTraceId",
					edEligIhfsBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_IHFS_BUDGET",
					16702);
		}
		return result;
	}

	/**
	 * This method returns the ME or MC data relevant for the CASE_NUM,
	 * EDG_TRACE_ID, and INDVId Creation date - 03/11/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIndvMeMcBudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvMeBudgetCargo edIndvMeBudgetCargo = new EdIndvMeBudgetCargo();
		edIndvMeBudgetCargo.setCaseNum(caseNum);
		edIndvMeBudgetCargo.setEdgTraceId(traceId);
		edIndvMeBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvMeBudget", "findByCoIndvId", edIndvMeBudgetCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);

			throw new CoException("Select failed for ED_INDV_ME_BUDGET", 16709);
		}
		return result;
	}

	/**
	 * This method returns the ME or MC data relevant for the CASE_NUM,
	 * EDG_TRACE_ID, and INDVId Creation date - 03/11/2003
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvCcadBudget(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvCcadBudgetCargo edIndvCcadBudgetCargo = new EdIndvCcadBudgetCargo();
		edIndvCcadBudgetCargo.setCaseNum(caseNum);
		edIndvCcadBudgetCargo.setEdgTraceId(traceId);
		edIndvCcadBudgetCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCcadBudget", "findByCoIndvId",
					edIndvCcadBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_CCAD_BUDGET",

					16711);
		}
		return result;
	}

	/**
	 * This method returns the getEdIndvServiceItems data relevant for the
	 * EdIndvServiceDtlsCargo Creation date - 03/12/2003
	 * 
	 * @param edIndvServiceDtlsCargo
	 *            - The EdIndvServiceDtlsCargo
	 * @param edbcStatusCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvServiceItems(
			EdIndvServiceDtlsCargo edIndvServiceDtlsCargo, String edbcStatusCd)
					throws CoException {
		Object[] result = null;
		EdIndvServiceItemDtlsCargo cargo = new EdIndvServiceItemDtlsCargo();
		cargo.setIndvId(edIndvServiceDtlsCargo.getIndvId());
		cargo.setCaseNum(edIndvServiceDtlsCargo.getCaseNum());
		cargo.setEdgNum(edIndvServiceDtlsCargo.getEdgNum());
		cargo.setServiceId(edIndvServiceDtlsCargo.getServiceId());
		cargo.setEdbcStatusCd(edbcStatusCd);
		/**
		 * These are Service_Begin and Service_End dates and FW's Effective
		 * dates. so should not be in the where clause. But Services Map to
		 * Effective Dates
		 */
		cargo.setBeginDt(CoDateFactory.getTimestamp());

		cargo.setEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceItemDtls", "findByIndvServicItems", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_INDV_SERVICE_ITEM_DTLS", 16691);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_SERVICE_ITEM_DTLS", 16692);
		}
		return result;
	}

	/**
	 * This method returns the getEdIndvServices data relevant for the IndvId,
	 * CaseNum, EdgNum, ServiceGroups Creation date - 03/12/2003
	 * 
	 * @param vRpEligDetailsCargo
	 *            - The VRpEligDetailsCargo
	 * @param dataTypeCd
	 *            - The data type code
	 * @param edbcStatusCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdIndvServices(VRpEligDetailsCargo vRpEligDetailsCargo,
			String dataTypeCd, String edbcStatusCd) throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo cargo = new EdIndvServiceDtlsCargo();
		cargo.setIndvId(vRpEligDetailsCargo.getIndvId());
		cargo.setCaseNum(vRpEligDetailsCargo.getT1CaseNum());
		cargo.setEdgNum(vRpEligDetailsCargo.getEdgNum());
		cargo.setDataTypeCd(dataTypeCd);
		cargo.setEdbcStatusCd(edbcStatusCd);
		/**
		 * These are Service_Begin and Service_End dates and FW's Effective
		 * dates. so Use ONLY END_DT. If you don't understand the logic, please
		 * speak to me, Vikram Adoni
		 */
		String benefitStatus = vRpEligDetailsCargo.getBenefitStatus();
		if (benefitStatus != null
				&& benefitStatus.equals(CoConstants.BENEFIT_STATUS_DENIED)) {
			cargo.setEndDt(vRpEligDetailsCargo.getEdbcRunDt());
			if (vRpEligDetailsCargo.getT2EligibilityEndDt() != null) {
				cargo.setBeginDt(vRpEligDetailsCargo.getT2EligibilityEndDt());
			} else if (vRpEligDetailsCargo.getT1EligibilityEndDt() != null) {
				cargo.setBeginDt(vRpEligDetailsCargo.getT1EligibilityEndDt());
			}
		} else {
			cargo.setEndDt(vRpEligDetailsCargo.getPaymentBegDt());

			if (vRpEligDetailsCargo.getPaymentEndDt() != null) {
				cargo.setBeginDt(vRpEligDetailsCargo.getPaymentEndDt());
			} else {
				cargo.setBeginDt(vRpEligDetailsCargo.getPaymentBegDt());
			}
		}
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvServiceGroup", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16659);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcToaErs records for an individual
	 * Creation date - Mar 13, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcToaErsDetailsByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcToaErsDetailsCargo cargo = new DcToaErsDetailsCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcToaErsDetails", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TOA_ERS_DETAILS", 16822);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_TOA_ERS_DETAILS",
					16823);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcCaregiverAgency records for an
	 * individual Creation date - Mar 13, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcCaregiverAgencyByIndv(long indvId) throws CoException {
		Object[] result = null;
		DcCaregiverAgencyCargo cargo = new DcCaregiverAgencyCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaregiverAgency", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CAREGIVER_AGENCY",
					16614);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcHealthConcernDetail records for an
	 * individual Creation date - Mar 13, 2003
	 * 
	 * @param indvId
	 *            long
	 * @param fasSeqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFunAssessmentByIndv(long indvId, long fasSeqNum)
			throws CoException {
		Object[] result = null;
		DcFunAssessmentCargo cargo = new DcFunAssessmentCargo();
		cargo.setIndvId(indvId);
		cargo.setFasSeqNum(fasSeqNum);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFunAssessment", "findByIndvIdAndFasSeqNum", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting DC_FUN_ASSESSMENT info By IndvId",
					16722);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FUN_ASSESSMENT",
					16724);
		}
		return result;
	}

	/**
	 * This method returns the InSdx data based on SDX_SEQ_NUM Creation date -
	 * 03/14/2003
	 * 
	 * @param sdxSeqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getInSdxInfo(long sdxSeqNum) throws CoException {
		Object[] result = null;
		InSdxCargo cargo = new InSdxCargo();
		cargo.setSdxSeqNum(sdxSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",

					"InSdx", "findBySdxSeqNum", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_SDX", 16725);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_SDX", 16726);
		}
		return result;
	}

	/**
	 * This method returns the relevant Address records for an individual
	 * Creation date - Mar 13, 2003
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAddressForCase(long caseNumber) throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByCaseNo", dcCaseAddressesCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16727);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_ADDRESSES",
					16728);
		}
		return result;
	}

	/**
	 * This method returns the Disability Determination details for a given
	 * Individual Creation date - 03/14/2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDisabilityDeterminationInfo(long indvId)
			throws CoException {
		Object[] result = null;
		DcDisableDeterminationCargo disCargo = new DcDisableDeterminationCargo();
		disCargo.setIndvId(indvId);
		disCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		disCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisableDetermination", "findByIndvID", disCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DISABLE_DETERMINATION",
					16723);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_DISABLE_DETERMINATION", 16724);
		}
		return result;
	}

	/**
	 * This method returns the relevant FunAssessmentService records for an
	 * individual Creation date - Mar 06, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcFunAssessmentServByIndv(long indvId)
			throws CoException {
		Object[] result = null;
		DcFunAssesmentServiceCargo cargo = new DcFunAssesmentServiceCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFunAssesmentService", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_FUN_ASSESSMENT_SERVICE", 16671);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_FUN_ASSESSMENT_SERVICE", 16672);
		}
		return result;
	}

	/**
	 * Method to retrieve data from BI_TIN tables for 4108 Form [Direct Deposit
	 * Authorization] with Case Number & TypeofAssistance
	 * gov.state.nextgen.co.bo.CoDAOServices.get4108Details() Creation Date:
	 * March 24th 2002, 12:15 pm
	 * 
	 * @param caseNumber
	 *            - correspondence.getCaseAppNumber
	 * @param typeofAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * This method returns the EdIndvIspSummary data relevant for the IndvId,
	 * CaseNum, EdgNum, and IspId Creation date - 03/25/2003
	 * 
	 * @param vRpEligDetailsCargo
	 *            vRpEligDetailsCargo
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIspSummaryDtls(VRpEligDetailsCargo vRpEligDetailsCargo)
			throws CoException {
		Object[] result = null;
		EdIndvIspSummaryCargo cargo = new EdIndvIspSummaryCargo();
		cargo.setIndvId(vRpEligDetailsCargo.getIndvId());
		cargo.setEdgNum(vRpEligDetailsCargo.getEdgNum());
		cargo.setCaseNum(vRpEligDetailsCargo.getT1CaseNum());
		cargo.setIspId(vRpEligDetailsCargo.getIspId());
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvIspSummary", "findByIndvSpecific", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SUMMARY",
					16685);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ISP_SUMMARY",
					16686);
		}
		return result;
	}

	/**
	 * This method returns the EdIndvIspServicesList data relevant for the
	 * IndvId, CaseNum, EdgNum, and IspTraceId. A list of service ids are
	 * obtained. Creation date - 03/25/2003
	 * 
	 * @param edIndvIspSummaryCargo
	 *            edIndvIspSummaryCargo
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getIspServicesListDtls(
			EdIndvIspSummaryCargo edIndvIspSummaryCargo) throws CoException {
		Object[] result = null;
		EdIndvIspServiceListCargo cargo = new EdIndvIspServiceListCargo();
		cargo.setIndvId(edIndvIspSummaryCargo.getIndvId());
		cargo.setEdgNum(edIndvIspSummaryCargo.getEdgNum());
		cargo.setCaseNum(edIndvIspSummaryCargo.getCaseNum());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIspServiceList", "findByIndvSpecific", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SERVICE_LIST",
					16687);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_ISP_SERVICE_LIST", 16688);
		}
		return result;
	}

	/**
	 * This method returns the getEdIndvServices data relevant for the IndvId,
	 * CaseNum, EdgNum, ServiceGroups Creation date - 03/12/2003
	 * 
	 * @param vRpEligDetailsCargo
	 *            VRpEligDetailsCargo
	 * @param dataTypeCd
	 *            String
	 * @param edbcStatusCd
	 *            String
	 * @param edIndvIspServiceListCargoArray
	 *            EdIndvIspServiceListCargo[]
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getServiceDtlsForServicesList(
			VRpEligDetailsCargo vRpEligDetailsCargo, String dataTypeCd,
			String edbcStatusCd,

			EdIndvIspServiceListCargo[] edIndvIspServiceListCargoArray)
					throws CoException {
		Object[] result = null;
		EdIndvServiceDtlsCargo cargo = new EdIndvServiceDtlsCargo();
		cargo.setIndvId(vRpEligDetailsCargo.getIndvId());
		cargo.setCaseNum(vRpEligDetailsCargo.getT1CaseNum());
		cargo.setEdgNum(vRpEligDetailsCargo.getEdgNum());
		cargo.setDataTypeCd(dataTypeCd);
		cargo.setEdbcStatusCd(edbcStatusCd);
		cargo.setIspId(vRpEligDetailsCargo.getIspId());
		/**
		 * These are Service_Begin and Service_End dates SO Use only the EndDt
		 * and not the BeginDt
		 */
		cargo.setBeginDt(vRpEligDetailsCargo.getPaymentBegDt());
		if (vRpEligDetailsCargo.getPaymentEndDt() != null) {
			cargo.setEndDt(vRpEligDetailsCargo.getPaymentEndDt());
		} else {
			cargo.setEndDt(vRpEligDetailsCargo.getPaymentBegDt());
		}
		int size = edIndvIspServiceListCargoArray.length;
		String[] serviceIds = new String[size];
		for (int i = 0; i < size; i++) {
			serviceIds[i] = String.valueOf(edIndvIspServiceListCargoArray[i]
					.getServiceId());
		}
		Object[] obj = { cargo, serviceIds };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvIsp", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DETAILS ",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_SERVICE_DETAILS", 16659);
		}
		return result;
	}

	/**
	 * This method returns the Old Service record for the ServiceCd. Creation
	 * date - 03/25/2003
	 * 
	 * @param cargo
	 *            EdIndvServiceDtlsCargo
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getOldService(EdIndvServiceDtlsCargo cargo)
			throws CoException {
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByOldServiceDetails", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16659);
		}
		return result;
	}

	/**
	 * Method to retrieve data from BI_TIN tables for 4109 Form [Application for
	 * TIN] with Case Number & TypeofAssistance
	 * gov.state.nextgen.co.bo.CoDAOServices.get4109Details() Creation Date:
	 * March 25th 2002, 5:15 pm
	 * 
	 * @param caseNumber
	 *            long
	 * @param typeofAssistance
	 *            String
	 * @param tinSent
	 *            String
	 * @param edgNumber
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * This method returns the relevant DcHealthConcernDetail records for an
	 * individual.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcHealthConcern(long indvId) throws CoException {
		Object[] result = null;
		DcHealthConcernCargo cargo = new DcHealthConcernCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcHealthConcern", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);

			throw new CoException("Select failed for DC_HEALTH_CONCERN", 16720);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_HEALTH_CONCERN",
					16721);
		}
		return result;
	}

	/**
	 * This method returns the Initial/Ongoing Copay records for an individual
	 * Creation date - April 01, 2003 *
	 * 
	 * @param caseNum
	 *            long
	 * @param programCd
	 *            String
	 * @return Object[] - The Array of VRpEligDetailsCargo
	 * @throws CoException
	 */

	/**
	 * This method returns the denied edges for a given case-num and programCd
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param programCd
	 *            Program CD
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDeniedEdges(long caseNum, String programCd)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setProgramCd(programCd);
		edEligibilityCargo.setEligibilityBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setEligibilityEndDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByDeniedEdges", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_ELIGIBILITY: getDeniedEdges", 16337);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No Data in ED_ELIGIBILITY: getDeniedEdges", 16337);
		}
		return result;
	}

	/**
	 * This method returns the Lynch Rank information for a given Sscn and
	 * Sequence Number
	 * 
	 * @param sSCN
	 *            String
	 * @param sequenceNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] getLynchRankInfo(String sSCN, long sequenceNum)
			throws CoException {
		Object[] result = null;
		InLynchRankCargo inLynchCargo = new InLynchRankCargo();
		inLynchCargo.setSscn(sSCN);
		inLynchCargo.setSequenceNum(sequenceNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InLynchRank", "findBySscnAndSequenceNum", inLynchCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_LYNCH_RANK", 16733);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in IN_LYNCH_RANK", 16734);
		}
		return result;
	}

	/**
	 * This method returns the DcCases cargo for a given case-num Creation date
	 * - April 03, 2003
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcCasesCargo(long caseNum) throws CoException {
		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();

		dcCasesCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByCaseNum", dcCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASES", 16038);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data for the IndvId and Type
	 * of Assistance for those services which have the CDS_SW option set to
	 * 'Yes' Creation date - 04/04/2003
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetailsWithCDS(long indvId,
			String typeOfAssistance) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCDSOptionSelected", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * The method to get data from VInContractCntyAddr based on County and
	 * Service Group Code Creation Date: April 9th-2003
	 * 
	 * @param cntyList
	 *            String
	 * 
	 * 
	 * @param srvGrpCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	protected Object[] getServiceProviderDetails(String cntyList,
			String srvGrpCd) throws CoException {
		Object[] result = null;
		VInContractCntyAddrCargo vInContractCntyAddrCargo = new VInContractCntyAddrCargo();
		Object[] obj = { vInContractCntyAddrCargo, cntyList, srvGrpCd };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VInContractCntyAddr", "findByCountyCdAndSrvGroupCd", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in V_IN_CONTRACT_CNTY_ADDR",
					16737);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in V_IN_CONTRACT_CNTY_ADDR", 16738);
		}
		return result;
	}

	/**
	 * This method returns the client's home environment information for a given
	 * Individual Id
	 * 
	 * @param indvId
	 *            long Individual Id
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getHomeEnvironmentInfo(long indvId) throws CoException {
		Object[] result = null;
		DcHomeEnvironmentCargo dcHomeCargo = new DcHomeEnvironmentCargo();
		dcHomeCargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		dcHomeCargo.setEffBeginDt(date);
		dcHomeCargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcHomeEnvironment", "findByIndividualId", dcHomeCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_HOME_ENVIRONMENT",
					16820);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_HOME_ENVIRONMENT",
					16821);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM
	 * gov.state.nextgen.co.bo.CoDAOServices.getCaseVCLInfo() Creation Date:
	 * November 18th, 2002
	 * 
	 * @param caseNumber
	 *            long
	 * @param programCode
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLPrintInfo(long caseNumber, String programCode)
			throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setProgramCd(programCode);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByProgranEffEndDtNull",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for EdVerificationChecklist, Exception = "
							+ e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist",
					16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in PostPoned EdVerificationChecklist",
					16009);
		}
		return result;
	}

	/**
	 * The method to get data from ED_INDV_PENALITIES based on INDV_ID, TRACE_ID
	 * AND CASE NUMBER Creation Date: May 20th-2003
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseTracePenalitiesDate(long caseNumber, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdIndvPenaltiesCargo edIndvPenaltiesCargo = new EdIndvPenaltiesCargo();
		edIndvPenaltiesCargo.setCaseNum(caseNumber);
		edIndvPenaltiesCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPenalties", "findByEdgTraceId",
					edIndvPenaltiesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PENALITIES", 16619);
		}
		return result;
	}

	/**
	 * Method to get Physical or Mailing Address for an Application Number from
	 * AR_APP_ADDR gov.state.nextgen.co.bo.CoDAOServices.
	 * getPhysicalAddresseeAddress()
	 * 
	 * @param arAppNum
	 *            String
	 * 
	 * 
	 * @param addressType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPhysicalAddresseeAddress(String arAppNum,
			String addressType) throws CoException {
		Object[] result = null;
		ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
		arAppAddrCargo.setAppNum(arAppNum);
		arAppAddrCargo.setAddrTypeCd(addressType);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppAddr", "findByAppNumAndTypeCd", arAppAddrCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);

			throw new CoException("Select failed for AR_APP_ADDR", 16739);
		}
		return result;
	}

	/**
	 * Method to get data from AR_APPLICATION_FOR_AID based on case number
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAuthrepCaregiverInfo(long caseNum) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arApplicationForAidCargo =

				new ArApplicationForAidCargo();
		arApplicationForAidCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "getAuthrepCaregiverSwForCaseNum",
					arApplicationForAidCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
					16741);
		}
		return result;
	}

	/**
	 * The method to get data from DC_DEMOGRAPHICS based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDemographicInfo(long indvId) throws CoException {
		Object[] result = null;
		DcDemographicsCargo dcDemographicsCargo = new DcDemographicsCargo();
		dcDemographicsCargo.setIndvId(indvId);
		dcDemographicsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDemographics", "findCitizenshipAndTxResInfoByIndvId",
					dcDemographicsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DEMOGRAPHICS", 16743);
		}
		return result;
	}

	/**
	 * The method to get data from DC_INDV_LIVING_ARNGMNTS based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getResidenceType(long indvId) throws CoException {

		Object[] result = null;
		DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
		dcIndvLivingArngmntsCargo.setIndvId(indvId);
		dcIndvLivingArngmntsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvLivingArngmnts", "findResidenceTypeByIndvId",
					dcIndvLivingArngmntsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
					16745);
		}
		return result;
	}

	/**
	 * The method to get data from DC_MEDICARE_CLAIM based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMedicarePrtAClaimNumBeginDt(long indvId)
			throws CoException {
		Object[] result = null;
		DcMedicareClaimCargo dcMedicareClaimCargo = new DcMedicareClaimCargo();
		dcMedicareClaimCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicareClaim", "findMedicarePrtAByIndvId",
					dcMedicareClaimCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICARE_CLAIM", 16747);
		}
		return result;
	}

	/**
	 * The method to get data from DC_MEDICARE_CLAIM based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMedicarePrtBClaimNumBeginDt(long indvId)
			throws CoException {
		Object[] result = null;
		DcMedicareClaimCargo dcMedicareClaimCargo = new DcMedicareClaimCargo();
		dcMedicareClaimCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicareClaim", "findMedicarePrtBByIndvId",
					dcMedicareClaimCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICARE_CLAIM", 16747);
		}
		return result;
	}

	/**
	 * Method to get Medicare Claim Number from DC_MEDICARE_CLAIM based on
	 * INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMedicareClaimNoByIndvId(long indvId) throws CoException {
		Object[] result = null;
		DcMedicareClaimCargo dcMedicareClaimCargo = new DcMedicareClaimCargo();
		dcMedicareClaimCargo.setIndvId(indvId);
		dcMedicareClaimCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicareClaim", "findMedicareClaimNoByIndvId",
					dcMedicareClaimCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICARE_CLAIM", 16747);
		}
		return result;
	}

	/**
	 * Method to get data from DC_INDIVIDUAL_ALIEN based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAlienStatus(long indvId) throws CoException {
		Object[] result = null;
		DcIndividualAlienCargo dcIndividualAlienCargo = new DcIndividualAlienCargo();
		dcIndividualAlienCargo.setIndvId(indvId);
		dcIndividualAlienCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndividualAlien", "findAlienStatusByIndvId",
					dcIndividualAlienCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDIVIDUAL_ALIEN",
					16749);
		}
		return result;
	}

	/**
	 * Method to get data from DC_UNEARNED_INCOME based on INDV_ID and
	 * UNEARNED_INCOME_TYPE_CD
	 * 
	 * @param indvId
	 *            long
	 * @param incomeType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getUnearnedIncomeByIndvIdAndType(long indvId,
			String incomeType)

					throws CoException {
		Object[] result = null;
		VDcUnearnedIncomeCargo vDcUnearnedIncomeCargo = new VDcUnearnedIncomeCargo();
		vDcUnearnedIncomeCargo.setT2IndvId(indvId);
		vDcUnearnedIncomeCargo.setUnearnedIncomeTypeCd(incomeType);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcUnearnedIncome",
					"findUnearnedIncomeDetailsByIndvIdAndType",
					vDcUnearnedIncomeCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME",

					16751);
		}
		return result;
	}

	/**
	 * Method to get data from DC_UNEARNED_INCOME based on INDV_ID and
	 * UNEARNED_SEQ_NUM
	 * 
	 * @param indvId
	 *            long
	 * 
	 * 
	 * @param resourceSeqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getUnearnedIncomeByIndvIdAndResourceSequenceNum(
			long indvId, long resourceSeqNum) throws CoException {
		Object[] result = null;
		VDcUnearnedIncomeCargo vDcUnearnedIncomeCargo = new VDcUnearnedIncomeCargo();
		vDcUnearnedIncomeCargo.setT2IndvId(indvId);
		vDcUnearnedIncomeCargo.setResourceSeqNum(resourceSeqNum);
		vDcUnearnedIncomeCargo.setT2EffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcUnearnedIncome",
					"findUnearnedIncomeDetailsByIndvIdAndResourceSequenceNum",
					vDcUnearnedIncomeCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME", 16751);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_MINERAL_RIGHTS based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMineralRightsResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcMineralRightsCargo dcMineralRightsCargo = new DcMineralRightsCargo();
		dcMineralRightsCargo.setIndvId(indvId);
		dcMineralRightsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMineralRights",
					"findMineralRightsResourceDetailsByIndvId",
					dcMineralRightsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MINERAL_RIGHTS", 16753);
		}
		return result;
	}

	/**
	 * Method to get sequence number from DC_MINERAL_RIGHTS based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMineralRightsSequenceNumByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcMineralRightsCargo dcMineralRightsCargo = new DcMineralRightsCargo();
		dcMineralRightsCargo.setIndvId(indvId);
		dcMineralRightsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMineralRights", "findMineralRightsSequenceNumByIndvId",
					dcMineralRightsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MINERAL_RIGHTS", 16753);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_LIVESTOCK based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLivestockResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLivestockCargo dcLivestockCargo = new DcLivestockCargo();
		dcLivestockCargo.setIndvId(indvId);
		dcLivestockCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLivestock", "findLivestockResourceDetailsByIndvId",
					dcLivestockCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIVESTOCK", 16755);
		}
		return result;
	}

	/**
	 * Method to get sequence number from DC_LIVESTOCK based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 * 
	 */
	public Object[] getLivestockSequenceNumByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLivestockCargo dcLivestockCargo = new DcLivestockCargo();
		dcLivestockCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLivestock", "findLivestockSequenceNumByIndvId",
					dcLivestockCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIVESTOCK", 16755);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_REAL_PROPERTY based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @param isResidence
	 *            boolean
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPropertyResourceDetailsByIndvId(long indvId,
			boolean isResidence) throws CoException {
		Object[] result = null;
		DcRealPropertyCargo dcRealPropertyCargo = new DcRealPropertyCargo();
		dcRealPropertyCargo.setIndvId(indvId);	
		dcRealPropertyCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRealProperty", "findPropertyResourceDetailsByIndvId",
					dcRealPropertyCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_REAL_PROPERTY", 16757);
		}
		return result;
	}

	/**
	 * Method to get sequence number from DC_REAL_PROPERTY based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getPropertySequenceNumByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcRealPropertyCargo dcRealPropertyCargo = new DcRealPropertyCargo();
		dcRealPropertyCargo.setIndvId(indvId);
		dcRealPropertyCargo.setEffBeginDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRealProperty", "findPropertySequenceNumByIndvId",
					dcRealPropertyCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_REAL_PROPERTY", 16757);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_LIQUID_RESOURCES based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCashResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo dcLiquidResourcesCargo = new DcLiquidResourcesCargo();
		dcLiquidResourcesCargo.setIndvId(indvId);
		dcLiquidResourcesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findCashResourceDetailsByIndvId",
					dcLiquidResourcesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		return result;
	}

	/**
	 * Method to get income data from DC_LIQUID_RESOURCES based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @param resourceType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLiquidResourceDetailsByIndvIdandType(long indvId,
			String resourceType) throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo dcLiquidResourcesCargo =

				new DcLiquidResourcesCargo();
		dcLiquidResourcesCargo.setIndvId(indvId);
		dcLiquidResourcesCargo.setTypeCd(resourceType);
		dcLiquidResourcesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources",
					"findLiquidResourceDetailsByIndvIdAndType",
					dcLiquidResourcesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		return result;
	}

	/**
	 * Method to get income data from DC_TRUST based on INDV_ID
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPatientTrustResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcTrustCargo dcTrustCargo = new DcTrustCargo();
		dcTrustCargo.setIndvId(indvId);
		dcTrustCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcTrust",
					"findPatientTrustResourceDetailsByIndvId", dcTrustCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TRUST", 16761);
		}
		return result;
	}

	/**
	 * Method to get income data from DC_TRUST based on INDV_ID Creation Date:
	 * (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getTrustResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcTrustCargo dcTrustCargo = new DcTrustCargo();
		dcTrustCargo.setIndvId(indvId);
		dcTrustCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcTrust",
					"findTrustResourceDetailsByIndvId", dcTrustCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TRUST", 16761);
		}
		return result;
	}

	/**
	 * Method to get income data from DC_VEHICLES based on INDV_ID Creation
	 * Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAutomobileResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcVehiclesCargo dcVehiclesCargo = new DcVehiclesCargo();
		dcVehiclesCargo.setIndvId(indvId);
		dcVehiclesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcVehicles", "findAutomobileResourceDetailsByIndvId",
					dcVehiclesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_VEHICLES", 16763);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_LIFE_INSURANCE based on INDV_ID and
	 * DESIGNATED_BURIAL_SW = CoConstants.CHAR_N. Creation Date: (05/29/2003
	 * 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLifeInsuranceResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo dcLifeInsuranceCargo = new DcLifeInsuranceCargo();
		dcLifeInsuranceCargo.setIndvId(indvId);

		dcLifeInsuranceCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance",
					"findLifeInsuranceResourceDetailsByIndvId",
					dcLifeInsuranceCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_LIFE_INSURANCE based on INDV_ID and
	 * DESIGNATED_BURIAL_SW = CoConstants.CHAR_Y. If DESIGNATED_BURIAL_SW =
	 * CoConstants.CHAR_Y it would mean that this insurance is for burial
	 * purposes. Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getBurialInsuranceResourceDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo dcLifeInsuranceCargo = new DcLifeInsuranceCargo();
		dcLifeInsuranceCargo.setIndvId(indvId);
		dcLifeInsuranceCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance",
					"findLifeInsuranceResourceDetailsByIndvId",
					dcLifeInsuranceCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		return result;
	}

	/**
	 * Method to get resource data from DC_UNUSUAL_PROPRERTY_VALUE based on
	 * INDV_ID Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param use
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getUnusualPropertyResourceDetailsByIndvIdAndUse(
			long indvId, String use) throws CoException {
		Object[] result = null;
		DcUnusualPropertyValueCargo dcUnusualPropertyValueCargo = new DcUnusualPropertyValueCargo();
		dcUnusualPropertyValueCargo.setIndvId(indvId);
		dcUnusualPropertyValueCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUnusualPropertyValue",
					"findUnusualPropertyResourceDetailsByIndvIdAndUse",
					dcUnusualPropertyValueCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_UNUSUAL_PROPRERTY_VALUE", 16767);
		}
		return result;
	}

	/**
	 * Method to get 3rd Party Health Insurance Information from
	 * DC_3RD_PARTY_RES based on CASE_NUM Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param caseNum
	 *            long
	 * @param timeInMonths
	 *            int
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] get3RdPartyInsuranceDetailsByCaseNum(long caseNum,
			int timeInMonths) throws CoException {
		Object[] result = null;
		Object[] obj = { String.valueOf(caseNum), String.valueOf(timeInMonths),
				String.valueOf(CoDateFactory.getSqlDate()) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"VDcThirdParty", "findBy3RdPartyInsuranceDetailsByCaseNum",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_3RD_PARTY_RES", 16769);
		}
		return result;
	}

	/**
	 * Method to get Rent and Food Expense information from
	 * DC_SUPPORT_MAINTENANCE based on INDV_ID Creation Date: (05/29/2003
	 * 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getRentAndFoodExpensesByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcSupportMaintenanceCargo dcSupportMaintenanceCargo = new DcSupportMaintenanceCargo();
		dcSupportMaintenanceCargo.setIndvId(indvId);
		dcSupportMaintenanceCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSupportMaintenance", "findRentAndFoodExpensesByIndvId",
					dcSupportMaintenanceCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SUPPORT_MAINTENANCE",
					16771);
		}
		return result;
	}

	/**
	 * Method to get Earned Income details from DC_EMP_PAYMENT_EXPENSES based on
	 * INDV_ID and EMP_SEQ_NUM Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param empSeqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEarnedIncomeByIndvIdAndSeqNum(long indvId, long empSeqNum)
			throws CoException {
		Object[] result = null;
		DcEmpPaymentExpensesCargo dcEmpPaymentExpensesCargo = new DcEmpPaymentExpensesCargo();
		dcEmpPaymentExpensesCargo.setIndvId(indvId);
		dcEmpPaymentExpensesCargo.setEmpSeqNum(empSeqNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmpPaymentExpenses",
					"findEarnedIncomeDetailsByIndvIdAndSeqNum",
					dcEmpPaymentExpensesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_EMP_PAYMENT_EXPENSES",
					16773);
		}
		return result;
	}

	/**
	 * Method to get Earned Income details from DC_EMPLOYMTENT based on INDV_ID
	 * and EARNED_INCOME_TYPE_CD Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param incomeType
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEmployerDetailsByIndvIdAndType(long indvId,
			String incomeType) throws CoException {
		Object[] result = null;
		DcEmploymentCargo dcEmploymentCargo = new DcEmploymentCargo();
		dcEmploymentCargo.setIndvId(indvId);
		dcEmploymentCargo.setEarnedIncomeTypeCd(incomeType);
		dcEmploymentCargo.setEffBeginDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmployment", "findEmployerDetailsByIndvIdAndType",
					dcEmploymentCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_EMPLOYMENT", 16775);
		}
		return result;
	}


	/**
	 * Method to get Transfered Resources from DC_TRANSFERED_RESOURCES based on
	 * INDV_ID 
	 * @author rparanjpe
	 * @param indvId
	 *            long
	 * @param timeInMonths
	 *            int
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getTransferedResourceDetailsByIndvId(
			long caseNum) throws CoException {
		Object[] result = null;
		Object[] obj = { caseNum };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcTransferedResources",
					"findByIndividualsInCaseResTypeOtherThanVehicle", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TRANSFERED_RESOURCES",
					16777);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_TRANSFERED_RESOURCES", 16797);
		}
		return result;
	}


	/**
	 * Method to get Transfered Resources from DC_TRANSFERED_RESOURCES based on
	 * INDV_ID and past time period Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param timeInMonths
	 *            int
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPastTransferedResourceDetailsByIndvIdAndTime(
			long indvId, int timeInMonths) throws CoException {
		Object[] result = null;
		Object[] obj = { String.valueOf(indvId), String.valueOf(timeInMonths),
				String.valueOf(CoDateFactory.getSqlDate()) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcTransferedResources",
					"findPastTransferedResourceDetailsByIndvIdAndTime", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_TRANSFERED_RESOURCES",
					16777);
		}
		return result;
	}

	/**
	 * Method to get Promissory Notes details from DC_LUMP_SUM_RESOURCES based
	 * on INDV_ID Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPromissoryNotesDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo dcLiquidResourcesCargo = new DcLiquidResourcesCargo();
		dcLiquidResourcesCargo.setIndvId(indvId);
		dcLiquidResourcesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources",
					"findPromissoryNotesResourceDetailsByIndvId",
					dcLiquidResourcesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16779);
		}

		return result;
	}

	/**
	 * Method to get Burial Resource details from DC_BURIAL_RESOURCES based on
	 * INDV_ID Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param typeCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getBurialResourceDetailsByIndvIdAndType(long indvId,
			String typeCd) throws CoException {
		Object[] result = null;
		VDcBurialResItemsCargo vDcBurialResItemsCargo = new VDcBurialResItemsCargo();
		vDcBurialResItemsCargo.setT1IndvId(indvId);
		vDcBurialResItemsCargo.setTypeCd(typeCd);

		vDcBurialResItemsCargo.setT1EffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcBurialResItems",
					"findBurialResourceDetailsByIndvIdAndType",
					vDcBurialResItemsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_BURIAL_RESOURCES",
					16781);
		}
		return result;
	}

	/**
	 * Method to get number of available Burial Spaces from
	 * DC_BURIAL_SPACE_ITEMS based on INDV_ID Creation Date: (05/29/2003 3:50:55
	 * PM)
	 * 
	 * @param indvId
	 *            long
	 * @param seqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getNumberOfBurialSpacesByIndvIdAndSeqNum(long indvId,
			long seqNum) throws CoException {
		Object[] result = null;
		DcBurialSpaceItemsCargo dcBurialSpaceItemsCargo = new DcBurialSpaceItemsCargo();

		dcBurialSpaceItemsCargo.setIndvId(indvId);
		dcBurialSpaceItemsCargo.setSequenceNum(seqNum);
		dcBurialSpaceItemsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcBurialSpaceItems",
					"findNumberOfBurialSpacesByIndvIdAndSeqNum",
					dcBurialSpaceItemsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_BURIAL_SPACE_ITEMS",
					16783);
		}
		return result;
	}

	/**
	 * Method to get Comments from DC_INDV_COMMENTS based on INDV_ID,
	 * SEQUENCE_NUM and PageId Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param indvId
	 *            long
	 * @param seqNum
	 *            long
	 * @param pageId
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCommentsByIndvIdSequenceNumAndPageId(long indvId,
			long seqNum, String pageId) throws CoException {
		Object[] result = null;

		DcIndvCommentsCargo dcIndvCommentsCargo = new DcIndvCommentsCargo();
		dcIndvCommentsCargo.setKeyOne(indvId);
		dcIndvCommentsCargo.setKeyTwo(String.valueOf(seqNum));
		dcIndvCommentsCargo.setKeyType(pageId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvComments",
					"findCommentsByIndvIdSequenceNumAndPageId",
					dcIndvCommentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_COMMENTS", 16785);
		}
		return result;
	}

	/**
	 * Method to get Appointment Date from SH_APPOINTMENTS based on CASE_NUM
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAppointmentTimeByCaseNum(long caseNum)
			throws CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		shAppointmentsCargo.setCaseNum(caseNum);
		shAppointmentsCargo.setApptBegDatetime(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(

					"gov.state.nextgen.common.collection.custom", "ShAppointments",
					"findAppointmentTimeByCaseNum", shAppointmentsCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16787);
		}
		return result;
	}

	/**
	 * Method to get Appointment Date from SH_APPOINTMENTS based on APP_NUM
	 * Creation Date: (05/29/2003 3:50:55 PM)
	 * 
	 * @param appNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getAppointmentTimeByAppNum(String appNum)
			throws CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		shAppointmentsCargo.setAppNum(appNum);
		shAppointmentsCargo.setApptBegDatetime(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",

					"ShAppointments", "findAppointmentTimeByAppNum",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16787);
		}
		return result;
	}

	/**
	 * Method used to select all the Annual Interest Lists that need to be
	 * processed after the preprocessor runs. Creation date 06/16/2003
	 * 
	 * @param asOfDate
	 *            String
	 * @return Object[]
	 * 
	 */
	public Object[] selectAnnualInterestListsBatchRequest(String asOfDate) {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		SimpleDateFormat sdfSource = new SimpleDateFormat("MM/dd/yyyy");
		java.util.Date parsedDate = null;
		try {
			parsedDate = sdfSource.parse(asOfDate);
			java.sql.Timestamp sqlDt = new java.sql.Timestamp(
					parsedDate.getTime());
			vCoRequestCargo.setGenerateDt(sqlDt);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException(
					"Exception in CoDAOServices.selectBatchRequest "
							+ e.getMessage(), e);
		}
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByAnnualInterestListsBatchRequest",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException(
					"exception in CoDAOServices.selectBatchRequest "
							+ e.getMessage(), e);
		}
		return finalResult;
	}

	/**
	 * The method is to get data from V_AR_INTEREST_LIST based on Indv id and
	 * Interest list Admin ids Creation Date: 02/24/2003
	 * 
	 * @param indvID
	 *            long
	 * @param interListAdminIds
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getInterestListsNByIds(long indvID, String interListAdminIds)
			throws CoException {
		Object[] result = null;
		VArInterestListCargo vArInterestListCargo = new VArInterestListCargo();
		Object[] obj = { vArInterestListCargo, interListAdminIds };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByInterestListAdminIds", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_AR_INTEREST_LIST", 16531);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_AR_INTEREST_LIST",
					16531);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcToaRespiteCareDetails records for an
	 * individual Creation date - July 31, 2003
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcToaRespiteCareDetails(long indvId) throws CoException {
		Object[] result = null;
		DcToaRespitecareDetailsCargo cargo = new DcToaRespitecareDetailsCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcToaRespitecareDetails", "findByIndividualId", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_TOA_RESPITECARE_DETAILS", 16818);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_TOA_RESPITECARE_DETAILS", 16819);
		}
		return result;
	}

	/**
	 * This method get data from ED_INDV_LTC_PENDING_REASON for an individual
	 * and case
	 * 
	 * @param caseNum
	 *            String
	 * @param indvId
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getLtcPendingReasonsByIndvIdCaseNum(String caseNum,
			String indvId) throws CoException {
		Object[] result = null;
		EdIndvLtcPendingReasonCargo cargo = new EdIndvLtcPendingReasonCargo();
		cargo.setCaseNum(Long.parseLong(caseNum));
		cargo.setIndvId(Long.parseLong(indvId));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvLtcPendingReason", "findByCaseNumIndvId", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_INDV_LTC_PENDING_REASON", 16693);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_LTC_PENDING_REASON", 16694);
		}
		return result;
	}

	/**
	 * This method get data from ED_ELIGIBILITY for case number and a list of
	 * edgTraceIds
	 * 
	 * @param caseNum
	 *            String
	 * @param traceIdList
	 *            ArrayList
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgNumByEdgTraceIdAndCaseNum(String caseNum,
			List traceIdList) throws CoException {
		Object[] result = null;
		Object[] obj = { caseNum, traceIdList };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findEdgNumByEdgTraceIdAndCaseNum", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16796);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16797);
		}
		return result;
	}

	/**
	 * This method get data from CO_NOD_REQUEST_DETAIL for case number, docId
	 * and a list of coReqSeq numbers
	 * 
	 * @param caseNum
	 *            String
	 * @param docId
	 *            String
	 * @param paymonth
	 *            String
	 * @param edgNum
	 *            long
	 * @param coReqSeqList
	 *            ArrayList
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getReqSeqByEdgNumAndPayMonth(String caseNum, String docId,
			String paymonth, long edgNum, List coReqSeqList)
					throws CoException {
		Object[] result = null;
		CoNodRequestDetailCargo cargo = new CoNodRequestDetailCargo();

		cargo.setCaseNum(Long.parseLong(caseNum));
		cargo.setDocId(docId);
		cargo.setPaymonth(paymonth);
		cargo.setEdgNum(edgNum);
		StringBuffer strBuff = new StringBuffer();
		strBuff.append('(');
		int size = coReqSeqList.size();
		for (int i = 0; i < size; i++) {
			strBuff.append((String) coReqSeqList.get(i));
			if (i < size - 1) {
				strBuff.append(',');
			}
		}
		strBuff.append(')');
		Object[] obj = { cargo, strBuff.toString() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail", "findReqSeqByEdgNumAndPayMonth",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_NOD_REQUEST_DETAIL",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_NOD_REQUEST_DETAIL",
					16817);
		}
		return result;
	}

	/**
	 * This method get data from CO_NOD_REQUEST_DETAIL for case number, docId
	 * and coReqSeq
	 * 
	 * @param caseNum
	 *            String
	 * @param docId
	 *            String
	 * @param coReqSeq
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getNodDetailByCaseNumDocIdReqSeq(String caseNum,
			String docId, long coReqSeq) throws CoException {
		Object[] result = null;
		CoNodRequestDetailCargo cargo = new CoNodRequestDetailCargo();
		cargo.setCaseNum(Long.parseLong(caseNum));
		cargo.setDocId(docId);
		cargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail", "findByCaseNumDocIdReqSeq", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_NOD_REQUEST_DETAIL",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_NOD_REQUEST_DETAIL",
					16817);
		}
		return result;
	}

   public CoNodRequestDetailCargo[] getNodDetailByEdgTraceIds(String docId, String edgTraceIds) throws CoException {
		Object[] result = null;
		Object[] obj = {docId, edgTraceIds};
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail", "findByEdgTraceIds", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		if (result == null || result.length == 0) {
			CoDebugger.debugMessage("No Records Found for the given EdgTraces: "+edgTraceIds);
		}
		return  (result == null ? null : (CoNodRequestDetailCargo[]) result);
	}
   
	/**
	 * This method insert a record into CO_NOD_REQUEST_DETAIL table.
	 * 
	 * @param cargo
	 *            CoNodRequestDetailCargo
	 * @return int
	 */
	public int insertNodRequest(CoNodRequestDetailCargo cargo) {
		int commitFlag = 0;
		openConnection();
		CoNodRequestDetailCollection coNodRequestDetailCollection = new CoNodRequestDetailCollection();
		coNodRequestDetailCollection.setEJBSupported(false);
		coNodRequestDetailCollection.setCargo(cargo);
		try {
			commitFlag = coNodRequestDetailCollection.insert() ? 1 : -1;
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * Returns all the service category codes for that individual.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualServiceCategoryCodes(long indvId)
			throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();

		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByIndvAllServiceCd", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcServicePlanDetail ",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcServicePlanDetail",
					16638);
		}
		return result;
	}

	/**
	 * Returns the detail for that service category cd for that individual.
	 * 
	 * @param indvId
	 *            long
	 * @param serviceCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getDcServicePlanDetailsByIndvServiceCd(long indvId,
			String serviceCd) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setSrvCategoryCd(serviceCd);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByIndvServiceCd", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * Returns the detail for that service category cd and Detail Id
	 * 
	 * @param indvId
	 *            long
	 * @param detailId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetailsByIndvDetailId(long indvId,
			long detailId) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();

		cargo.setIndvId(indvId);
		cargo.setSrvPlanDetailId(detailId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByIndvDetailId", cargo, null,
					conn);
		} catch (Exception e) {
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * This method get data from CO_REQUEST_HISTORY for given case number,
	 * docId.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] checkPriorRequest(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setIndvId(aCoObj.getIndvId());
		vCoRequestCargo.setT1DocId(aCoObj.getDocId());
		vCoRequestCargo.setProgramCd(aCoObj.getAssistanceProgramCode());
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByOrigPrintDt", vCoRequestCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_REQUEST", 16814);
		}
		return finalResult;
	}

	/**
	 * This method get data from AR_PRE_SCREENER_DETAILS by indvId.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPrescreenerDetailsByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		ArPreScreenerDetailsCargo cargo = new ArPreScreenerDetailsCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArPreScreenerDetails", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_PRE_SCREENER_DETAILS",
					16812);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in AR_PRE_SCREENER_DETAILS", 16813);
		}
		return result;
	}

	/**
	 * This method get data from AR_PRESCREENER_NEEDS by indvId
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPrescreenerNeedsByIndvId(long indvId) throws CoException {
		Object[] result = null;
		ArPrescreenerNeedsCargo cargo = new ArPrescreenerNeedsCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArPrescreenerNeeds", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_PRESCREENER_NEEDS",
					16810);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_PRESCREENER_NEEDS",
					16811);
		}
		return result;
	}

	/**
	 * This method get data from AR_PRESCREENER_MATCHES by indvId.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPrescreenerMatchesByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		ArPrescreenerMatchesCargo cargo = new ArPrescreenerMatchesCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArPrescreenerMatches", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_PRESCREENER_MATCHES",
					16808);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_PRESCREENER_MATCHES",
					16809);
		}
		return result;
	}

	/**
	 * This method get data from AR_PRIORITY_SCREENING by indvId and Application
	 * Number.
	 * 
	 * @param indvId
	 *            long
	 * @param appNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPriorityScreeningByIndvIdAppNum(long indvId,
			String appNum) throws CoException {
		Object[] result = null;
		ArPriorityScreeningCargo cargo = new ArPriorityScreeningCargo();
		cargo.setIndvId(indvId);
		cargo.setAppNum(appNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArPriorityScreening", "findByAppNumIndvId", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_PRIORITY_SCREENING",
					16806);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_PRIORITY_SCREENING",
					16807);
		}
		return result;
	}

	/**
	 * This method get data from AR_APP_INDV by Application Number.
	 * 
	 * @param appNum
	 *            App Number
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getHouseholdMemberDetailsByAppNum(String appNum)
			throws CoException {
		Object[] result = null;
		VArAppDcIndvCargo cargo = new VArAppDcIndvCargo();
		cargo.setT1AppNum(appNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArAppDcIndv", "findIndividualsByAppNum", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_INDV", 16804);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in AR_APP_INDV", 16805);
		}
		return result;
	}

	/**
	 * This method get data from AR_APPLICATION_FOR_AID by Application Number.
	 * 
	 * @param indvId
	 *            long
	 * @param appNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAppIndvDtlsByIndvIdAppNum(long indvId, String appNum)
			throws CoException {
		Object[] result = null;
		VArApplicationIndvCargo cargo = new VArApplicationIndvCargo();
		cargo.setT2AppNum(appNum);
		cargo.setT2IndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArApplicationIndv", "findByAppNumberIndvId", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
					16741);
		}

		return result;
	}

	/**
	 * This method get data from AR_INTEREST_LIST_DETAILS by Application Number.
	 * 
	 * @param indvId
	 *            long
	 * @param toa
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getOpenInterestListsByIndvIdAndTOA(long indvId, String toa)
			throws CoException {
		Object[] result = null;
		VArInterestListCargo cargo = new VArInterestListCargo();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArInterestList", "findByIndvIdTOAAndStatusCd", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_INTEREST_LIST_DETAILS",
					16802);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in AR_INTEREST_LIST_DETAILS", 16803);
		}
		return result;
	}

	/**
	 * This method get data from CO_REQUEST_HISTORY by Application Number.
	 * 
	 * @param appNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getInitialApplicationMailingInfo(String appNum)
			throws CoException {
		Object[] result = null;

		VCoRequestCargo cargo = new VCoRequestCargo();

		cargo.setAppNum(appNum);
		cargo.setChipAppNum(appNum);

		cargo.setT1DocId(CoConstants.FXX406_DOC_ID);
		cargo.setRequestTypeCd(CoConstants.CHAR_A);
		// used by FXX406 2110 ltc intake

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findInitialApplicationMailingInfo", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_HISTORY", 16653);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REQUEST_HISTORY",
					16654);
		}
		return result;
	}

	/**
	 * 
	 * This method get data from DC_ALIAS by Application Number.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAliasesByIndvId(long indvId) throws CoException {
		Object[] result = null;
		DcAliasCargo cargo = new DcAliasCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcAlias",
					"findBySASIndvIdCurRow", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_ALIAS", 16800);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_ALIAS", 16801);
		}
		return result;
	}

	/**
	 * This method returns the CoText data relevant for that Reason Code.
	 * 
	 * @param docId
	 *            String
	 * @param language
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getCoTextForDocument(String docId, String language)
			throws CoException {
		Object[] result = null;
		CoTextCargo cargo = new CoTextCargo();
		cargo.setDocId(docId);
		cargo.setLanguageCd(language);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoText",
					"findByDocumentListAndLanguage", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_TEXT", 16600);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_TEXT", 16601);
		}
		return result;
	}

	/**
	 * This method returns the Dc3RdPartyRes data relevant for that Case,
	 * Sequence Number and Dates.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param sequenceNum
	 *            Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDc3rdPartyInfo(long caseNum, long sequenceNum)
			throws CoException {
		Object[] result = null;
		Dc3RdPartyResCargo cargo = new Dc3RdPartyResCargo();
		cargo.setCaseNum(caseNum);
		cargo.setSequenceNum(sequenceNum);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPartyRes", "findByCaseNumAndSequenceNum", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_3RD_PARTY_RES", 16769);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_3RD_PARTY_RES", 16770);
		}
		return result;
	}

	/**
	 * This method returns the Dc3RdPartyResAddr data relevant for that Case,
	 * Sequence Number.
	 * 
	 * @param caseNum
	 *            long
	 * @param sequenceNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDc3rdPartyAddress(long caseNum, long sequenceNum)
			throws CoException {
		Object[] result = null;
		Dc3RdPartyResAddrCargo cargo = new Dc3RdPartyResAddrCargo();
		cargo.setCaseNum(caseNum);
		cargo.setSequenceNum(sequenceNum);
		cargo.setAddressTypeCd("INS");
		cargo.setVoidSw(CoConstants.CHAR_N);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPartyResAddr", "findByCaseSeqAddrTypeCurrRec", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_3RD_PARTY_RES_ADDR",
					16798);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_3RD_PARTY_RES_ADDR",
					16799);
		}
		return result;
	}

	/**
	 * This method get data from V_Ed_Eligibility_Indv based on case number and
	 * indvId.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param indvId
	 *            Indv ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgNumTOAByCaseNumIndvId(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(caseNum);
		cargo.setIndvId(indvId);
		cargo.setT1EligibilityBegDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findEdgNumTOAByCaseNumIndvId",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16796);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16797);
		}
		return result;
	}

	/**
	 * This method returns the DcFacility data relevant for that IndvId.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIndvEnteredFacilities(long indvId) throws CoException {
		Object[] result = null;
		DcFacilityCargo cargo = new DcFacilityCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFacility", "findByIndvFacilities", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_FACILITY", 16607);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_FACILITY", 16608);
		}
		return result;
	}

	/**
	 * This method returns the Dc3RdPrEligibleClients data relevant for the
	 * Case, Sequence Number.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param sequenceNum
	 *            Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDc3RdPrEligibleClients(long caseNum, long sequenceNum)
			throws CoException {
		Object[] result = null;
		Dc3RdPrEligibleClientsCargo cargo = new Dc3RdPrEligibleClientsCargo();
		cargo.setCaseNum(caseNum);
		cargo.setSequenceNum(sequenceNum);
		cargo.setVoidSw(CoConstants.CHAR_N);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPrEligibleClients", "findByCaseSeqNumVoidSw", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_3RD_PR_ELIGIBLE_CLIENTS", 16794);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_3RD_PR_ELIGIBLE_CLIENTS", 16795);
		}
		return result;
	}

	/**
	 * Method to get data from CO_TEXT for Title on 1830 which includes language
	 * code in its parameter list.
	 * 
	 * @param docId
	 *            Document ID
	 * @param textOrderNo
	 *            Text order number
	 * @param langCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTextTitles(String docId, long textOrderNo,
			String langCd) throws CoException {
		Object[] result = null;
		CoTextCargo coTextCargo = new CoTextCargo();
		coTextCargo.setDocId(docId);
		coTextCargo.setTextOrderNum(textOrderNo);
		coTextCargo.setLanguageCd(langCd);
		coTextCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoText",
					"findByDocIdAndTextOrderNumberAndLanguage", coTextCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in CO_TEXT", 16600);
		}

		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_TEXT", 16601);
		}
		return result;
	}

	/**
	 * This method returns the DcLevelOfCare data relevant for an individual id.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcLevelOfCareInfo(long indvId) throws CoException {
		Object[] result = null;
		DcLevelOfCareCargo cargo = new DcLevelOfCareCargo();
		cargo.setIndvId(indvId);
		java.sql.Date dt = CoDateFactory.getSqlDate();
		cargo.setEffBeginDt(new Timestamp(dt.getTime()));
		cargo.setEffEndDt(new Timestamp(dt.getTime()));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLevelOfCare", "findByIndividualId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LEVEL_OF_CARE", 16796);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LEVEL_OF_CARE", 16797);
		}
		return result;
	}

	/**
	 * This method returns the records pending SAS Authorization.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNumList
	 *            ArrayList
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSASRecordsToBeUpdated(long caseNum, List edgNumList)
			throws CoException {
		Object[] result = null;
		VCoNodRequestCargo vCoNodRequestCargo = new VCoNodRequestCargo();

		int size = edgNumList.size();
		StringBuffer edgListStringBuffer = new StringBuffer();
		for (int i = 0; i < size; i++) {
			edgListStringBuffer.append(edgNumList.get(i));
			if (i < size - 1) {
				edgListStringBuffer.append(CoConstants.COMMA);
			}
		}
		vCoNodRequestCargo.setT2CaseNum(caseNum);
		vCoNodRequestCargo.setHistorySw(CoConstants.CHAR_N);
		Object[] obj = { vCoNodRequestCargo, edgListStringBuffer.toString() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoNodRequest", "findByForSASAuthorizationUpdates", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_NOD_REQUEST_DETAIL",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in V_CO_NOD_REQUEST_DETAIL",

					16817);
		}
		return result;
	}

	/**
	 * This method returns the records pending SAS Authorization.
	 * 
	 * @param coNodRequestDetailCargo
	 *            CoNodRequestDetailCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getNODRecordsToBeUpdatedForSASAuthorization(
			CoNodRequestDetailCargo coNodRequestDetailCargo) throws CoException {
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail",
					"findBySpecificSASAuthorizationRecord",
					coNodRequestDetailCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_NOD_REQUEST_DETAIL",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_NOD_REQUEST_DETAIL",
					16817);
		}
		return result;
	}

	/**
	 * This method insert a record into CO_NOD_REQUEST_DETAIL table.
	 * 
	 * @param cargo
	 *            CoNodRequestDetailCargo
	 * @return boolean
	 * @throws CoException
	 */
	public boolean updateNodRequest(CoNodRequestDetailCargo cargo)
			throws CoException {
		boolean commitFlag = false;
		openConnection();
		CoNodRequestDetailCollection coNodRequestDetailCollection = new CoNodRequestDetailCollection();
		coNodRequestDetailCollection.setEJBSupported(false);
		coNodRequestDetailCollection.setCargo(cargo);

		try {
			commitFlag = coNodRequestDetailCollection.update();
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					" Error doing CO_NOD_REQUEST_DETAIL table for SAS Authorizations "
							+ e, 329);
		} finally {
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * This method returns the Initial/Ongoing Copay records for an individual
	 * Creation date - April 01, 2003
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param localCoNodCargo
	 *            CoTfCargo
	 * @param ispBeginDt
	 *            Timestamp
	 * @return Object[]
	 * @throws CoException
	 */


	/**
	 * The method to get data from DC_MEDICARE_CLAIM based on INDV_ID.
	 * 
	 * @param indvId
	 *            long
	 * @param type
	 *            char
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getMedicareClaimNumByIndvIdAndType(long indvId, char type)
			throws CoException {
		Object[] result = null;
		DcMedicareClaimCargo dcMedicareClaimCargo = new DcMedicareClaimCargo();
		dcMedicareClaimCargo.setIndvId(indvId);
		dcMedicareClaimCargo.setMedicareType(type);
		dcMedicareClaimCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicareClaim", "findMedicareClaimNumByIndvIdAndType",
					dcMedicareClaimCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICARE_CLAIM", 16747);

		}
		return result;
	}

	/**
	 * The method to get REVIEW_PACKET_RECEIVED_DT from ED_CASE_RECERT_DATES
	 * based on CASE_NUM and EDG_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getReviewPktRcvdByCaseAndEdgNum(long caseNum, long edgNum)
			throws CoException {
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRecertDatesCargo = new EdCaseRecertDatesCargo();
		edCaseRecertDatesCargo.setCaseNum(caseNum);
		edCaseRecertDatesCargo.setEdgNum(edgNum);
		edCaseRecertDatesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findReviewPktRcvdByCaseAndEdgNum",
					edCaseRecertDatesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_CASE_RECERT_DATES",
					16747);
		}
		return result;
	}

	/**
	 * Retrieves prior 1st or 2nd recertification requests for a given case
	 * number and doc id (these triggers have been generated by batch).
	 * 
	 * @param caseNum
	 *            String
	 * @param docId
	 *            String
	 * @param progCd
	 *            String
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getRecertReqByCaseNumDocIdProgCdIndvId(String caseNum,
			String docId, String progCd, long indvId) throws CoException {
		Object[] result = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		// changing for RI
		try {
			vCoRequestCargo.setCaseNum(Long.parseLong(caseNum));
			vCoRequestCargo.setRequestTypeCd(CoConstants.CHAR_C);
		} catch (NumberFormatException nfe) {
			vCoRequestCargo.setAppNum(caseNum);
			vCoRequestCargo.setRequestTypeCd(CoConstants.CHAR_A);
		}

		vCoRequestCargo.setT1DocId(docId);
		vCoRequestCargo.setProgramCd(progCd);
		vCoRequestCargo.setIndvId(indvId);
		vCoRequestCargo.setCreateDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findRecertReqByCaseNumDocIdProgCdIndvId",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_REQUEST", 16814);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcCaseProgramIndv record(s) for an
	 * individual based on INDV_ID & PROGRAM_CD.
	 * 
	 * @param caseNo
	 *            long
	 * @param indvID
	 *            long
	 * @param programCD
	 *            String
	 * @return Object[]
	 * @throws CoException
	 * 
	 * 
	 */
	public Object[] getDcCaseProgramIndv(long caseNo, long indvID,
			String programCD) throws CoException {
		Object[] result = null;
		DcCaseProgramIndvCargo dcCaseProgramIndvCargo = new DcCaseProgramIndvCargo();
		dcCaseProgramIndvCargo.setCaseNum(caseNo);
		dcCaseProgramIndvCargo.setIndvId(indvID);
		dcCaseProgramIndvCargo.setProgCd(programCD);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgramIndv", "findByCaseNumIndvProgramCd",
					dcCaseProgramIndvCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM_INDV",
					16645);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_PROGRAM_INDV",
					16646);
		}
		return result;
	}

	/**
	 * This method returns the recods if request sent for SAS authorization, for
	 * the case#.
	 * 
	 * @param caseNum
	 *            Long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getSasSendRecords(Long caseNum) throws CoException {

		Object[] result = null;
		Object[] obj = { caseNum };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findBySasSendRecords", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16689);
		}
		return result;
	}

	/**
	 * For update of 1200_Print_Dt.
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @throws CoException
	 * 
	 */
	public void updateEDForSecondaryEdgs(COCorrespondence aCoRequest)
			throws CoException {
		String secondaryEdgs = aCoRequest.getReasonCdList();
		if (secondaryEdgs != null) {
			secondaryEdgs = secondaryEdgs.trim();

			EdCaseRecertDatesCargo cargo = null;
			StringTokenizer st = new StringTokenizer(secondaryEdgs,
					CoConstants.COMMA);
			long edgNumber = 0;
			while (st.hasMoreTokens()) {
				edgNumber = 0;
				try {
					edgNumber = Long.parseLong((String) st.nextToken());
				} catch (Exception e) {
					CoDebugger.debugException("Not a good Edg Number", e);
				}
				if (edgNumber > 0) {
					CoDebugger
					.debugInformation("update1200PrintDt --> Recerts EDBC Interface Called (1200-A FXX403/FXX404/FXX405)");
					cargo = new EdCaseRecertDatesCargo();
					cargo.setCaseNum(Long.parseLong(aCoRequest
							.getCaseAppNumber()));
					cargo.setForm1830PrintDt(aCoRequest.getPrintDate());
					cargo.setEdgNum(edgNumber);
					cargo.setUpdateUserId(aCoRequest.getRequestUserId());
					cargo.setUpdateDt(aCoRequest.getPrintDate());
					Map map = new HashMap();
					if (isOnline) {
						map.put("CONNECTION", null);
					} else {
						map.put("CONNECTION", conn);
					}
					map.put("TRACK_CODE", "CO");
					try {
						// Native Rules Removal Changes-Removed Native Rules
						// Calls -Start
						// Native Rules Removal Changes-Removed Native Rules
						// Calls -End
					} catch (Exception e) {

						CoDebugger.debugException(
								"EDBC Recerts Interface Failed for (1200-A FXX403/FXX404/FXX405)-->"
										+ e.getMessage(), e);
						throw new CoException(
								"EDBC Recerts Interface[updateRecerts] Failed for 1200-A FXX403/FXX404/FXX405)-->"
										+ e.getMessage(), 16489);
					}
				}
			}
		}
		return;
	}

	/**
	 * For update of 1200_Print_Dt.
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @throws CoException
	 * 
	 * 
	 */
	public void update1200PrintDt(COCorrespondence aCoRequest)
			throws CoException {
		CoDebugger
		.debugInformation("update1200PrintDt --> Recerts EDBC Interface Called (1200-A FXX403/FXX404/FXX405)");
		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();
		cargo.setCaseNum(Long.parseLong(aCoRequest.getCaseAppNumber()));
		cargo.setForm1830PrintDt(aCoRequest.getPrintDate());
		cargo.setEdgNum(aCoRequest.getEdgeNumber());
		cargo.setUpdateUserId(aCoRequest.getRequestUserId());
		cargo.setUpdateDt(aCoRequest.getPrintDate());
		Map map = new HashMap();
		if (isOnline) {
			map.put("CONNECTION", null);
		} else {
			map.put("CONNECTION", conn);
		}
		map.put("TRACK_CODE", "CO");
		try {
			// Native Rules Removal Changes-Removed Native Rules Calls -Start
			// Native Rules Removal Changes-Removed Native Rules Calls -End
		} catch (Exception e) {

			CoDebugger.debugException(
					"EDBC Recerts Interface Failed for (1200-A FXX403/FXX404/FXX405)-->"
							+ e.getMessage(), e);
			throw new CoException(
					"EDBC Recerts Interface[updateRecerts] Failed for 1200-A FXX403/FXX404/FXX405)-->"
							+ e.getMessage(), 16489);
		}
		finally {
			closeConnection();
		}
	}

	/**
	 * This method returns clients copay & room and board amounts for the case#
	 * and edgTraceId.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getLtcCopayBudgetDetails(long caseNum, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdEligLtcCopayBudgetCargo edEligLtcCopayBudgetCargo = new EdEligLtcCopayBudgetCargo();
		edEligLtcCopayBudgetCargo.setCaseNum(caseNum);
		edEligLtcCopayBudgetCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligLtcCopayBudget", "findByCaseNumEdgTraceId",
					edEligLtcCopayBudgetCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_LTC_COPAY_BUDGET",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_ELIG_LTC_COPAY_BUDGET", 16659);
		}
		return result;
	}

	/**
	 * This method returns the relevant DcHealthConcern records for an
	 * individual
	 * 
	 * @param indvId
	 *            Individual ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcHealthConcernInfo(long indvId) throws CoException {
		Object[] result = null;
		Timestamp beginDt = CoDateFactory.getTimestamp();
		Timestamp endDt = CoDateFactory.getTimestamp();
		Object[] obj = { beginDt, endDt, String.valueOf(indvId) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcHealthConcern", "findByCaseIndvList", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_HEALTH_CONCERN", 16797);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_HEALTH_CONCERN",
					16798);
		}
		return result;
	}

	/**
	 * Method to get HOH info from DC_HEAD_OF_HOUSEHOLD based on CASE_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getHoHIndividual(long caseNum) throws CoException {
		Object[] result = null;
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = new DcHeadOfHouseholdCargo();
		dcHeadOfHouseholdCargo.setCaseNum(caseNum);
		try {

			// End of changes

			// Allwyn: Changed the Package name
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcHeadOfHousehold", "findByHoH", dcHeadOfHouseholdCargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(
					"Exception while fetching data from DC_HEAD_OF_HOUSEHOLD: "
							+ e.getMessage(), e);

		}
		if (result == null || result.length == 0) {
			CoDebugger.logWithLevel("No data in DC_HEAD_OF_HOUSEHOLD", ILog.FATAL);

		}
		return result;
	}

	/**
	 * Method to get Physician's Order date for APPROVED status from
	 * DC_MEDICAL_APPROVAL based on INDV_ID.
	 * 
	 * @param indvId
	 *            long
	 * @param orderStatus
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcMedicalApprovalByIndvForApprovalStatus(long indvId,
			String orderStatus) throws CoException {
		Object[] result = null;
		DcMedicalApprovalCargo cargo = new DcMedicalApprovalCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		cargo.setDoctorOrderStatusCd(orderStatus);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcMedicalApproval", "findByPhysiciansApproval", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_MEDICAL_APPROVAL",
					16656);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_MEDICAL_APPROVAL",
					16657);
		}
		return result;
	}

	/**
	 * This method returns the edges for a given case-num and programCd.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Edg Number
	 * @param payDate
	 *            Timestamp
	 * @param pgmCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getTraceIdsForEdgCase(long caseNum, long edgNum,
			Timestamp payDate, String pgmCd) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		cargo.setPaymentEndDt(payDate);
		cargo.setPaymentBegDt(payDate);
		cargo.setProgramCd(pgmCd);
		cargo.setRecBeginDt(CoDateFactory.getTimestamp());
		cargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgNum", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16796);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16797);
		}
		return result;
	}

	/**
	 * This method returns the pending requests for CPF reprint.
	 * 
	 * @return Object[] The Array of EdEligibilityCargo
	 * @throws CoException
	 */
	public Object[] getCPFReprintRequests() throws CoException {

		Object[] result = null;
		CoBatchReprintRequestCargo cargo = new CoBatchReprintRequestCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoBatchReprintRequest", "findByPendingRequest", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for co_batch_reprint_request",
					0);
		}
		return result;
	}

	/**
	 * This method returns the date of marriage for an individual.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDateOfMarriage(long individualID) throws CoException {
		Object[] result = null;
		DcRelationshipsCargo dcRelationshipsCargo = new DcRelationshipsCargo();
		dcRelationshipsCargo.setIndvId(individualID);
		dcRelationshipsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcRelationshipsCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(

					"gov.state.nextgen.common.collection.custom", "DcRelationships",
					"findByIndividualIDandDate", dcRelationshipsCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_RELATIONSHIPS", 16322);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_RELATIONSHIPS", 16322);
		}
		return result;
	}

	/**
	 * This method returns the recods if request sent for SAS authorization, for
	 * the case#.
	 * 
	 * @param caseNum
	 *            Long Case Number
	 * @param edgNumList
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRequiresTFPending(Long caseNum, String edgNumList)
			throws CoException {
		Object[] result = null;
		Object[] obj = { caseNum, edgNumList };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByRequiresTFPending", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16689);

		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcServicePlanDetailsInfo(long indvId) throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoDynamicWhere", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_RSC_DTLS based on CASE_NUM, EDG_TRACE_ID
	 * and Indv_ID.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param indvId
	 *            long Indv ID
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdIndvRscDetails(long caseNum, long indvId,
			long traceId) throws CoException {
		Object[] result = null;
		EdIndvRscDtlsCargo edIndvRscDtlsCargo = new EdIndvRscDtlsCargo();
		edIndvRscDtlsCargo.setCaseNum(caseNum);
		edIndvRscDtlsCargo.setIndvId(indvId);
		edIndvRscDtlsCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvRscDtls", "findByNonExemptAndIndvId",
					edIndvRscDtlsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_RSC_DTLS", 16794);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_RSC_DTLS", 16795);
		}
		return result;
	}

	/**
	 * This method get data from CO_NOD_REQUEST_DETAIL for case number, and
	 * coReqSeq
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param coReqSeq
	 *            long
	 * @return ArrayList
	 * @throws CoException
	 */
	public List getTfEdgsForCaseCoReqSeq(long caseNum, long coReqSeq)
			throws CoException {

		return new ArrayList();
	}

	/**
	 * Method to Update CO_REQUEST_RECIPIENTS with TF comments for a recipient
	 * 
	 * @param coReqSeq
	 *            long
	 * @param coRptSeq
	 *            long
	 * @param tfComments
	 *            String
	 * @return int
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public int updateCoRequestRecipientsWithTfComments(long coReqSeq, long coRptSeq, String tfComments) throws CoException, ApplicationException, FrameworkException {
		int success = -1;
		Object[] result = null;
		result = getCoRequestRecipient(coReqSeq, coRptSeq);
		openConnection();
		CoRequestRecipientsCollection recipientsCollection = new CoRequestRecipientsCollection();
		CoRequestRecipientsCargo coRequestRecipientsCargo =	(CoRequestRecipientsCargo) result[0];
		recipientsCollection.setEJBSupported(false);
		coRequestRecipientsCargo.setRecipientComments(tfComments);
		recipientsCollection.add(coRequestRecipientsCargo);
		try {
			recipientsCollection.update();
			success = 1;
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(" Error updating CO_REQUEST_RECIPIENTS table for TF comments " + e, 000);
		} finally {
			closeConnection();
		}
		return success;
	}

	/**
	 * Method to retrieve all recipients from CO_REQUEST_RECIPIENT.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param coRptSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoRequestRecipient(long coReqSeq, long coRptSeq)
			throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		coRequestRecipientsCargo.setCoRptSeq(coRptSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByPrimaryKey",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",16825);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REQUEST_RECIPIENTS", 16826);
		}
		return result;
	}

	/**
	 * Method to retrieve all recipients from CO_REQUEST_RECIPIENT.
	 * 
	 * @param coReqSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoRequestAllRecipients(long coReqSeq) throws CoException {

		long startTime =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoRequestAllRecipients - started - coReqSeq = " + coReqSeq);
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByAllRecipients",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getCoRequestAllRecipients - exception : " + e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoRequestAllRecipients - exception : " + e.getMessage());

		}
		if (result == null || result.length == 0) {
			CoDebugger.debugWarning("No data in CO_REQUEST_RECIPIENTS for coReqSeq: "+ coReqSeq);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoRequestAllRecipients - timeTaken : " + (System.currentTimeMillis() - startTime));
		return result;
	}

	/**
	 * Method to find if CoReqSeq is partly generated or not.
	 * 
	 * @param coReqSeq
	 *            long
	 * @return boolean
	 * @throws CoException
	 * 
	 */
	public boolean isCoReqSeqPartlyGenerated(long coReqSeq) throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByIfCoReqSeqPartlyGenerated",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",
					16825);
		}
		if (result == null || result.length == 0) {
			return false;
		}
		return true;
	}

	/**
	 * Method to find if CoReqSeq has any recipient pending.
	 * 
	 * @param coCorrespondence
	 *            COCorrespondence
	 * @return boolean
	 * @throws CoException
	 * 
	 */
	public boolean findAnyRecipientPending(COCorrespondence coCorrespondence)
			throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coCorrespondence.getCoReqSeq());
		try {

			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findAnyRecipientPending",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",
					16825);
		}
		if (result == null || result.length == 0) {
			return false;
		}
		return true;
	}

	/**
	 * Method to find if CoReqSeq has any recipient pending.
	 * 
	 * @param coReqSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] findPendingRecipientsWithData(long coReqSeq)
			throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findPendingRecipientsWithData",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",
					16825);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REQUEST_RECIPIENTS",
					16826);
		}
		return result;
	}

	/**
	 * Method to get data from DC_FUN_ASSESMENT_SERVICE.
	 * 
	 * @param caseNumber
	 *            String
	 * @param indvId
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcFunAssesmentInfo(String caseNumber, String indvId)
			throws CoException {
		Object[] result = null;
		Object[] obj = { caseNumber, indvId };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcFunAssesmentService", "findByIndividualId", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_FUN_ASSESMENT_SERVICE",
					16796);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(

					"No data in DC_FUN_ASSESMENT_SERVICE", 16796);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on EMP_TYPE.
	 * 
	 * @param empType
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEmployeeInfo(String empType) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmployeeTypeCd(empType);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpTypeCd", moEmployeesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16061);

		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_ADDRESSES based on CASE_NUM.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseAddresseeWhenCntyis0(long aAppNumberI)
			throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findWhenOutOfState",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16310);
		}
		return result;
	}

	/**
	 * Method to find if CoReqSeq has any recipient pending.
	 * 
	 * @param triggersWithPartlyGenerated
	 *            VCoRequestCargo[]
	 * @return ArrayList
	 * @throws CoException
	 * 
	 */
	public List getPartlyGeneratedTfs(
			VCoRequestCargo[] triggersWithPartlyGenerated) throws CoException {
		StringBuffer coReqSeqString = new StringBuffer();
		int length = triggersWithPartlyGenerated != null ? triggersWithPartlyGenerated.length
				: 0;
		for (int i = 0; i < length; i++) {
			coReqSeqString.append(String.valueOf(triggersWithPartlyGenerated[i]
					.getT3CoReqSeq()));
			if (i != length - 1) {
				coReqSeqString.append(", ");
			}
		}
		Object[] result = null;
		Object[] obj = { coReqSeqString.toString() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findPartlyGeneratedTfsReqSeqs",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",
					16825);
		}

		if (result != null && result.length > 0) {
			List partlyGeneratedList = new ArrayList();
			int size = result != null ? result.length : 0;
			for (int i = 0; i < size; i++) {
				partlyGeneratedList.add(String
						.valueOf(((CoRequestRecipientsCargo) result[i])
								.getCoReqSeq()));
			}
			return partlyGeneratedList;
		}
		return (new ArrayList());
	}

	/**
	 * Method to find get2101OgoingCopay for Case and Indv
	 * 
	 * @param caseNum
	 *            long
	 * @param caseNum
	 * @param indvId
	 *            long
	 * @param toa
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * Method to find get2101InitialCopay for Case and Indv
	 * 
	 * @param caseNum
	 *            long
	 * @param caseNum
	 * @param indvId
	 *            long
	 * @param toa
	 *            String
	 * @param payBegDt
	 *            Timestamp
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * Method to get data from ED_INDV_RSC_DTLS based on CASE_NUM, EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long CASE_NUM
	 * @param traceId
	 *            long EDG_TRACE_ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdIndvRscDetails(long caseNum, long traceId)
			throws CoException {
		Object[] result = null;
		EdIndvRscDtlsCargo edIndvRscDtlsCargo = new EdIndvRscDtlsCargo();
		edIndvRscDtlsCargo.setCaseNum(caseNum);
		edIndvRscDtlsCargo.setEdgTraceId(traceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvRscDtls", "findByCaseNumEdgTraceId",
					edIndvRscDtlsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_RSC_DTLS", 16794);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_RSC_DTLS", 16795);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027- all medicaid (MA,ME,MC)
	 * edgs for the case.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAllMAEdgNumbers(long caseNum) throws CoException {
		Object[] result = null;

		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setPaymentBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByMedicaidEdg", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEE_CASES based on CASE _NUM.
	 * 
	 * @param caseAppNo
	 *            long
	 * @param edgeNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getMoEmployeeForEdgeCase(long caseAppNo, long edgeNum)
			throws CoException {
		Object[] result = null;
		MoEmployeeCasesCargo moEmployeeCasesCargo = new MoEmployeeCasesCargo();
		moEmployeeCasesCargo.setCaseNum(caseAppNo);

		moEmployeeCasesCargo.setEdgNum(edgeNum);
		moEmployeeCasesCargo.setAssignBeginDt(CoDateFactory.getTimestamp());
		moEmployeeCasesCargo.setAssignEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeCases", "findByEDGNumberCache",
					moEmployeeCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEE_CASES", 16353);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEE_CASES",
					16059);
		}
		return result;
	}

	/**
	 * Method to populate Benefit Months drop down for 1027- all medicaid
	 * (MA,ME,MC) edgs for the case.
	 * 
	 * @param edgNum
	 *            long Edg Number
	 * @param caseNum
	 *            long Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getBenefitApprovedMonths(long edgNum, long caseNum)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCOCaseNumAndEdgNum",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);

		}
		return result;
	}

	/**
	 * Method to find isp id and edg num for Case, Indv and toa.
	 * 
	 * @param caseNum
	 *            long
	 * @param indvId
	 *            long
	 * @param toa
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIspIdAndEdgNum(long caseNum, long indvId, String toa)
			throws CoException {
		Object[] result = null;
		VRpEligDetailsCargo cargo = new VRpEligDetailsCargo();
		cargo.setT1CaseNum(caseNum);
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(toa);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByCaseNumAndEdgNumAndToa", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting V_RP_ELIG_DETAILS",
					16512);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_RP_ELIG_DETAILS",
					16512);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_ISP_SUMMARY based on CASE_NUM, INDV_ID,
	 * ISP_ID, EDG_NUM
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param indvId
	 *            long INDV_ID
	 * @param ispId
	 *            long ISP_ID
	 * @param edgNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getIspDates(long caseNum, long indvId, long ispId,
			long edgNum) throws CoException {
		Object[] result = null;
		EdIndvIspSummaryCargo edIndvIspSummaryCargo = new EdIndvIspSummaryCargo();
		edIndvIspSummaryCargo.setCaseNum(caseNum);

		edIndvIspSummaryCargo.setIndvId(indvId);
		edIndvIspSummaryCargo.setIspId(ispId);
		edIndvIspSummaryCargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIspSummary", "findByIspDates",
					edIndvIspSummaryCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SUMMARY",
					16685);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ISP_SUMMARY",
					16686);
		}
		return result;
	}

	/**
	 * Method get Ed Indv Services.
	 * 
	 * @param cargo
	 *            EdIndvServiceDtlsCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvServices(EdIndvServiceDtlsCargo cargo)
			throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByIndvServicesByDates", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16659);
		}
		return result;
	}

	/**
	 * This method returns the Initial/Ongoing Copay records for an individual
	 * 
	 * @param cargo
	 *            VRpEligDetailsCargo
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * Method to get data from ED_INDV_ISP_SUMMARY based on CASE_NUM, INDV_ID,
	 * ISP_ID, EDG_NUM.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param indvId
	 *            Indv ID
	 * @param ispId
	 *            long
	 * @param edgNum
	 *            EDG Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getIspDetails(long caseNum, long indvId, long ispId,
			long edgNum) throws CoException {
		Object[] result = null;
		EdIndvIspSummaryCargo edIndvIspSummaryCargo = new EdIndvIspSummaryCargo();
		edIndvIspSummaryCargo.setCaseNum(caseNum);
		edIndvIspSummaryCargo.setIndvId(indvId);
		edIndvIspSummaryCargo.setIspId(ispId);
		edIndvIspSummaryCargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIspSummary", "findByIndvSpecific",
					edIndvIspSummaryCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SUMMARY",
					16685);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ISP_SUMMARY",
					16686);
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on CASE_NUM.
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcCaseIndvInfo(long caseAppNo) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseAppNo);
		dcCaseIndividualCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseIndividualCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCoCaseNum",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_INDIVIDUAL",
					16037);
		}
		return result;
	}

	/**
	 * This method returns the DcServicePlanDetail data relevant for the IndvId
	 * and Type of Assistance.
	 * 
	 * @param indvId
	 *            long
	 * @param typeOfAssistance
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDCServicePlanDtls(long indvId, String typeOfAssistance)
			throws CoException {
		Object[] result = null;
		DcServicePlanDetailCargo cargo = new DcServicePlanDetailCargo();
		cargo.setIndvId(indvId);
		cargo.setTypeOfAssistanceCd(typeOfAssistance);
		cargo.setDcStatusCd("VR");
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcServicePlanDetail", "findByCoIndvIdAndTOAAndStatusCd",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SERVICE_PLAN_DETAIL",
					16637);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_SERVICE_PLAN_DETAIL",
					16638);
		}
		return result;
	}

	/**
	 * Method to get data from BI_PAYEE_DETAIL based on edg_num and benefit_num.
	 * 
	 * @param edgNum
	 *            long
	 * @param benefitNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPayeeDetails(long edgNum, String benefitNum)
			throws CoException {
		Object[] result = null;
		BiPayeeDetailCargo biPayeeDetailCargo = new BiPayeeDetailCargo();
		biPayeeDetailCargo.setEdgNum(edgNum);
		biPayeeDetailCargo.setBenefitNum(benefitNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiPayeeDetail", "findByEdgeBenefitNum",
					biPayeeDetailCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_PAYEE_DETAIL", 000);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_PAYEE_DETAIN", 000);
		}
		return result;
	}

	/**
	 * This method returns eligibility data.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            -- Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	/**
	 * This method returns eligibility data.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param coReqSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEligiblityViewDetails(long caseNum, long coReqSeq)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(coReqSeq) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByTfCoAllAP", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * This method returns the group reasons.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getGroupReasons(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligNoticeReasons", "findByTfCaseEdgTraceIdString",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}

		return result;
	}

	/**
	 * This method returns the individual reasons.
	 * 
	 * @param caseNum
	 *            long --Case Number
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIndividualReasons(long caseNum, String edgTraceIdString)

			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "findByTfCaseEdgTraceIdString",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * This method returns the individual income.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvCcadBudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCcadBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_CCAD_BUDGET",
					16834);
		}
		return result;
	}

	/**
	 * This method returns the individual income.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param edgTraceIdString
	 *            String - Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIndvMeMcBudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvMeBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ME_BUDGET", 16836);
		}
		return result;
	}

	/**
	 * This methid reutrns the individual income.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param edgTraceIdString
	 *            String -- Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvFSBudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvFsBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_FS_BUDGET", 16838);
		}
		return result;
	}

	/**
	 * This method returns the individual income.
	 * 
	 * @param caseNum
	 *            long -- Case Number
	 * @param edgTraceIdString
	 *            String -- Edg Trace ID
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvMABudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvFmaBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_FMA_BUDGET", 16840);
		}
		return result;
	}

	/**
	 * returns individual income.
	 * 
	 * @param caseNum
	 *            long -- Case Nunber
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvTFBudget(long caseNum, String edgTraceIdString)

			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvTanfBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_TANF_BUDGET",
					16842);
		}
		return result;
	}

	/**
	 * returns individuals resource.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvRscBudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvRscBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_RSC_BUDGET", 16844);
		}
		return result;
	}

	/**
	 * Method returns the edg resources.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdEligRscBudget(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligRscBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_RSC_BUDGET", 16846);
		}
		return result;
	}

	/**
	 * Method returns the edg resources.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getLtcCopayBudgetDetails(long caseNum,
			String edgTraceIdString) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligLtcCopayBudget", "findByTfCaseEdgTraceIdString",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_LTC_COPAY_BUDGET",
					16848);
		}
		return result;
	}

	/**
	 * Method returns the data from service details table.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getServiceData(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16658);
		}
		return result;
	}

	/**
	 * Method returns the data from service details table.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgTlcBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTlcBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligTlcBudget", 16849);
		}
		return result;
	}

	/**
	 * Method returns the ihfs edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            long
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgIhfsBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligIhfsBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_IHFS_BUDGET",
					16851);
		}
		return result;
	}

	/**
	 * Method returns the cmpas edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgCmpasBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCmpasBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_CMPAS_BUDGET",
					16853);
		}
		return result;
	}

	/**
	 * Returns the ccad edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            long
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgCcadBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCcadBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_CCAD_BUDGET",
					16855);
		}
		return result;
	}

	/**
	 * Method returns the me/mc edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgMEMCBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligMeBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_ME_BUDGET", 16658);
		}
		return result;
	}

	/**
	 * Method returns the fs edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgFSBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFsBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_FS_BUDGET", 16859);
		}
		return result;
	}

	/**
	 * Method returns the tanf edg budget.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param partWhereClause
	 *            Part Where Clause
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgTFBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTanfBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_TANF_BUDGET",

					16861);
		}
		return result;
	}

	/**
	 * Method returns the fma edg budget.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param partWhereClause
	 *            Part Where Clause
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgMABudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFmaBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_FMA_BUDGET", 16863);
		}
		return result;
	}

	/**
	 * Method returns the otgp(tp60) edg budget.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param partWhereClause
	 *            Where Clause
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getEdgOTGPTFBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligOtgpBudget", "findByTfCaseEdgTraceIdString", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_OTGP_BUDGET",
					16865);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027 B- all medicaid and QMB
	 * edgs for the case.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAllMedicaidAndQMBEdg(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByMedicaidEdgAndQMB",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027 C- all QMB edgs for the
	 * case (No other medicaid edgs).
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAllQMBEdg(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setPaymentBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility",
					"findByQMB", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);

		}
		return result;
	}

	/**
	 * returns the edg employee contacts.
	 * 
	 * @param caseNum
	 *            long
	 * @param commadEdgNumbers
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgEmployeeContacts(long caseNum, String commadEdgNumbers)
			throws CoException {
		String assignDt = CoDateFactory.getTimestamp().toString()
				.substring(0, 10);
		Object[] result = null;
		Object[] obj = { new Long(caseNum), commadEdgNumbers, assignDt };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VMoEmployeeEmpCases", "findByCaseEdgnumbers", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_MO_EMPLOYEE_EMP_CASES",
					16867);
		}
		return result;
	}

	/**
	 * Method getIspData.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIspData(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIspSummary", "findByTfCaseEdgNumbers", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ISP_SUMMARY",
					16685);
		}
		return result;
	}

	/**
	 * The method to get data from CO_REASON_TEXT based on REASON_IDs and
	 * LANGUAGE_CD for 1830.
	 * 
	 * @param reasonCdList
	 *            String
	 * @param languageCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 * 
	 */
	public Object[] get1830CoTextNoticeReasons(String reasonCdList,
			String languageCode) throws CoException {
		Object[] result = null;
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setLanguageCd(languageCode);
		Object[] obj = { coRTextCargo, reasonCdList };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoReasonText", "findByReasonCdListAndLanguage", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REASON_TEXT", 16871);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_REASON_TEXT", 16872);

		}
		return result;
	}

	/**
	 * Method updateVclDueDate.
	 * 
	 * @param caseNum
	 *            long
	 * @param programCode
	 *            String
	 * @param edgNum
	 *            long
	 * @param draftSw
	 *            char
	 * @return EdVerificationChecklistCargo[]
	 * @throws CoException
	 */
	public EdVerificationChecklistCargo[] updateVclDueDate(long caseNum,
			String programCode, long edgNum, char draftSw) throws CoException {
		COCorrespondence coCorrespondence = new COCorrespondence();
		coCorrespondence.setCaseAppNumber(String.valueOf(caseNum));

		return updateVclDueDate(coCorrespondence, programCode, edgNum, draftSw);
	}

	/**
	 * Method to get Name from DC_INDIVIDUAL based on INDV_ID.
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcIndividualName(long individualID) throws NoDataFoundException, CoException {
		Object[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		dcIndvCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByCoIndividualId", dcIndvCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV", 16319);

		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_INDV", 16043);
		}
		return result;
	}

	/**
	 * Method to get case profile from dc_case_profile, used for 1020 for
	 * TSI_SW.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseProfileTsi(long caseNum) throws CoException {
		Object[] result = null;
		DcCaseProfileCargo cargo = new DcCaseProfileCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProfile", "findByCoCaseNumber", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting case profile", 16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Dc DC_CASE_PROFILE for the case", 16830);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM .
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLDetails(long caseNumber) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist",
					"findByCoCaseNumberNotVclInitialDt", edVerificationCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		return result;
	}

	/**
	 * Method to get data from VCL based on CASE_NUM (for 1020-A FXX055).
	 * 
	 * @param caseNumber
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLDetails1020A(long caseNumber) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);
		edVerificationCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCoCaseDueDtNull",
					edVerificationCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in ED_VERIFICATION_CHECKLIST", 16009);
		}
		return result;
	}

	/**
	 * returns the tanf edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCommunityAttendantTraceIds(long caseNum,
			String partWhereClause) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findByTfPartWhereClause", null,
							obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		return result;
	}

	/**
	 * Method getCertifiedIndvsPreviousToTermination.
	 * 
	 * @param caseNum
	 *            long
	 * @param terminatedEdgString
	 *            String
	 * @param edgTransactionId
	 *            String
	 * @param paymonth
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * Method to get data from ED_INDV_PRA_DTLS based on INDV_ID, PRA_ID.
	 * 
	 * @param indvId
	 *            long
	 * @param praId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvPraDtls(long indvId, long praId)
			throws CoException {
		Object[] result = null;
		EdIndvPraRscDtlsCargo edIndvPraDtlsCargo = new EdIndvPraRscDtlsCargo();
		edIndvPraDtlsCargo.setIndvId(indvId);
		edIndvPraDtlsCargo.setPraId(praId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPraRscDtls", "findByIndvIdPraId",
					edIndvPraDtlsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(

					"Select failed for ED_INDV_PRA_RSC_DTLS", 16794);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_PRA_RSC_DTLS",
					16795);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM, PAYMENT_BEG_DT
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param paymentBegDt
	 *            Payment Begin Date
	 * @return boolean
	 * @throws CoException
	 */

	public boolean getRecordsAfterCertificationDate(long caseNum,
			java.sql.Timestamp paymentBegDt) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setPaymentBegDt(paymentBegDt);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByAfterCertificationDate",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"ED_ELIGIBILITY : getRecordsAfterCertificationDate "
							+ e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			return false;
		} else {
			if (((EdEligibilityCargo) result[0]).getCaseNum() > 0) {
				return true;
			}
			return false;
		}

	}

	/**
	 * Method used to populate edgNum dropdown. Gets the edgNum based on traceID
	 * 
	 * @deprecated dont use this method as this does not use casenum (index) to
	 *             search use getEdgnum instead.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getRowForTraceId(long caseNum, long traceID)
			throws CoException {

		Object[] result = null;

		Object[] obj = { new Long(caseNum), new Long(traceID) };

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findByCaseNumEdgTraceId", null,
							obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

			throw new CoException("Select failed for ED_ELIGIBILITY", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16053);

		}
		return result;
	}

	/**
	 * Method to get the InLockinCargo - used in FXX056.
	 * 
	 * @param indvId
	 *            Indiv ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getInLockinDetails(long indvId) throws CoException {
		Object[] result = null;
		InLockinCargo inLockinCargo = new InLockinCargo();
		inLockinCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "InLockin",
					"findByIndvIdLockInInfo", inLockinCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting inLockinCargo - Details", 16481);
		}
		return result;
	}

	/**
	 * Method used for Finding TOA for Case and Trace Id for 1027-A.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param traceID
	 *            Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getToAforCaseTraceId(long caseNum, long traceID)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgTraceId(traceID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgTraceIdHistory",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16053);
		}
		return result;
	}

	/**
	 * Method to populate edg num drop down for 1027 B- all medicaid and QMB
	 * edgs for the case.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */

	/**
	 * This method returns the relevant Liquid Resourcs individual.
	 * 
	 * @param indvId
	 *            Indiv ID
	 * @param typeCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBurialDcLiquidResources(long indvId, String typeCd)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setTypeCd(typeCd);
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findBurialBankByCoDynamicWhere",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * returns the eligibility record for retreiving the copay amount.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTransactionID
	 *            Edg Transaction Cd
	 * @param indvID
	 *            Indiv ID
	 * @return double
	 * @throws CoException
	 */
	public double getCopayAmount(long caseNum, long edgTransactionID,
			long indvID) throws CoException {

		Object[] result = null;

		VRpEligDetailsCargo edEligibilityCargo = new VRpEligDetailsCargo();

		edEligibilityCargo.setT1CaseNum(caseNum);
		edEligibilityCargo.setIndvId(indvID);
		edEligibilityCargo.setEdgTransactionId(edgTransactionID);
		edEligibilityCargo.setPaymentBegDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByMedicaidWaivers",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_RP_ELIG_DETAILS", 16831);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_RP_ELIG_DETAILS",
					16832);
		}

		return result.length > 0 ? ((VRpEligDetailsCargo) result[0])
				.getT2CopayAmt() : 0;
	}

	/**
	 * This method insert a record into CO_NOD_REQUEST_DETAIL table.
	 * 
	 * @param coNodRequestDetailCargoArray
	 * @return int
	 */
	public int insertNodRequest(CoNodRequestDetailCargo[] coNodRequestDetailCargoArray) {
		int commitFlag = 0;

		CoNodRequestDetailCollection coNodRequestDetailCollection = new CoNodRequestDetailCollection();
		coNodRequestDetailCollection.setEJBSupported(false);
		coNodRequestDetailCollection.setResults(coNodRequestDetailCargoArray);
		try {
			openConnection(); // TODO: Check whether this is required or the connection is obtained by Fw.
			commitFlag = coNodRequestDetailCollection.insert() ? 1 : -1;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		return commitFlag;
	}

	/**
	 * returns the edg numbers for TP60.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param tpCd
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getTp60Edgs(long caseNum, String tpCd) throws CoException {
		Object[] result = null;
		// findByGPSCase
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setTypeOfAssistanceCd(tpCd);
		edEligibilityCargo.setEligibilityBegDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setEligibilityEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByGPEdgs", edEligibilityCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_ELIGIBILITY : findByGPSCase", 16339);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in  ED_ELIGIBILITY: findByGPSCase", 16053);
		}
		return result;
	}

	/**
	 * returns the trace id details.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param traceID
	 *            Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	/**
	 * Method to get all individuals from V_DC_CASE_INDV_DETAILS based on Case
	 * Number.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getOnlyIndvByIndvId(long indvId) throws CoException {
		Object[] result = null;
		VDcCaseIndvDetailsCargo cargo = new VDcCaseIndvDetailsCargo();
		cargo.setT1IndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcCaseIndvDetails", "findByIndvIdDetailsForIQ", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_DC_CASE_INDV_DETAILS",
					16369);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_DC_CASE_INDV_DETAILS",
					16072);
		}
		return result;
	}


	/**
	 * Method to get all individuals from V_CI_INDV_DETAILS based on Case
	 * Number.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getOnlyCsIndvByIndvId(long indvId) throws CoException {
		Object[] result = null;
		VCiIndvDetailsCargo cargo = new VCiIndvDetailsCargo();
		cargo.setMemberId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCiIndvDetails", "findByAdHocDcIndvParameters", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CI_INDV_DETAILS",
					16369);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_CI_INDV_DETAILS",
					16072);
		}
		return result;
	}

	/**
	 * Method to get Burial Dc Liquid Resources By IndvID.
	 * 
	 * @param indvId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getBurialDcLiquidResourcesByIndvID(long indvId)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setIndvId(indvId);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources",
					"findBurialLiquidResourceDetailsByIndvId", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * Returns the liquid resources for a seqNum.
	 * 
	 * @param indvId
	 *            long
	 * @param seqNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getBurialDcLiquidResourcesBySeqNum(long indvId, long seqNum)
			throws CoException {
		Object[] result = null;
		DcLiquidResourcesCargo cargo = new DcLiquidResourcesCargo();
		cargo.setSequenceNum(seqNum);
		cargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiquidResources", "findBurialBankBySeqNum", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIQUID_RESOURCES",
					16759);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_LIQUID_RESOURCES",
					16760);
		}
		return result;
	}

	/**
	 * Returns the life insurance resources by seq num.
	 * 
	 * @param indvId
	 *            long
	 * @param seqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcLifeInsuranceBySeqNum(long indvId, long seqNum)
			throws CoException {
		Object[] result = null;
		DcLifeInsuranceCargo cargo = new DcLifeInsuranceCargo();
		cargo.setIndvId(indvId);
		cargo.setSequenceNum(seqNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLifeInsurance", "findByIndvIdBySeqNum", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_LIFE_INSURANCE", 16765);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No Data in DC_LIFE_INSURANCE",
					16766);
		}
		return result;
	}

	/**
	 * This method reads information based on case and Edg numbers passed from
	 * EdCaseRecertDates.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param queryEdgs
	 *            List of Edg Numbers associated with this case
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] filter1830Edgs(String caseNum, String queryEdgs)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), queryEdgs,
				CoDateFactory.getTimestamp() };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByFilterEdgs", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_CASE_RECERT_DATES : findByFilterEdgs",
					16323);
		}
		return result;
	}

	/**
	 * This method is to get the Current Ed indiv services.
	 * 
	 * @param cargo
	 *            EdIndvServiceDtlsCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCurrentEdIndvServices(EdIndvServiceDtlsCargo cargo)
			throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvServiceDtls", "findByCurrentIndvServices", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_SERVICE_DTLS",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_SERVICE_DTLS",
					16659);
		}
		return result;
	}

	/**
	 * validates if the correspondence needs to be generatable depending on the
	 * validation, the existing trigger is updated or cancelled.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @param type
	 *            char
	 * @return int
	 * @throws CoException
	 */
	public int updateCancelReconfigureTrigger(COCorrespondence aCoObj, char type)
			throws CoException {
		boolean finalResult = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection(
				conn);
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		if (CoConstants.CHAR_C == type) {
			// cancel
			coRequestHistoryCargo.setActivate("CANCEL_RECONFIGURE");
			coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_C);
		} else {
			// update trigger
			coRequestHistoryCargo.setActivate("UPDATE_RECONFIGURE");
			coRequestHistoryCargo.setPendingTrigSw(aCoObj.getPendingTrigSw());
			coRequestHistoryCargo.setProgramCd(aCoObj
					.getAssistanceProgramCode());
			coRequestHistoryCargo.setOfficeNum(aCoObj.getOfficeNumber());
			coRequestHistoryCargo.setReasonCdList(aCoObj.getReasonCdList());
			coRequestHistoryCargo.setAssistanceList(aCoObj
					.getTypeOfAssistanceList());
			coRequestHistoryCargo.setApptId(aCoObj.getApptId());
			coRequestHistoryCargo.setMiscParms(aCoObj.getMiscParameters());
			coRequestHistoryCargo.setEdgNum(aCoObj.getEdgeNumber());
			coRequestHistoryCargo.setEdgTraceId(aCoObj.getEdgTraceId());
			coRequestHistoryCargo.setActionCd(aCoObj.getActionCode());
		}
		coRequestHistoryCargo.setCoReqSeq(aCoObj.getCoReqSeq());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, aCoObj);
		coRequestHistoryCargo.setDocId(aCoObj.getDocId());
		coRequestHistoryCargo.setEmpId(aCoObj.getEmpId());
		coRequestHistoryCargo.setOrigPrintDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setUpdateUserId(aCoObj.getRequestUserId());
		coRequestHistoryCargo.setHistorySw(aCoObj.getHistorySwitch());

		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {

			CoDebugger
			.debugException(
					"Exception while reconfiguring trigger as "
							+ (CoConstants.CHAR_C == type ? CoConstants.CANCEL_TRIGGER
									: CoConstants.UPDATE_TRIGGER)
									+ " for co_req_seq = "
									+ aCoObj.getCoReqSeq() + " " + e, e);
		} finally {
			closeConnection();
		}

		if (!(finalResult)) {
			throw new CoException("Exception while reconfiguring trigger as",
					000);
		}
		return 0;
	}

	/**
	 * Does ssi require to be suppressed.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @param previousYYYYMM
	 *            Previous Monthe and Year
	 * @param currentYYYYMM
	 *            Current Month and Year
	 * @param toList
	 *            List
	 * @return Object[] Reseltset from the DAO
	 * @throws CoException
	 */
	public Object[] getSSISuppressionValidation(String caseNum, long edgNum,
			long edgTraceId, String previousYYYYMM, String currentYYYYMM,
			String toList) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum),
				new Long(edgTraceId), previousYYYYMM, currentYYYYMM, toList };
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"VRpEligDetails", "findBy1296Suppressions", null,
							obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_RP_ELIG_DETAILS", 16832);
		}
		return result;
	}

	/**
	 * Method used from view pending manager to error out exception records.
	 * 
	 * @param coCorrespondence
	 *            COCorrespondence
	 * @return boolean Success Flag
	 * @throws CoException
	 */
	public boolean updateExceptionRecords(COCorrespondence coCorrespondence)
			throws CoException {
		boolean successFlag = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);

		CoRequestHistoryCargo coRequestHistoryCargo = null;
		coRequestHistoryCargo = new CoRequestHistoryCargo();
		// this trigger has errored -- must be marked as 'E' in pending trig sw
		coRequestHistoryCargo.setActivate("UCRHE");
		coRequestHistoryCargo.setHistorySw(coCorrespondence.getHistorySwitch());
		coRequestHistoryCargo.setCoReqSeq(coCorrespondence.getCoReqSeq());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo,
				coCorrespondence);
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			if (coRequestHistoryCollection.size() > 0) {
				successFlag = coRequestHistoryCollection.update();
			} else {
				CoDebugger
				.debugInformation("No records to Update --updateExceptionRecords()");
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			closeConnection();
		}
		return successFlag;
	}

	/**
	 * Method to get the data from IN_PROVIDER.
	 * 
	 * @param cargo
	 *            InProviderCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getProviderDetails(InProviderCargo cargo)
			throws CoException {
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InProvider", "findByProviderNumberEffDates", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_PROVIDER", 9966);
		}
		return result;
	}

	/**
	 * Method to get the data from PM_PROVIDERS.
	 * 
	 * @param providerId
	 *            long Provider Id
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getProviderDetails(long providerId) throws CoException {
		Object[] result = null;
		PmProvidersCargo cargo = new PmProvidersCargo();
		cargo.setProviderId(providerId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviders", "findByProviderId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDERS", 99664);
		}
		return result;
	}

	/**
	 * Method to get data from PM_PROVIDER_ADDRESSES based on PROVIDER_ID.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPMProviderAddress(long providerId) throws CoException {
		Object[] result = null;
		PmProviderAddressesCargo pmProviderAddressesCargo = new PmProviderAddressesCargo();
		pmProviderAddressesCargo.setProviderId(providerId);

		pmProviderAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderAddresses", "findByProviderId",
					pmProviderAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDER_ADDRESSES",
					163101);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in PM_PROVIDER_ADDRESSES",
					160351);
		}
		return result;
	}

	/**
	 * Method to get data from PM_PROVIDER_ADDRESSES based on PROVIDER_ID,
	 * Provider address seq num.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @param addrSeqNum
	 *            long Address Sequence NUmber
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPMProviderAddrByIDAddrSeqNum(long providerId,
			long addrSeqNum) throws CoException {
		Object[] result = null;
		PmProviderAddressesCargo pmProviderAddressesCargo = new PmProviderAddressesCargo();
		pmProviderAddressesCargo.setProviderId(providerId);
		pmProviderAddressesCargo.setProviderAddrSeqNum(addrSeqNum);
		pmProviderAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderAddresses", "findByProviderIdSequenceNumber",
					pmProviderAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDER_ADDRESSES",
					163101);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in PM_PROVIDER_ADDRESSES",
					160351);
		}
		return result;
	}

	/**
	 * Method returns the auth Trace ID.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgTraceIdString
	 *            String Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEligGroupTrace(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findByTfAuthTraceIdList", null,
							obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			// e.printStackTrace();//BRGUS00104564 - bhattaj - Fix for
			// Performance Issue
			throw new CoException("Select failed for ED_ELIGIBILITY", 16828);
		}
		return result;
	}

	/**
	 * The method to get data from DC_PRIMARY_PAYEE based on CASE_NUM and
	 * EDG_NUM.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Edg Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPrimaryPayeeInfo(long caseNum, long edgNum)
			throws CoException {
		Object[] result = null;
		DcPrimaryPayeeCargo dCPrimaryCargo = new DcPrimaryPayeeCargo();
		dCPrimaryCargo.setCaseNum(caseNum);
		dCPrimaryCargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcPrimaryPayee", "findByCaseNumberAndEdgNumber",
					dCPrimaryCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in DcPrimaryPayee", 16321);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcPrimaryPayee", 16150);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_CDC_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param maxRows
	 *            Maximus rows
	 * @param caseNum
	 *            long Case Number
	 * @param edgTraceId
	 *            long Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligCdcBudgetByCaseNumEdgTraceId(int maxRows,
			long caseNum, String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCdcBudget", "findByCaseNumEdgTraceId", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligCdcBudget", 16900);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_CDC_SERVICE_AUTH based on CASE_NUM,
	 * EDG_NUM and SERVICE_RUN_DT.
	 * 
	 * @param maxRows
	 *            Maximus rows
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            String Edg NUmber
	 * @param servRunDt
	 *            Date Service Run Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdIndvCdcServiceAuthByCaseEdgServRunDt(int maxRows,
			long caseNum, String edgNum, Date servRunDt) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNum, servRunDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumEdNumServRunDt",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCdcServiceAuth",
					16901);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_SERVICE_AUTH based on CASE_NUM,
	 * EDG_NUM and SERVICE_RUN_DT.
	 * 
	 * @param maxRows
	 *            Maximus rows
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            String Edg Number
	 * @param servRunDt
	 *            DateService Run Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerServiceAuthByCaseEdgServRunDt(int maxRows,
			long caseNum, String edgNum, Date servRunDt) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNum, servRunDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerServiceAuth", "findByCaseEdgNumServRunDt", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerServiceAuth",
					16902);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_SERVICE_AUTH based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param maxRows
	 *            int Maximum Rows
	 * @param caseNum
	 *            long Case Number
	 * @param edgTraceId
	 *            long Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerServiceAuthByCaseNumEdgTraceId(int maxRows,
			long caseNum, String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerServiceAuth", "findByCaseNumEdgTraceId", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerServiceAuth",
					16903);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_SHORTFALL based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgTraceId
	 *            long Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerShortfallByCaseNumEdgTraceId(long caseNum,
			String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerShortfall", "findByCaseNumEdgTraceId", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerShortfall", 16904);
		}
		return result;
	}


	/**
	 * Method to update DRAFT_SW = 'N' in CO_REQUEST_HISTORY.
	 * 
	 * @param coRequest
	 *            COCorrespondence
	 * @return boolean Success Flag
	 * @throws CoException
	 * 
	 */
	public boolean updateCPCDetails(COCorrespondence coRequest) {
		boolean successFlag = false;
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);

		CoRequestHistoryCargo coRequestHistoryCargo = null;
		coRequestHistoryCargo = new CoRequestHistoryCargo();

		coRequestHistoryCargo.setActivate(CoConstants.UPDATE_CPC);
		coRequestHistoryCargo.setCoReqSeq(coRequest.getCoReqSeq());
		coRequestHistoryCargo.setUpdateUserId(coRequest.getRequestUserId());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			if (coRequestHistoryCollection.size() > 0) {
				successFlag = coRequestHistoryCollection.update();
			} else {
				CoDebugger
				.debugInformation("No records to Update -- updateCPCDetails()");
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			closeConnection();
		}
		return successFlag;
	}

	/**
	 * Method to get the data from IN_BEER.
	 * 
	 * @param individualID
	 *            long Individaul ID
	 * @param seqNum
	 *            long Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getIncomeDetails(long individualID, long seqNum)
			throws CoException {
		Object[] result = null;
		InBeerCargo cargo = new InBeerCargo();
		cargo.setIndvId(individualID);
		cargo.setSeqNum(seqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "InBeer",
					"findByPrimaryKey", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_BEER", 99664);
		}
		return result;
	}

	/**
	 * Method to get data from BV_CLAIM based on CASE_NUM, EDG_NUM, CLAIM_ID and
	 * CURRENT_IND.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @param claimId
	 *            String
	 * @param currIndicator
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBvClaimByCaseNumEdgeNumClaimNumCurrInd(long caseNum,
			long edgNum, String claimId, String currIndicator)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum), claimId,
				currIndicator };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBvClaim",
					"findByClaimNumber", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaim", 16908);
		}
		return result;
	}

	/**
	 * Method to get data from BV_CLAIM_RECOVERY based on CASE_NUM, EDG_NUM,
	 * CLAIM_ID and SEQ_NUM.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Edg Number
	 * @param claimId
	 *            String Claim ID
	 * @param seqNum
	 *            long Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBvClaimRecoveryByCaseNumEdgeNumClaimNumCurrIndSeqNum(
			long caseNum, long edgNum, String claimId, long seqNum)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum), claimId,
				new Long(seqNum) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimRecovery", "findByCaseNumber", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimRecovery", 16909);
		}
		return result;
	}

	/**
	 * Method to get data from BV_DISCREPANCY based on CASE_NUM, EDG_NUM,
	 * CLAIM_ID, CURRENT_IND and RESULT_CD.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @param claimId
	 *            String
	 * @param currIndicator
	 *            String
	 * @param resultCD
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBvDiscrepancyByCaseNumEdgeNumClaimNumCurrIndSeqNum(
			long caseNum, long edgNum, String claimId, String currIndicator,
			String resultCD) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum), claimId,
				currIndicator, resultCD };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvDiscrepancy", "findByCaseNumber", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvDiscrepancy", 16910);
		}
		return result;
	}

	/**
	 * Method to get data from BI_CDC_IBILLING based on INDV_ID, PROVIDER_ID and
	 * REQ_SEQ.
	 * 
	 * @param indvId
	 *            long
	 * @param providerId
	 *            long
	 * @param reqSeq
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBiCdcIBillingByIndvIdProviderIdReqSeq(long indvId,
			long providerId, String reqSeq) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(indvId), new Long(providerId), reqSeq };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiCdcIbilling", "findByIndvIdProviderIdReqSeq", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiCdcIbilling", 16911);
		}
		return result;
	}

	/**
	 * Method to get data from BI_ISSUANCE_TRIGGER based on CASE_NUM
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBiIssuanceTriggerByCaseNum(long caseNum)
			throws CoException {
		Object[] result = null;
		BiIssuanceTriggerCargo biIssuanceTriggerCargo = new BiIssuanceTriggerCargo();

		biIssuanceTriggerCargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiIssuanceTrigger", "findByCaseNumMI",
					biIssuanceTriggerCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTrigger", 16901);
		}
		return result;
	}

	/**
	 * Method to get PM Provider CDC Details.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param serviceId
	 *            Service ID
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] getPmProviderCDCDetails(long providerId, long serviceId,
			long caseNum) throws CoException {

		Object[] result = null;

		PmProviderCdcAsgnmntsCargo cargo = new PmProviderCdcAsgnmntsCargo();

		cargo.setProviderId(providerId);
		cargo.setServiceId(serviceId);
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts",
					// "findByProvidAssigBySrvc",
					"findByProviderIdAndCaseNum", cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting PmProvider CDC Assignments", 16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in PM_PROVIDER_CDC_ASGNMNTS for this Service Id",
					16830);
		}
		return result;
	}

	/**
	 * Method top get ED Individual CDC Service Auth details.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param serviceIDs
	 *            String Service ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvCdcServiceAuthDetails(long caseNum,
			String serviceIDs) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), serviceIDs };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumServiceIdsAll", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCdcServiceAuth",
					99664);
		}
		return result;
	}

	/**
	 * Method to update 1830 Zero Tolerance. Update ZERO_TOLERANCE_SW to 'Y'
	 * 
	 * @param coObject
	 *            COCorrespondence
	 * @throws Exception
	 * 
	 */
	public void update1830ZeroTolerance(COCorrespondence coObject)
			throws CoException {
		// create an instance of ZeroToleranceBO
		IZeroToleranceBO bo = new ZeroToleranceBO();
		try {
			DcIndvCargo indvCargos[] = (DcIndvCargo[]) getDcIndividual(coObject	.getIndvId());
			if (indvCargos != null) {
				DcIndvCargo dcIndvCargo = (DcIndvCargo) indvCargos[0];
				if (dcIndvCargo != null) {
					openConnection();
					bo.updateZeroTolerance(dcIndvCargo, coObject);
				}
			}
		} catch (Exception e) {
			CoDebugger.debugException("Error while updating zero_tolerance_sw",
					e);
		}
	}

	/**
	 * Method to get data from ED_ELIG_SER_SERVICE_AUTH based on CASE_NUM,
	 * EDG_NUM SERVICE_CD and SERVICE_REQ_SEQ_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @param serviceReqSeqNum
	 *            long
	 * @param serviceCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getCaseNumEdgNumServiceReqSeqNumServiceCd(long caseNum,
			long edgNum, long serviceReqSeqNum, String serviceCd)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum),
				new Long(serviceReqSeqNum), serviceCd };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerServiceAuth",
					"findByCaseNumEdgNumServiceReqSeqNumServiceCd", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerServiceAuth",
					16902);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_SER_SERVICE_AUTH based on CASE_NUM,
	 * EDG_NUM SERVICE_CD and SERVICE_REQ_SEQ_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @param serviceReqSeqNum
	 *            long
	 * @param serviceCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getIndvCaseNumEdgNumServiceReqSeqNumServiceCd(
			long caseNum, long edgNum, long serviceReqSeqNum, String serviceCd)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum),
				new Long(serviceReqSeqNum), serviceCd };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvSerServiceAuth",
					"findByCaseNumEdgNumServiceReqSeqNumServiceCd", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvSerServiceAuth",
					16902);
		}
		return result;
	}

	/**
	 * Method to get data from v_rp_elig_details based on t1_case_num, edg_num
	 * and program_cd.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            String
	 * @param progCd
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getVRpEligDetailsIndvIds(long caseNum, String edgNum,
			String progCd) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNum, progCd };

		try {
			// BRGUS00211367 - NaredlaS - Modified the finder name
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					// "VRpEligDetails", "findByCaseNumEdgNumProgCd", null, obj,
					"VRpEligDetails", "findByCaseNumEdgNumProgCdFor1010", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VRpEligDetails", 16911);
		}
		return result;
	}

	/**
	 * Method to get PM Provider CDC Assign by Provider ID Assign Period.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param caseNum
	 *            long Case Number
	 * @param serviceId
	 *            long Service ID
	 * @param beginDate
	 *            Timestamp Begin Date
	 * @param endDate
	 *            Timestamp End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderCdcAssignByProvIDAssignPeriod(long providerID,
			long caseNum, long serviceId, Timestamp beginDate, Timestamp endDate)
					throws CoException {
		Object[] result = null;
		// create instance and set values
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setServiceId(serviceId);
		pmProviderCdcAssignCargo.setAssignBegDt(beginDate);
		pmProviderCdcAssignCargo.setAssignEndDt(endDate);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByProvIdPayPrdDt",
					pmProviderCdcAssignCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method findByPrvIdCaseIsAssinedAfter805Triggered Looks if provider
	 * assignments are done after DHS-0805 is triggered.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param caseNum
	 *            Case Number
	 * @param serviceIds
	 *            Services ID
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] findByPrvIdCaseIsAssinedAfter805Triggered(long providerID,
			long caseNum, String serviceIds, Timestamp beginDate,
			Timestamp endDate) throws CoException {
		Object[] result = null;
		// create instance and set values
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setAssignBegDt(beginDate);
		pmProviderCdcAssignCargo.setAssignEndDt(endDate);
		Object[] obj = { pmProviderCdcAssignCargo, serviceIds };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts",
					"findByPrvIdCaseIsAssinedAfter805Triggered", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	// BRGUS00160385- Naga-PM Provider Services DB changes
	/**
	 * Method to get PM Provider Services and Provider details.
	 * 
	 * @param providerID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderServicesProviderDetails(long providerID)
			throws CoException {
		Object[] result = null;
		VPmProvPayrollCargo vPmProviderServicesCargo = new VPmProvPayrollCargo();
		vPmProviderServicesCargo.setT1ProviderId(providerID);
		vPmProviderServicesCargo
		.setServiceBeginDt(CoDateFactory.getTimestamp());
		vPmProviderServicesCargo.setServiceEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VPmProvPayroll", "findByProviderIdEffBeginDtEffEndDt",
					vPmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VPmProvPayroll", 99665);
		}
		return result;
	}

	/**
	 * Method to get PM Provider Services.
	 * 
	 * @param providerID
	 *            long
	 * @param providerServiceSeqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderServicesDet(long providerID,
			long providerServiceSeqNum) throws CoException {
		Object[] result = null;
		VPmProvPayrollCargo vPmProviderServicesCargo = new VPmProvPayrollCargo();
		vPmProviderServicesCargo.setT1ProviderId(providerID);
		vPmProviderServicesCargo
		.setProviderServiceSeqNum(providerServiceSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VPmProvPayroll", "findByProviderIdServSeqNum",
					vPmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VPmProvPayroll", 99665);
		}
		return result;
	}

	/**
	 * Method to get PM Provider Services Provider Details.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param providerServiceSeqNum
	 *            long Provider Services Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderServicesProviderDetails(long providerID,
			long providerServiceSeqNum) throws CoException {
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderId(providerID);
		pmProviderServicesCargo.setProviderServiceSeqNum(providerServiceSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findByProviderIdServSeqNum",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	/**
	 * Method to get Case App NUmber.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseAppNumber(COCorrespondence aCoObj)
			throws CoException {

		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setCoReqSeq(aCoObj.getCoReqSeq());
		CorrespondenceServices.formatCoObject(cargo, aCoObj);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByReqSeq", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 99666);
		}
		return result;
	}

	/**
	 * Method to get data from BV_COLLECTION_REFERRAL based on
	 * COLLECTION_SEQ_NUM
	 * 
	 * @param collectionSeqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBvCollectionReferralByCollectionCaseNum(
			long collectionSeqNum) throws CoException {
		Object[] result = null;

		BvCollectionReferralCargo bvCollectionReferralCargo = new BvCollectionReferralCargo();
		bvCollectionReferralCargo.setCollectionSeqNum(collectionSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvCollectionReferral", "findByCollectionCaseNum",
					bvCollectionReferralCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvCollectionReferral",
					16909);
		}
		return result;
	}

	/**
	 * Method to get Application Date by Case Number and Program CD
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param programCD
	 *            String Program CD
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getAppDateByCaseNumProgCD(long caseNum, String programCD)
			throws CoException {
		Object[] result = null;
		// create an instance for cargo
		DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
		// set parameters to the cargo
		dcCaseProgramCargo.setCaseNum(caseNum);
		dcCaseProgramCargo.setProgCd(programCD);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findByCasePgmCurrRec",
					dcCaseProgramCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseProgram", 16909);
		}
		return result;
	}

	/**
	 * Method to get Fuel Type by case number and service CD.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param serviceTypeCD
	 *            Service Type CD
	 * @param serviceCD
	 *            String Service CD
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */	

	/**
	 * Method to get Repayment SW by case number and EDG Trace ID.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgeTraceID
	 *            EDG Treace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getRePaymentSWByCaseNumTraceID(long caseNum,
			long edgeTraceID) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgeTraceID) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerBudget",
					"findByCaseNumEdgTraceIdEDEligSerBudget", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for getRePaymentSWByCaseNumTraceID", 16909);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_CDC_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param partWhereClause
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdgCdcBudget(long caseNum, String partWhereClause)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), partWhereClause };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCdcBudget", "findByCaseNumEdgTraceId", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG CDC Budget", 16325);
		}
		return result;
	}

	/**
	 * returns individual income.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvCdcServiceAuth(long caseNum,
			String edgTraceIdString) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumEdgTraceIdString",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_CDC_SERVICE_AUTH",
					16842);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_SERVICE_AUTH and
	 * CO_NOD_REQUEST_DETAIL based on CASE_NUM and CO_REQ_SEQ.
	 * 
	 * @param caseNum
	 *            long
	 * @param coReqSeq
	 *            long
	 * @param edbcRunDtString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerServiceAuthBySERCoAllAP(long caseNum,
			long coReqSeq, String edbcRunDtString) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(coReqSeq), edbcRunDtString };

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdEligSerServiceAuth", "findBySERCoAllAP", null,
							obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerServiceAuth",
					16903);
		}
		return result;
	}

	/**
	 * Method to update Draft Trigger.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 */
	public int updateDraftTrigger(COCorrespondence aCoObject) throws CoException {

		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateDraftTrigger - started");
		boolean finalResult = false;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();

		coRequestHistoryCargo.setActivate("UPDATEDRAFT");
		COCorrespondence aCoObj = aCoObject;
		if (aCoObj.getCoReqSeq() == 0) {
			aCoObj = getRequestedTrigger(aCoObj);
		}
		
		coRequestHistoryCargo.setCoReqSeq(aCoObj.getCoReqSeq());
		
		//getRequestedTrigger closes the connection so we have to re-open a new connection to pass to CoRequestHistoryCollection
		openConnection();
		
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		coRequestHistoryCollection.setCargo(coRequestHistoryCargo);

		try {
			Object objCoReqHistCargo = coRequestHistoryCollection.select("findByReqSeq");
			coRequestHistoryCollection.clear();		

			if (objCoReqHistCargo != null && objCoReqHistCargo instanceof CoRequestHistoryCargo[]) {
				CoRequestHistoryCargo[] arrCoReqHistoryCargo = (CoRequestHistoryCargo[])objCoReqHistCargo;	
				coRequestHistoryCargo = arrCoReqHistoryCargo[0];

				CorrespondenceServices.formatCoObject(coRequestHistoryCargo, aCoObj);
				coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
				coRequestHistoryCargo.setUpdateUserId(aCoObj.getRequestUserId());
				coRequestHistoryCargo.setDraftSw(aCoObj.getDraftSwitch());
				coRequestHistoryCargo.setOfficeNum(aCoObj.getOfficeNumber());
				if(CoConstants.CHAR_Y==aCoObject.getIsModeLocalPrint()){
					BinaryDocument bd = new BinaryDocument(aCoObject.getXmlStr().getBytes());
					coRequestHistoryCargo.setHstPrintString(bd);
				}
				coRequestHistoryCollection.add(coRequestHistoryCargo);
				String caseNum="";
				if(coRequestHistoryCargo != null && coRequestHistoryCargo.getCaseNum() != null){
					caseNum =  coRequestHistoryCargo.getCaseNum().toString();
				}

				String userId = aCoObj.getRequestUserId(); 

				String actionName = "Update:CoRequestHistory:" + caseNum;
				StringBuffer issued = new StringBuffer("Issued by:");
				issued.append(userId);
				logStatement("CoDAOServices:updateDraftTrigger", actionName,issued.toString(),conn);
				finalResult = coRequestHistoryCollection.update();
				logStatement("", "","",conn);
			}

		} catch (Exception e) {

			CoDebugger.debugException(
					"Exception while cancelling the requested trigger "
							+ e.getMessage(), e);
		} finally {
			closeConnection();
		}
		if (!(finalResult)) {
			throw new CoException("Exception while updating the Draft SW", 318);
		}

		log.log(CoConstants.CO_NAME,ILog.INFO ,"MasterAssembler - updateDraftTrigger - timeTaken : " + (System.currentTimeMillis() - start));
		return 0;
	}

	/**
	 * Method to get data from ED_INDV_CDC_SERVICE_AUTH and
	 * CO_NOD_REQUEST_DETAIL based on CASE_NUM and CO_REQ_SEQ.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param coReqSeq
	 *            long
	 * @param edbcRunDtString
	 *            EDBC Run Date
	 * @param curEligInd
	 *            Current Eligibility Indicator
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvCdcServiceAuthByCdcCoAllAP(long caseNum,
			long coReqSeq, String edbcRunDtString, char curEligInd)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(coReqSeq),
				edbcRunDtString, new Character(curEligInd) };

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvCdcServiceAuth", "findByCDCCoAllAP", null,
							obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCdcServiceAuth",
					16903);
		}
		return result;
	}

	/**
	 * Method returns EdbcRunDt and Toa Cd.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            EDG Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdbcRunDtToaCd(long caseNum, String edgTraceIdString)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), CoDateFactory.getTimestamp(),
				edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByTraceIdList", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return result;
	}

	/**
	 * 
	 * @author knakra
	 * Method returns EdbcRunDt and Toa Cd.
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            EDG Trace ID
	 * @param timestamp 
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getEdbcRunDtToaCds(long caseNum, String edgTraceIdString, Timestamp timestamp)
			throws CoException {
		Object[] obj = { new Long(caseNum), timestamp,
				edgTraceIdString };
		EdEligibilityCollection  edEligibilityCollection = new EdEligibilityCollection();
		EdEligibilityCargo[] edEligibilityCargos = null;
		try {
			edEligibilityCargos = (EdEligibilityCargo[])edEligibilityCollection
					.select("findByTraceIdLists", obj);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return edEligibilityCargos;
	}



	/**
	 * 
	 * @author adbhatnagar
	 * @purpose This method is used to return old benefit ED_ELIGIBILITY record
	 * @param edEligibilityCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getOldBenefitForIncreaseDecrease(EdEligibilityCargo edEligibilityCargo)
			throws CoException {

		Object[] result = null;
		EdEligibilityCargo eligibilityCargo = new EdEligibilityCargo();
		eligibilityCargo.setEdbcRunDt(edEligibilityCargo.getEdbcRunDt());
		eligibilityCargo.setPaymentBegDt(edEligibilityCargo.getPaymentBegDt());
		eligibilityCargo.setCaseNum(edEligibilityCargo.getCaseNum());
		eligibilityCargo.setEdgNum(edEligibilityCargo.getEdgNum());
		eligibilityCargo.setProgramCd(edEligibilityCargo.getProgramCd());
		eligibilityCargo.setTypeOfAssistanceCd(edEligibilityCargo.getTypeOfAssistanceCd());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findOldBenefitByCaseNumEdg", eligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return result;

	}

	//CHIMESMO-47954-Kunal-Start
	/**
	 * 
	 * @author kunalshah
	 * @purpose This method is used to return old benefit ED_ELIGIBILITY record
	 * @param edEligibilityCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getOldBenefitForIncreaseDecreaseV1(EdEligibilityCargo edEligibilityCargo)
			throws CoException {

		Object[] result = null;
		EdEligibilityCargo eligibilityCargo = new EdEligibilityCargo();
		eligibilityCargo.setEdbcRunDt(edEligibilityCargo.getEdbcRunDt());
		eligibilityCargo.setPaymentBegDt(edEligibilityCargo.getPaymentBegDt());
		eligibilityCargo.setCaseNum(edEligibilityCargo.getCaseNum());
		eligibilityCargo.setEdgNum(edEligibilityCargo.getEdgNum());
		eligibilityCargo.setProgramCd(edEligibilityCargo.getProgramCd());
		eligibilityCargo.setTypeOfAssistanceCd(edEligibilityCargo.getTypeOfAssistanceCd());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findOldBenefitByCaseNumEdgV1", eligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return result;

	}

	/**
	 * Method to get PM Provider ID.
	 * 
	 * @param childIndvId
	 *            Child Indv ID
	 * @param serviceId
	 *            long
	 * @param caseNum
	 *            long
	 * @param assignBeginDt
	 *            Timestamp
	 * @param assignEndDt
	 *            Timestamp
	 * @return obj[] PmProviderCdcAsgnmntsCargo
	 */

	public Object[] getPmProviderId(long childIndvId, long serviceId,
			long caseNum, Timestamp assignBeginDt, Timestamp assignEndDt)
					throws CoException {

		Object[] result = null;

		PmProviderCdcAsgnmntsCargo cargo = new PmProviderCdcAsgnmntsCargo();

		cargo.setChildIndvId(childIndvId);
		cargo.setServiceId(serviceId);
		cargo.setCaseNum(caseNum);
		cargo.setAssignBegDt(assignBeginDt);
		cargo.setAssignEndDt(assignEndDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseServiceIdAsgnBegDates",
					cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception while getting PmProvider CDC Assignments", 16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in PM_PROVIDER_CDC_ASGNMNTS for this Service Id",
					16830);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerBudgetByCaseNumEdgTraceId(long caseNum,
			String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerBudget", "findByCaseNumEdgTraceId", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerBudget", 16900);
		}
		return result;
	}

	/**
	 * Method to get data from ED_ELIG_SER_GRP_SHORTFALL based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getEdEligSerGrpShortfallByCaseNumEdgTraceId(
			long caseNum, String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerGrpShortfall", "findByCaseNumEdgTraceIdString",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerGrpShortfall",
					16900);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEE_CASES based on CASE _NUM.
	 * 
	 * @param AppNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getMoEmployeeApps(String appNum) throws CoException {
		Object[] result = null;
		MoEmployeeAppsCargo moEmployeeAppsCargo = new MoEmployeeAppsCargo();
		moEmployeeAppsCargo.setAppNum(appNum);
		moEmployeeAppsCargo.setAssignBeginDt(CoDateFactory.getTimestamp());
		moEmployeeAppsCargo.setAssignEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeApps", "findByAppNum", moEmployeeAppsCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEE_APPS", 16353);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEE_APPS", 16059);
		}
		return result;
	}

	/**
	 * Method to get data from BV_CLAIM based on CASE_NUM, EDG_NUM, CLAIM_ID,
	 * CURRENT_IND, SEQ_NUM.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @param claimId
	 *            Claim ID
	 * @param currIndicator
	 *            String
	 * @param seqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBvClaimByCaseNumEdgeNumClaimNumCurrIndSeqNum(
			long caseNum, long edgNum, String claimId, String currIndicator,
			long seqNum) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum), claimId,
				currIndicator, new Long(seqNum) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBvClaim",
					"findByClaimNumberAndSeqNum", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaim", 16908);
		}
		return result;
	}

	/**
	 * Method to get data from BV_CLAIM_LIABLE_INDV based on CLAIM_ID,
	 * LIABLE_SW.
	 * 
	 * @param claimId
	 *            String
	 * @param liableSW
	 *            Liability Switch
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBvClaimLiableIndvByClaimIDAndLiableSW(String claimId,
			char liableSW) throws CoException {
		Object[] result = null;

		BvClaimLiableIndvCargo bvClaimLiableIndvCargo = new BvClaimLiableIndvCargo();
		bvClaimLiableIndvCargo.setClaimId(claimId);
		bvClaimLiableIndvCargo.setLiableSw(liableSW);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimLiableIndv", "findByLiableClmIdSw",
					bvClaimLiableIndvCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimLiableIndv", 16909);
		}
		return result;
	}

	/**
	 * Method get data from DC_PAYEE based on CASE_NUM, EDG_NUM AND
	 * PAYEE_TYPE_CD.
	 * 
	 * @param caseNumber
	 *            long Case Number
	 * @param edgNumber
	 *            long EDG Number
	 * @param payeeTypeCd
	 *            string Payee Type CD
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPayeeForCaseEdgeAndPayeeTypeCD(long caseNumber,
			long edgNumber, String payeeTypeCd) throws CoException {
		Object[] result = null;
		DcPayeeCargo cargo = new DcPayeeCargo();
		cargo.setCaseNum(caseNumber);
		cargo.setEdgNum(edgNumber);
		cargo.setPayeeTypeCd(payeeTypeCd);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcPayee",
					"findByCsnEdgTypeCurrRec", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_PAYEE", 16827);
		}

		return result;
	}

	/**
	 * The method to get data from ED_INDV_ELIGIBILITY based on CASE_NUM AND
	 * EDG_TRACE_ID .
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgTraceId
	 *            String Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvEligibilityByCaseNumEdgTraceId(long caseNum,
			String edgTraceId) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceId };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByEdgTraceIdsSpendDown", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_ELIGIBILITY",
					16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_INDV_ELIGIBILITY",
					16055);
		}
		return result;
	}

	/**
	 * Method to get DC Stfs by EDG number and sequence number.
	 * 
	 * @param edgNum
	 *            long
	 * @param stfsSeqNum
	 *            long
	 * @return obj[] DcStfsCargo Resultset from the DAO
	 */

	public Object[] getDcStfsByEdgeNumAndStfsSeqNum(long edgNum, long stfsSeqNum)
			throws CoException {

		Object[] result = null;

		DcStfsCargo cargo = new DcStfsCargo();

		cargo.setEdgNum(edgNum);
		cargo.setStfsSeqNum(stfsSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcStfs",
					"findByEdgeNumAndStfsSeqNum", cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting DcStfs", 16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_STFS for this EDG_NUM and STFS_SEQ_NUM",
					16830);
		}
		return result;
	}

	/**
	 * This method returns ltc amounts amounts for the case# and edgTraceId.
	 * 
	 * @param caseNum
	 *            long
	 * @param edgTraceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getLtcAllowanceDetails(long caseNum, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdEligLtcAllowanceCargo edEligLtcAllowanceCargo = new EdEligLtcAllowanceCargo();
		edEligLtcAllowanceCargo.setCaseNum(caseNum);
		edEligLtcAllowanceCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligLtcAllowance", "findByCaseNumEdgTraceId",
					edEligLtcAllowanceCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_LTC_ALLOWANCE",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIG_LTC_ALLOWANCE",
					16659);
		}
		return result;
	}

	/**
	 * Method to get Invoice Number by Case Edg Service ReqSeq.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Edg Number
	 * @param service_req_seq_num
	 *            long
	 * @return obj[] BiIssuanceTriggerCargo
	 * @throws CoException
	 */

	public Object[] getInvoiceNumbyCaseEdgServiceReqSeq(long caseNum,
			long edgNum, long serviceReqSeqNum) throws CoException {

		Object[] result = null;

		BiIssuanceTriggerCargo cargo = new BiIssuanceTriggerCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		cargo.setServiceReqSeqNum(serviceReqSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiIssuanceTrigger", "findByCaseEdgReqSeq", cargo, null,
					conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception while getting BiIssuanceTrigger",
					16829);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in BiIssuanceTrigger for these parameters", 16830);
		}
		return result;
	}

	/**
	 * Method to get Provider Service ReqSeq.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param serviceReqSeqNum
	 *            long Service Req Seq Number
	 * @return obj[] Resultset from the DAO
	 */
	/**
	 * Method to get Ed Eligibility Ser Service Auth By Case Ser ReqSeq
	 * EdgTraceId.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param serviceReqSeq
	 *            long Service ReqSeq number
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return array Object
	 * @throws CoException
	 */
	public Object[] getEdEligSerServiceAuthByCaseSerReqSeqEdgTraceId(
			long caseNum, long serviceReqSeq, long edgTraceId)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(serviceReqSeq),
				new Long(edgTraceId) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerServiceAuth", "findByCaseNumSerReqSeqTraceID",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_elig_ser_service_auth",
					16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ed_elig_ser_service_auth", 16055);
		}
		return result;
	}

	/**
	 * Method to get Ed Indv Ser Service Auth By Case Service Seq.
	 * 
	 * @param caseNum
	 *            long
	 * @param serviceReqSeqNum
	 *            long
	 * @param eligSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	/**
	 * Method to get Dc Ser Service Request By Case Service ReqSeq.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param serviceReqSeq
	 *            Service ReqSeq
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcSerServiceRequestByCaseServiceReqSeq(long caseNum,
			long serviceReqSeq) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), String.valueOf(serviceReqSeq) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSerServiceRequest", "findByCaseNumSeqNum", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSerServiceRequest",
					16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcSerServiceRequest",
					16055);
		}
		return result;
	}

	/**
	 * Method to Cancel 3797 triggers.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return int
	 * @throws CoException
	 * 
	 */
	public int cancel3797PendingTrigger(COCorrespondence aCoObj) throws CoException {
		boolean finalResult = false;
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setActivate("UPDATECANCEL");
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());

		coRequestHistoryCargo.setDocId(aCoObj.getDocId());
		coRequestHistoryCargo.setEmpId(aCoObj.getEmpId());
		coRequestHistoryCargo.setPendingTrigSw(aCoObj.getActionCode());
		coRequestHistoryCargo.setUpdateUserId(aCoObj.getRequestUserId());
		coRequestHistoryCargo.setCoReqSeq(aCoObj.getCoReqSeq());
		coRequestHistoryCargo.setEdgNum(aCoObj.getEdgeNumber());
		coRequestHistoryCargo.setCaseNum(Long.parseLong(aCoObj.getCaseAppNumber()));
		coRequestHistoryCollection.add(coRequestHistoryCargo);
		try {
			finalResult = coRequestHistoryCollection.update();
		} catch (Exception e) {
			CoDebugger.debugException("Exception while cancelling the 3797 pending triggers" + e, e);
		} finally {
			closeConnection();
		}

		if (!(finalResult)) {
			throw new CoException(
					"Exception while cancelling the 3797 pending triggers", 318);
		}
		CoDebugger
		.debugInformation("CoDAOServices -- cancel3797PendingTrigger - successful");
		return 0;
	}

	/**
	 * Method to check existing original request for 0198 and 0805.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor0198And0805(
			COCorrespondence aCoObj) throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());		
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setProviderId(aCoObj.getProviderId());
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		String findExistingTrigFindBy = "findByExistingOriginalRequestFor0198And0805";
		if (CoConstants.CHAR_B == aCoObj.getActionCode()) {
			findExistingTrigFindBy = "findByExistingOrgReqFor0198ManualAuth";
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {

			if (CoConstants.CHAR_B == aCoObj.getActionCode()
					&& CoConstants.FXX018_DOC_ID.equals(aCoObj.getDocId())) {

				// End BRGUS00101894 - bhattaj

				vCoRequestCargo.setIndvId(aCoObj.getIndvId());
				finalResult = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VCoRequest",
						"findByExistingOrgRequestFor0805WithIndvId",
						vCoRequestCargo, null, conn);
			} else {
				finalResult = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VCoRequest", findExistingTrigFindBy, vCoRequestCargo,
						null, conn);
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor0198And0805",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method to check existing original request for 0849.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor0849(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setReasonCdList(aCoObj.getReasonCdList());

		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor0849",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor0849 ",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method getPendingTriggersByBatchRequest, make ranges to process the CO
	 * triggers.
	 * 
	 * @param generateDate
	 *            Generate Date
	 * @param whereClause
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPendingTriggersByBatchRequest(String generateDate,
			String whereClause) throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setReasonCdList(whereClause);
		vCoRequestCargo.setChipAppNum(generateDate);

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByBatchPendingTriggersForPreProcess",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - V_CO_REQUEST ", 16098);
		}

		return finalResult;
	}

	/**
	 * Method getPendingTriggersByBatchRequestForCaseApp for selecting triggers
	 * to process.
	 * 
	 * @param whereClause
	 *            String
	 * @param minVal
	 *            String Minimum Value
	 * @param maxVal
	 *            String Maximum Value
	 * @param generateDate
	 *            String Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPendingTriggersByBatchRequestForCaseApp(
			String whereClause, String minVal, String maxVal,
			String generateDate) throws CoException {
		Object[] finalResult = null;
		Object[] obj = { whereClause, minVal, maxVal, generateDate };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByPendTrigForBatchDrvCaseApp", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - V_CO_REQUEST ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method getPendingTriggersByBatchRequestForCase for selecting triggers to
	 * process.
	 * 
	 * @param whereClause
	 *            String
	 * @param minVal
	 *            Minimum Value
	 * @param maxVal
	 *            Maximum Value
	 * @param generateDate
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPendingTriggersByBatchRequestForCase(String whereClause,
			String minVal, String maxVal, String generateDate)
					throws CoException {
		Object[] finalResult = null;
		Object[] obj = { whereClause, minVal, maxVal, generateDate };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByPendTrigForBatchDrvCase", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - V_CO_REQUEST ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get Fuel Type Case Number.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] findByCaseFuelType(long caseNum) throws CoException {

		Object[] result = null;

		DcCasesCargo cargo = new DcCasesCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByCaseFuelType", cargo, null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		if (result == null || result.length == 0) {
			CoDebugger
			.debugInformation("No data in DC Cases for Fuel type code...");
		}
		return result;
	}

	/**
	 * This method is to get the DssServiceReqSeqNum.
	 * 
	 * @param dssServiceReqSeqNum
	 *            long DSS Service ReqSeq Number
	 * @param caseNum
	 *            long Case Number
	 * @param indvId
	 *            long Indv ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	/**
	 * This method is to get the BiDssPaymentTrigger to update status code.
	 * 
	 * @param coObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	/**
	 * Method to update Bi Dss Payment Trigger StatusCD.
	 * 
	 * @param coObject
	 *            COCorrespondence
	 * @throws Exception
	 */

	/**
	 * Method to update Pm Provider Name by ID.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderNameByID(long providerId) throws CoException {
		Object[] result = null;
		PmCcapProvidersCargo cargo = new PmCcapProvidersCargo();
		cargo.setProviderId(((Long)providerId).intValue());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findByAssocProviderId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDERS", 99664);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_DSS_SERVICE_AUTH based on CASE_NUM and
	 * EDBC_RUN_DT.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edbcRunDtString
	 *            EDBC Run Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */

	/**
	 * Method getPendTrigForBatchDrvByGenerateDt for selecting triggers to
	 * process.
	 * 
	 * @param whereClause
	 *            String
	 * @param generateDate
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPendTrigForBatchDrvByGenerateDt(String whereClause,
			String generateDate) throws CoException {
		Object[] finalResult = null;
		Object[] obj = { whereClause, generateDate };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByPendTrigForBatchDrvByGenerateDt",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - V_CO_REQUEST ", 16098);
		}
		return finalResult;
	}

	/**
	 * gets all children for given period.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @param beginDate
	 *            Begin Date
	 * @param endDate
	 *            End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCdcDetailsByPerProviderAssignDates(long providerID,
			Timestamp beginDate, Timestamp endDate) throws CoException {
		Object[] result = null;
		// create instance and set values
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setAssignBegDt(beginDate);
		pmProviderCdcAssignCargo.setAssignEndDt(endDate);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByProviderIdAssignDates",
					pmProviderCdcAssignCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEE_CASES based on CASE _NUM.
	 * 
	 * @param caseAppNo
	 *            Case App Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getMoEmployeeCasesFromRequest(long caseAppNo)
			throws CoException {
		long startTime =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getMoEmployeeCasesFromRequest - started - caseAppNo = " + caseAppNo);
		Object[] result = null;
		MoEmployeeCasesCargo moEmployeeCasesCargo = new MoEmployeeCasesCargo();
		moEmployeeCasesCargo.setCaseNum(caseAppNo);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeCases", "findByCaseNumberWithRowNum",
					moEmployeeCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);

		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getMoEmployeeCasesFromRequest - timeTaken : " + (System.currentTimeMillis() - startTime));
		return result;
	}

	/**
	 * Method getRecipientData() gets Recipients Data.
	 * 
	 * @param coRequestRecipientsCargo
	 *            CoRequestRecipientsCargo
	 * @return String recipientData
	 */
	public String getRecipientData(
			CoRequestRecipientsCargo coRequestRecipientsCargo) {

		CoRequestRecipientsCargo[] result = null;
		String recipientData = null;
		if (coRequestRecipientsCargo != null) {
			try {
				result = (CoRequestRecipientsCargo[]) getCoRequestRecipient(
						coRequestRecipientsCargo.getCoReqSeq(),
						coRequestRecipientsCargo.getCoRptSeq());
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			if (result != null && result.length > 0) {
				recipientData = result[0].getRecipientData();
			}
		}
		return recipientData;
	}

	/**
	 * returns provider id (This method is called by CoRequestGenerator and
	 * ((198,805) Assemblers for existing triggers)).
	 * 
	 * @param coObj
	 *            COCorrespondence
	 * @return long providerID
	 */
	public long getProviderIdFor198And805(COCorrespondence coObj) {
		EdIndvCdcServiceAuthCargo[] edIndvCdcServiceAuthCargos = null;
		PmProviderCdcAsgnmntsCargo[] pmProviderCdcCargos = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcObj = new PmProviderCdcAsgnmntsCargo();
		StringTokenizer st = new StringTokenizer(coObj.getReasonCdList(), ",");
		int count = 1;
		long providerID = 0;
		String serviceId = "0";
		while (st.hasMoreTokens()) {
			if (count == 1) {
				serviceId = st.nextToken();
			} else {
				st.nextToken();
			}
			count++;
		}
		Object[] obj = { new Long(coObj.getCaseAppNumber()),
				String.valueOf(coObj.getEdgTraceId()), serviceId };
		try {
			edIndvCdcServiceAuthCargos = (EdIndvCdcServiceAuthCargo[]) CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvCdcServiceAuth",
							"findByCaseNumEdgTraceIdServiceID", null, obj, conn);

			if (edIndvCdcServiceAuthCargos != null
					&& edIndvCdcServiceAuthCargos.length > 0) {
				pmProviderCdcObj.setNeedBlock(edIndvCdcServiceAuthCargos[0]
						.getNeedBlock());
				pmProviderCdcObj.setCaseNum(Long.parseLong(coObj
						.getCaseAppNumber()));
				pmProviderCdcObj.setServiceId(Long.parseLong(serviceId));
				pmProviderCdcCargos = (PmProviderCdcAsgnmntsCargo[]) CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"PmProviderCdcAsgnmnts",
								"findByCaseNumServiceIdNeedBlock",
								pmProviderCdcObj, null, conn);
				if (pmProviderCdcCargos != null
						&& pmProviderCdcCargos.length > 0) {
					providerID = pmProviderCdcCargos[0].getProviderId();
				}
			}
		} catch (Exception e) {
			CoDebugger.debugException("Exception getting provider Id... ", e);
		}
		return providerID;
	}

	/**
	 * Method to get Pm Provider Edge Assignments Details.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderEdgeAssignmentsDetails(long caseNum,
			long edgNum, long providerId) throws CoException {

		Object[] result = null;
		PmProviderEdgAsgnmntsCargo cargo = new PmProviderEdgAsgnmntsCargo();

		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		cargo.setProviderId(providerId);
		cargo.setAssignEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderEdgAsgnmnts",
					"findByCaseNumAndProviderIdEdgNum", cargo, null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		if (result == null || result.length == 0) {
			CoDebugger
			.debugInformation("No Data found for PmProviderEdgAsgnmnts...");
		}
		return result;
	}

	/**
	 * Method to get Physical or Mailing Address for a Case Number from
	 * DC_CASE_ADDRESSES .
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param addressType
	 *            Address Type
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPhysicalCaseAddresseeAddress(long caseNumber,
			String addressType) throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(caseNumber);
		dcCaseAddressesCargo.setAddrTypeCd(addressType);
		dcCaseAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByCaseNumberAddressTypeTempDate",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16311);
		}
		return result;
	}

	/**
	 * Method to get Edg TraceId From EdElig.
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdgTraceIdFromEdElig(long caseNumber, long edgNum)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNumber);
		cargo.setEdgNum(edgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByExistingAuth", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16311);
		}
		return result;
	}

	/**
	 * SNAP-01 Expedited SNAP Information
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] getSNAP01ExpeditedSNAPInformation(long caseNumber)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "getSNAP01ExpeditedSNAPInformation", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16311);
		}
		return result;
	}
	/**
	 * Method to get Child Support Expenses.
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param edgTraceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getChildSupportExpenses(long caseNumber, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdEligFsBudgetCargo cargo = new EdEligFsBudgetCargo();
		cargo.setCaseNum(caseNumber);
		cargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFsBudget", "findByCaseNumAndEDGTraceID", cargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligFsBudget", 16311);
		}
		return result;
	}

	/**
	 * Method getEdgTraceIds for selecting triggers to process.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNumber
	 *            String EDG Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgTraceIds(long caseNum, String edgNumber)
			throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum), edgNumber };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgNums", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdEligibility ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get Ed Eligibility Cargos.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNumber
	 *            long Edg Trace Id
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityCargos(long caseNum, long edgNumber)
			throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum), new Long(edgNumber) };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgNum", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdEligibility ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get EdEligibility Cargos CDC.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNumber
	 *            long Edg Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityCargosCDC(long caseNum, long edgNumber)
			throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum), new Long(edgNumber) };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgNumCDC", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdEligibility ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get EdCaseRecertDates.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdCaseRecertDates(long caseNum) throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum) };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseNum", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdCaseRecertDates ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get Ed Case RecertDates.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getApplicationDate(long caseNum) throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum) };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findByCaseNumDesc", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - DcCaseProgram ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get data from MO_EMPLOYEES based on EMP_ID.
	 * 
	 * @param empID
	 *            Employee ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBridgesWorkerOffice(long empID) throws CoException {
		long startTime =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getBridgesWorkerOffice - started - empID = " + empID);
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpId(empID);
		moEmployeesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		moEmployeesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpIdDates", moEmployeesCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getBridgesWorkerOffice - timeTaken : " + (System.currentTimeMillis() - startTime));
		return result;
	}

	/**
	 * This method returns the date of marriage for an individual.
	 * 
	 * @param individualID
	 *            Individual ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] getRelationshipCd(long individualID) throws CoException {
		Object[] result = null;
		DcRelationshipsCargo dcRelationshipsCargo = new DcRelationshipsCargo();
		dcRelationshipsCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRelationships", "findByIndvId", dcRelationshipsCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_RELATIONSHIPS", 16322);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_RELATIONSHIPS", 16322);
		}
		return result;
	}

	/**
	 * Method getEdEligibilityCargoByCaseEdge.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNums
	 *            Edg Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityCargoByCaseEdge(long caseNum, String edgNums)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNums };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseEdgeCurrentIndA", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ", 16098);
		}
		return result;
	}

	/**
	 * Method to get Pm Provider Services Details
	 * 
	 * @param providerID
	 *            long
	 * @param providerServiceSeqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderServicesDetails(long providerID,
			long providerServiceSeqNum) throws CoException {
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderId(providerID);
		pmProviderServicesCargo.setProviderServiceSeqNum(providerServiceSeqNum);
		pmProviderServicesCargo.setServiceBeginDt(CoDateFactory.getTimestamp());
		pmProviderServicesCargo.setServiceEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findByProviderIdOnly",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	/**
	 * Method getPmPrvCdcAsgnByProvIDAsgnPrdAllServices.
	 * 
	 * @param providerID
	 *            long
	 * @param caseNum
	 *            long
	 * @param serviceIds
	 *            String
	 * @param beginDate
	 *            Timestamp
	 * @param endDate
	 *            Timestamp
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmPrvCdcAsgnByProvIDAsgnPrdAllServices(long providerID,
			long caseNum, String serviceIds, Timestamp beginDate,
			Timestamp endDate) throws CoException {
		Object[] result = null;
		// create instance and set values
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setAssignBegDt(beginDate);
		pmProviderCdcAssignCargo.setAssignEndDt(endDate);
		Object[] obj = { pmProviderCdcAssignCargo, serviceIds };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByProvIdPayPrdDtAllService",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method to get Ed Eligibility By CaseProgram Fs ExpeditedSw.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNums
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityByCaseProgramFsExpeditedSw(long caseNum,
			String edgNums) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNums };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseProgramCdFSExpedited", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ", 16098);
		}
		return result;
	}

	/**
	 * This method returns ltc amounts amounts for the .
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIds
	 *            Edg Trace Ids
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getLtcAllowanceDetailsForAllTraceIds(long caseNum,
			String edgTraceIds) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIds };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligLtcAllowance", "findByEdgTraceIdList", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_LTC_ALLOWANCE",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIG_LTC_ALLOWANCE",
					16659);
		}
		return result;
	}

	/**
	 * This method returns clients copay & room and board amounts for the case#
	 * and edgTraceIds.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIds
	 *            Edg Trace Ids
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getLtcCopayBudgetDetailsForAllTraceIds(long caseNum,
			long[] edgTraceIds) throws CoException {
		Object[] result = null;
		List list = new ArrayList();
		list.add(0, new Long(caseNum));
		list.add(1, edgTraceIds);
		Object[] obj = { list };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligLtcCopayBudget", "findByEdgTraceIds", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIG_LTC_COPAY_BUDGET",
					16658);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_ELIG_LTC_COPAY_BUDGET", 16659);
		}
		return result;
	}

	/**
	 * creates the Map of multiple recipients if exists and adds them into the
	 * ArrayList.
	 * 
	 * @param caseNum
	 *            long
	 * @param coReqSeqNum
	 *            long
	 * @param docID
	 *            String
	 * @return ArrayList
	 */
	public List getMultipleRecipientsList(long caseNum, long coReqSeqNum,
			String docID) {
		Map multipleRecipients = new HashMap();
		List recipientsList = new ArrayList();
		char authRepInd = CoConstants.CHAR_N;
		DcCasesCargo[] dcCasesCargos = null;
		String authRepName = CoConstants.EMPTY_STRING;
		String recipientType = CoConstants.EMPTY_STRING;
		String authRepId = String.valueOf(caseNum);

		try {
			dcCasesCargos = (DcCasesCargo[]) getDcCasesCargo(caseNum);
			if (dcCasesCargos != null && dcCasesCargos.length > 0) {
				for (int i = 0; i < dcCasesCargos.length; i++) {
					multipleRecipients.clear();					
					if (authRepInd == 'S') {
						if (doesNoticeHasSerEdg(caseNum, coReqSeqNum, docID)) {
							recipientType = "SR"; // SER Representative
							multipleRecipients.put("REPID", authRepId);
							multipleRecipients.put("REPNAME", authRepName
									+ "  (SER Rep)");
							multipleRecipients.put("REPTYPE", recipientType);
							recipientsList.add(multipleRecipients);
						}
					} else if (authRepInd == 'F') {
						// as of now, not confirmed what type of edg notice
						// should have
						recipientType = "FR"; // Filing Representative
						multipleRecipients.put("REPID", authRepId);
						multipleRecipients.put("REPNAME", authRepName
								+ " (Filing Rep)");
						multipleRecipients.put("REPTYPE", recipientType);
						recipientsList.add(multipleRecipients);
					}
				}
			}
		} catch (Exception ex) {
			CoDebugger.debugException(
					"Exception in creating multiple recipients...", ex);
		}
		return recipientsList;
	}

	/**
	 * checks if the current trigger has SER edges.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param coReqSeqNum
	 *            long
	 * @param docID
	 *            Document ID
	 * @return boolean
	 */
	public boolean doesNoticeHasSerEdg(long caseNum, long coReqSeqNum,
			String docID) {

		if (docID != null && docID.equals(CoConstants.TF0002_DOC_ID)) {
			return true;
		}
		boolean isSerEdgPresent = false;
		List allEdgTraceIdsAsList = new ArrayList();
		EdEligibilityCargo[] edEligibilityCargoList = null;
		try {
			CoNodRequestDetailCargo[] coNodRequestDetailCargoArray = (CoNodRequestDetailCargo[]) getNodDetailByCaseNumDocIdReqSeq(
					String.valueOf(caseNum), CoConstants.TF0001_DOC_ID,
					coReqSeqNum);
			if (coNodRequestDetailCargoArray != null
					&& coNodRequestDetailCargoArray.length > 0) {
				for (int i = 0; i < coNodRequestDetailCargoArray.length; i++) {
					allEdgTraceIdsAsList.add(String
							.valueOf(coNodRequestDetailCargoArray[i]
									.getEdgTraceId()));
				}
				String edgTraceIdsStringForQuery = CorrespondenceServices
						.concatStringForQuery(allEdgTraceIdsAsList);
				edEligibilityCargoList = (EdEligibilityCargo[]) getEdbcRunDtToaCd(
						caseNum, edgTraceIdsStringForQuery);				
			}
		} catch (Exception ex) {
			CoDebugger.debugException(
					"Exception in checking SER edg for NCA...", ex);
		}
		return isSerEdgPresent;
	}

	/**
	 * Method to get data from BI_CDC_IBILLING based on INDV_ID, PROVIDER_ID and
	 * REQ_SEQ.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param reqSeq
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBiCdcIBillingByCaseNumReqSeq(long caseNum,
			String reqSeq) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), reqSeq };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiCdcIbilling", "findByCaseNumReqSeq", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for BiCdcIbilling by case number and req seq ",
					16911);
		}
		return result;
	}

	/**
	 * Method to check existing original request for 0512.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor0512(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setProviderId(aCoObj.getProviderId());
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor0512",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor01512",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method to get Pm Provider Id.
	 * 
	 * @param providerServiceSeqNum
	 *            Provider Service Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderId(long providerServiceSeqNum)
			throws CoException {
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderServiceSeqNum(providerServiceSeqNum);
		pmProviderServicesCargo.setServiceBeginDt(CoDateFactory.getTimestamp());
		pmProviderServicesCargo.setServiceEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findByProviderServSeqNum",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	/**
	 * Method to get data from BI_CDC_IBILLING based on PROCESSED_DT.
	 * 
	 * @param processedDate
	 *            Processed Date
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBiCdcIBillingByProviderIdProcessedDate(
			Timestamp processedDate, long providerId) throws CoException {
		Object[] result = null;
		Object[] obj = { processedDate, new Long(providerId) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiCdcIbilling", "findByProviderIdProcessedDate", null,
					obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for BiCdcIbilling by processedDate ", 16911);
		}
		return result;
	}

	/**
	 * Method to get the data from V_BI_WARRANT_DETAIL.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @param programCd
	 *            String Program Cd
	 * @param issueDt
	 *            Timestamp Issue Date
	 * @param indvId
	 *            String Indv ID
	 * @param caseNum
	 *            String Case Number
	 * @param edgNum
	 *            String EDG Number
	 * @param cdcDocNum
	 *            String CDC Doument Number
	 * @param paymentBeginDate
	 *            Timestamp Payment Begin Date
	 * @param paymentEndDate
	 *            Timestamp Payment End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getVBiWarrantDetails(long providerId, String programCd,
			Timestamp issueDt, String indvId, String caseNum, String edgNum,
			String cdcDocNum, Timestamp paymentBeginDate,
			Timestamp paymentEndDate) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(providerId), programCd, issueDt, indvId,
				caseNum, edgNum, cdcDocNum, paymentBeginDate, paymentEndDate };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantDetail", "findByProviderIdIssueDtCaseNumIndvId",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_BI_WARRANT_DETAIL", 9966);
		}
		return result;
	}

	/**
	 * Method gets all children for given period.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCdcDetailsByProviderIdCaseNum(long providerID,
			long caseNum) throws CoException {
		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByProviderAndService",
					pmProviderCdcAssignCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * For update of 1078_Print_Due_Dt.
	 * 
	 * @param aCoRequest
	 *            COCorrespondence
	 * @throws CoException
	 * 
	 */
	public void update1078PrintDueDt(COCorrespondence aCoRequest)
			throws CoException {
		DcSTFSBO dcSTFSBO = new DcSTFSBO();
		String temp = aCoRequest.getMiscParameters(); // long stfsseqnum
		String dueDate = aCoRequest.getReasonCdList(); // due date
		java.sql.Timestamp dueDt = null;

		if ((dueDate != null) && !(dueDate.equalsIgnoreCase(CoConstants.EMPTY_STRING))) {
			String[] vars = new String[3];
			vars = dueDate.split("\\/");
			dueDate = vars[2] + "-" + vars[0] + "-" + vars[1] + " 00:00:00.0";
			dueDt = java.sql.Timestamp.valueOf(dueDate);
		}

		// Map map = new HashMap(); //BRGUS00099878 - bhattaj - Commenting
		// unused variable

		if (temp != null && dueDt != null) {
			try {
				openConnection();
				temp = temp.trim();
				if (temp.length() > 0) {
					if (isOnline) {
						dcSTFSBO.updateRecordsPrintDate(
								aCoRequest.getRequestUserId(),
								aCoRequest.getEdgeNumber(),
								new Long(temp).longValue(),
								aCoRequest.getPrintDate(), dueDt, null);
					} else {
						dcSTFSBO.updateRecordsPrintDate(
								aCoRequest.getRequestUserId(),
								aCoRequest.getEdgeNumber(),
								new Long(temp).longValue(),
								aCoRequest.getPrintDate(), dueDt, conn);
					}
				}
			} catch (Exception e) {
				CoDebugger.debugException(
						"DC Interface DcSTFSBO Failed for FXX326 "
								+ e.getMessage(), e);
				throw new CoException(
						"DC Interface DcSTFSBO Failed for FXX326 --> ", 16490);
			} finally {
				closeConnection();
			}
		} else {
			try {
				throw new CoException(
						"aCoRequest.getMiscParameters() - stfsseqnum - from DC is null  / "
								+ " aCoRequest.getReasonCdList() - due date is null for FXX326 --> ",
								16490);
			} catch (Exception e) {
				log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
				throw new CoException(
						"aCoRequest.getMiscParameters() - stfsseqnum - from DC is null  / "
								+ " aCoRequest.getReasonCdList() - due date is null for FXX326 --> ",
								16490);
			} finally {
				closeConnection();
			}
		}
	}

	/**
	 * Method to get VBi Warrant Details By Provider Id.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param beginDt
	 *            Begin Date
	 * @param endDt
	 *            End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getVBiWarrantDetailsByProviderId(long providerId,
			String beginDt, String endDt) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(providerId), beginDt, endDt };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantDetail", "findByProviderId", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_BI_WARRANT_DETAIL", 9966);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_BI_WARRANT_DETAIL",
					16831);
		}
		return result;
	}

	/**
	 * Method to get VBiWarrant Details By Provider Id For SER
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param beginDt
	 *            Begin Date
	 * @param endDt
	 *            End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getVBiWarrantDetailsByProviderIdForSER(long providerId,
			String beginDt, String endDt) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(providerId), beginDt, endDt };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantDetail", "findByProviderIdForSER", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_BI_WARRANT_DETAIL", 9966);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_BI_WARRANT_DETAIL",
					16831);
		}
		return result;
	}

	/**
	 * Read co_req_seq from Co_Request_History. Search for attached sent
	 * document for those co_req_seq in Co_Request_Recipients.
	 * 
	 * @param recipientData
	 *            String
	 * @param caseNum
	 *            Case Number
	 * @param docID
	 *            Document ID
	 * @return boolean
	 * @throws CoException
	 */
	public boolean hasFormAlreadySentForCase(String recipientData,
			long caseNum, String docID) {

		Object[] result = null;

		try {
			CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
			coRequestHistoryCargo.setCaseNum(caseNum);
			coRequestHistoryCargo.setDocId(docID);

			CoRequestHistoryCargo[] historyResults = (CoRequestHistoryCargo[]) CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"CoRequestHistory", "findByCaseHistorySwPendTrig",
							coRequestHistoryCargo, null, conn);

			if (historyResults == null || historyResults.length == 0) {
				return false;// fonfirms that document was not sent
			}
			int historyResultLen = historyResults.length;
			List coReqSeqList = new ArrayList();
			String coReqSrqString = null;
			for (int i = 0; i < historyResultLen; i++) {
				coReqSeqList
				.add(String.valueOf(historyResults[i].getCoReqSeq()));
			}
			coReqSrqString = CorrespondenceServices
					.concatStringForQuery(coReqSeqList);
			Object[] objParams = { recipientData, coReqSrqString };

			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByRecipientsDataPrintSW", null,
					objParams, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			return false;
		}
		if (result == null || result.length == 0) {
			return false; // fonfirms that document was not sent
		}
		return true;
	}

	/**
	 * Method to get data from MO_OFFICES based on officeName.
	 * 
	 * @param officeName
	 *            Office Name
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getOfficeInfoByName(String officeName) throws CoException {
		Object[] result = null;
		MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
		moOfficesCargo.setOfficeName(officeName);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByOffName", moOfficesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES", 16358);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_OFFICES", 16064);
		}
		return result;
	}

	/**
	 * Method to get ed_eligibility cargo for RES_TRF_SW = 'Y'.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdEligibilityCargoForResTrfSw(long caseNum,
			String edgTraceIdString) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumTraceId", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return result;
	}

	/**
	 * Method to get ASSET_TIERS_BASELINE_DT.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgTraceIdString
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAssetTiersBaseLineDt(long caseNum,
			String edgTraceIdString) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPenalties", "findByTfCaseEdgTraceId", null, obj,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvPenalties", 16842);
		}
		return result;
	}

	/**
	 * Method to get Short Fall By Case Edg TraceId Service ReqSeqNum.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edbcRnDtStr
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getShortFallByCaseEdgTraceIdServiceReqSeqNum(
			long caseNum, String edbcRnDtStr) throws CoException {
		Object[] result = null;		
		Object[] obj = { new Long(caseNum), edbcRnDtStr };

		try {

			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerGrpShortfall", "findByCaseEdgTraceEdbcRunDt",
					null, obj, conn);


		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligSerGrpShortfall",
					16900);
		}
		return result;
	}

	/**
	 * Method to get Active Medicaid Individuals.
	 * 
	 * @param t1CaseNum
	 *            Case Number
	 * @param programCdForQuery
	 *            Program Cd
	 * @param indvs
	 *            Indivs
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getActiveMedicaidIndividuals(long t1CaseNum,
			String programCdForQuery, String indvs, Timestamp generateDt)
					throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(t1CaseNum), programCdForQuery, indvs,
				generateDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails",
					"findByProgMaMeIndvApCustomized", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VRpEligDetails", 16900);
		}
		return result;
	}

	/**
	 * This method get data from CO_NOD_REQUEST_DETAIL for case number, docId
	 * and edgTraceId.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param docId
	 *            Document ID
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getNodDetailByCaseNumDocIdEdgTraceId(long caseNum,
			String docId, long edgTraceId) throws CoException {
		Object[] result = null;
		CoNodRequestDetailCargo cargo = new CoNodRequestDetailCargo();
		cargo.setCaseNum(caseNum);
		cargo.setDocId(docId);
		cargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail", "findByCaseNumDocIdEdgTraceId",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_NOD_REQUEST_DETAIL",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_NOD_REQUEST_DETAIL",
					16817);
		}
		return result;
	}

	/**
	 * Method to get Previously Edg Active Indv.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @param indvIds
	 *            Indv IDs
	 * @param paymentEndDt
	 *            Payment End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPreviouslyEdgActiveIndv(long caseNum, long edgNum,
			String indvIds, Timestamp paymentEndDt) throws CoException {

		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(edgNum), indvIds,
				paymentEndDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails",
					"findByProgPreviouEdgAuthRecord", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VRpEligDetails", 16900);
		}
		return result;
	}


	/**
	 * Method findByCaseNumAuthCurrentRecords; gets current authorized records.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] findByCaseNumAuthCurrentRecords(long caseNum)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumAuthCurrentRecords",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCdcServiceAuth",
					16903);
		}
		return result;
	}

	/**
	 * Method gets all children for given period.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param caseNum
	 *            long
	 * @param childIdStr
	 *            String
	 * @param serviceIdStr
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCdcDetailsByPrvIdCaseNumChild(long providerID,
			long caseNum, String childIdStr, String serviceIdStr)
					throws CoException {

		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setAssignBegDt(CoDateFactory
				.getSystemTruncTimestamp());
		pmProviderCdcAssignCargo.setAssignEndDt(CoDateFactory
				.getSystemTruncTimestamp());

		Object[] obj = { pmProviderCdcAssignCargo, childIdStr, serviceIdStr };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts",
					"findByProvIdPayPrdDtChildIdAllService", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}


	/**
	 * Method to get data from ED_INDV_CDC_SERVICE_AUTH based on CASE_NUM,
	 * child_indv_id, PAY_PERIOD_BEG_DT, PAY_PERIOD_END_DT.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param childIndvId
	 *            Child Indv ID
	 * @param payPeriodBeginDt
	 *            Pay Period Begin Date
	 * @param payPeriodEndDt
	 *            Pay Period End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	protected Object[] getEdIndvCdcServiceAuthFor1381(long caseNum,
			long childIndvId, Timestamp payPeriodBeginDt,
			Timestamp payPeriodEndDt) throws CoException {
		Object[] result = null;
		EdIndvCdcServiceAuthCargo cargo = new EdIndvCdcServiceAuthCargo();
		cargo.setCaseNum(caseNum);
		cargo.setChildIndvId(childIndvId);
		cargo.setPayPeriodBegDt(payPeriodBeginDt);
		cargo.setPayPeriodEndDt(payPeriodEndDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth",
					"findByProviderIdChildidPayPrdFor1381", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_CDC_SERVICE_AUTH",
					16816);
		}
		return result;
	}

	/**
	 * Method to get data from ED_INDV_CDC_SERVICE_AUTH based on CASE_NUM,
	 * child_indv_id, PAY_PERIOD_BEG_DT, PAY_PERIOD_END_DT.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param payPeriodBeginDt
	 *            Timestamp Pay Period Begin Date
	 * @param payPeriodEndDt
	 *            Timestamp Pay Period End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvCdcServiceAuthFor805Batch(long caseNum,
			Timestamp payPeriodBeginDt, Timestamp payPeriodEndDt)
					throws CoException {
		Object[] result = null;

		EdIndvCdcServiceAuthCargo cargo = new EdIndvCdcServiceAuthCargo();
		cargo.setCaseNum(caseNum);
		cargo.setPayPeriodBegDt(payPeriodBeginDt);
		cargo.setPayPeriodEndDt(payPeriodEndDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumCurAuthPrdRecords",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_CDC_SERVICE_AUTH",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in ED_INDV_CDC_SERVICE_AUTH", 16817);
		}
		return result;
	}

	/**
	 * Method to check existing original request for 4663.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor4663(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setMiscParms(aCoObj.getMiscParameters().trim());
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor4663",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor4663",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method to check existing original request for 0289.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] checkExistingOriginalRequestFor0289(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();

		String reasonCodeList = aCoObj.getReasonCdList();

		StringTokenizer st = new StringTokenizer(reasonCodeList, "|");
		String claimId = "";
		Vector v = new Vector();
		while (st.hasMoreTokens()) {
			claimId = st.nextToken();
			v.addElement(claimId);
		}
		for (int i = 0; i < v.size(); i++) {
			claimId = (String) v.elementAt(0);
		}
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setMiscParms(claimId);
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor0289",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor0289",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method to get DC SSI Details.
	 * 
	 * @param dcSsiCargo
	 *            DcSsiCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcSsiDetails(DcSsiCargo dcSsiCargo) throws CoException {
		Object[] result = null;

		DcSsiCargo cargo = new DcSsiCargo();
		cargo.setIndvId(dcSsiCargo.getIndvId());
		cargo.setBenefitTypeCd(dcSsiCargo.getBenefitTypeCd());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcSsi",
					"findByIndvCurrRow", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SSI - getDcSsiDetails",
					16098);
		}
		return result;
	}

	/**
	 * Method gets all children based on service id and provider.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param caseNum
	 *            long Case Number
	 * @param serviceIdStr
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCdcDetailsByPrvIdCaseNumServiceId(long providerID,
			long caseNum, String serviceIdStr) throws CoException {

		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo.setCaseNum(caseNum);

		Object[] obj = { pmProviderCdcAssignCargo, serviceIdStr };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseProvIdServiceId", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method to check existing original request for 4358.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] checkExistingOriginalRequestFor4358(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();

		String reasonCodeList = aCoObj.getMiscParameters();
		StringTokenizer st = new StringTokenizer(reasonCodeList, "|");
		String claimId = "";
		Vector v = new Vector();
		while (st.hasMoreTokens()) {
			claimId = st.nextToken();
			v.addElement(claimId);
		}
		for (int i = 0; i < v.size(); i++) {
			claimId = (String) v.elementAt(0);
		}
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setMiscParms(claimId);
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor0289",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor4358",
					16098);
		}
		return finalResult;
	}

	/**
	 * Child removal not listed on DHS-0198 Method getCDCAuthRecords; gets CDC
	 * authorized records.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param serviceRsltCd
	 *            String
	 * @param curEligInd
	 *            Current Elig Ind
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	protected Object[] getCDCAuthRecords(long caseNum, String serviceRsltCd,
			String curEligInd) throws CoException {

		Object[] result = null;

		Object[] obj = { new Long(caseNum), serviceRsltCd, curEligInd };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCaseNumAuthFailCurRecords",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Changes for BiCdcManualAuth Trigger for 198 and 198-C Method
	 * getCdcManualAuthRecords; gets Bi CDC Manual authorized records.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            EDG Number
	 * @param providerID
	 *            Provider ID
	 * @param recordSeqNumStr
	 *            Record Seq Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	/**
	 * Method to check existing original request for 0556.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] checkExistingOriginalRequestFor0556(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();

		String reasonCodeList = aCoObj.getReasonCdList();
		StringTokenizer st = new StringTokenizer(reasonCodeList, "|");
		String claimId = "";

		while (st.hasMoreTokens()) {
			claimId = st.nextToken();
			break;

		}		

		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setReasonCdList(claimId);
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor0556",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor0556",
					16098);
		}
		return finalResult;
	}

	/**
	 * Method returns the data from DcCases table.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCaseInfo(long caseNum) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByCaseNum", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCases", 16849);
		}
		return result;
	}

	/**
	 * Returns the data from DcIndv table.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIndvInfo(long caseNum) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByCaseIndv", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndv", 16849);
		}
		return result;
	}

	/**
	 * Gets the client co-pay amount and reason issued.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getClientPayAndReasonIssued(long providerID,
			Timestamp generateDt) throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProviderId(providerID);
		inSdaBillingCargo.setProcessedDt(generateDt);
		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findByProvIdProcessedDt", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method added for getting client name from DcCases gets the client co-pay
	 * amount and reason issued.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param generateDt
	 *            Timestamp
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] get0920InfoFromWarrantDetail(long providerID,
			Timestamp generateDt) throws CoException {


		Object[] result = null;
		BiWarrantPaymentDetailCargo warrantDetailCargo = new BiWarrantPaymentDetailCargo();
		warrantDetailCargo.setProviderId(providerID);
		warrantDetailCargo.setIssueDt(generateDt);

		Object[] obj = { warrantDetailCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPaymentDetail", "findBySDAPaymentsByProvider",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail",
					99664);
		}
		return result;
	}

	/**
	 * Method to get SDA error count.
	 * 
	 * @param generateDt
	 *            Generate Date
	 * @param providerId
	 *            provider Id
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSdaErrorCount(Timestamp generateDt, long providerId)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo sdaCargo = new InSdaBillingCargo();

		sdaCargo.setProcessedDt(generateDt);
		sdaCargo.setProviderId(providerId);

		Object[] obj = { sdaCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalClaimsErrored", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}

		return result;
	}

	/**
	 * Method to get client name.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getClientName(long caseNum) throws CoException {

		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();
		dcCasesCargo.setCaseNum(caseNum);

		Object[] obj = { dcCasesCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByCaseNum", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCases", 99664);
		}
		return result;
	}

	/**
	 * Method to get Service type code.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getServiceTypeCd(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		BiWarrantPaymentDetailCargo biWarrantPaymentCargo = new BiWarrantPaymentDetailCargo();
		biWarrantPaymentCargo.setProviderId(providerId);
		biWarrantPaymentCargo.setIssueDt(generateDt);

		Object[] obj = { biWarrantPaymentCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPaymentDetail", "findByProviderIdIssueDt", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail",
					99664);
		}
		return result;
	}

	/**
	 * Method to get total claims received.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getTotalClaimsReceived(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProcessedDt(generateDt);
		inSdaBillingCargo.setProviderId(providerId);

		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalClaimsReceived", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method to get total claims paid.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getTotalClaimsPaid(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProcessedDt(generateDt);
		inSdaBillingCargo.setProviderId(providerId);

		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalClaimsPaid", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method to get total claims errored.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getTotalClaimsErrored(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProcessedDt(generateDt);
		inSdaBillingCargo.setProviderId(providerId);

		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalClaimsErrored", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method to get total Copay amount.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */

	public Object[] getTotalCopayAmt(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProcessedDt(generateDt);
		inSdaBillingCargo.setProviderId(providerId);

		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalCopayAmt", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method to get total Amount.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @param generateDt
	 *            Generate Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getTotalAmount(long providerId, Timestamp generateDt)
			throws CoException {

		Object[] result = null;
		InSdaBillingCargo inSdaBillingCargo = new InSdaBillingCargo();
		inSdaBillingCargo.setProcessedDt(generateDt);
		inSdaBillingCargo.setProviderId(providerId);

		Object[] obj = { inSdaBillingCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSdaBilling", "findTotalAmount", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSdaBilling", 99664);
		}
		return result;
	}

	/**
	 * Method to get Sda Assignment Records.
	 * 
	 * @param pmProviderSdaAsgnmntsCargo
	 *            PmProviderSdaAsgnmntsCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSdaAssignmentRecords(
			PmProviderSdaAsgnmntsCargo pmProviderSdaAsgnmntsCargo)
					throws CoException {

		Object[] result = null;
		Object[] obj = { pmProviderSdaAsgnmntsCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderSdaAsgnmnts", "findByCaseIndvProvSeqNum", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderSdaAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method to get Sda Authorization Records.
	 * 
	 * @param vRpEligDetailsCargo
	 *            VRpEligDetailsCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSdaAuthorizationRecords(
			VRpEligDetailsCargo vRpEligDetailsCargo) throws CoException {

		Object[] result = null;
		Object[] obj = { vRpEligDetailsCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "findByCaseIndvProgAssistTypCd", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VRpEligDetails", 99664);
		}
		return result;
	}

	/**
	 * Method returns the list of Individuals for whom DHS 4639 has to be
	 * generated.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getIndividualsForDHS4639(long caseNum) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findCaseStatusBySSN", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndv", 16849);
		}
		return result;
	}

	/**
	 * Method to get Co ReqR ecipient Record.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param coRptSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCoReqRecipientRecord(long coReqSeq, long coRptSeq)
			throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		coRequestRecipientsCargo.setCoRptSeq(coRptSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByReqSeqRptSeq",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS",
					16825);
		}
		return result;
	}

	/**
	 * Method returns the records SERVICE_REQ_SEQ_NUM AND CASE_NUM.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param serSerReqSeqNum
	 *            long Service Req Sequence Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getRecordsForSerCaseAndSeqNum(long caseNum,
			long serSerReqSeqNum) throws CoException {
		Object[] result = null;
		Object[] obj = new Object[2];
		String serReqSeq = String.valueOf(serSerReqSeqNum);
		obj[0] = new Long(caseNum);
		obj[1] = serReqSeq;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSerServiceRequest", "findByCaseNumSeqNum", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSerServiceRequest",
					16849);
		}
		return result;
	}

	// BRGUS00111056 - NaredlaS
	/**
	 * Method to check existing original request for 1605 and 1419.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor16051419(
			COCorrespondence aCoObj) throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());

		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor16051419",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get data from BI_CDC_IBILLING based on REQ_SEQ.
	 * 
	 * @param reqSeq
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	protected Object[] getBiCdcBillingByReqSeq(String reqSeq)
			throws CoException {
		Object[] result = null;
		Object[] obj = { reqSeq };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiCdcIbilling", "findByReqSeq", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiCdcIbilling", 16911);
		}
		return result;
	}

	// BRGUS00109401 - NaredlaS
	/**
	 * Method to get the data from BI_WARRANT_PAYMENT_DETAIL and
	 * BI_WARRANT_PAYEE_DETAIL.
	 * 
	 * @param caseNum
	 *            String
	 * @param statusBeginDate
	 *            Status Begin Date
	 * @param statusEndDate
	 *            Status End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getVBiWarrantDetailsForLIHEAP(long caseNum,
			Timestamp statusBeginDate, Timestamp statusEndDate)
					throws CoException {
		Object[] result = null;

		BiWarrantPaymentDetailCargo biWarrantPaymentCargo = new BiWarrantPaymentDetailCargo();
		biWarrantPaymentCargo.setCaseNum(caseNum);
		biWarrantPaymentCargo.setPaymentBeginDt(statusBeginDate);
		biWarrantPaymentCargo.setPaymentEndDt(statusEndDate);

		Object[] obj = { biWarrantPaymentCargo };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPaymentDetail",
					"findByCaseNumStatusBeginEndDtForLIHEAP", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail",
					99664);
		}
		return result;
	}

	// BRGUS00107880 - Srinivas - Begin
	/**
	 * Method to get the individual names.
	 * 
	 * @param individuals
	 *            Individuals
	 * @return indvNames
	 * @throws CoException
	 * 
	 */

	public Map findIndvNames(long[] individuals) throws CoException {
		DcIndvCollection indvColl = null;
		DcIndvCargo[] indvCargos = null;
		Map indvNames = new HashMap();
		int fetchedRecordsLength = 0;

		try {

			Object[] collParam = new Object[1];
			collParam[0] = individuals;

			indvColl = new DcIndvCollection(getConnection());

			if (individuals != null && individuals.length > 0) {
				indvColl.setSelectSize(3);				
				indvCargos = (DcIndvCargo[]) indvColl.select(
						"findByChildIndvIdList", collParam);

				// get the length of the first 100 records fetch
				if (indvCargos != null) {
					fetchedRecordsLength = indvCargos.length;
				}

				// loop through each 100 records
				while (fetchedRecordsLength > 0) {

					for (int i = 0; i < fetchedRecordsLength; i++) {
						indvNames.put(new Long(indvCargos[i].getIndvId()),
								indvCargos[i].getLastName());
					}

					// Get Next 100 records if any
					indvCargos = (DcIndvCargo[]) indvColl
							.next("findByChildIndvIdList");

					// get length for next 100 records
					if (indvCargos != null) {
						fetchedRecordsLength = indvCargos.length;
					} else {
						fetchedRecordsLength = 0;
					}
				}

			}

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findIndvNames ", 99664);
		}
		return indvNames;
	}

	// BRGUS00107880 - Srinivas - End

	/**
	 * Method gets all children and provider details.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param serviceIdStr
	 *            Serviice ID
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getAssignmentsDetailByCaseServiceId(long caseNum,
			String serviceIdStr) {

		Object[] result = null;

		Object[] obj = { new Long(caseNum), serviceIdStr };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseNumAllServiceId", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method gets last EDBC run records for the EDG
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long EDG Number
	 * @param paymentBegDt
	 *            Timestamp
	 * @param edbcRunDt
	 *            Timestamp
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getLastEDBCEdRecord(long caseNum, long edgNum,
			Timestamp paymentBegDt, Timestamp edbcRunDt) {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCargo.setPaymentBegDt(paymentBegDt);
		edEligibilityCargo.setEdbcRunDt(edbcRunDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseEdgForLastEDBCRun",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * The method to get data from ED_INDV_PENALITIES based on TRACE_ID AND CASE
	 * NUMBER.
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPenalitiesDate(long caseNumber, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdIndvPenaltiesCargo edIndvPenaltiesCargo = new EdIndvPenaltiesCargo();
		edIndvPenaltiesCargo.setCaseNum(caseNumber);
		edIndvPenaltiesCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPenalties", "findByCaseEdgIndvPenalties",
					edIndvPenaltiesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PENALITIES", 24168);
		}
		return result;
	}

	/**
	 * The method to get data from ELIGIBILITY_BEGIN_DT based on TRACE_ID AND
	 * CASE NUMBER for LOC56.
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param edgTraceId
	 *            Edg Trace ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEligBeginDtForLoc56(long caseNumber, long edgTraceId)
			throws CoException {
		Object[] result = null;
		EdIndvLocEligibilityCargo edIndvLocEligibilityCargo = new EdIndvLocEligibilityCargo();		
		edIndvLocEligibilityCargo.setCaseNum(caseNumber);
		edIndvLocEligibilityCargo.setEdgTraceId(edgTraceId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvLocEligibility", "findByCaseTraceIdLoc",
					edIndvLocEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_LOC_ELIGIBILITY",
					24205);
		}
		return result;
	}

	/**
	 * Method gets all N records for corres SER A records
	 * 
	 * @param caseNum
	 *            Case Numbers
	 * @param serviceIdStr
	 *            Service ID
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getAllNRecordsForARecords(long caseNum, String serviceIdStr) {

		Object[] result = null;

		Object[] obj = { new Long(caseNum), serviceIdStr };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligSerServiceAuth", "findByCaseNumSerReqSeq", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method is to find existing trigger for the case.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param docID
	 *            Doc ID
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getExistingTrigger(long caseNum, String docID) {

		Object[] result = null;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setCaseNum(caseNum);
		coRequestHistoryCargo.setDocId(docID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByCaseHistorySwPendTrig",
					coRequestHistoryCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method gets all Claim information for the individual.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param indvId
	 *            Individual ID
	 * @param firstDay
	 *            First Day
	 * @param lastDay
	 *            Last Day
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getBvClaimRecoveryResults(long caseNum, long indvId,
			Timestamp firstDay, Timestamp lastDay) {

		Object[] result = null;
		Object[] obj = { new Long(caseNum), new Long(indvId), firstDay, lastDay };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimRecovery", "findByCaseIndvId", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Gets all Claim information for the individual by Receipt Rec Id.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param receiptRecId
	 *            String
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getBvClaimRecoveryResultsForRecId(long caseNum,
			String receiptRecId) {

		Object[] result = null;
		Object[] obj = { new Long(caseNum), receiptRecId };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimRecovery", "findByCaseReceiptRecId", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Gets all MPS closed assignments for case and provider.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param providerID
	 *            long Provider ID
	 * @param providerServiceSeqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getMpsClosedCDCAssignments(long caseNum, long providerID,
			long providerServiceSeqNum) throws CoException {
		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setProviderId(providerID);
		pmProviderCdcAssignCargo
		.setProviderServiceSeqNum(providerServiceSeqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseProviderServiceSeqNum",
					pmProviderCdcAssignCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	/**
	 * Method gets SER BI Issuance trigger cargo.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Edg Number
	 * @param providerId
	 *            long Provider ID
	 * @param serInvoiceNum
	 *            String SER Invoice Number
	 * @param serviceReqSeqNum
	 *            long Service Req Seq Numnber
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getBiIssuanceTriggerCargo(long caseNum, long edgNum,
			long providerId, String serInvoiceNum, long serviceReqSeqNum) {
		Object[] result = null;
		BiIssuanceTriggerCargo cargo = new BiIssuanceTriggerCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		cargo.setProviderId(providerId);
		cargo.setSerInvoiceNum(serInvoiceNum);
		cargo.setServiceReqSeqNum(serviceReqSeqNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiIssuanceTrigger", "findByCaseProvEdgSERInvoiceRecSeq",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method to get all ended reason messages list.
	 * 
	 * @param languageCode
	 *            String Language Codes
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getAllEndedReasonMessages(String languageCode)
			throws CoException {
		CoReasonTextCargo coRTextCargo = new CoReasonTextCargo();
		coRTextCargo.setLanguageCd(languageCode);
		Object[] result = null;
		// get all ended CO reason messages
		try {
			return CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoReasonText",
					"findAllEndedReasonMessages", coRTextCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	// BRGUS00118303 - NaredlaS - Added this new method
	/**
	 * This method returns the EdIndvPraDtls data relevant for the IndvId.
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEdIndvPraApprovedDetailsFor4586(long indvId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdIndvPraDtlsCargo cargo = new EdIndvPraDtlsCargo();
		cargo.setIndvId(indvId);
		cargo.setCaseNum(caseNum);
		cargo.setPraStatus("APPROVED");
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvPraDtls", "findByCaseNumIndvIdForAP", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_PRA_DTLS", 16649);
		}
		return result;
	}

	/**
	 * Method to get Program overriden results.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edbcRunDt
	 *            EDBC Run Date
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getEligRecordForEdgOverride(long caseNum,
			Timestamp edbcRunDt) {
		Object[] result = null;
		EdEligibilityCargo eligCargo = new EdEligibilityCargo();
		eligCargo.setCaseNum(caseNum);
		eligCargo.setEdbcRunDt(edbcRunDt);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByOverrideSw", eligCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method to get NodRequestDetail results
	 * 
	 * @param coReqSeq
	 *            CO Req Seq
	 * @param caseNum
	 *            Case Number
	 * @param edgNumList
	 *            Edg Numbers List
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] findByCoReqSeqCaseEdgs(long coReqSeq, long caseNum,
			String edgNumList) {
		Object[] result = null;
		Object[] obj = { new Long(coReqSeq), new Long(caseNum), edgNumList };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNodRequestDetail", "findByCoReqSeqCaseEdgs", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	// thatiparthis BRGUS00118955(CodeChangeActivity)( DHS-3503-SER Verification
	// (CR 20974)) Begin - 07/10/2008
	/**
	 * Method to get data from VCL based on CASE_NUM Ans Prg .
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @param prgfinder
	 *            Program Finder
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseVCLDetailsBasedOnPrg(long caseNumber,
			String prgfinder) throws CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		edVerificationCargo.setCaseNum(caseNumber);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", prgfinder, edVerificationCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for ED_VERIFICATION_CHECKLIST", 16347);
		}		
		return result;
	}

	// thatiparthis BRGUS00118955(CodeChangeActivity)( DHS-3503-SER Verification
	// (CR 20974)) End

	/**
	 * Method to check for Multiple reprints.
	 * 
	 * @param cargoDetail
	 *            CoRequestHistoryDetailCargo
	 * @return boolean
	 */
	protected boolean checkMultipleReprints(
			CoRequestHistoryDetailCargo cargoDetail) {
		try {
			CoRequestHistoryDetailCargo[] resultDetail = (CoRequestHistoryDetailCargo[]) CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"CoRequestHistoryDetail",
							"findByReqSeqNullPrintDate", cargoDetail, null,
							conn);
			if (resultDetail != null && resultDetail.length > 1) {
				return true;
			}
		} catch (Exception ex) {
			CoDebugger.debugException(
					"Exception while checking multiple reprints", ex);
		}
		return false;
	}

	/**
	 * Method to get all Pending Authorization.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getPendingAuthRecords(long caseNum) {
		Object[] result = null;
		Object[] obj = { new Long(caseNum) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth", "findByCdcServiceElig", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	// BRGUS00137568 - NaredlaS - DHS - 1099
	/**
	 * Method to get data from PM_PROVIDER_LIC_ADDRESS based on LICENSEE SEQ
	 * NUM.
	 * 
	 * @param licenseeSeqNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPMProviderLICAddress(long licenseeSeqNum)
			throws CoException {
		Object[] result = null;
		PmProviderLicAddressCargo pmProviderLicAddressCargo = new PmProviderLicAddressCargo();
		pmProviderLicAddressCargo.setLicenseeSeqNum(licenseeSeqNum);

		pmProviderLicAddressCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderLicAddressCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLicAddress", "findByLicenseeSeqNum",
					pmProviderLicAddressCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDER_LIC_ADDRESS",
					163101);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in PM_PROVIDER_LIC_ADDRESS", 160351);
		}
		return result;
	}

	/**
	 * Method to get data from PM_PROVIDER_LICENSEE_OWNER NAME based on LICENSEE
	 * SEQ NUM.
	 * 
	 * @param licenseeSeqNum
	 *            Licensee Seq Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPMProviderLICName(long licenseeSeqNum)
			throws CoException {
		Object[] result = null;
		PmProviderLicenseeOwnerCargo pmProviderLicenseeOwnerCargo = new PmProviderLicenseeOwnerCargo();
		pmProviderLicenseeOwnerCargo.setLicenseeSeqNum(licenseeSeqNum);

		pmProviderLicenseeOwnerCargo
		.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderLicenseeOwnerCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLicenseeOwner", "findByLicenseeSeqNum",
					pmProviderLicenseeOwnerCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for PM_PROVIDER_LICENSEE_OWNER", 163101);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in PM_PROVIDER_LICENSEE_OWNER", 160351);
		}
		return result;
	}

	/**
	 * Method to get Pm Provider Edge Assignments Results.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderEdgeAssignmentsResults(long caseNum)
			throws CoException {
		Object[] result = null;
		PmProviderEdgAsgnmntsCargo cargo = new PmProviderEdgAsgnmntsCargo();
		cargo.setCaseNum(caseNum);
		cargo.setAssignEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderEdgAsgnmnts", "findByNumber", cargo, null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method to get Auth Rep record for MA LTC EDGs.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param allEdgStr
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws Exception
	 */
	public Object[] findByCaseAltPayeeSwAllEdgs(long caseNum, String allEdgStr) throws CoException {
		Object[] obj = { new Long(caseNum), allEdgStr };
		Object[] result = null;
		try {
			return CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcPayee",
					"findByCaseAltPayeeSwAllEdgs", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	// BRGUS00160385- Naga-PM Provider Services DB changes
	/**
	 * Method to get Provider ID SSN.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] findByProviderIdSSN(long providerID) throws CoException {
		Object[] result = null;
		VPmProvPayrollCargo vpmProviderServicesCargo = new VPmProvPayrollCargo();
		vpmProviderServicesCargo.setT1ProviderId(providerID);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VPmProvPayroll", "findByProviderIdSSN",
					vpmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VPmProvPayroll", 99665);
		}
		return result;
	}

	/**
	 * Method to get Physical or Mailing Address for a Case Number from
	 * DC_CASE_ADDRESSES.
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPhMaCaseAddresseeAddress(long caseNumber)
			throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(caseNumber);
		dcCaseAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcCaseAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByPAMAAAddress",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16311);
		}
		return result;
	}

	// BRGUS00143936 - thatiparthis- CR# 20152 - Gets Records for generating
	// DHS-0509
	/**
	 * Method to get Bi Warrant Details For ENESER NOTICE.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param statusBeginDate
	 *            Status Begin Date
	 * @param statusEndDate
	 *            Status End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getVBiWarrantDetailsForENESERNOTICE(long caseNum,
			Timestamp statusBeginDate, Timestamp statusEndDate)
					throws CoException {
		Object[] result = null;
		VBiWarrantDetailCargo vBiWarrantDetailCargo = new VBiWarrantDetailCargo();
		vBiWarrantDetailCargo.setCaseNum(caseNum);
		Object[] obj = { statusBeginDate, statusEndDate, vBiWarrantDetailCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantDetail", "findENESERNOTICEStatusCd", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail",
					99664);
		}
		return result;
	}

	// WR #BRGUS00128807 for MICAP Cases Indentification based on MA_FORM_CD
	/**
	 * Method to get MICAP Case Number .
	 * 
	 * @param caseNumber
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getMicapCaseAppNumber(long caseNumber) {
		Object[] result = null;
		DcCaseProgramIndvCargo dcCaseProgramIndvCargo = new DcCaseProgramIndvCargo();
		dcCaseProgramIndvCargo.setCaseNum(caseNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgramIndv", "findByCOCaseNumMaFormCd",
					dcCaseProgramIndvCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Method get Last run EDBC records.
	 * 
	 * @param t1CaseNum
	 *            Case Number
	 * @param edgNum
	 *            Edg Number
	 * @param programCode
	 *            Program Cd
	 * @param indvs
	 *            String
	 * @param edbcRunDt
	 *            EDBC Run Date
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getLastRunRecordsForIndvs(long t1CaseNum, String edgNum,
			String programCode, String indvs, Timestamp edbcRunDt) {
		Object[] result = null;
		Object[] obj = { new Long(t1CaseNum), edgNum, programCode, indvs,
				edbcRunDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VRpEligDetails", "getLastRunRecordsForIndvs", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	// BRGUS00146822 - NaredlaS
	/**
	 * Method to get Ed Case Recert Dates For Eligible 1046FS.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdCaseRecertDatesForEligible1046FS(long caseNum)
			throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum) };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseFor1046", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdCaseRecertDates ", 16098);
		}
		return finalResult;
	}

	/**
	 * Method to get Ed Case Recert Dates For Eligible 2240AFS
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param nextMonthLastDay
	 *            Timestamp Next Month Last Day
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdCaseRecertDatesForEligible2240AFS(long caseNum,
			Timestamp nextMonthLastDay) throws CoException {
		Object[] finalResult = null;
		Object[] obj = { new Long(caseNum), nextMonthLastDay };

		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseFor2240A", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - EdCaseRecertDates ", 16098);
		}
		return finalResult;
	}

	// BRGUS00148607 - NaredlaS
	/**
	 * Method to check existing original request for 1496.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor1496(COCorrespondence aCoObj)
			throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setProviderId(aCoObj.getProviderId());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByExistingOriginalRequestFor1496",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest - checkExistingOriginalRequestFor1496",
					16098);
		}
		return finalResult;
	}

	// BRGUS00139711 - NaredlaS - 849 from View Pending
	/**
	 * Method to check existing original request for 0849 - SER View Pending.
	 * 
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] checkExistingOriginalRequestFor0849ForSERViewPending(
			COCorrespondence aCoObj) throws CoException {
		Object[] finalResult = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		vCoRequestCargo.setCaseAppNum(aCoObj.getCaseAppNumber());
		vCoRequestCargo.setRequestTypeCd(aCoObj.getCaseAppFlag());
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());
		vCoRequestCargo.setReasonCdList(aCoObj.getReasonCdList());

		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		try {
			finalResult = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest",
					"findByExistingOriginalRequestFor0849ForSERViewPending",
					vCoRequestCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoRequest "
							+ "- checkExistingOriginalRequestFor0849ForSERViewPending ",
							16098);
		}
		return finalResult;
	}

	/**
	 * Method to get HOH info from DC_HEAD_OF_HOUSEHOLD based on CASE_NUM.
	 * 
	 * @param caseNumbers
	 *            Case Numbers
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getHoHIndividuals(long[] caseNumbers) throws CoException {
		Object[] result = null;
		Object[] obj = { caseNumbers };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcIndvCaseHoh", "findByCaseNums", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_DC_INDV_CASE_HOH", 16795);
		}

		return result;
	}

	/**
	 * Method to get data from DC_CASE_ADDRESSES based on CASE_NUM.
	 * 
	 * @param caseNumbers
	 *            Case Numbers
	 * @param addressTypeCd
	 *            Address Type
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCaseMailingAddress(long[] caseNumbers,
			String addressTypeCd) throws CoException {

		Object[] result = null;
		Object[] obj = { caseNumbers, CoDateFactory.getTimestamp(),
				addressTypeCd };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByCaseNumbersForMAPA", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16310);
		}

		return result;
	}

	// BRGUS00149020 - NaredlaS
	/**
	 * Method to get In Services Status Details based on indv id and status ind.
	 * 
	 * @param indvId
	 *            Individual ID
	 * @param statusInd
	 *            Status Indicator
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getInServicesStatusDetailsForIndv(long indvId,
			String statusInd) throws CoException {
		Object[] result = null;
		InServicesStatusCargo inServicesStatusCargo = new InServicesStatusCargo();
		inServicesStatusCargo.setIndvId(indvId);
		Object[] obj = { statusInd, inServicesStatusCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InServicesStatus", "findByIndvIdSrvsPrgCdStatusInd", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InServicesStatus", 16374);
		}
		return result;
	}

	// BRGUS00155374 - NaredlaS
	/**
	 * Method to get Bv Claims based on caseNum, edg numbers and status cd.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            EDG Number
	 * @param statusCd
	 *            Status CD
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getBvClaimByCaseNumEdgNumstatusCd(long caseNum,
			long edgNum, String statusCd) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), statusCd, new Long(0), "",
				new Long(edgNum) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBvClaim",
					"findByCaseCombination", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaim", 16908);
		}
		return result;
	}

	// BRGUS00155865-gantan
	/**
	 * Method to get all provider ids .
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param serviceId
	 *            Service ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getProviderCDCAssignments(long caseNum, long serviceId)
			throws CoException {
		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAssignCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAssignCargo.setCaseNum(caseNum);
		pmProviderCdcAssignCargo.setServiceId(serviceId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseAndServiceId",
					pmProviderCdcAssignCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcAsgnmnts",
					99664);
		}
		return result;
	}

	// BRGUS00150766 - NaredlaS
	/**
	 * Method to get data from ED_INDV_CDC_SERVICE_AUTH based on CASE_NUM,
	 * INDV_ID and SERVICE_RUN_DT.
	 * 
	 * @param caseNum
	 *            long Case Numbers
	 * @param indvIds
	 *            Individual IDs
	 * @param servRunDt
	 *            Timestamp
	 * @return Object[] - Ed Indv Cdc ServiceAuth information
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvCdcServiceAuthByCaseServRunDt(long caseNum,
			long[] indvIds, Timestamp servRunDt) throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), indvIds, servRunDt };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvCdcServiceAuth",
					"findByCaseNumEdNumServRunDtIndvIds", null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCdcServiceAuth",
					16901);
		}
		return result;
	}

	// BRGUS00130713 - NaredlaS

	/**
	 * Method to get data from DC_CASUALTY_INFORMATION based on CASE_NUM,
	 * INDV_ID S.
	 * 
	 * @param casualtySeqNums
	 *            long[] - casualty sequence numbers
	 * @return Object[] - dc casualty information
	 * @throws CoException
	 * 
	 */
	public Object[] getDcCasualtyInformation(long[] casualtySeqNums)
			throws CoException {

		Object[] result = null;
		Object[] obj = { casualtySeqNums };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"DcCasualtyInformation", "findByCasualtySeqNum", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASUALTY_INFORMATION ",
					16310);
		}

		return result;
	}






	/**
	 * Method to get individual details from DC_INDV based on INDV_ID.
	 * 
	 * @param indvs
	 *            long[] - individuals
	 * @return Object[] - individual details
	 * @throws CoException
	 * 
	 */
	public Object[] getIndividualDetails(long[] indvs) throws CoException {
		Object[] result = null;
		Object[] obj = { indvs };
		try {
			DcIndvCargo cargo = new DcIndvCargo();
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByIndvIdList", cargo, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV ", 16795);
		}

		return result;
	}

	// BRGUS00164636 - GANTAN
	/**
	 * Method to get data from DC_3RD_PR_ELIGIBLE_CLIENTS based on Sequence
	 * numbers.
	 * 
	 * @param indvIds
	 *            long[] indvid's
	 * @param seqNum
	 *            long sequence numbers
	 * @param caseNum
	 *            long casenumber
	 * @return Object[] dc3preligible clients information
	 * @throws CoException
	 * 
	 */
	public Object[] getDc3RDEligClients(long[] indvIds, long seqNum,
			long caseNum) throws CoException {

		Object[] result = null;
		Object[] obj = { indvIds, new Long(seqNum), new Long(caseNum) };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.customnonfinancial",
					"Dc3RdPrEligibleClients", "findBy3RdEligClientsSeqNum",
					null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_3RD_PR_ELIGIBLE_CLIENTS ", 16794);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_3RD_PR_ELIGIBLE_CLIENTS", 16795);
		}
		return result;
	}

	// BRGUS00166420 - NaredlaS
	/**
	 * This method returns the records with updated process sw.
	 * 
	 * @param caseNum
	 *            Case Number
	 * @param edgNum
	 *            EDG Number
	 * @param paymonth
	 *            Pay Month
	 * @param edbcRunDate
	 *            EDBC Run Date
	 * @return Object[] - Process Sw Record Update Information
	 * @throws CoException
	 */
	public Object[] getProcessSwUpdateRecord(long caseNum, long edgNum,
			String paymonth, Timestamp edbcRunDate) throws CoException {
		Object[] result = null;
		VCoNodRequestCargo vCoNodRequestCargo = new VCoNodRequestCargo();

		vCoNodRequestCargo.setT1CaseNum(caseNum);
		vCoNodRequestCargo.setT1EdgNum(edgNum);
		vCoNodRequestCargo.setPaymonth(paymonth);
		vCoNodRequestCargo.setGenerateDt(edbcRunDate);

		Object[] obj = { vCoNodRequestCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoNodRequest", "findByForProcessSwRecordUpdate", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_NOD_REQUEST_DETAIL",
					16816);
		}
		return result;
	}

	public Object[] getProcessSwUpdateRecordNCH001(long caseNum, long edgNum,
			String paymonth, Timestamp edbcRunDate) throws CoException {
		Object[] result = null;
		VCoNodRequestCargo vCoNodRequestCargo = new VCoNodRequestCargo();

		vCoNodRequestCargo.setT1CaseNum(caseNum);
		vCoNodRequestCargo.setT1EdgNum(edgNum);
		vCoNodRequestCargo.setPaymonth(paymonth);
		vCoNodRequestCargo.setGenerateDt(edbcRunDate);

		Object[] obj = { vCoNodRequestCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoNodRequest", "findByForProcessSwRecordUpdateNCH001", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_NOD_REQUEST_DETAIL",
					16816);
		}
		return result;
	}
	/**
	 * This method returns the records with updated process sw.
	 * 
	 * @param caseNum
	 *            long Case Number
	 * @param edgNum
	 *            long Case Number
	 * @param paymonth
	 *            String Pay Month
	 * @param edbcRunDate
	 *            Timestamp EDBC Run Date
	 * @return Object[] - Process Sw Record Update Information
	 * @throws CoException
	 */
	public Object[] is1605Pending(long caseNum, long edgNum, String paymonth,
			Timestamp edbcRunDate) throws CoException {
		Object[] result = null;
		VCoNodRequestCargo vCoNodRequestCargo = new VCoNodRequestCargo();

		vCoNodRequestCargo.setT1CaseNum(caseNum);
		vCoNodRequestCargo.setT1EdgNum(edgNum);
		vCoNodRequestCargo.setPaymonth(paymonth);
		vCoNodRequestCargo.setGenerateDt(edbcRunDate);

		Object[] obj = { vCoNodRequestCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoNodRequest", "findByForProcessSwRecordUpdate", null,
					obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CO_NOD_REQUEST_DETAIL",
					16816);
		}
		return result;
	}

	/**
	 * Method to get data from PmProviderAddress based on providerId and Address
	 * Type.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @param addrTypeCd
	 *            Address Type
	 * @return Object[] array - Provider Id Adddress Type Cd information
	 * @throws CoException
	 */
	public Object[] getPmProviderAddressByType(long providerID,
			String addrTypeCd) throws CoException {

		Object[] result = null;
		PmProviderAddressesCargo pmProviderAddressesCargo = new PmProviderAddressesCargo();
		pmProviderAddressesCargo.setProviderId(providerID);
		pmProviderAddressesCargo.setAddrStTypeCd(addrTypeCd);
		pmProviderAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderAddresses", "findByProviderIdAddrTypeCd",
					pmProviderAddressesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	/**
	 * Method to get data from ProviderSerSeqNum based on providerId, Individual
	 * ID and case number.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @param indvId
	 *            long individual id
	 * @param caseNum
	 *            long Case Number
	 * @return Object[] Case Provider Indv Id Information
	 * @throws CoException
	 */
	public Object[] getProviderSerSeqNum(long providerId, long indvId,
			long caseNum) throws CoException {
		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAsgnmntsCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAsgnmntsCargo.setProviderId(providerId);
		pmProviderCdcAsgnmntsCargo.setChildIndvId(indvId);
		pmProviderCdcAsgnmntsCargo.setCaseNum(caseNum);
		pmProviderCdcAsgnmntsCargo.setAssignBegDt(CoDateFactory.getTimestamp());
		pmProviderCdcAsgnmntsCargo.setAssignEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseProviderIndvId",
					pmProviderCdcAsgnmntsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCDCAsgnmnts",
					99665);
		}
		return result;
	}

	/**
	 * Method to get data from PrvSeqNumfromWarrants based on providerId, case
	 * Number, start Date and end Date.
	 * 
	 * @param providerId
	 *            - providerId
	 * @param caseNum
	 *            - Case Number
	 * @param startDt
	 *            - Start Date
	 * @param endDt
	 *            - End Date
	 * @return Object[] - Warrant Detail Cargo
	 * @throws CoException
	 * 
	 */
	public Object[] getPrvSeqNumfromWarrants(long providerId, long caseNum,
			Timestamp startDt, Timestamp endDt) throws CoException {
		Object[] result = null;
		BiWarrantPaymentDetailCargo warrantDetailCargo = new BiWarrantPaymentDetailCargo();
		warrantDetailCargo.setProviderId(providerId);
		warrantDetailCargo.setCaseNum(caseNum);
		warrantDetailCargo.setPaymentBeginDt(startDt);
		warrantDetailCargo.setPaymentEndDt(endDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPaymentDetail", "findByCaseProviderIdwithDates",
					warrantDetailCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for BiWarrantPaymentDetailCargo", 99665);
		}
		return result;
	}

	/**
	 * Method to get data from PrvSeqNumbyCase based on providerId and caseNum
	 * and year.
	 * 
	 * @param providerId
	 *            - providerId
	 * @param caseNum
	 *            - Case Number
	 * @param year
	 *            - Year
	 * @return Object[] - warrantDetailCargo
	 * @throws CoException
	 * 
	 */
	public Object[] getPrvSeqNumbyCase(long providerId, long caseNum, int year)
			throws CoException {
		Object[] result = null;
		VBiWarrantDetailCargo warrantDetailCargo = new VBiWarrantDetailCargo();
		warrantDetailCargo.setT1ProviderId(providerId);
		warrantDetailCargo.setCaseNum(caseNum);
		warrantDetailCargo.setPaymentBeginDt(CorrespondenceServices
				.getTimestamp(1, 1, year));
		warrantDetailCargo.setPaymentEndDt(CorrespondenceServices.getTimestamp(
				12, 31, year));

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VBiWarrantDetail", "findPrvSeqNumByCaseProviderId",
					warrantDetailCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for BiWarrantPaymentDetailCargo", 99665);
		}
		return result;
	}

	// BRGUS00169077 - Thatiparthis - Begin
	/**
	 * Method to get data from DcMedicalDeduction based on INDV_ID and SEQ_UM.
	 * 
	 * @param individualID
	 *            long - individual id
	 * @param seqnum
	 *            - medical bill sequence number
	 * @return Object[] - dc medical deductions cargos
	 * @throws CoException
	 * 
	 */
	public Object[] getDcMedicalDeductionPaidForIndvID(long individualID,
			long seqnum) throws CoException {
		Object[] result = null;
		DcMedicalDeductionsCargo dcMedicalDeductionsCargo = new DcMedicalDeductionsCargo();
		dcMedicalDeductionsCargo.setIndvId(individualID);
		dcMedicalDeductionsCargo.setSequenceNum(seqnum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicalDeductions", "findByPaidForIndvID",
					dcMedicalDeductionsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcMedicalDeductions",
					16319);
		}
		return result;
	}

	// Added By saranyk for CO PMS changes.
	/**
	 * Method to retrive PmProviderServices based on ServiceType.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @param serviceType
	 *            Service Type
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderServicesbyServiceType(long providerID,
			String serviceType) throws CoException {
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderId(providerID);
		pmProviderServicesCargo.setServiceTypeCd(serviceType);
		pmProviderServicesCargo.setServiceBeginDt(CoDateFactory.getTimestamp());
		pmProviderServicesCargo.setServiceEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findByProviderIdServTypeCd",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	// thatiparthis - WR# BRGUS00160249 - HK Presumptive Eligibility
	/**
	 * Method to retrive EdEligibility based on KPresumptive.
	 * 
	 * @param caseNum
	 *            long - Case Number
	 * @param edgNum
	 *            String - Edg number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityByHKPresumptive(long caseNum, String edgNum)
			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgNum };

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findByHKPresumptiveElig", null,
							obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ", 16098);
		}
		return result;
	}

	/**
	 * Method to get data from MO_EMPLOYEE_FACILITITES based on EMP_ID.
	 * 
	 * @param empID
	 *            long Employee ID
	 * @return Object[] moEmployeeFacilitiesCargos
	 * @throws CoException
	 * 
	 */
	public Object[] getMoEmployeeFacilitiesDetails(long empID)
			throws CoException {
		Object[] result = null;
		MoEmployeeFacilitiesCargo moEmployeeFacilitiesCargo = new MoEmployeeFacilitiesCargo();
		moEmployeeFacilitiesCargo.setEmpId(empID);
		moEmployeeFacilitiesCargo.setFacilityBeginDt(CoDateFactory
				.getTimestamp());
		moEmployeeFacilitiesCargo
		.setFacilityEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeFacilities", "findByEmployeeId",
					moEmployeeFacilitiesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEE_FACILITITES",
					16355);
		}

		return result;
	}

	/**
	 * The method to get data from DC_ADDRESS_BOOK based on PROVIDER_ID.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @return Object[] DcAddressBookCargos
	 * @throws CoException
	 * 
	 */
	public Object[] getDcAddressBookDetails(long providerId) throws CoException {
		Object[] result = null;
		DcAddressBookCargo dcAddressBookCargo = new DcAddressBookCargo();
		dcAddressBookCargo.setCompanyId(providerId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcAddressBook", "findByCompanyID", dcAddressBookCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for DC_ADDRESS_BOOK", 16625);
		}
		return result;
	}

	// thatiparthis -- BRGUS00177119
	/**
	 * Method to get data from Pm_Provider_Edg_Asgnmnts based on cargo.
	 * 
	 * @param cargo
	 *            VBiWarrantDetailCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDHS171AssBegDt(VBiWarrantDetailCargo cargo)
			throws CoException {
		Object[] result = null;
		Long caseNum = new Long(cargo.getCaseNum());
		Long providerId = new Long(cargo.getT3ProviderId());
		Long edgNum = new Long(cargo.getEdgNum());
		String energyCashVenTyCd = cargo.getEnergyCashVendorTypeCd();
		java.sql.Timestamp payBegDt = cargo.getPaymentBeginDt();
		java.sql.Timestamp payEndDt = cargo.getPaymentEndDt();

		Object[] params = { caseNum, providerId, edgNum, energyCashVenTyCd,
				payBegDt, payEndDt };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderEdgAsgnmnts", "findByDHS171AssBegDT", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Pm_Provider_Edg_Asgnmnts",
					16310);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in Pm_Provider_Edg_Asgnmnts", 16035);
		}
		return result;
	}

	// BRGUS00180582 - NaredlaS
	/**
	 * Method to retrieve Provider Service Sequence Number Details.
	 * 
	 * @param providerId
	 *            long Provider ID
	 * @param indvId
	 *            long Individual ID
	 * @param caseNum
	 *            long Case Number
	 * @param printUtilBegDate
	 *            Timestamp Print Utility Begin Date
	 * @param printUtilEndDate
	 *            Timestamp Print Utility End Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getProviderSerSeqNum(long providerId, long indvId,
			long caseNum, Timestamp printUtilBegDate, Timestamp printUtilEndDate)
					throws CoException {
		Object[] result = null;
		PmProviderCdcAsgnmntsCargo pmProviderCdcAsgnmntsCargo = new PmProviderCdcAsgnmntsCargo();
		pmProviderCdcAsgnmntsCargo.setProviderId(providerId);
		pmProviderCdcAsgnmntsCargo.setChildIndvId(indvId);
		pmProviderCdcAsgnmntsCargo.setCaseNum(caseNum);
		pmProviderCdcAsgnmntsCargo.setAssignBegDt(printUtilEndDate);
		pmProviderCdcAsgnmntsCargo.setAssignEndDt(printUtilBegDate);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcAsgnmnts", "findByCaseProviderIndvId",
					pmProviderCdcAsgnmntsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCDCAsgnmnts",
					99665);
		}
		return result;
	}

	/**
	 * Method to retrieve Provider Service Sequence Number Details.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getProviderServiceSeqNum(long providerID)
			throws CoException {
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderId(providerID);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findByProviderServiceSeqNum",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	/**
	 * Method to retrieve Provider Service Sequence Number Details.
	 * 
	 * @param providerID
	 *            long Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSDAProviderServiceSeqNum(long providerID)
			throws CoException {
		// BRGUS00206912 - Added by saranyak to get Provider service seq num
		Object[] result = null;
		PmProviderServicesCargo pmProviderServicesCargo = new PmProviderServicesCargo();
		pmProviderServicesCargo.setProviderId(providerID);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderServices", "findBySDAProviderServiceSeqNum",
					pmProviderServicesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	// BRGUS00178374 - NaredlaS
	/**
	 * Method to retrieve SSA Prisoner Facility Details.
	 * 
	 * @param facilityId
	 *            Facility ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getSSAPrisonerFacilityDetails(long facilityId)
			throws CoException {
		Object[] result = null;
		InSsaPrisonerFacilityCargo inSsaPrisonerFacilityCargo = new InSsaPrisonerFacilityCargo();
		inSsaPrisonerFacilityCargo.setFacilitySeqNum(facilityId);
		Object[] params = { new Long(facilityId) };

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"InSsaPrisonerFacility", "findByFacilityId", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for InSsaPrisonerFacility",
					99667);
		}
		return result;
	}

	// BRGUS00167469- Naga-PM Provider Services DB changes
	/**
	 * This method returns the Pm Provider Criminal Match Details.
	 * 
	 * @param providerId
	 *            int Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderCriminalMatchDetails(int providerId)
			throws CoException {
		Object[] result = null;
		PmProviderCriminalMatchCargo pmProviderServicesCriminalCargo = new PmProviderCriminalMatchCargo();
		pmProviderServicesCriminalCargo.setProviderId(providerId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCriminalMatch", "findByCriminalMatchProvider",
					pmProviderServicesCriminalCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCriminalMatch",
					99665);
		}
		return result;
	}

	/**
	 * This method returns the Pm Provider address by service type Cd.
	 * 
	 * @param providerID
	 *            Provider ID
	 * @param addrTypeCd
	 *            Addtress Type Cd
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmProviderAddressByTypeCode(long providerID,
			String addrTypeCd) throws CoException {

		Object[] result = null;
		PmProviderAddressesCargo pmProviderAddressesCargo = new PmProviderAddressesCargo();
		pmProviderAddressesCargo.setProviderId(providerID);
		pmProviderAddressesCargo.setAddrTypeCd(addrTypeCd);
		pmProviderAddressesCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		pmProviderAddressesCargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderAddresses", "findByProvIdServTypeCd",
					pmProviderAddressesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderServices", 99665);
		}
		return result;
	}

	// BRGUS00177443 - NaredlaS
	/**
	 * This method returns the records for the co-pay amount.
	 * 
	 * @param indvId
	 *            long - Individual Id
	 * @param paymentBeginDt
	 *            Timestamp - Payment Begin Date
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPatientPayAmtRecord(long indvId, Timestamp paymentBeginDt)
			throws CoException {
		Object[] result = null;
		DcLocAuthorizationsCargo dcLocAuthorizationsCargo = new DcLocAuthorizationsCargo();

		dcLocAuthorizationsCargo.setIndvId(indvId);
		dcLocAuthorizationsCargo.setAuthBeginDt(paymentBeginDt);
		dcLocAuthorizationsCargo.setAuthEndDt(paymentBeginDt);

		Object[] obj = { dcLocAuthorizationsCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLocAuthorizations", "findByIndvIdCurrRec", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/**
	 * Add for ITO Correspondence returns the list of Individuals for whom DHS
	 * 537 has to be generated
	 * 
	 * @param SSN
	 *            long
	 * @param county
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getBvCollectionReferralBySSNCounty(long ssn, String county)
			throws CoException {
		Object[] result = null;
		BvCollectionReferralCargo bvCargo = new BvCollectionReferralCargo();
		bvCargo.setSsnTaxId(ssn);
		bvCargo.setCountyCd(county);
		bvCargo.setTransactionTypeCd("1");
		Object[] obj = { bvCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvCollectionReferral", "findBySSNCountyCd", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvCollectionReferral",
					16849);
		}
		return result;
	}

	/**
	 * Add for ITO Correspondence returns the address by county code
	 * 
	 * @param county
	 *            String
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getOfficeAddressByOfficeNum(String office)
			throws CoException {
		Object[] result = null;
		MoOfficeAddressesCargo moOfficesAddrCargo = new MoOfficeAddressesCargo();
		long officeNum = Long.parseLong(office);
		moOfficesAddrCargo.setOfficeNum(officeNum);
		try {			
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByOfficeNumber",
					moOfficesAddrCargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES_ADDRESS", 16359);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in MO_OFFICES_ADDRESS", 16011);
		}
		return result;
	}

	/**
	 * Add for ITO Correspondence returns the names for the ssn
	 * 
	 * @param ssn
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getindvNameBySSN(long ssn) throws CoException {
		Object[] result = null;
		BvCollectionReferralCargo bvCargo = new BvCollectionReferralCargo();
		bvCargo.setSsnTaxId(ssn);
		Object[] obj = { bvCargo };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvCollectionReferral", "findBySSNForCo", null, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvCollectionReferral",
					16849);
		}
		return result;
	}

	/**
	 * To Get Records from PmProviderCdcTraining returns the providers result
	 * for the given provider BRGUS00216757 DALAYIV PM_PROVIDER_CDC_TRAINING
	 * validations
	 * 
	 * @param providerID
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getPmProviderCdcTraining(long providerID)
			throws CoException {
		Object[] result = null;
		PmProviderCdcTrainingCargo provCdcTrainCargo = new PmProviderCdcTrainingCargo();
		provCdcTrainCargo.setProviderId(providerID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcTraining", "findByProviderId",
					provCdcTrainCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderCdcTraining",
					99665);
		}
		return result;
	}

	/**
	 * This method gets pending records for DHS-4807
	 * 
	 * @param providerID
	 *            long
	 * @param generateDt
	 *            Timestamp
	 * @return Object[]
	 * @throws CoException
	 */
	public Object[] getDHS4807PeingRec(long providerID, Timestamp generateDt)
			throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();

		coRequestHistoryCargo.setGenerateDt(generateDt);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByPendTrigDocIdForFXX040",
					coRequestHistoryCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistory", 99665);
		}
		return result;
	}

	/**
	 * Method to get CDC training details.
	 * 
	 * @param providerIds
	 *            Provider Numbers
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getPmProviderCdcTraining(long[] providerIds)
			throws CoException {
		Object[] result = null;
		Object[] obj = { providerIds };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderCdcTraining", "findByProviderIds", null, obj,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDER_CDC_TRAINING",
					16795);
		}

		return result;
	}

	/**
	 * method to get all indiciuals in case.
	 */
	public long[] getIndivInCaseArray(long caseNo) throws CoException {
		Object[] caseIndvs = getDcCaseIndividual(caseNo);
		long[] caseIndvIDS;
		if (caseIndvs != null && caseIndvs.length > 0) {
			caseIndvIDS = new long[caseIndvs.length];
			for (int i = 0; i < caseIndvs.length; i++) {
				caseIndvIDS[i] = ((DcCaseIndividualCargo) caseIndvs[i])
						.getIndvId();
			}
			return caseIndvIDS;
		}
		return null;
	}

	/**
	 * Method to retrieve phone number for a case.
	 * 
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public DcPhnDetailsCargo[] getCasePhoneDetails(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcPhnDetailsCollection col = new DcPhnDetailsCollection();

		Object[] params = new Object[1];

		params[0] = caseNum;
		DcPhnDetailsCargo[] retArray = (DcPhnDetailsCargo[]) col.select(
				"findByCaseNum", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in DcPhnDetails",
					16037);
		}

		return retArray;
	}

	/**
	 * Method to get details of Authorised represenatative for the case.
	 * 
	 * @param caseNum
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcAuthRepCargo[] getAuthRepDetails(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcAuthRepCollection col = new DcAuthRepCollection();
		Object[] params = new Object[1];

		params[0] = caseNum;
		DcAuthRepCargo[] retArray = (DcAuthRepCargo[]) col.select(
				"findByCaseNum", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}

		return retArray;
	}

	public WcReconPartHrsCargo[] getWCJobDetails(long indvID,Timestamp enrollmentMonth)
			throws FrameworkException, ApplicationException,CoException {
		WcReconPartHrsCollection col = new WcReconPartHrsCollection();
		WcReconPartHrsCargo ipCargo = new WcReconPartHrsCargo();
		ipCargo.setIndvId(indvID);
		ipCargo.setEnrollmentMonth(enrollmentMonth);
		Object[] params = new Object[1];

		params[0] = ipCargo;

		WcReconPartHrsCargo[] retArray = (WcReconPartHrsCargo[]) col.select(
				"findByIndvIDActStartEndDate", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in WcReconPartHrs",
					16037);
		}

		return retArray;

	}

	/**
	 * Method to get Veheclie details
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @return
	 * @throws CoException
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcVehiclesCargo[] getVehicleDetailsForCase(long caseNum)
			throws CoException, FrameworkException, ApplicationException {
		DcVehiclesCollection col = new DcVehiclesCollection();

		Object[] params = new Object[1];
		long[] indvIncase = getIndivInCaseArray(caseNum);

		params[0] = indvIncase;
		DcVehiclesCargo[] retArray = (DcVehiclesCargo[]) col.select(
				"findIndividualsInCase", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in DcVehicles",
					16037);
		}

		return retArray;

	}

	/**
	 * Method to get Office details of employee.
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @param empID
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws CoException 
	 */
	public VMoEmployeeOfficeCargo[] getCaseWorkerOfficeName(long caseNum) throws FrameworkException, ApplicationException, NoDataFoundException, CoException {
		VMoEmployeeOfficeCollection col = new VMoEmployeeOfficeCollection();
		MoEmployeesCargo [] caseWorkers = null;
		try{
			caseWorkers = (MoEmployeesCargo[]) getCaseWorkerDetails(caseNum);
		}catch(NoDataFoundException e1){
			log(ILog.DEBUG, "NoDataFoundException in getCaseWorkerOfficeName() : ", e1);	
			CoDebugger.debugException("Case Worker details not found in DB", e1);
		}
		if (caseWorkers!=null && caseWorkers.length>0) {
			VMoEmployeeOfficeCargo cargo = new VMoEmployeeOfficeCargo();
			cargo.setT1EffBeginDt(CoDateFactory.getTimestamp());
			cargo.setT1EffEndDt(CoDateFactory.getTimestamp());
			cargo.setEmpId(caseWorkers[0].getEmpId());

			Object[] params = new Object[1];

			params[0] = cargo;
			VMoEmployeeOfficeCargo[] retArray = (VMoEmployeeOfficeCargo[]) col
					.select("findByEmpIdEffStartAndEndDt", params);
			return retArray;

		}else{
			throw new NoDataFoundException("No data found for Case Worker in MO_EMPLOYEE", 16037);

		}
	}

	/**
	 * Method to get WORC activity assignments for selected individual
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @param indvId
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */

	public WcActivityAssignmentCargo[] getWORCAssignmentActivities(long indvId) throws FrameworkException,
	ApplicationException,CoException {
		WcActivityAssignmentCollection col = new WcActivityAssignmentCollection(
				conn);
		Object[] params = new Object[2];

		params[0] = CoDateFactory.getTimestamp();
		params[1] = indvId;
		WcActivityAssignmentCargo[] retArray = (WcActivityAssignmentCargo[]) col
				.select("findByIndvIdForBeginDateBeforeDate", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in WcActivityAssignment",
					16037);
		}

		return retArray;
	}

	/**
	 * Method to retrieve details of email on case.
	 * 
	 * @author rparanjpe
	 * @param maxRow
	 * @param caseNum
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public DcEmailDetailsCargo[] getCaseEmailDetails(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcEmailDetailsCollection col = new DcEmailDetailsCollection();
		Object[] params = new Object[1];

		params[0] = caseNum;
		DcEmailDetailsCargo[] retArray = (DcEmailDetailsCargo[]) col.select(
				"findByCaseNum", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in DcEmailDetails",
					16037);
		}

		return retArray;
	}

	/**
	 * Method to find all children under 12 years recieving Tanf benifits for
	 * current eligibilty run
	 * 
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */

	public VCoEligIndvAgeTypeAssistCargo[] getChildrenRecievingTanfBen(
			long caseNo) throws FrameworkException, ApplicationException, NoDataFoundException {
		VCoEligIndvAgeTypeAssistCollection col = new VCoEligIndvAgeTypeAssistCollection(
				conn);
		int ageInYears = 12;
		String asstType = "TP01";
		Object[] params = new Object[3];

		params[0] = caseNo;
		params[1] = ageInYears;
		params[2] = asstType;

		VCoEligIndvAgeTypeAssistCargo[] retArray = (VCoEligIndvAgeTypeAssistCargo[]) col
				.select("findByCaseNumAgeInYearsAsstType", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in VCoEligIndvAgeTypeAssist",
					16037);
		}

		return retArray;


	}

	/**
	 * Method to get all Snap participants
	 * 
	 * @author rparanjpe
	 * @param caseNo
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public VDcCaseIndvDetailsCargo[] getSnapParticipantDetails(long caseNo)
	throws FrameworkException, ApplicationException,CoException {
		EdSnapWorkRegIndvCollection col = new EdSnapWorkRegIndvCollection();
		EdSnapWorkRegIndvCargo cargo = new EdSnapWorkRegIndvCargo();
		cargo.setCaseNum(caseNo);
		Object[] params = new Object[1];
		params[0] = cargo;

		EdSnapWorkRegIndvCargo[] indvs = (EdSnapWorkRegIndvCargo[]) col.select(
				"findByCaseNumber", params);
		if (indvs != null && indvs.length > 0) {
			long[] indvIDS = new long[indvs.length];
			for (int i = 0; i < indvs.length; i++) {
				indvIDS[i] = indvs[i].getIndvId();
			}

			VDcCaseIndvDetailsCargo cargoIndv = new VDcCaseIndvDetailsCargo();
			cargoIndv.setCaseNum(caseNo);

			VDcCaseIndvDetailsCollection col2 = new VDcCaseIndvDetailsCollection(
					conn);
			Object[] params1 = new Object[2];
			params1[0] = cargoIndv;
			params1[1] = indvIDS;

			VDcCaseIndvDetailsCargo[] retArray = (VDcCaseIndvDetailsCargo[]) col2
					.select("findBycaseNumberIndividuals", params1);
			if (retArray == null || retArray.length == 0) {
				throw new NoDataFoundException("No data in VDcCaseIndvDetails",
						16037);
			}
			return retArray;
		}
		else{
			throw new NoDataFoundException("No data in EdSnapWorkRegIndv",
					16037);
		}
	}

	/**
	 * Method to get case program details for refugee cash assistence program
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public DcCaseProgramCargo[] getRefugeeCashAsstRec(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcCaseProgramCargo cargo = new DcCaseProgramCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProgCd("TF");
		cargo.setProgStatusCd("AP");
		cargo.setEffBeginDt(CoDateFactory.getTimestamp());
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		Object[] params1 = new Object[1];
		params1[0] = cargo;
		DcCaseProgramCollection col = new DcCaseProgramCollection();
		DcCaseProgramCargo[] programs = (DcCaseProgramCargo[]) col.select(
				"findByCaseNumAndProgCdStatusCdEffDt", params1);
		if (programs == null || programs.length == 0) {
			throw new NoDataFoundException("No data in DcCaseProgram",
					16037);
		}

		return programs;
	}

	/**
	 * Method to get Tanf tribe codes based for all individuals in case.
	 * 
	 * @author rparanjpe
	 * @param caseNo
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws CoException
	 */
	public TcTransactionsCargo[] getTanfTribeCodeForCase(long caseNo)
			throws FrameworkException, ApplicationException, CoException {
		long[] indvIds = getIndivInCaseArray(caseNo);
		TcTransactionsCollection col = new TcTransactionsCollection();
		Object[] params = new Object[1];

		params[0] = indvIds;
		TcTransactionsCargo[] retArray = (TcTransactionsCargo[]) col.select(
				"findByCaseParticipantsDistinctTribePlans", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in TcTransactions",
					16037);
		}

		return retArray;

	}
	/**
	 * Method to get Tanf tribe codes based for all individuals in case.
	 * 
	 * @author rparanjpe
	 * @param caseNo
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws CoException
	 */
	public TcTransactionsCargo[] getDistinctTanfTribeCodeForCase(long caseNo)
			throws FrameworkException, ApplicationException, CoException {
		long[] indvIds = getIndivInCaseArray(caseNo);
		TcTransactionsCollection col = new TcTransactionsCollection();
		Object[] params = new Object[1];

		params[0] = indvIds;
		TcTransactionsCargo[] retArray = (TcTransactionsCargo[]) col.select(
				"findByCaseParticipantsForDistinctTribePlans", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in TcTransactions",
					16037);
		}

		return retArray;

	}

	/**
	 * Method to get state codes based for all individuals in case.
	 * 
	 * @author rparanjpe
	 * @param caseNo
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws CoException
	 */
	public TcTransactionsCargo[] getDistinctTanfStateForCase(long caseNo)
			throws FrameworkException, ApplicationException, CoException {
		long[] indvIds = getIndivInCaseArray(caseNo);
		TcTransactionsCollection col = new TcTransactionsCollection();
		Object[] params = new Object[1];

		params[0] = indvIds;
		TcTransactionsCargo[] retArray = (TcTransactionsCargo[]) col.select(
				"findByCaseParticipantsForState", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in TcTransactions",
					16037);
		}

		return retArray;

	}

	/**
	 * Method to find max of TC clock counters used to retrieve
	 * CASE_CLOCK_MONTHS for case
	 * 
	 * @author rparanjpe
	 * 
	 * @param caseNo
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws CoException
	 */
	public TcClockDetailsCargo[] getCaseClockMonths(long caseNo)
			throws FrameworkException, ApplicationException,NoDataFoundException, CoException {
		long[] indvIds = getIndivInCaseArray(caseNo);
		TcClockDetailsCollection col = new TcClockDetailsCollection();
		Object[] params = new Object[1];

		params[0] = indvIds;
		TcClockDetailsCargo[] retArray = (TcClockDetailsCargo[]) col.select(
				"findByPersonIdsMaxMonthCounters", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in TcClockDetails",
					16037);
		}

		return retArray;
	}

	/**
	 * method to find authorised rep details
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */

	public DcAuthRepCargo[] getAuthorizedRepDetails(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcAuthRepCollection col = new DcAuthRepCollection();
		DcAuthRepCargo cargo = new DcAuthRepCargo();
		cargo.setEffEndDt(CoDateFactory.getTimestamp());
		cargo.setCaseNum(caseNum);
		Object[] params = new Object[1];
		params[0] = cargo;

		DcAuthRepCargo[] retArry = (DcAuthRepCargo[]) col.select(
				"findByCaseNumCurrent", params);
		if (retArry == null || retArry.length == 0) {
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}

		return retArry;
	}

	/**
	 * Method to find mailing address for all authorised reps
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcCaseAddressesCargo[] getAuthorizedRepAddresses(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcAuthRepCargo[] authRepsCargos = getAuthorizedRepDetails(caseNum);
		if (authRepsCargos != null && authRepsCargos.length > 0) {
			long[] authReps = new long[authRepsCargos.length];
			for (int i = 0; i < authRepsCargos.length; i++) {
				authReps[i] = authRepsCargos[i].getCaseAddrSeqNum();
			}
			Object[] params = new Object[1];

			params[0] = authReps;
			DcCaseAddressesCollection addrCol = new DcCaseAddressesCollection(
					conn);
			return (DcCaseAddressesCargo[]) addrCol.select(
					"findByCaseAddrSeqNumberMulti", params);
		}
		else{
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}


	}
	
	
	public DcCaseAddressesCargo[] getAuthorizedRepAddressesAuthRepSeq(long caseNum)
			throws FrameworkException, ApplicationException,CoException {
		DcAuthRepCargo[] authRepsCargos = getAuthorizedRepDetails(caseNum);
		if (authRepsCargos != null && authRepsCargos.length > 0) {
			long[] authReps = new long[authRepsCargos.length];
			for (int i = 0; i < authRepsCargos.length; i++) {
				/*authReps[i] = authRepsCargos[i].getCaseAddrSeqNum();*/
				authReps[i] = authRepsCargos[i].getAuthrepSeqNum();
			}
			Object[] params = new Object[1];

			params[0] = authReps;
			DcCaseAddressesCollection addrCol = new DcCaseAddressesCollection(
					conn);
			return (DcCaseAddressesCargo[]) addrCol.select(
					"findByAuthRepSeqNumberMulti", params);
		}
		else{
			throw new NoDataFoundException("No data in DcAuthRep",
					16037);
		}


	}


	/**
	 * @author mbhende New correspondence method to get data from
	 *         DcSelfEmpIncomeDAO by calling method findByCaseIndv to find value
	 *         for SELF_EMP_INC_OWNER
	 */
	public Object[] getDcSelfEmpIncome(Long caseNo) throws CoException {
		Object[] result = null;
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;
		DcSelfEmpIncomeCargo dcSelfEmpIncomeCargo = new DcSelfEmpIncomeCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSelfEmpIncome", "findByCaseIndv", dcSelfEmpIncomeCargo,
					objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSelfEmpIncome", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcSelfEmpIncome", 16037);
		}

		long[] indvIds = new long[result.length];
		for (int i = 0; i < result.length; i++) {
			indvIds[i] = ((DcSelfEmpIncomeCargo) result[i]).getIndvId();
		}
		VDcCaseIndvDetailsCargo vDcCaseIndvDetailsCargo = new VDcCaseIndvDetailsCargo();
		vDcCaseIndvDetailsCargo.setCaseNum(caseNo);
		Object[] params = new Object[2];
		params[0] = vDcCaseIndvDetailsCargo;
		params[1] = indvIds;
		Object[] obj = null;

		try {
			obj = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcCaseIndvDetails", "findBycaseNumberIndividuals",
					vDcCaseIndvDetailsCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VDcCaseIndvDetails", 16312);
		}
		if (obj == null || obj.length == 0) {
			throw new NoDataFoundException("No data in VDcCaseIndvDetails",
					16037);
		}

		return obj;
	}

	/**
	 * @author mbhende New correspondence method to get data from
	 *         DcJointOwnershipDAO by calling method findByCaseIndvForVehicles
	 *         to find value for VEHICLE_OWNER_NAME
	 */
	public Object[] getDcJointOwnership(Long caseNo) throws CoException {
		Object[] result = null;
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;
		DcJointOwnershipCargo dcJointOwnershipCargo = new DcJointOwnershipCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcJointOwnership", "findByCaseIndvForVehicles",
					dcJointOwnershipCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcJointOwnership", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcJointOwnership", 16037);
		}

		long[] indvIds = new long[result.length];
		for (int i = 0; i < result.length; i++) {
			indvIds[i] = ((DcJointOwnershipCargo) result[i]).getOwnerIndvId();
		}
		VDcCaseIndvDetailsCargo vDcCaseIndvDetailsCargo = new VDcCaseIndvDetailsCargo();
		vDcCaseIndvDetailsCargo.setCaseNum(caseNo);
		Object[] params = new Object[2];
		params[0] = vDcCaseIndvDetailsCargo;
		params[1] = indvIds;

		Object[] obj = null;

		try {
			obj = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcCaseIndvDetails", "findBycaseNumberIndividuals",
					vDcCaseIndvDetailsCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VDcCaseIndvDetails", 16312);
		}
		if (obj == null || result.length == 0) {
			throw new NoDataFoundException("No data in VDcCaseIndvDetails",
					16037);
		}

		return obj;
	}

	/**
	 * @author mbhende New Correspondence method in CoDAOServices to find
	 *         SHLRT_UTILITY_EXP_OWNER which would internally call
	 *         ShelterDeductionsDAO and UtilityDeductionsDAO
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 */
	public List<Object> getShelterUtilExpOwner(Long caseNo)
			throws CoException {
		Object[] obj = null;
		List<Object> cargoArrList = new ArrayList<Object>();
		obj = getDcShelterDeductions(caseNo);
		if ((obj != null && obj.length > 0)) {
			cargoArrList.add(obj);
		}
		obj = getDcUtilityDeductions(caseNo);
		if ((obj != null && obj.length > 0)) {
			cargoArrList.add(obj);
		}

		return cargoArrList;
	}

	/**
	 * @author mbhende New correspondence method to find PROVIDER_NAME and
	 *         CHILD_CARE_EXP_PAID_FOR from DC_DEPEND_CARE_DEDUCTIONS This
	 *         method would internally call MedicalDeductionsDAO's finder method
	 *         findByCaseIndv()
	 * @param CaseNum
	 * @param tsBegDate
	 * @param tsEndDate
	 * @return Object[] Resultset from the DAO
	 */
	public Object[] getDcDependCareDeductionsProvider(long lCaseNum)
			throws CoException {
		Object[] result = null;
		DcDependCareDeductionsCargo dcDependCareDeductionsCargo = new DcDependCareDeductionsCargo();
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDependCareDeductions", "findByCaseIndv",
					dcDependCareDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for DC_DEPEND_CARE_DEDUCTIONS for PROVIDER_NAME, Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_DEPEND_CARE_DEDUCTIONS for PROVIDER_NAME",
					16354);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_DEPEND_CARE_DEDUCTIONS for PROVIDER_NAME for Case Number = "
							+ lCaseNum, 16060);
		}
		return result;
	}



	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_DEPEND_CARE_DEDUCTIONS
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcDependCareDeductions(Long caseNo)
			throws CoException {
		Object[] result = null;

		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;

		DcDependCareDeductionsCargo dcDependCareDeductionsCargo = new DcDependCareDeductionsCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDependCareDeductions", "findByCaseIndvDependentCareSw",
					dcDependCareDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_DEPEND_CARE_DEDUCTIONS", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_DEPEND_CARE_DEDUCTIONS", 16037);
		}

		return result;
	} // method ends

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_SUPPORT_DEDUCTIONS
	 * @param caseNo
	 * @return
	 * @throws CoException
	 */

	public Object[] getSupportDeductions(Long caseNo) throws CoException {

		DcSupportDeductionsCargo dcSupportDeductionsCargo = new DcSupportDeductionsCargo();
		Object[] result = null;
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSupportDeductions", "findByCaseIndvSupportpaymentSW",
					dcSupportDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_SUPPORT_DEDUCTIONS", 16312);
		}
		return result;
	}// method ends

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_MEDICAL_DEDUCTIONS and to find the value for MEDICAL_EXP_PAYER
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcMedicalDeductions(Long caseNo) throws CoException {

		Object[] result = null;

		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;

		DcMedicalDeductionsCargo dcMedicalDeductionsCargo = new DcMedicalDeductionsCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicalDeductions", "findByCaseIndvMedicalExpenseSw",
					dcMedicalDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_MEDICAL_DEDUCTIONS", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_MEDICAL_DEDUCTIONS", 16037);
		}


		return result;
	} // method ends

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_SHELTER_DEDUCTIONS
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcShelterDeductions(Long caseNo) throws CoException {

		Object[] result = null;

		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;

		DcShelterDeductionsCargo dcShelterDeductionsCargo = new DcShelterDeductionsCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcShelterDeductions", "findByCaseIndvShelterExpenseSw",
					dcShelterDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_SHELTER_DEDUCTIONS", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_SHELTER_DEDUCTIONS", 16037);
		}


		return result;
	} // method ends

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_UTILITY_DEDUCTIONS
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcUtilityDeductions(Long caseNo) throws CoException {

		Object[] result = null;

		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;

		DcUtilityDeductionsCargo dcUtilityDeductionsCargo = new DcUtilityDeductionsCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUtilityDeductions", "findByCaseIndvUtilityExpenseSw",
					dcUtilityDeductionsCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_UTILITY_DEDUCTIONS", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_UTILITY_DEDUCTIONS", 16037);
		}

		return result;
	} // method ends

	/**
	 * @author mbhende New method to find value for RESOURCE_TYPE by calling
	 *         findByIndvId from DcResourcesDAO
	 * 
	 */
	public Object[] getDcResources(long caseNum) throws CoException {
		Object[] result = null;
		DcResourcesCargo dcResourcesCargo = new DcResourcesCargo();
		Object[] params = new Object[3];
		params[0] = caseNum;
		params[1]=CoDateFactory.getTimestamp();
		params[2]=CoDateFactory.getTimestamp();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcResources", "findByCaseNum", dcResourcesCargo, params,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_RESOURCES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_RESOURCES", 16037);
		}
		return result;
	}




	/**
	 * @author mbhende New correspondence method to get data from
	 *         DcSelfEmpIncomeDAO by calling method findByCaseIndv to find value
	 *         for SELF_EMP_BUSS_TYPE and SELF_EMP_BUSS_NAME
	 */
	public Object[] getDcSelfEmpIncomeDetails(Long caseNo) throws CoException {
		Object[] result = null;
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = caseNo;
		DcSelfEmpIncomeCargo dcSelfEmpIncomeCargo = new DcSelfEmpIncomeCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSelfEmpIncome", "findByCaseIndv", dcSelfEmpIncomeCargo,
					objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSelfEmpIncome", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcSelfEmpIncome", 16037);
		}
		return result;
	}




	/**
	 * @author mbhende new correspondence method to find EXPENSE_PAID_FOR
	 * @param caseNo
	 * @return List<Object>
	 */
	public List<Object> getExpPaidFor(Long caseNo) throws CoException {
		Object[] obj = null;
		List<Object> cargoArrList = new ArrayList<Object>();
		try {
			obj = getDcDependCareDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		try {
			obj = getSupportDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}

		if (cargoArrList == null || cargoArrList.size()== 0) {
			throw new NoDataFoundException("No data in the list", 16037);
		}

		return cargoArrList;
	}

	// method ends

	/**
	 * @author mbhende new correspondence method to find EXPENSE_TYPE and
	 *         EXPENSE_OWNER
	 * @param caseNo
	 * @return List<Object>
	 */
	public List<Object> getExpType(Long caseNo) throws CoException {
		Object[] obj = null;
		List<Object> cargoArrList = new ArrayList<Object>();
		try {
			obj = getDcDependCareDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		try {
			obj = getSupportDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		try {
			obj = getDcMedicalDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		try {
			obj = getDcShelterDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		try {
			obj = getDcUtilityDeductions(caseNo);
			if ((obj != null && obj.length > 0)) {
				cargoArrList.add(obj);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		if (cargoArrList == null || cargoArrList.size()== 0) {
			throw new NoDataFoundException("No data in the list", 16037);
		}

		return cargoArrList;
	}

	// method ends

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_EMPLOYMENT_BUDGET and to find value for GROSS_EARN_INC_AMT and
	 *         EARNED_INCOME_OWNER
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcEmploymentBudget(long lCaseNum) throws CoException {
		Object[] result = null;
		DcEmploymentBudgetCargo dcEmploymentBudgetCargo = new DcEmploymentBudgetCargo();
		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmploymentBudget", "findByCaseIndv",
					dcEmploymentBudgetCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for DC_EMPLOYMENT_BUDGET , Exception =  "
							+ e.getMessage(), e);
			throw new CoException("Select failed for DC_EMPLOYMENT_BUDGET",
					16354);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_EMPLOYMENT_BUDGET  for Case Number = "
							+ lCaseNum, 16060);
		}
		return result;
	}

	/**
	 * @author mbhende New correspondence method to find data from
	 *         DC_UNEARNED_INCOME_BUDGET and to find value for
	 *         GROSS_UNEARN_INC_AMT and UNEARNED_INCOME_OWNER
	 * @param caseNo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getDcUnearnedIncomeBudget(long lCaseNum)
			throws CoException {
		Object[] result = null;
		DcUnearnedIncomeBudgetCargo dcUnearnedIncomeBudgetCargo = new DcUnearnedIncomeBudgetCargo();

		Object[] objArr = new Object[3];
		objArr[0] = CoDateFactory.getTimestamp();
		objArr[1] = CoDateFactory.getTimestamp();
		objArr[2] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUnearnedIncomeBudget", "findByCaseIndv",
					dcUnearnedIncomeBudgetCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(
					"Select failed for DC_UNEARNED_INCOME_BUDGET , Exception =  "
							+ e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_UNEARNED_INCOME_BUDGET", 16354);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_UNEARNED_INCOME_BUDGET  for Case Number = "
							+ lCaseNum, 16060);
		}
		return result;
	}




	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 *         CASE_MNGR,CASE_MNGR_FAX, CASE_MNGR_PHONE by calling method findByCaseNum(int maxRows, long caseNum)
	 *        from MoEmployeesDAO.java
	 * @param CaseNum
	 * 
	 * @return Object[] from the resultset.
	 */
	public Object[] getMoEmployeesDetails(long aCaseNum)
			throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object [] params=new Object[1];
		params[0]=aCaseNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "MoEmployees",
					"findByCaseNum", moEmployeesCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;
	}








	/**
	 * @author mbhende New correspondence method to find the value for
	 *         PROTECTIVE_PAYEE_NAME by calling method findByCaseEdgNum(int
	 *         maxRows, DcPayeeCargo cargo ) from DcPayeeDAO.java
	 * @param CaseNum
	 * @param EdgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getDcPayee(long aCaseNum, long aEdgNum)
			throws CoException {
		Object[] result = null;
		DcPayeeCargo dcPayeeCargo = new DcPayeeCargo();
		dcPayeeCargo.setCaseNum(aCaseNum);
		dcPayeeCargo.setEdgNum(aEdgNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcPayee",
					"findByCaseEdgNum", dcPayeeCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_PAYEE", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_PAYEE", 16037);
		}

		return result;
	}

	/**
	 * Method to get details for a case manager
	 * 
	 * @author rparanjpe
	 * @param aCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getCaseMangerDetails(long aCaseNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[2];
		objArr[0] = aCaseNum;
		objArr[1] = CoConstants.JOB_TITLE_CD_CASE_MANAGER;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByCaseRole", moEmployeesCargo, objArr,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;

	}

	/**
	 * Method to get details for a case Worker
	 * 
	 * @author rparanjpe
	 * @param aCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getCaseWorkerDetails(long aCaseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[2];
		objArr[0] = aCaseNum;
		objArr[1] = CoConstants.JOB_TITLE_CD_CASE_WORKER;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByCaseRole", moEmployeesCargo, objArr,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService-getCaseWorkerDetails-"+e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for Case Worker found in MO_EMPLOYEES", 16037);
		}

		return result;

	}

	/**
	 * @author mbhende New correspondence method to find the value for
	 *         CASE_WORKER by calling method findByEmpCase(int maxRows,long
	 *         caseNum) from MoEmployeesDAO.java
	 * @param CaseNum
	 * @param EdgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getMoEmployees(long aCaseNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[3];
		objArr[0]=aCaseNum;
		objArr[1]=CoDateFactory.getTimestamp();
		objArr[2]=CoDateFactory.getTimestamp();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpCase", moEmployeesCargo,
					objArr, conn);
		} catch (Exception e) {
			// e.printStackTrace(); ND-12735
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;
	}

	/**
	 * @author ckorgaonkar New correspondence method to find the value for
	 *         CASE_WORKER by calling method findByEmpCase(int maxRows,long
	 *         caseNum) from MoEmployeesDAO.java
	 * @param CaseNum
	 * @param EdgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getMoEmployeesForApps(String aCaseNum) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[1];
		objArr[0]=aCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByEmpApp", moEmployeesCargo,
					objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;
	}

	/**
	 * @author mbhende New correspondence method to find the value for
	 *         WORC_CASE_MNGR and WORC_CASE_MNGR_FAX by calling
	 *         findByCaseNumWorcManager(int maxRows, long eCaseNum, String
	 *         progCd)from MoEmployeesDAO.java
	 * @param CaseNum
	 * @param progCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getWorcCaseMngrDetails(long eCaseNum, String progCd)
			throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[2];
		objArr[0] = eCaseNum;
		objArr[1] = progCd;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByCaseNumWorcManager",
					moEmployeesCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;
	}

	/**
	 * @author mbhende New correspondence method to find the value for [WoRC
	 *         Case Manager Agency] by calling
	 *         findByWorcManagerCasenumProgCd(int maxRows, long eCaseNum,
	 *         String progCd)from MoOfficesDAO.java
	 * @param CaseNum
	 * @param progCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getWorcCaseMngrOfficeDetails(long eCaseNum,
			String progCd) throws CoException {
		Object[] result = null;
		MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
		Object[] objArr = new Object[4];
		objArr[0] = eCaseNum;
		objArr[1] = progCd;
		objArr[2] =CoDateFactory.getTimestamp();
		objArr[3] =CoDateFactory.getTimestamp();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByWorcManagerCasenumProgCd",
					moOfficesCargo, objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_OFFICES", 16037);
		}

		return result;
	}

	/* methods for notices by mitali */


	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * <FIA Appointment Date> ,<FIA Appointment Time> and <Program Phone Number> for NCH044Assembler
	 * @param indvId
	 * @return Object[] from the resultset
	 */
	public Object[] getDcWorcReferral(long indvId) throws CoException {
		Object[] result = null;
		DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
		dcWorcReferralCargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcWorcReferral", "findFIAWoRCDetailsByIndvIdStatus", 
					dcWorcReferralCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			//e.printStackTrace(); ND-12735
			throw new CoException("Select failed for Dc_Worc_Referral", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Dc_Worc_Referral", 16037);
		}

		return result;
	}




	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * [Payment Request Date] and [Payment Type] for notices/forms
	 * @param indvId
	 * @param PAYMENT_DETAILS_SEQ_NUM

	 * @return Object[] from the resultset.
	 */
	public Object[] getWcPaymentDetails(long indvId, long seqNum) throws CoException {
		Object[] result = null;
		WcPaymentDetailsCargo wcPaymentDetailsCargo = new WcPaymentDetailsCargo();
		wcPaymentDetailsCargo.setIndvId(indvId);
		wcPaymentDetailsCargo.setPaymentDetailsSeqNum(seqNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"WcPaymentDetails", "findPaymentDetailsByIndvIdPaymentSeqNum", 
					wcPaymentDetailsCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			//e.printStackTrace(); ND-12735
			throw new CoException("Select failed for Wc_Payment_Details", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Wc_Payment_Details", 16037);
		}

		return result;
	}





	/**
	 * Method to get <Household Member Name> with missing SSN details
	 * 
	 * @author mbhende
	 * @param caseNum
	 * @return
	 * @throws CoException
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public DcIndvCargo[] getIndividualsInCaseForSSNVerification(long caseNum)
			throws CoException, FrameworkException, ApplicationException {
		DcIndvCollection col = new DcIndvCollection();

		Object[] params = new Object[1];
		long[] indvIncase = getIndivInCaseArray(caseNum);

		params[0] = indvIncase;
		DcIndvCargo[] retArray = (DcIndvCargo[]) col.select(
				"findByIndvIdListForSSNVerification", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in DcIndv",
					16037);
		}

		return retArray;

	}




	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * [prog_cd] for notices from app_num from
	 *         ArAppProgramDAO.java
	 * @param appNum

	 * @return Object[] from the resultset.
	 */
	public Object[] getProgCdFromAppNum(String appNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		ArAppProgramCargo arAppProgramCargo = new ArAppProgramCargo();
		Object [] params=new Object[1];
		params[0]=appNum;

		try {

			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgram", "findByAppNum", 
					arAppProgramCargo,params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_PROGRAM", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for Program of a Case App Num in AR_APP_PROGRAM", 16037);
		}

		return result;
	}




	/**@author mbhende
	 * new method to find Benefit Amount and Cancellation date for notice
	 * 
	 * 
	 */
	public String getBenefitAmtCancellationDate(String misc, String key) throws CoException{
		if(misc.contains("|")){
			String[] strArr = misc.split("\\|");
			if("benefitAmt".equals(key)){

				String[] strArr1 = strArr[0].split("=");
				return strArr1[1];
			}

			if("cancellationDate".equals(key)){
				String[] strArr1 = strArr[1].split("=");
				return strArr1[1];	
			}


			if (strArr == null || strArr.length == 0) {
				throw new NoDataFoundException("No data in misc", 16037);
			}
			return null;

		}
		if(misc.isEmpty()!=true){
			if("benefitAmt".equals(key)){
				String[] strArr1 = misc.split("=");
				return strArr1[1];
			}
			if("cancellationDate".equals(key)){
				String[] strArr1 = misc.split("=");
				return strArr1[1];	
			}
			return null;


		}

		if (misc == null || misc.isEmpty() == true) {
			throw new NoDataFoundException("No data in misc", 16037);
		}
		return null;

	}




	/**
	 * @author mbhende
	 * Method to get individual details from DC_INDV based on INDV_ID.
	 * 
	 * @param indvs
	 *            long - individuals
	 * @return Object[] - individual details
	 * @throws CoException
	 * 
	 */
	public Object[] getDcIndividualDetails(long indvId) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0]=indvId;
		try {
			DcIndvCargo cargo = new DcIndvCargo();
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByIndvId", cargo, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV ", 16795);
		}
		if (result == null || result.length ==0) {
			throw new NoDataFoundException("No data in DC_INDV", 16037);
		}

		return result;
	}



	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Overpayment Reason] 
	 * @param reasonCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getOverPaymentReasonDetails(String reasonCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(reasonCd,"BVERRORREASON");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [supportExpenseTypeCd] 
	 * @param supportExpenseTypeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getSupportExpenseDetails(String supportExpenseTypeCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(supportExpenseTypeCd,"SUPPORTEXPENSETYPE");
	}

	/**
	 * @author mbhende
	 * new correspondence method to find the value for [medicalExpenseTypeCd] 
	 * @param medicalExpenseTypeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getMedicalExpenseTypeDetails(String medicalExpenseTypeCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(medicalExpenseTypeCd,"MEDICALEXPENSETYPE");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [shelterExpenseTypeCd] 
	 * @param shelterExpenseTypeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getShelterExpenseTypeDetails(String shelterExpenseTypeCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(shelterExpenseTypeCd,"SHELTEREXPENSETYPE");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [utilityExpenseTypeCd] 
	 * @param utilityExpenseTypeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getUtilityExpenseTypeDetails(String utilityExpenseTypeCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(utilityExpenseTypeCd,"UTILITYEXPENSELIST");
	}





	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Overpayment Type] 
	 * @param errorCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getOverPaymentErrorCdDetails(String errorCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(errorCd,"BVERRORTYPE");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Activity Code] 
	 * @param activityCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getActivityCdDetails(String activityCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(activityCd,"ACTIVITYCOMPONENT");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Payment Type] 
	 * @param paymentType
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getPaymentTypeDetails(String paymentType) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(paymentType,"PAYEETYPE");
	}




	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Item]
	 * @param programCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getItemDetails(String expenseTypeCode) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(expenseTypeCode,"SUPPSERVEXPCATEGORY");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Program Name]
	 * @param programCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getForm559ProgramName(String progCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(progCd,"REFERRALBENTYPE");
	}





	/**
	 * @author mbhende
	 * new correspondence method to find the value for [Program Name]
	 * @param programCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getProgramName(String progCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(progCd,"PROGRAM");
	}



	/**
	 * @author mbhende
	 * new correspondence method to find the value for INTERVIEW MODE DESCRIPTION
	 * @param interviewModeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getInterviewModeDescription(String interviewModeCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(interviewModeCd,"INDIVIDUALINTERVIEWMODE");
	}


	/**
	 * @author mbhende
	 * new correspondence method to find the value for INTERVIEW METHOD DESCRIPTION
	 * @param interviewModeCd
	 * @throws NoDataFoundException 
	 * 
	 * 
	 */
	public String getInterviewMethodDescription(String interviewMethodCd) throws NoDataFoundException{
		return ReferenceTableAccess.getRefDescription(interviewMethodCd,"INTERVIEWMETHOD");
	}


	/**
	 * @author mbhende 
	 * New cor[Benefit Month] and [Child Support Amount] for notice 23.02.08 by calling method
	 *         findByCaseEdgNumPaymentDate(int maxRows,long caseNum, long edgNum, Timestamp currentDate,Timestamp endDate) from
	 *         BiCssDetailDAO.java
	 * @param CaseNum
	 * @param edgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getBiCssDetail(long lCaseNum,long edgNum) throws CoException {
		Object[] result = null;
		BiCssDetailCargo biCssDetailCargo = new BiCssDetailCargo();
		Timestamp currentDate=CoDateFactory.getTimestamp();
		Timestamp beginDate=RpUtils.getFirstDayOfMonthPriorToPreviousMon(currentDate);
		Timestamp endDate=RpUtils.getLastDayOfMonth(currentDate);

		Object [] params=new Object[4];
		params[0]=lCaseNum;
		params[1]=edgNum;
		params[2]=beginDate;
		params[3]=endDate;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiCssDetail", "findByCaseEdgNumPaymentDate",
					biCssDetailCargo,params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_CSS_DETAIL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_CSS_DETAIL", 16037);
		}

		return result;
	}





	/**
	 * @author mbhende
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM, PROGRAM_CD,
	 * EDG_TRACE_ID, EDG_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @param programCd
	 *            String
	 * @param traceId
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdEligibilityBenefitDetails(long caseNum,long traceId, long edgNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgTraceId(traceId);
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumTraceIdEdgNum", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16335);
		}
		return result;
	}





	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * [Payee Name] and [Item] and [Benefit Month] by calling method
	 * findPaymentDetailsByIndvIdForSuppService(
				int maxRows,
				WcPaymentDetailsCargo cargo) from
	 * WcPaymentDetailsDAO.java
	 * @param indvId
	 *
	 * @return Object[] from the resultset.
	 */
	public Object[] getWcPaymentDetails(long indvId) throws CoException {
		Object[] result = null;
		WcPaymentDetailsCargo wcPaymentDetailsCargo = new WcPaymentDetailsCargo();
		wcPaymentDetailsCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"WcPaymentDetails", "findPaymentDetailsByIndvIdForSuppService",
					wcPaymentDetailsCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Wc_payment_details", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Wc_payment_details", 16037);
		}

		return result;
	}



	/**
	 * @author mbhende
	 * new method to find value for <EP/FIA Due Date> by calling method getEpFiaDueDate(Timestamp appReceivedDate)
	 * in CoDaoServices.java
	 * @return Timestamp
	 */

	public Timestamp getEpFiaDueDate(Timestamp appReceivedDate) throws CoException{
		return RpUtils.getCurrentDatePlusThirtyDays(appReceivedDate);
	}



	/**
	 * @author mbhende
	 * new method to find value for <Contact Due Date>
	 * in CoDaoServices.java
	 * @return Timestamp
	 */

	public Timestamp getContactDueDate(Timestamp mailingDate) throws CoException{
		Timestamp tempDate=RpUtils.getCurrentDatePlusTenDays(mailingDate);

		while(RpUtils.isHoliday(tempDate)==true){
			Timestamp contactDate=RpUtils.addDays(tempDate, 1);
			tempDate=contactDate;
		}
		return tempDate;
	}	





	/**
	 * @author mbhende
	 * new method to find value for [Interview Due Date] by calling method getReviewDate(long caseNum, long edgNum)
	 * in CoDaoServices.java
	 * @return Timestamp
	 */

	public Timestamp getInterviewDueDate(long caseNum,long edgNum) throws NoDataFoundException, CoException{
		Object[] result=null;
		result=getReviewDate(caseNum,edgNum);
		if (result!=null && result.length>0){
			Timestamp currentDate=((EdCaseRecertDatesCargo)result[0]).getRecertReviewDueDt();

			return RpUtils.getFifteenthDayOfMonth(currentDate);
		}
		else{
			throw new NoDataFoundException("No data in ED_CASE_RECERT_DATES", 16037);
		}

	}




	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * [Month], [Issued Amount],[Correct Amount],[Overpayment Reason],<Program> by calling method
	 *         findByCaseEdgOverPayment(int maxRows,BiTanfDetailCargo cargo) from
	 *         BiTanfDetailDAO.java
	 * @param CaseNum
	 * @param edgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getBiTanfDetailForOverPayment(long lCaseNum,long edgNum) throws CoException {
		Object[] result = null;
		BiTanfDetailCargo biTanfDetailCargo = new BiTanfDetailCargo();
		biTanfDetailCargo.setCaseNum(lCaseNum);
		biTanfDetailCargo.setEdgNum(edgNum);
		biTanfDetailCargo.setPaymentBeginDt(CoDateFactory.getTimestamp());
		biTanfDetailCargo.setPaymentEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiTanfDetail", "findByCaseEdgOverPayment",
					biTanfDetailCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_TANF_DETAIL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_TANF_DETAIL", 16037);
		}

		return result;
	}




	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 * [Month], [Issued Amount],[Correct Amount],[Overpayment Reason],<Program> by calling method
	 *         findByCaseEdgOverPayment(int maxRows,BiFsDetailCargo cargo) from
	 *         BiFsDetailDAO.java
	 * @param CaseNum
	 * @param edgNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getBiFsDetailForOverPayment(long lCaseNum,long edgNum) throws CoException {
		Object[] result = null;
		BiFsDetailCargo biFsDetailCargo = new BiFsDetailCargo();
		biFsDetailCargo.setCaseNum(lCaseNum);
		biFsDetailCargo.setEdgNum(edgNum);
		biFsDetailCargo.setPaymentBeginDt(CoDateFactory.getTimestamp());
		biFsDetailCargo.setPaymentEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiFsDetail", "findByCaseEdgOverPayment",
					biFsDetailCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_FS_DETAIL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_FS_DETAIL", 16037);
		}

		return result;
	}





	/**
	 * @author mbhende new correspondence method to find [Month], [Issued Amount],[Correct Amount],[Overpayment Reason],[OverPayment Type]
	 * for Snap/Tanf overpayments
	 * for notice 23.02.10
	 * @param caseNo
	 * @return BvDiscrepancyCargo[]
	 *
	 */
	public Object[] getBvDiscrepancy(long lCaseNum,long edgNum,String claimId) throws CoException {
		Object[] result = null;
		BvDiscrepancyCargo bvDiscrepancyCargo = new BvDiscrepancyCargo();
		bvDiscrepancyCargo.setCaseNum(lCaseNum);
		bvDiscrepancyCargo.setEdgNum(edgNum);
		bvDiscrepancyCargo.setClaimId(claimId);


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvDiscrepancy", "findByCaseEdgClaimIdForOverPayments",
					bvDiscrepancyCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Discrepancy", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Bv_Discrepancy", 16037);
		}

		return result;
	}



	/**
	 * @author mbhende new correspondence method to find <Program_cd> for Snap/Tanf overpayments
	 * for notice 23.02.10
	 * @param claimId
	 * @return BvClaimCargo[]
	 *
	 */
	public Object[] getBvClaim(String claimId) throws CoException {
		Object[] result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		bvClaimCargo.setClaimId(claimId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findByClaimIdOnly",
					bvClaimCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Bv_Claim", 16037);
		}

		return result;
	}


	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 *         [SNAP EBT Expungement Amount] and [SNAP EBT Expungement Date]by calling method
	 *         findByCaseEdgExpungedAmt(int maxRows,
			BiFsDetailCargo cargo) from
	 *         BiFsDetailDAO.java
	 * @param CaseNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getBiFsDetailForExpungedAmt(long lCaseNum,long edgNum, String benefitNum) throws CoException {
		Object[] result = null;
		BiFsDetailCargo biFsDetailCargo = new BiFsDetailCargo();
		biFsDetailCargo.setCaseNum(lCaseNum);
		biFsDetailCargo.setEdgNum(edgNum);
		biFsDetailCargo.setBenefitNum(benefitNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiFsDetail", "findByCaseEdgExpungedAmt",
					biFsDetailCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_FS_DETAIL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_FS_DETAIL", 16037);
		}

		return result;
	}

	/**
	 * @author mbhende 
	 * New correspondence method to find the value for
	 *         [TANF EBT Expungement Date] and [TANF EBT Expungement Amount]by calling method
	 *         findByCaseEdgExpungedAmt(int maxRows,BiTanfDetailCargo cargo) from
	 *         BiTanfDetailDAO.java
	 * @param CaseNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getBiTanfDetailForExpungedAmt(long lCaseNum,long edgNum, String abenefitNum) throws CoException {
		Object[] result = null;
		BiTanfDetailCargo biTanfDetailCargo = new BiTanfDetailCargo();
		biTanfDetailCargo.setCaseNum(lCaseNum);
		biTanfDetailCargo.setEdgNum(edgNum);
		biTanfDetailCargo.setBenefitNum(abenefitNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiTanfDetail", "findByCaseEdgExpungedAmt",
					biTanfDetailCargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_TANF_DETAIL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BI_TANF_DETAIL", 16037);
		}

		return result;
	}






	/**
	 * @author mbhende New correspondence method to find the value for
	 *         [Interview Date] and [Interview Method]by calling method
	 *         findByCaseNum(int maxRows, long lCaseNum) from
	 *         DcIntervieweeDAO.java
	 * @param CaseNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getDcInterviewee(long lCaseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		DcIntervieweeCargo dcIntervieweeCargo = new DcIntervieweeCargo();
		Object[] params = new Object[1];
		params[0] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcInterviewee", "findByCaseNum",
					dcIntervieweeCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INTERVIEWEE", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for DcInterviewee of a Case in DC_INTERVIEWEE", 16037);
		}

		return result;
	}


	/**
	 * 
	 * @param lCaseNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public Object[] getCaseRecertDatesForCaseNumProgCd(long lCaseNum, String programCd) throws NoDataFoundException, CoException {
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRecertDatesCargo = new EdCaseRecertDatesCargo();
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = programCd;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByProgramCd",
					edCaseRecertDatesCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for DcInterviewee of a Case in ed_Case_Recert_Dates", 16037);
		}

		return result;
	}

	/**
	 * 
	 * @param lCaseNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public Object[] getCaseRecertDates(long lCaseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRecertDatesCargo = new EdCaseRecertDatesCargo();
		Object[] params = new Object[1];
		params[0] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseNum",
					edCaseRecertDatesCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for EdCaseRecertDatesCargo of a Case in ed_Case_Recert_Dates", 16037);
		}

		return result;
	}

	/**
	 * @author mbhende 
	 * New Method to find value for [Child Name] New
	 *         Correspondence Method to find all children aged between 3 and 19
	 *         years recieving Tanf or Snap benifits for current eligibilty run
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */

	public VCoEligIndvAgeTypeAssistCargo[] getChildrenRecievingBen(
			long caseNo, int ageInYears, String asstType)
					throws FrameworkException, ApplicationException, NoDataFoundException {
		VCoEligIndvAgeTypeAssistCollection col = new VCoEligIndvAgeTypeAssistCollection(
				conn);

		Object[] params = new Object[3];
		params[0] = caseNo;
		params[1] = ageInYears;
		params[2] = asstType;

		VCoEligIndvAgeTypeAssistCargo[] retArray = (VCoEligIndvAgeTypeAssistCargo[]) col
				.select("findByCaseNumAgeInYearsAsstCd", params);
		if (retArray == null || retArray.length == 0) {
			throw new NoDataFoundException("No data in VCoEligIndvAgeTypeAssist", 16037);
		}

		return retArray;
	}

	/**
	 * @author mbhende New correspondence method to find the value for [Child
	 *         Name] by calling method findByCaseIndv() from
	 *         DcEducationDAO.java and findByIndvIdList(int maxRows, long[]
	 *         indivID) from DcIndvDAO.java
	 * @param CaseNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getDcIndvEducation(long lCaseNum) throws CoException {
		Object[] result = null;
		DcEducationCargo dcEducationCargo = new DcEducationCargo();
		Object[] params = new Object[3];
		params[0] = CoDateFactory.getTimestamp();
		params[1] = CoDateFactory.getTimestamp();
		params[2] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEducation", "findByCaseIndvAttendReqSw", dcEducationCargo,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Education", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Dc_Education", 16037);
		}

		long[] indvIds = new long[result.length];
		for (int i = 0; i < result.length; i++) {
			indvIds[i] = ((DcEducationCargo) result[i]).getIndvId();
		}

		Object[] finalRes = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		Object[] fparams = new Object[1];
		fparams[0] = indvIds;
		try {
			finalRes = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByIndvIdList", dcIndvCargo, fparams, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Indv", 16312);
		}
		if (finalRes == null || finalRes.length == 0) {
			throw new NoDataFoundException("No data in Dc_Indv", 16037);
		}

		return finalRes;

	}

	/**
	 * @author mbhende New correspondence method to find the value for
	 *         [Application Received Date] by calling method
	 *         findReceivedDateByAppNum(int maxRows, String appNum) from ArApplicationForAidDAO.java
	 * @param appNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getArApplForAid(String appNum) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arApplicationForAidCargo = new ArApplicationForAidCargo();
		Object [] params=new Object[1];
		params[0]=appNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findReceivedDateByAppNum",
					arApplicationForAidCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ar_Application_For_Aid",
					16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Ar_Application_For_Aid",
					16037);
		}

		return result;
	}



	/**
	 * @author mbhende New correspondence method to find the value for
	 *         [Application Received Date] and [Program Code] for notice 23.02.11 by calling method
	 *         findByCaseNum(int maxRows, VArAppIndvProgCargo cargo) from VArAppIndvProgDAO.java
	 * @param caseNum
	 * @return Object[] from the resultset.
	 */
	public Object[] getVArAppIndvProg(long caseNum) throws CoException {
		Object[] result = null;
		VArAppIndvProgCargo vArAppIndvProgCargo = new VArAppIndvProgCargo();
		vArAppIndvProgCargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VArAppIndvProg", "findByCaseNum",
					vArAppIndvProgCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_Ar_App_Indv_Prog",
					16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_Ar_App_Indv_Prog",
					16037);
		}

		return result;
	}





	/**
	 * @author mbhende New correspondence method to find the value for [Time
	 *         Clock Detail Month] by calling method findByIndvIds(int
	 *         maxRows,long[] indvIds) from TcTransactionsDAO.java
	 * @param indvIds
	 *            long[]
	 * @return Object[] from the resultset.
	 */
	public Object[] getTcTrans(long[] indvIds) throws CoException {
		Object[] result = null;
		TcTransactionsCargo tcTransactionsCargo = new TcTransactionsCargo();
		Object[] params = new Object[1];
		params[0] = indvIds;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"TcTransactions", "findByIndvIds", tcTransactionsCargo,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Tc_Transactions", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Tc_Transactions", 16037);
		}

		return result;
	}

	/* methods for notices end here */








	/**
	 * Method is used to delete a mass mailing request
	 * 
	 * @param cargo
	 * @return int commitFlag
	 * @throws CoException
	 */
	public int deleteMassMailing(CoMassMailingReqCargo cargo)
			throws CoException {
		try {
			CoMassMailingReqCargo mailingReqCargo = new CoMassMailingReqCargo();
			int commitFlag = 0;
			CoMassMailingReqCollection massMailingColl = new CoMassMailingReqCollection(
					conn);
			massMailingColl.setEJBSupported(false);
			mailingReqCargo.setMassMailingSeqNum(cargo.getMassMailingSeqNum());
			massMailingColl.setCargo(mailingReqCargo);
			commitFlag = deleteMassMailing(massMailingColl);
			return commitFlag;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Delete Failed", 16795);
		}
	}

	private int deleteMassMailing(CoMassMailingReqCollection massMailingColl) {
		int commitFlag;
		boolean finalResult;
		try {
			finalResult = massMailingColl.delete();
			commitFlag = 1;
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		}
		return commitFlag;
	}

	/**
	 * Method is used to insert a mass mailing request
	 * 
	 * @param cargo
	 * @return int commitFlag
	 * @throws CoException
	 */
	public int insertMassMailing(CoMassMailingReqCargo cargo) throws CoException {
		try {
			int commitFlag = 0;
			openConnection();
			CoMassMailingReqCollection massMailingColl = new CoMassMailingReqCollection();
			massMailingColl.setEJBSupported(false);
			commitFlag = updateMassMailing(cargo, massMailingColl);
			return commitFlag;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Delete/Insert Failed", 16795);
		} finally {
			closeConnection();
		}
	}

	/**
	 * 
	 * @param cargo
	 * @param massMailingColl
	 * @return
	 */
	private int updateMassMailing(CoMassMailingReqCargo cargo, CoMassMailingReqCollection massMailingColl) {
		int commitFlag;
		try {
			if (cargo.getMassMailingSeqNum() != 0) {
				cargo.setHistorySeq(cargo.getMassMailingSeqNum());
			}
			massMailingColl.setCargo(cargo);
			massMailingColl.update(massMailingColl);

			commitFlag = 1;
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		}
		return commitFlag;
	}

	/**
	 * Method is used to update a mass mailing request
	 * 
	 * @param cargo
	 * @return int commitFlag
	 * @throws CoException
	 */
	public int editMassMailing(CoMassMailingReqCargo cargo) throws CoException {
		try {
			openConnection();
			int commitFlag = 0;
			CoMassMailingReqCollection massMailingColl = new CoMassMailingReqCollection();
			massMailingColl.setEJBSupported(false);
			massMailingColl.setCargo(cargo);
			commitFlag = insertMassMailing(massMailingColl);
			return commitFlag;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Delete Failed", 16795);
		} finally {
			closeConnection();
		}
	}

	/**
	 * 
	 * @param massMailingColl
	 * @return
	 */
	public int insertMassMailing(CoMassMailingReqCollection massMailingColl) {
		int commitFlag = 0;
		boolean finalResult;
		CoMassMailingReqCollection massMailingColl1 = new CoMassMailingReqCollection(conn);
		for(Object obj:massMailingColl){
			CoMassMailingReqCargo cargo=(CoMassMailingReqCargo) obj;
			commitFlag = updateMassMailing(cargo, massMailingColl);
		}
		/*  try {
        	finalResult = massMailingColl.insert();
        	commitFlag = 1;
        } catch (Exception e) {

        	CoDebugger.debugException(e.getMessage(), e);
        	commitFlag = -1;
        }*/
		return commitFlag;
	}

	/* Methods added by Mitali end here */
	/**
	 * Method to get data from ED_ELIG_TANF_BUDGET based on CASE_NUM and
	 * EDG_TRACE_ID.
	 * 
	 * @author rparanjpe
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public Object[] getEdgTANFBudget(long caseNum)
			throws CoException {
		Object[] result = null;
		EdEligTanfBudgetCargo edEligTanfBudgetCargo = new EdEligTanfBudgetCargo();
		Object[] params = new Object[2];
		params[0] = caseNum;
		params[1] = CoDateFactory.getTimestamp();
		edEligTanfBudgetCargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTanfBudget", "findByCaseNumManagementMonth",
					edEligTanfBudgetCargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligTanfBudget", 16325);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdEligTanfBudget", 16037);
		}

		return result;
	}



	/**
	 * Method to Update CO_REQUEST_RECIPIENTS with file name.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param fileName
	 *            String
	 * @return int
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 * @author kschopra
	 */
	public int updateCoReqRecipientFileName(long coReqSeq, String fileName)
			throws CoException {
		log.log(CoConstants.CO_NAME,ILog.INFO ,"At the start of updateCoReqRecipientFileName");
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoReqRecipientFileName - started");
		int success = -1;
		Object[] result = null;
		result = getCoRequestAllRecipients(coReqSeq);
		openConnection();
		CoRequestRecipientsCollection recipientsCollection = new CoRequestRecipientsCollection();
		CoRequestRecipientsCargo coRequestRecipientsCargo =	(CoRequestRecipientsCargo) result[0];
		recipientsCollection.setEJBSupported(false);
		coRequestRecipientsCargo.setLocationPath(fileName);
		recipientsCollection.add(coRequestRecipientsCargo);
		try {
			recipientsCollection.update();
			log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling recipientsCollection.update()");
			success = 1;
		} catch (Exception e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in updateCoReqRecipientFileName :: " + e.getMessage());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("CoDAOServices - updateCoReqRecipientFileName - exception : " + e.getMessage());
		} finally {
			closeConnection();
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoReqRecipientFileName - timeTaken : " + (System.currentTimeMillis() - start));
		return success;
	}


	/**
	 * This method is used to get V_CO_REQUEST History triggers for given
	 * document Ids.
	 * 
	 * @param docIds
	 * @param minVal
	 * @param maxVal
	 * @param generateDate
	 * @return
	 * @throws CoException
	 * @author kschopra
	 */
	public Object[] getPendingTriggersForBatchRequest(String docIds,
			String minVal, String maxVal, String generateDate)
					throws CoException {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - started");

		Object[] objParams = new Object[5];
		VCoRequestCollection coRequestCol = new VCoRequestCollection();
		VCoRequestCargo[] coRequestCargos = null; 

		objParams[0] = coRequestCol.getCargo();
		objParams[1] = minVal;
		objParams[2] = maxVal;
		objParams[3] = docIds;
		objParams[4] = generateDate;

		try {
			if (CoConstants.DOC_ID_NCH002.equalsIgnoreCase(docIds) || CoConstants.DOC_ID_NCH003.equalsIgnoreCase(docIds) || CoConstants.DOC_ID_NDHCN0102.equalsIgnoreCase(docIds)){ /**ND-44102 Changes for DOC_ID - NDHCN0102*/
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvApp", objParams);
			}else if(docIds != null && docIds.equalsIgnoreCase(CoConstants.NDMAELF23)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendingTriggerForForm1095B", objParams);
			}else if(docIds != null && (docIds.equalsIgnoreCase(CoConstants.NDCDN114) || docIds.equalsIgnoreCase(CoConstants.DOC_NDHCN0067) || docIds.equalsIgnoreCase(CoConstants.NDCCAP062) || docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP092) ||  docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCDN0068) || docIds.equalsIgnoreCase(CoConstants.NDCDN070) ||docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP124) 
					||docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP110) || docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP126) ||  docIds.equalsIgnoreCase(CoConstants.DOC_NDCCAP063) || docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP127))){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchProvider", objParams);
			}else if(docIds != null && (docIds.equalsIgnoreCase(CoConstants.CO_DOC_ID_NCH049))){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvCaseAppNCH049", objParams);
			}else if(docIds != null && docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDLIFCN91)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvCaseVendor", objParams);
			}
			else{
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvCaseApp", objParams);
			}
		} catch (FrameworkException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} catch (ApplicationException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		}		
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - timeTaken : " + (System.currentTimeMillis() - start));
		return coRequestCargos;
	}	

	/**
	 * Method to Update CO_REQUEST_RECIPIENTS with file name.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param fileName
	 *            String
	 * @return int
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 * @author kschopra
	 */
	public int updateCoReqRecipientFileName(long coReqSeq, long coRptSeq, String fileName) throws CoException {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoReqRecipientFileName - started");
		log.log(CoConstants.CO_NAME,ILog.INFO ,"At the start of updateCoReqRecipientFileName");

		int success = -1;
		Object[] result = null;
		result = getCoRequestRecipient(coReqSeq, coRptSeq);
		openConnection();
		CoRequestRecipientsCollection recipientsCollection = new CoRequestRecipientsCollection();
		CoRequestRecipientsCargo coRequestRecipientsCargo =	(CoRequestRecipientsCargo) result[0];
		recipientsCollection.setEJBSupported(false);
		coRequestRecipientsCargo.setLocationPath(fileName);
		recipientsCollection.add(coRequestRecipientsCargo);
		try {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling recipientsCollection.update()");
			recipientsCollection.update();
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Before calling recipientsCollection.update()");
			success = 1;
		} catch (Exception e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in updateCoReqRecipientFileName :: " + e.getMessage());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(" Error updating CO_REQUEST_RECIPIENTS table for File Name " + e, 16325);
		}
		finally {
			closeConnection();
		}
		 log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoReqRecipientFileName - timeTaken : " + (System.currentTimeMillis() - start));
		return success;
	}

	/**
	 * This method is used to update the CO Request Recipients for the
	 * correspondences processed succesfully. It will update the location path
	 * of the PDF and the print sw for the recipients.
	 * 
	 * @param coRptSeq
	 * @param coReqSeq
	 * @param filePath
	 * @return result int
	 * @throws CoException
	 * @author kschopra
	 */
	public int updateCoRecipientSwitches(long coRptSeq, long coReqSeq, String filePath) throws CoException {
		int result = 0;
		CoDebugger.debugInformation("INSIDE updateCoRecipientSwitches");
		CoRequestRecipientsCollection coReqRptCol = new CoRequestRecipientsCollection();
		Object coReqRptObj = null;
		CoRequestRecipientsCargo[] arrCoReqRptCargo = null;

		try {
			coReqRptObj = getCoRequestRecipients(coReqSeq, coRptSeq);
			openConnection();
			if (null != coReqRptObj && coReqRptObj instanceof CoRequestRecipientsCargo[]) {
				arrCoReqRptCargo = (CoRequestRecipientsCargo[]) coReqRptObj;
				for (int i = 0; i < arrCoReqRptCargo.length; i++) {
					arrCoReqRptCargo[i].setLocationPath(filePath);
					arrCoReqRptCargo[i].setPrintSw(CoConstants.YES_CHAR);
					coReqRptCol.setCargo(arrCoReqRptCargo[i]);
				}
			}
			coReqRptCol.update();
			log.log(CoConstants.CO_NAME,ILog.INFO ,"After calling coReqRptCol.update() ");
		} catch (ApplicationException e) {
			CoDebugger.debugException("ApplicationException while updating CO_REQUEST_RECIPIENTS switches", e);
			result = -1;
			throw new CoException("ApplicationException while updating CO_REQUEST_HISTORY switches - " + e.getMessage());
		} catch (FrameworkException e) {
			CoDebugger.debugException("FrameworkException while updating CO_REQUEST_RECIPIENTS switches", e);
			result = -1;
			throw new CoException("FrameworkException while updating CO_REQUEST_HISTORY switches - " + e.getMessage());
		} finally {
			closeConnection();
		}

		return result;
	}

	/**
	 * This method is used to update the CO Request History and Detail for the
	 * correspondences processed succesfully. It will update the related
	 * switches in the DB for the correspondences along with the Print Date.
	 * 
	 * @param coReqSeq long
	 * @return commitFlag int
	 * @throws CoException
	 * @author kschopra
	 */
	public int updateCoRequestSwitches(long coReqSeq,long coRptSeq)
			throws CoException {
		int commitFlag = 0;
		boolean resultFlag = false;

		CoRequestHistoryCollection coReqHistoryCol  = new CoRequestHistoryCollection();
		CoRequestHistoryCargo coReqCargo = new CoRequestHistoryCargo();
		Object coReqHistoryObj = null;
		CoRequestHistoryCargo[] arrCoReqHistoryCargo = null;

		CoRequestHistoryDetailCollection coReqHistDtlCol = new CoRequestHistoryDetailCollection();
		CoRequestHistoryDetailCargo coReqDtlCargo = new CoRequestHistoryDetailCargo();
		Object coReqDtlObj = null;
		CoRequestHistoryDetailCargo[] arrCoReqDtlCargo = null;

		coReqCargo.setCoReqSeq(coReqSeq);
		coReqHistoryCol.setCargo(coReqCargo);
		try {
			openConnection();
			coReqHistoryObj = coReqHistoryCol.select("findByReqSeq");
			coReqHistoryCol.clear();

			if (coReqHistoryObj != null && coReqHistoryObj instanceof CoRequestHistoryCargo[]) {
				openConnection();
				arrCoReqHistoryCargo = (CoRequestHistoryCargo[])coReqHistoryObj;
				arrCoReqHistoryCargo[0].setHistorySw(CoConstants.CHAR_Y);
				arrCoReqHistoryCargo[0].setOrigPrintDt(CoDateFactory.getTimestamp());

				// Check if there was an Exception while processing the Correspondence batch
				if (isCorrespondeceFailed(coReqSeq)) {
					arrCoReqHistoryCargo[0].setPendingTrigSw(CoConstants.CHAR_E);
				} else {
					arrCoReqHistoryCargo[0].setPendingTrigSw(CoConstants.CHAR_N);
				}

				coReqHistoryCol.add(arrCoReqHistoryCargo[0]);

				resultFlag = coReqHistoryCol.update();
			}
		} catch (ApplicationException e1) {
			commitFlag = -1;
			CoDebugger.debugException(
					"ApplicationException while updating CO_REQUEST_HISTORY switches", e1);
		} catch (FrameworkException e1) {
			commitFlag = -1;
			CoDebugger.debugException(
					"FrameworkException while updating CO_REQUEST_HISTORY switches", e1);
		} finally {
			closeConnection();
		}
		if (resultFlag) {
			try {
				openConnection();
				coReqDtlCargo.setCoReqSeq(coReqSeq);
				coReqDtlCargo.setCoRptSeq(coRptSeq);
				coReqHistDtlCol.add(coReqDtlCargo);
				coReqDtlObj = coReqHistDtlCol.select("findByCoReqSeq");
				coReqHistDtlCol.clear();
				openConnection();
				if (null != coReqDtlObj
						&& coReqDtlObj instanceof CoRequestHistoryDetailCargo[]) {
					arrCoReqDtlCargo = (CoRequestHistoryDetailCargo[]) coReqDtlObj;

					// Setting the Location Path of the PDF in the Cargo
					if(null!=arrCoReqDtlCargo && arrCoReqDtlCargo.length>0){
						arrCoReqDtlCargo[0].setPrintDt(CoDateFactory.getTimestamp());	
						coReqHistDtlCol.add(arrCoReqDtlCargo[0]);
					}
				}
				if(null!=coReqHistDtlCol && coReqHistDtlCol.size()>0 && !coReqHistDtlCol.isEmpty()){
					coReqHistDtlCol.update();
				}
			} catch (ApplicationException e) {
				commitFlag = -1;
				CoDebugger.debugException(
						"ApplicationException while updating CO_REQUEST_HISTORY_DETAILS"
								+ " switches", e);
			} catch (FrameworkException e) {
				commitFlag = -1;
				CoDebugger.debugException(
						"FrameworkException while updating CO_REQUEST_HISTORY_DETAILS"
								+ " switches", e);
			} finally {
				closeConnection();
			}
		}

		return commitFlag;
	}

	/**
	 * This method is used to check if the Correspondence has failed one or more
	 * Recipients.
	 * 
	 * @param coReqSeq long
	 * @return exceptionFlag boolean
	 * @author kschopra
	 */
	private boolean isCorrespondeceFailed(long coReqSeq) {

		boolean exceptionFlag = false;
		Object[] arrCoReqRptObj = null;
		CoRequestRecipientsCargo[] arrCoReqRptCargo = null;

		// Check if the PRINT_SW for any of the recipients for the given Correspondence is 'N'
		try {
			arrCoReqRptObj = getCoRequestAllRecipients(coReqSeq);
			if (arrCoReqRptObj != null
					&& arrCoReqRptObj instanceof CoRequestRecipientsCargo[]) {
				arrCoReqRptCargo = (CoRequestRecipientsCargo[])arrCoReqRptObj;
				for(int i=0; i<arrCoReqRptCargo.length; i++) {
					if (arrCoReqRptCargo[i].getPrintSw() == CoConstants.NO_CHAR) {
						exceptionFlag = true;
						break;
					}
				}
			}
		} catch (CoException e) {
			exceptionFlag = true;
			CoDebugger.debugException(
					"CoException while fetching recipients for CO_REQUEST_SEQ ---> "
							+ coReqSeq, e);
		}
		return exceptionFlag;
	}




	/**
	 * @author mbhende
	 * Generic method to find data from misc parameters
	 * new correspondence method to find Program_Name,Benifit_Amount and
	 *         Cancellation_Date from Misc_Parameters
	 * @param misc
	 * @return List
	 */
	public List<Object> getDataFromMiscParameters(String misc) throws NoDataFoundException {
		List<String> list = new ArrayList<String>();
		List<Object> finalList = new ArrayList<Object>();

		String[] data = null;
		String[] strArr = null;
		String [][] dataStore=null;
		String [] str=null;
		String[] strTempArr = null;

		if(null==misc){

			throw new NoDataFoundException("No data in Misc", 16031);
		}


		//for more than one field seperated by "|" in misc params
		if (misc.contains("|")) {
			strArr = misc.split("\\|");
			if (strArr[0].contains("=")) {
				strTempArr = strArr[0].split("=");

				if (strTempArr[1].contains(",")) {
					strTempArr = strTempArr[1].split(",");
				}
				else{
					strTempArr=new String[1];
				}
			}
			else{
				throw new NoDataFoundException("No data in Misc", 16031);
			}
			dataStore=new String[strArr.length][strTempArr.length];
		} //if ends

		//for a single value in misc params
		if(misc.contains("|")!=true){
			if (misc.contains("=")) {
				strTempArr = misc.split("=");

				if (strTempArr[1].contains(",")) {
					strTempArr = strTempArr[1].split(",");
				}

			}
			else{
				throw new NoDataFoundException("No data in Misc", 16031);
			}
			strArr=new String[1];
			dataStore=new String[strArr.length][1];
			dataStore[0][0]=strTempArr[1];
			list.add(strTempArr[0]);
			data=new String[1];
		}//if ends



		//for more than one field seperated by "|" in misc params
		if(misc.contains("|")){
			for(int i=0;i<strArr.length;i++){


				if (strArr[i].contains("=")) {
					str = strArr[i].split("=");

					list.add(str[0]);
					if (str[1].contains(",")) {
						data = str[1].split(",");
					}
					else{
						data=new String[1];
						data[0]=str[1];
					}


					for(int j=0;j<data.length;j++){

						dataStore[i][j]=data[j];

					}
				}
			}//for ends
		}//if ends

		for(int i=0;i<data.length;i++){
			Map <String, Object> map = new HashMap<String, Object>();
			for(int j=0;j<strArr.length;j++){
				map.put(list.get(j),dataStore[j][i]);
			}
			finalList.add(i, map);
		}
		return finalList;
	}





	/**
	 * @author snayak new correspondence method to find Program_Name,Benifit_Amount and
	 *         Cancellation_Date from Misc_Parameters
	 * @param misc
	 * @return List
	 */
	public List getProgBnAmtCnclDt(String misc) throws NoDataFoundException {
		List<Object[]> list = new ArrayList<Object[]>();
		String[] code = null;
		String[] amount = null;
		String[] date = null;
		String[] strArr = null;
		if (misc.contains("|")) {
			strArr = misc.split("\\|");
		} else {
			throw new NoDataFoundException("No data in Misc", 16031);
		}

		if (strArr[0].contains("=")) {
			String str[] = strArr[0].split("=");
			if (str[1].contains(",")) {
				code = str[1].split(",");
			}

			else if (!str[1].contains(",")) {
				code = new String[1];
				code[0] = str[1];
			} else {
				throw new NoDataFoundException("No data in Misc", 16031);
			}
		}

		if (strArr[1].contains("=")) {
			String str[] = strArr[1].split("=");
			if (str[1].contains(",")) {

				amount = strArr[1].split(",");
			} else if (!str[1].contains(",")) {
				amount = new String[1];
				amount[0] = str[1];
			} else {
				throw new NoDataFoundException("No data in Misc", 16031);
			}
		}
		if (strArr[2].contains("=")) {
			String str[] = strArr[2].split("=");
			if (str[1].contains(",")) {
				date = str[1].split(",");
			} else if (!str[1].contains(",")) {
				date = new String[1];
				date[0] = str[1];
			} else {
				throw new NoDataFoundException("No data in Misc", 16031);
			}

		}

		Object obj[] = new Object[3];
		for (int i = 0; i < code.length; i++) {
			obj[0] = code[i];
			obj[1] = amount[i];
			obj[2] = date[i];
			list.add(obj);

		}
		return list;

	}

	/**
	 * This method is used to fetch the Correspondence Sequence number for the
	 * re-printed correspondences on the basis of location path of the PDF
	 * generated by Adobe.
	 * 
	 * @param coRptSeq String
	 * @param filePath String
	 * @return coReqSeq long
	 * @throws CoException
	 * @author kschopra
	 */
	public long getCoReqSeqByFilePathAndReprint(String coRptSeq, String filePath)
			throws CoException {

		CoDebugger.debugMessage("getCoReqSeqByFilePathAndReprint IN:coRptSeq-"
				+ coRptSeq + "; filePath-" + filePath);
		long coReqSeq = 0;
		Object result[] = null;
		CoRequestRecipientsCargo[] arrCoReqRptCargo = null;

		CoRequestHistoryDetailCollection coReqHistDtlCol = new CoRequestHistoryDetailCollection();
		CoRequestHistoryDetailCargo coReqDtlCargo = new CoRequestHistoryDetailCargo();
		CoRequestHistoryDetailCargo[] arrCoReqDtlCargo = null;

		CoRequestRecipientsCargo coRptCargo = new CoRequestRecipientsCargo();

		if (StringUtils.isNotEmpty(coRptSeq)) {
			coRptCargo.setCoRptSeq(Long.parseLong(coRptSeq));
			coRptCargo.setLocationPath(filePath);

			try {
				// Fetch Co Request Recipients for given CoReqRptSeq and LocationPath.
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"CoRequestRecipients", "findReqSeqByLocationPath", coRptCargo, null,
						conn);
				if (result != null && result instanceof CoRequestRecipientsCargo[]) {
					arrCoReqRptCargo = (CoRequestRecipientsCargo[]) result;
					if (arrCoReqRptCargo != null && arrCoReqRptCargo.length > 0) {
						coReqDtlCargo.setCoReqSeq(arrCoReqRptCargo[0].getCoReqSeq());
						coReqHistDtlCol.add(coReqDtlCargo);

						// Check if the correspondence generated was a reprint request.
						arrCoReqDtlCargo = (CoRequestHistoryDetailCargo[]) coReqHistDtlCol
								.select("findByCoReqSeq");
						if (arrCoReqDtlCargo[0].getReprintSw() == CoConstants.CHAR_R) {
							coReqSeq = arrCoReqDtlCargo[0].getCoReqSeq();
						}						
					}
				}
			} catch (FrameworkException e) {
				/*CoDebugger.debugException(
						"FrameworkException while fetching CO Request Recipients for the given CO_REQ_SEQ ",
						e);*/
				throw new CoException(
						"FrameworkException while fetching CO Request Recipients for the given CO_REQ_SEQ "
								+ e);
			} catch (ApplicationException e) {
				/*CoDebugger.debugException(
						"ApplicationException while fetching CO Request Recipients for the given CO_REQ_SEQ ",
						e);*/
				throw new CoException(
						"ApplicationException while fetching CO Request Recipients for the given CO_REQ_SEQ "
								+ e);
			} catch (Exception e) {
				/*CoDebugger.debugException(
						"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ ",
						e);*/
				throw new CoException(
						"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
								+ e);
			}		
		}
		CoDebugger.debugMessage("getCoReqSeqByFilePathAndReprint OUT:coReqSeq-"
				+ coReqSeq);
		return coReqSeq;
	}	


	/**
	 * 
	 * @return vCoEligIndvCargos
	 * @throws CoException
	 */
	public VCoEligIndvAgeTypeAssistCargo[] getVCoEligCargoForEligibleCases() throws CoException {

		VCoEligIndvAgeTypeAssistCollection vCoEligIndvColl = new VCoEligIndvAgeTypeAssistCollection();
		VCoEligIndvAgeTypeAssistCargo[] vCoEligIndvCargos = null;

		Object[] objParams = {36,228};

		try {
			vCoEligIndvCargos = (VCoEligIndvAgeTypeAssistCargo[]) vCoEligIndvColl.select("findByAssitanceTypeAndAge",objParams);
		} catch (ApplicationException e) {
			CoDebugger.debugException(
					"ApplicationException while fetching eligible SNAP and TANF cases", e);
			throw new CoException(
					"ApplicationException while fetching eligible SNAP and TANF cases" + e);
		} catch (FrameworkException e) {
			CoDebugger.debugException(
					"FrameworkException while fetching eligible SNAP and TANF cases", e);
			throw new CoException(
					"FrameworkException while fetching eligible SNAP and TANF cases"+ e);
		}
		return vCoEligIndvCargos;
	}

	/**
	 * 
	 * @param caseAppNum
	 * @return
	 * @throws CoException
	 */
	public VCoEligIndvAgeTypeAssistCargo[] getVCoEligCargoForEligibleCase(
			long caseAppNum) throws CoException {
		CoDebugger.debugMessage("getVCoEligCargoForEligibleCase<--CaseNum:"
				+ caseAppNum);
		VCoEligIndvAgeTypeAssistCollection vCoEligIndvColl = new VCoEligIndvAgeTypeAssistCollection();
		VCoEligIndvAgeTypeAssistCargo[] vCoEligIndvCargos = null;

		Object[] objParams = {caseAppNum, 36, 228 };

		try
		{
			vCoEligIndvCargos = (VCoEligIndvAgeTypeAssistCargo[]) vCoEligIndvColl
					.select("findByCaseNumPartStatusCdAge", objParams);
		} catch (ApplicationException e)
		{
			CoDebugger
			.debugException(
					"ApplicationException while fetching eligible SNAP and TANF cases",
					e);
			throw new CoException(
					"ApplicationException while fetching eligible SNAP and TANF cases"
							+ e);
		} catch (FrameworkException e)
		{
			CoDebugger
			.debugException(
					"FrameworkException while fetching eligible SNAP and TANF cases",
					e);
			throw new CoException(
					"FrameworkException while fetching eligible SNAP and TANF cases"
							+ e);
		}
		CoDebugger.debugMessage("getVCoEligCargoForEligibleCase-->vCoEligIndvCargos:"
				+ vCoEligIndvCargos);

		return vCoEligIndvCargos;
	}


	//CH-20742-Kunal-Start
	/**
	 * 
	 * @param caseAppNum
	 * @return
	 * @throws CoException
	 */
	public VCoEligIndvAgeTypeAssistCargo[] getVCoEligCargoForEligibleCaseAllSegments(
			long caseAppNum)
					throws CoException {
		CoDebugger.debugMessage("getVCoEligCargoForEligibleCaseAllSegments<--CaseNum:"
				+ caseAppNum);
		VCoEligIndvAgeTypeAssistCollection vCoEligIndvColl = new VCoEligIndvAgeTypeAssistCollection();
		VCoEligIndvAgeTypeAssistCargo[] vCoEligIndvCargos = null;

		Object[] objParams = {caseAppNum, 36, 228 };

		try
		{
			vCoEligIndvCargos = (VCoEligIndvAgeTypeAssistCargo[]) vCoEligIndvColl
					.select("findByAssitanceTypeAndAgeAllSegments", objParams);
		} catch (ApplicationException e)
		{
			CoDebugger
			.debugException(
					"ApplicationException while fetching eligible SNAP and TANF cases",
					e);
			throw new CoException(
					"ApplicationException while fetching eligible SNAP and TANF cases"
							+ e);
		} catch (FrameworkException e)
		{
			CoDebugger
			.debugException(
					"FrameworkException while fetching eligible SNAP and TANF cases",
					e);
			throw new CoException(
					"FrameworkException while fetching eligible SNAP and TANF cases"
							+ e);
		}
		CoDebugger.debugMessage("getVCoEligCargoForEligibleCaseAllSegments-->vCoEligIndvCargos:"
				+ vCoEligIndvCargos);

		return vCoEligIndvCargos;
	}
	//CH-20742-Kunal-End
	/**
	 * 
	 * @return vCoEligIndvCargos
	 * @throws CoException
	 */
	public CoMassMailingReqCargo[] getCoMassMailingReqCargos() throws CoException {

		CoMassMailingReqCollection coMassMailingColl = new CoMassMailingReqCollection();
		CoMassMailingReqCargo[] coMassMailingCargos = null;

		try {
			coMassMailingCargos = (CoMassMailingReqCargo[]) coMassMailingColl.select("findAllUnprocessedMassMailing");
		} catch (ApplicationException e) {
			CoDebugger.debugException(
					"ApplicationException while fetching Mass Mailing Request Details", e);
			/*throw new CoException(
					"ApplicationException while fetching Mass Mailing Request Details" + e);*/
		} catch (FrameworkException e) {
			CoDebugger.debugException(
					"FrameworkException while fetching Mass Mailing Request Details", e);
			/*throw new CoException(
					"FrameworkException while fetching Mass Mailing Request Details"+ e);*/
		}
		return coMassMailingCargos;
	}

	/**
	 * 
	 * @param coMassMailingCargo
	 * @return
	 */
	public EdEligibilityCargo[] getActiveCasesByAsstTypeCd(CoMassMailingReqCargo coMassMailingCargo) {
		EdEligibilityCollection edEligColl = new EdEligibilityCollection();
		EdEligibilityCargo[] edEligCargos = null;

		Object[] objParams = new Object[2];
		String strAsstTypeCd = null;
		StringBuffer sbAsstTypeCd = new StringBuffer();

		StringTokenizer st = new StringTokenizer(coMassMailingCargo.getProgramLst(), ",");
		int cnt = st.countTokens();

		int i = 0; 
		while (st.hasMoreElements()) {
			strAsstTypeCd = st.nextToken();
			sbAsstTypeCd.append(CoConstants.SINGLE_QUOTE);
			sbAsstTypeCd.append(strAsstTypeCd);
			sbAsstTypeCd.append(CoConstants.SINGLE_QUOTE);
			if (i < cnt-1) {
				sbAsstTypeCd.append(CoConstants.COMMA);
			}
			i++;
		}
		objParams[0] = sbAsstTypeCd.toString();
		objParams[1] = coMassMailingCargo.getSchdDt();

		try {
			edEligCargos = (EdEligibilityCargo[]) edEligColl.select("findByStatusAsstTypeCode", objParams);
		} catch (FrameworkException e) {
			CoDebugger.debugException(
					"FrameworkException while fetching active cases for given Assitance Type Codes", e);
		} catch (ApplicationException e) {
			CoDebugger.debugException(
					"ApplicationException while fetching active cases for given Assitance Type Codes", e);
		}

		return edEligCargos;
	}

	/**
	 * 
	 * @param coMassMailingCargo
	 * @return
	 */
	public EdEligibilityCargo[] getActiveCasesByCoeCd(CoMassMailingReqCargo coMassMailingCargo) {
		EdEligibilityCollection edEligColl = new EdEligibilityCollection();
		EdEligibilityCargo[] edEligCargos = null;

		Object[] objParams = new Object[2];
		String strCoeCd = null;
		StringBuffer sbCoeCd = new StringBuffer();

		StringTokenizer st = new StringTokenizer(coMassMailingCargo.getProgramLst(), ",");
		int cnt = st.countTokens();

		int i = 0; 
		while (st.hasMoreElements()) {
			strCoeCd = st.nextToken();
			sbCoeCd.append(CoConstants.SINGLE_QUOTE);
			sbCoeCd.append(strCoeCd);
			sbCoeCd.append(CoConstants.SINGLE_QUOTE);
			if (i < cnt-1) {
				sbCoeCd.append(CoConstants.COMMA);
			}
			i++;
		}
		objParams[0] = sbCoeCd.toString();
		objParams[1] = coMassMailingCargo.getSchdDt();

		try {
			edEligCargos = (EdEligibilityCargo[]) edEligColl.select("findByStatusCoeCode", objParams);
		} catch (FrameworkException e) {
			CoDebugger.debugException(
					"FrameworkException while fetching active cases for given COE Codes", e);
		} catch (ApplicationException e) {
			CoDebugger.debugException(
					"ApplicationException while fetching active cases for given COE Codes", e);
		}

		return edEligCargos;
	}

	/**
	 *  Get the Individuals which are eligible	
	 * @param eligCargo
	 * @return
	 */
	public EdIndvEligibilityCargo[] getEligibleIndividuals(EdEligibilityCargo eligCargo){
		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(eligCargo.getCaseNum());
		edIndvEligCarg.setEdgTraceId(eligCargo.getEdgTraceId());

		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		try {
			edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
					.select("findByEligibleIndividualsPartStatusCd");
		}catch(Exception e){
			CoDebugger.debugException("Exception", e);
		}

		return edIndivEligCarArr;
	}

	/**
	 * Get the Individuals which are ineligible
	 * @param eligCargo
	 * @return
	 */
	public EdIndvEligibilityCargo[] getInEligibleIndividuals(EdEligibilityCargo eligCargo){
		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(eligCargo.getCaseNum());
		edIndvEligCarg.setEdgTraceId(eligCargo.getEdgTraceId());

		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		try {
			edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
					.select("findByInEligibleIndividuals");
		}catch(Exception e){
			CoDebugger.debugException("Exception", e);
		}

		return edIndivEligCarArr;
	}

	/**
	 * 
	 * @author knakra
	 * @purpose This method is used to return data for EM Change
	 * @param edEligibilityCargo
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getEmChangeData(EdEligibilityCargo edEligibilityCargo)
			throws CoException {

		Object[] result = null;

		EdEligibilityCargo eligibilityCargo = new EdEligibilityCargo();
		eligibilityCargo.setEdbcRunDt(edEligibilityCargo.getEdbcRunDt());
		eligibilityCargo.setCaseNum(edEligibilityCargo.getCaseNum());
		eligibilityCargo.setEdgNum(edEligibilityCargo.getEdgNum());
		eligibilityCargo.setProgramCd(edEligibilityCargo.getProgramCd());
		eligibilityCargo.setTypeOfAssistanceCd(edEligibilityCargo.getTypeOfAssistanceCd());
		eligibilityCargo.setEdgTraceId(edEligibilityCargo.getEdgTraceId());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findEMChangeData", eligibilityCargo, null, conn);


		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16842);
		}
		return result;

	}


	/**
	 * Get the Individuals which Abawd
	 * @param eligCargo
	 * @return
	 */
	public EdIndvEligibilityCargo[] getAbawdIndv(EdEligibilityCargo eligCargo){
		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(eligCargo.getCaseNum());
		edIndvEligCarg.setEdgTraceId(eligCargo.getEdgTraceId());

		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		try {
			edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
					.select("findByCasNumGrpIndAbawdSw");
		}catch(Exception e){
			CoDebugger.debugException(e.getMessage(), e);
		}

		return edIndivEligCarArr;
	}

	/**
	 * @author mbhende
	 * Method to get all the manual data based on coReqSeq number.
	 * from VCoManualDataValuesDAO
	 * @param coReqSeq
	 *            long
	 * @return VCoManualDataValuesCargo[]
	 * @throws CoException
	 * 
	 */
	public VCoManualDataValuesCargo[] getVCoManualDataValues(long coReqSeq) throws CoException {
		Object[] result = null;
		VCoManualDataValuesCargo vCoManualDataValuesCargo = new VCoManualDataValuesCargo();
		vCoManualDataValuesCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoManualDataValues", "findBySeqNum", vCoManualDataValuesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Error in getting data V_Co_Manual_Data_Values", 16001);
		}
		return result == null || result.length == 0 ? null
				: (VCoManualDataValuesCargo[]) result;
	}

	/**
	 * Method to get data for BI_FS_DETAIL for Case Num , Edg num and Program
	 * code.
	 * 
	 * @param caseNumber
	 *            long
	 * @param edgnum
	 *            long
	 * @param programCode
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * @throws FrameworkException 
	 * @throws ApplicationException 
	 * 
	 */
	public BiFsDetailCargo[] getBenefitMonth(EdEligibilityCargo eligCargo) throws CoException, ApplicationException, FrameworkException {

		BiFsDetailCargo biFsBenefitsCargo = new BiFsDetailCargo();
		biFsBenefitsCargo.setCaseNum(eligCargo.getCaseNum());
		biFsBenefitsCargo.setEdgTraceId(eligCargo.getEdgTraceId());

		BiFsDetailCollection biFsDetlColl = new BiFsDetailCollection();
		biFsDetlColl.setCargo(biFsBenefitsCargo);
		BiFsDetailCargo[] biFsDtlCarArr = null;
		biFsDtlCarArr = (BiFsDetailCargo[]) biFsDetlColl
				.select("findByBenefitMonth");
		return biFsDtlCarArr;
	}

	/**
	 * Method to get data from ED_INDV_ELIG_REASONS based on CASE_NUM,
	 * EDG_TRACE_ID.
	 * 
	 * @param caseNum
	 *            long
	 * @param traceId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getEdIndvEligReasonsForIndv(long caseNum, long traceId, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvNoticeReasonsCargo edIndvNoticeReasonsCargo = new EdIndvNoticeReasonsCargo();
		edIndvNoticeReasonsCargo.setCaseNum(caseNum);
		edIndvNoticeReasonsCargo.setEdgTraceId(traceId);
		edIndvNoticeReasonsCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "findByIndvId",
					edIndvNoticeReasonsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}
		return result;
	}

	/**
	 * Get Individuals which are Disqualified for Tanf
	 * @param eligCargo
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public EdDcIndvDisqPenaltiesCargo[] findTanfDisqIndv(EdEligibilityCargo eligCargo) throws CoException, ApplicationException, FrameworkException {

		EdDcIndvDisqPenaltiesCargo edDcIndvDisqPenaltiesCargo = new EdDcIndvDisqPenaltiesCargo();
		edDcIndvDisqPenaltiesCargo.setCaseNum(eligCargo.getCaseNum());
		edDcIndvDisqPenaltiesCargo.setPenDisBeginDt(eligCargo.getPaymentBegDt());

		EdDcIndvDisqPenaltiesCollection edDcIndvDisqPenaltiesColl = new EdDcIndvDisqPenaltiesCollection();
		edDcIndvDisqPenaltiesColl.setCargo(edDcIndvDisqPenaltiesCargo);
		EdDcIndvDisqPenaltiesCargo[] edDcIndvDisqPenaltiesCarArr = null;
		edDcIndvDisqPenaltiesCarArr = (EdDcIndvDisqPenaltiesCargo[]) edDcIndvDisqPenaltiesColl
				.select("findTanfDisqIndv");
		return edDcIndvDisqPenaltiesCarArr;
	}

	/**
	 * Get ED_EMER_ASSIST for case number and edge trace id
	 * @param eligCargo
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public EdEmerAssistCargo[] findEmEmerAssitByCaseNumEdgTraceId(EdEligibilityCargo eligCargo) throws CoException, ApplicationException, FrameworkException {

		EdEmerAssistCargo edEmerAssistCargo = new EdEmerAssistCargo();
		edEmerAssistCargo.setCaseNum(eligCargo.getCaseNum());
		edEmerAssistCargo.setEdgeTraceId(eligCargo.getEdgTraceId());

		EdEmerAssistCollection edEmerAssistColl = new EdEmerAssistCollection();
		edEmerAssistColl.setCargo(edEmerAssistCargo);
		EdEmerAssistCargo[] edEmerAssistCarArr = null;
		edEmerAssistCarArr = (EdEmerAssistCargo[]) edEmerAssistColl
				.select("findByCaseNumEdgTraceId");
		return edEmerAssistCarArr;
	}

	/**
	 * Get DC_EMERGENCY_ASSIST for case number
	 * @param eligCargo
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public DcEmergencyAssistCargo[] findDcEmerAssistByCaseNum(long caseNum) throws CoException, ApplicationException, FrameworkException {

		DcEmergencyAssistCargo dcEmergencyAssisCargo = new DcEmergencyAssistCargo();
		dcEmergencyAssisCargo.setCaseNum(caseNum);

		DcEmergencyAssistCollection dcEmergencyAssisColl = new DcEmergencyAssistCollection();
		dcEmergencyAssisColl.setCargo(dcEmergencyAssisCargo);
		DcEmergencyAssistCargo[] dcEmergencyAssisCarArr = null;
		dcEmergencyAssisCarArr = (DcEmergencyAssistCargo[]) dcEmergencyAssisColl
				.select("findByCaseNumber");
		return dcEmergencyAssisCarArr;
	}

	/**
	 * Method returns the me/mc edg budget.
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 * @throws FrameworkException 
	 * @throws ApplicationException 
	 */
	public EdIndvEligibilityCargo[] getEligChild(long caseNum, String edgTraIdLstStr)
			throws CoException, ApplicationException, FrameworkException {

		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(caseNum);
		//Setting Edge trace id list string in AlienTypeCd
		edIndvEligCarg.setAlienTypeCd(edgTraIdLstStr);

		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
				.select("findEligChildForCaseNumEdgeTraceIdList");
		return edIndivEligCarArr;
	}

	/*--< Kunal S >--< CH-2672 >--< 1/12/2011 >--< Start >--*/
	/**
	 * @author Kunal Fetch Employee Names
	 * @param empid, empnum
	 * @return Object[] from the resultset.
	 */
	public Object[] getMoEmployeesByEmpID(long empID) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[1];
		objArr[0]=empID;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findMoEmployeeByEmpId", moEmployeesCargo,
					objArr, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16037);
		}

		return result;
	}
	/*--< Kunal S >--< CH-2672 >--< 1/12/2011 >--< End >--*/	

	/**
	 * @author snayak 
	 * @param caseNum,appealSeqNo
	 * @return Object[] from the resultset.
	 */
	public Object[] findAdminReviewDate(long caseNum,long appealSeqNo)throws CoException{

		Object[] result = null;
		HeRestoreBenefitsCargo heRestoreBenefitsCargo=new HeRestoreBenefitsCargo();
		Object [] params=new Object[2];
		params[0]=caseNum;
		params[1]=appealSeqNo;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"HeRestoreBenefits", "findByAppealSequenceNoCaseNo",
					heRestoreBenefitsCargo,params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for HeRestoreBenefits ",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in HE_RESTORE_BENEFITS",
					16063);
		}
		return result;

	}

	/**
	 * 
	 * @param caseNum
	 * @param edgNum
	 * @return result
	 * 			EdDcIndvDisqPenaltiesCargo[]
	 * @throws CoException
	 */
	public EdDcIndvDisqPenaltiesCargo[] findByEdgNumCaseNum(long caseNum, long edgNum) throws CoException {
		EdDcIndvDisqPenaltiesCargo[] result = null;
		EdDcIndvDisqPenaltiesCargo disqPenaltiesCargo = new EdDcIndvDisqPenaltiesCargo();
		EdDcIndvDisqPenaltiesCollection dcIndvDisqPenaltiesCollection = new EdDcIndvDisqPenaltiesCollection();
		disqPenaltiesCargo.setCaseNum(caseNum);
		disqPenaltiesCargo.setEdgNum(edgNum);
		dcIndvDisqPenaltiesCollection.setCargo(disqPenaltiesCargo);
		try {
			result = (EdDcIndvDisqPenaltiesCargo[])dcIndvDisqPenaltiesCollection
					.select("findByEdgNumCaseNum");
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_DDC_INDV_DISQ_PENALTIES",
					16346);
		}

		return result;
	}
	

	/**
	 * 
	 * @param caseNum
	 * @param edgNum
	 * @return result
	 * 			EdDcIndvDisqPenaltiesCargo[]
	 * @throws CoException
	 */
	public DcIndvNonCooperationCargo[] findByIndvIdDCIndvNonCooperation(long indvId) throws CoException {

		DcIndvNonCooperationCargo[] result = null;
		DcIndvNonCooperationCargo indvDisqPenaltiesCargo = new DcIndvNonCooperationCargo();
		DcIndvNonCooperationCollection nonCooperationCollection = new DcIndvNonCooperationCollection();
		indvDisqPenaltiesCargo.setIndvId(indvId);
		nonCooperationCollection.setCargo(indvDisqPenaltiesCargo);
		try {
			result = (DcIndvNonCooperationCargo[])nonCooperationCollection
					.select("findByIndvIdDCIndvNonCooperation");
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_NON_COOPERATION",
					16346);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return result
	 * 			EdDcIndvDisqPenaltiesCargo[]
	 * @throws CoException
	 */
	public DcIndvNonCooperationCargo[] findByIndvIdDCIndvNonCooperationForClosedCase(long caseNumber) throws CoException {

		DcIndvNonCooperationCargo[] result = null;
		DcIndvNonCooperationCargo indvDisqPenaltiesCargo = new DcIndvNonCooperationCargo();
		DcIndvNonCooperationCollection nonCooperationCollection = new DcIndvNonCooperationCollection();
		indvDisqPenaltiesCargo.setCaseNum(caseNumber);
		nonCooperationCollection.setCargo(indvDisqPenaltiesCargo);
		try {
			result = (DcIndvNonCooperationCargo[])nonCooperationCollection
					.select("findByIndvIdDCIndvNonCooperationForClosedCase");
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_NON_COOPERATION",
					16346);
		}
		return result;
	}
	
	/**
	 * 
	 * @param caseNum
	 * @param payBegDt
	 * @param edgNum
	 * @return EdEligibilityCargo[]
	 * @throws CoException
	 */
	public EdEligibilityCargo[] findApprovedRecordsPast12Months(long caseNum, Timestamp payBegDt, long edgNum) throws CoException {

		EdEligibilityCargo[]  result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		EdEligibilityCollection edEligibilityCollection = new EdEligibilityCollection();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setPaymentBegDt(payBegDt); 	
		edEligibilityCargo.setEdgNum(edgNum);
		edEligibilityCollection.setCargo(edEligibilityCargo);
		try {
			result = (EdEligibilityCargo[])edEligibilityCollection
					.select("findByApprovedRecordsPast12Months");
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_NON_COOPERATION",
					16346);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param traceId
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public EdIndvEligibilityCargo[] getEdIndvNotDisqualifiedNotExcluded(long caseNum, long traceId) 
			throws CoException {

		EdIndvEligibilityCargo[] result = null;
		EdIndvEligibilityCargo indvEligibilityCargo = new EdIndvEligibilityCargo();
		EdIndvEligibilityCollection eligibilityCollection = new EdIndvEligibilityCollection();

		indvEligibilityCargo.setCaseNum(caseNum);
		indvEligibilityCargo.setEdgTraceId(traceId);
		eligibilityCollection.setCargo(indvEligibilityCargo);
		try {
			result = (EdIndvEligibilityCargo[])eligibilityCollection
					.select("findByCaseNumberProgrameCd");
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}

		return result;
	}

	/**
	 * 
	 * @param indvId
	 * @return result
	 * 			TcExtendedBnftDetailsCargo[]
	 * @throws CoException
	 */
	public TcExtendedBnftDetailsCargo[] getTcExtendedBnftDetailsCargos(long indvId) throws CoException {
		TcExtendedBnftDetailsCargo[] result = null;
		TcExtendedBnftDetailsCargo bnftDetailsCargo = new TcExtendedBnftDetailsCargo();
		TcExtendedBnftDetailsCollection bnftDetailsCollection = new TcExtendedBnftDetailsCollection();
		bnftDetailsCargo.setIndvId(indvId);
		bnftDetailsCollection.setCargo(bnftDetailsCargo);
		try {
			result = (TcExtendedBnftDetailsCargo[])bnftDetailsCollection
					.select("findByIndvIdAndEffectiveDate");
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param traceId
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public EdIndvEligibilityCargo[] getEdIndvEligibilityData(long caseNum, long traceId) 
			throws CoException {

		EdIndvEligibilityCargo[] result = null;
		EdIndvEligibilityCargo indvEligibilityCargo = new EdIndvEligibilityCargo();
		EdIndvEligibilityCollection eligibilityCollection = new EdIndvEligibilityCollection();

		indvEligibilityCargo.setCaseNum(caseNum);
		indvEligibilityCargo.setEdgTraceId(traceId);
		eligibilityCollection.setCargo(indvEligibilityCargo);
		try {
			result = (EdIndvEligibilityCargo[])eligibilityCollection
					.select("findByCaseNumber");
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_INDV_NOTICE_REASONS",
					16346);
		}

		return result;
	}

	/**
	 * Get Individuals which are FIA Required for Tanf
	 * @param casenum
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */

	public EdIndvEligibilityCargo[] getFIARequiredIndv(long casenum, EdEligibilityCargo cargo) throws CoException, ApplicationException, FrameworkException {

		EdIndvEligibilityCargo edIndvEligibilityCargo = new EdIndvEligibilityCargo();
		EdIndvEligibilityCollection edIndvEligibilityColl = new EdIndvEligibilityCollection();


		EdIndvEligibilityCargo[] edIndvEligibilityCargoArrTemp = null;
		EdEligibilityCargo[] edEligibilityCargoArr = null;
		EdEligibilityCollection edEligibilityColl= new EdEligibilityCollection();
		edIndvEligibilityCargo.setCaseNum(casenum);
		Object []parms =new Object[1];
		Object []args = new Object[1];
		args[0] = cargo;

		edEligibilityCargoArr = (EdEligibilityCargo[])edEligibilityColl.select("findByCaseNumTANFPaymentDates", args);

		EdIndvEligibilityCargo[] edIndvEligibilityCargoArr = new EdIndvEligibilityCargo[edEligibilityCargoArr.length];

		for (int i=0;i<edEligibilityCargoArr.length;i++)
		{
			parms[0] = edEligibilityCargoArr[i];

			edIndvEligibilityCargoArrTemp = (EdIndvEligibilityCargo[])edIndvEligibilityColl.select("findFIARequiredIindv", parms);
			edIndvEligibilityCargoArr[i] = edIndvEligibilityCargoArrTemp[0];
		}



		return edIndvEligibilityCargoArr;

	}

	/**
	 * @author snayak 
	 * @param indivId,activityCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getWcActivityAssignment(long indivId,String activityCd)throws CoException{
		Object[] result = null;
		WcActivityAssignmentCargo wcActivityAssignmentCargo=new WcActivityAssignmentCargo();
		Object [] params=new Object[2];
		params[0]=indivId;
		params[1]=activityCd;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"WcActivityAssignment", "findAssigment",
					wcActivityAssignmentCargo,params, conn);
		} catch (Exception e) {
			CoDebugger.debugException("NCH033 Exception - "+e.getMessage(), e);
			throw new CoException("Select failed for  WcActivityAssignment",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("NCH033 - No data in WcActivityAssignment",
					16063);
		}
		return result;
	}


	/**
	 * 
	 * @param aCoObj
	 * @return result
	 * 			VCoRequestDAO[]
	 * @throws CoException
	 */
	public VCoRequestCargo[] checkExistingOriginalReqForEligibilityNotice(COCorrespondence aCoObj) 
			throws CoException  {
		VCoRequestCargo[] result = null;
		VCoRequestCargo vCoRequestCargo = new VCoRequestCargo();
		VCoRequestCollection vCoRequestColl = new VCoRequestCollection();
		CorrespondenceServices.formatCoObject(vCoRequestCargo, aCoObj);
		vCoRequestCargo.setT2DocId(aCoObj.getDocId());

		java.util.Date dt = null;
		if (aCoObj.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = aCoObj.getGenerateDate();
		}
		java.sql.Timestamp sqlDt = new java.sql.Timestamp(dt.getTime());
		vCoRequestCargo.setGenerateDt(sqlDt);
		vCoRequestColl.setCargo(vCoRequestCargo);

		try {
			result = (VCoRequestCargo[])vCoRequestColl.select(
					"findByExistingOriginalRequestForNCH001");
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16098);
		}
		return result;
	}
	/**
	 * @author snayak 
	 * @param indivId,activityCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getEdVerificationCheckList(long caseNum,long edgeNum)throws CoException{
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCheckList=new EdVerificationChecklistCargo();
		edVerificationCheckList.setCaseNum(caseNum);
		edVerificationCheckList.setEdgNum(edgeNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumEdgeNumForNCH034",
					edVerificationCheckList,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}
	//CH-25848-Kunal-Start
	/**
	 * @author snayak 
	 * @param indivId,activityCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getEdVerificationCheckList(long caseNum)throws CoException{
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationCheckList=new EdVerificationChecklistCargo();
		edVerificationCheckList.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumForNCH034",
					edVerificationCheckList,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}

	/**
	 * Method to get Verification check list for NDHCELN18
	 * @author akankshagupta 
	 * @param caseNum,programCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getEdVerificationCheckListNDHCELN18(long caseNum,String programCd)throws CoException{
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		EdVerificationChecklistCargo cargo =new EdVerificationChecklistCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEffBeginDt(today);
		cargo.setEffEndDt(today);
		cargo.setProgramCd(programCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumberNDHCELN18",
					cargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}


	/**
	 * Method to get Verification check list for NDHCELN18
	 * @author dgujjareddy 
	 * @param indivId,activityCd
	 * @return Object[] from the resultset.
	 */
	public Object[] getEdVerificationCheckListForNDHCELN18(long caseNum)throws CoException{
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		EdVerificationChecklistCargo cargo =new EdVerificationChecklistCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEffBeginDt(today);
		cargo.setEffEndDt(today);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumForNDHCELN18",
					cargo,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}

	//CH-25848-Kunal-End
	/**
	 * to get child support/dependent care/ alimony expense details for FCH272
	 * @author mbhende
	 * @param caseNo
	 * @return
	 */
	public List <CoExpenseOwnerCargo> getExpenseOwnerDetailsForChildSupDependCare(long caseNo) {
		List <CoExpenseOwnerCargo> coExpCargoList = new ArrayList <CoExpenseOwnerCargo>();
		CoExpenseOwnerCargo coExpenseOwnerCargo=null;
		Object [] obj;
		int i=0;
		try {

			obj = (DcDependCareDeductionsCargo[])getDcDependCareDeductions(caseNo);
			DcDependCareDeductionsCargo dcDependCareDeductionsCargo=null;
			for(i=0;i<obj.length;i++){
				coExpenseOwnerCargo =  new CoExpenseOwnerCargo();
				dcDependCareDeductionsCargo=(DcDependCareDeductionsCargo)obj[i];
				coExpenseOwnerCargo.setExpenseOwnerIndvId(dcDependCareDeductionsCargo.getIndvId());
				coExpenseOwnerCargo.setExpenseType("Dependent Care");
				coExpenseOwnerCargo.setExpensePaidForIndvId(dcDependCareDeductionsCargo.getPaidForIndvId());
				coExpCargoList.add(coExpenseOwnerCargo);
			}
		} catch (CoException e) {
			CoDebugger.debugException(e.getMessage(), e);
		}

		try {

			obj = (DcSupportDeductionsCargo[])getSupportDeductions(caseNo);
			DcSupportDeductionsCargo dcSupportDeductionsCargo=null;
			for(int j=0;j<obj.length;j++){
				coExpenseOwnerCargo =  new CoExpenseOwnerCargo();
				dcSupportDeductionsCargo=(DcSupportDeductionsCargo)obj[j];
				coExpenseOwnerCargo.setExpenseOwnerIndvId(dcSupportDeductionsCargo.getIndvId());
				coExpenseOwnerCargo.setExpenseType(getSupportExpenseDetails(dcSupportDeductionsCargo.getSupportTypeCd()));
				coExpenseOwnerCargo.setExpensePaidForIndividual(dcSupportDeductionsCargo.getPrsnsCvrdByPymt());
				coExpCargoList.add(coExpenseOwnerCargo);
			}
		} catch (CoException e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return coExpCargoList;
	}



	/**
	 * to get medical expense details for FCH272
	 * @author mbhende
	 * @param caseNo
	 * @return
	 */
	public CoExpenseOwnerCargo[] getExpenseOwnerDetailsForMedicalExp(long caseNo) {
		CoExpenseOwnerCargo[] coExpenseOwnerCargoArr = new CoExpenseOwnerCargo[5];
		Object [] obj;
		int i=0;
		try {

			obj = (DcMedicalDeductionsCargo[])getDcMedicalDeductions(caseNo);
			for(i=0;i<obj.length;i++){
				coExpenseOwnerCargoArr[i].setExpenseType(((DcMedicalDeductionsCargo)obj[i]).getDeductionTypeCd());
				coExpenseOwnerCargoArr[i].setExpensePaidForIndvId(((DcMedicalDeductionsCargo)obj[i]).getIndvId());
			}
		} catch (CoException e) {
			CoDebugger.debugException(e.getMessage(), e);
		}

		return coExpenseOwnerCargoArr;
	}



	/**
	 * to get shelter/utility expense details for FCH272
	 * @author mbhende
	 * @param caseNo
	 * @return
	 */
	public List <CoExpenseOwnerCargo> getExpenseOwnerDetailsForShelterUtilExp(long caseNo) {
		List <CoExpenseOwnerCargo> coExpCargoList = new ArrayList <CoExpenseOwnerCargo>();
		CoExpenseOwnerCargo coExpenseOwnerCargo=null;
		Object [] obj;
		int i=0;
		try {

			obj = (DcShelterDeductionsCargo[])getDcShelterDeductions(caseNo);
			DcShelterDeductionsCargo dcShelterDeductionsCargo=null;
			for(i=0;i<obj.length;i++){
				coExpenseOwnerCargo =  new CoExpenseOwnerCargo();
				dcShelterDeductionsCargo=(DcShelterDeductionsCargo)obj[i];
				coExpenseOwnerCargo.setExpenseOwnerIndvId(dcShelterDeductionsCargo.getIndvId());
				coExpenseOwnerCargo.setExpenseType(getShelterExpenseTypeDetails(dcShelterDeductionsCargo.getExpenseTypeCd()));
				coExpCargoList.add(coExpenseOwnerCargo);
			}
		} catch (CoException e) {
			CoDebugger.debugException(e.getMessage(), e);
		}

		try {

			obj = (DcUtilityDeductionsCargo[])getDcUtilityDeductions(caseNo);
			DcUtilityDeductionsCargo dcUtilityDeductionsCargo=null;
			for(int j=0;j<obj.length;j++){
				coExpenseOwnerCargo =  new CoExpenseOwnerCargo();
				dcUtilityDeductionsCargo=(DcUtilityDeductionsCargo)obj[j];

				if(dcUtilityDeductionsCargo.getHeatingCoolingExpenseSw()=='Y' || dcUtilityDeductionsCargo.getLiheaaAssistanceSw()=='Y' ||  compareDcUtilitySw(dcUtilityDeductionsCargo)  ) {
					coExpenseOwnerCargo.setExpenseType("Heating or Cooling");	
					coExpenseOwnerCargo.setExpenseOwnerIndvId(dcUtilityDeductionsCargo.getIndvId());
					coExpCargoList.add(coExpenseOwnerCargo);
				}
				else{
					String otherUtilities=dcUtilityDeductionsCargo.getOtherUtilities();
					if(otherUtilities.contains("|")){
						String [] strArr=otherUtilities.split("|");
						for(int x=0;x<strArr.length;x++){
							coExpenseOwnerCargo.setExpenseType(getUtilityExpenseTypeDetails(strArr[x]));
							coExpenseOwnerCargo.setExpenseOwnerIndvId(dcUtilityDeductionsCargo.getIndvId());
							coExpCargoList.add(coExpenseOwnerCargo);
						}
					}
					if(!otherUtilities.contains("|") && null!=otherUtilities){
						coExpenseOwnerCargo.setExpenseType(getUtilityExpenseTypeDetails(otherUtilities));
						coExpenseOwnerCargo.setExpenseOwnerIndvId(dcUtilityDeductionsCargo.getIndvId());

						coExpCargoList.add(coExpenseOwnerCargo);
					}

				}//else ends

			}
		} catch (CoException e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return coExpCargoList;
	}

	private boolean compareDcUtilitySw(DcUtilityDeductionsCargo dcUtilityDeductionsCargo) {
		return (dcUtilityDeductionsCargo.getAidOtherThanLiheaaSw()=='Y' || dcUtilityDeductionsCargo.getIndvUsageOrFlatChargesSw()=='Y' || dcUtilityDeductionsCargo.getDirIndirEnergyAssisSw()=='Y');
	}

	public EdCaseRecertDatesCargo[] getSNAPRecertDate(long casenum) throws CoException, ApplicationException, FrameworkException
	{
		EdCaseRecertDatesCollection edCaseRecertDatesCollection = new EdCaseRecertDatesCollection();

		EdCaseRecertDatesCargo []edCaseRecertDatesCargoArr = null;

		Object []parms = new Object[1];
		parms[0] = casenum;

		edCaseRecertDatesCargoArr = (EdCaseRecertDatesCargo[])edCaseRecertDatesCollection.select("findByCaseNum",parms);

		return edCaseRecertDatesCargoArr;
	}

	public WcEmpPlanCargo[] getTANFGoodCause(long indvID) throws CoException, ApplicationException, FrameworkException
	{
		WcEmpPlanCollection wcEmpPlanCollection = new WcEmpPlanCollection();

		WcEmpPlanCargo []wcEmpPlanCargoArr = null;
		Object []parms = new Object[1];
		parms[0] = String.valueOf(indvID);

		wcEmpPlanCargoArr = (WcEmpPlanCargo[])wcEmpPlanCollection.select("findByIndvIds",parms);

		return wcEmpPlanCargoArr;
	}
	/**
	 * @author snayak
	 * @param caseNum,edgeTraceId    
	 * @return Object[] from the resultset.
	 */	


	public Object[] getEdEligibility(long caseNum,long edgeTraceId)throws CoException{
		Object[] result = null;
		EdEligibilityCargo edEligibility=new EdEligibilityCargo();
		edEligibility.setCaseNum(caseNum);
		edEligibility.setEdgTraceId(edgeTraceId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgeTraceId",
					edEligibility,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}
	//CH-25848-Kunal-Start
	/**
	 * @author snayak
	 * @param caseNum,edgeTraceId    
	 * @return Object[] from the resultset.
	 */	


	public Object[] getEdEligibilityForNCH034(long caseNum)throws CoException{
		Object[] result = null;
		EdEligibilityCargo edEligibility=new EdEligibilityCargo();
		edEligibility.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumForNCH034",
					edEligibility,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdVerificationChecklist",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}

	//CH-25848-Kunal-End
	/**
	 * @author snayak
	 * @param caseNum,edgeNum    
	 * @return Object[] from the resultset.
	 */
	public Object[] getEdCaseRecertDates(long caseNum,long edgeNum)throws CoException{
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRctDt=new EdCaseRecertDatesCargo();
		edCaseRctDt.setCaseNum(caseNum);
		edCaseRctDt.setEdgNum(edgeNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findByCaseNumEdgeNum",
					edCaseRctDt,null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for  EdCaseRecertDates",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdVerificationChecklist",
					16063);
		}
		return result;
	}

	/**
	 * 
	 * Eligibility notice trigger
	 * @param correspondence
	 * @return COCorrespondence
	 * 			correspondence
	 * @throws CoException
	 */
	public COCorrespondence initiateEligibilityCorrespondence(COCorrespondence correspondence) throws CoException {
		CoRequestGenerator requestGenerator = new CoRequestGenerator(this);
		COCorrespondence co = correspondence;
		co = requestGenerator.createRequest(co); 		
		return co;
	}

	/**
	 * Eligibility notice form inclusion trigger
	 * @param correspondence
	 * @throws CoException
	 */
	public void insertEligibilityNoticeForms(COCorrespondence correspondence) throws CoException {
		CoRequestGenerator requestGenerator = new CoRequestGenerator(this);
		requestGenerator.insertEligibilityNoticeForms(correspondence); 		
	}

	/**
	 * Get CO_MASS_MAILING_REQ for mass mailing id
	 * @param mass mailing id
	 * @return
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public CoMassMailingReqCargo[] findMassMailingById(long massMailingId) throws ApplicationException, FrameworkException {

		CoMassMailingReqCargo coMassMailingReqCargo = new CoMassMailingReqCargo();
		coMassMailingReqCargo.setMassMailingId(massMailingId);

		CoMassMailingReqCollection coMassMailingReqColl = new CoMassMailingReqCollection();
		coMassMailingReqColl.setCargo(coMassMailingReqCargo);
		CoMassMailingReqCargo[] coMassMailingReqCarArr = null;
		coMassMailingReqCarArr = (CoMassMailingReqCargo[]) coMassMailingReqColl
				.select("findMassMailingById");
		return coMassMailingReqCarArr;
	}

	/**
	 *  Get the ED Individuals for case num, edge trace id and indv id	
	 * @param eligCargo
	 * @return
	 */
	public EdIndvEligibilityCargo[] getEdIndvForCaseNumEdgTraceIdIndvId(long caseNum, long edgTraceId, long indvId){
		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(caseNum);
		edIndvEligCarg.setEdgTraceId(edgTraceId);
		edIndvEligCarg.setIndvId(indvId);

		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		try {
			edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
					.select("findByCaseIndvIDTraceID");
		}catch(Exception e){
			CoDebugger.debugException(e.getMessage(), e);
		}

		return edIndivEligCarArr;
	}
	/**
	 * This method get data from CO_NOD_REQUEST_DETAIL for case number, docId
	 * and coReqSeq
	 * 
	 * @param caseNum
	 *            String
	 * @param docId
	 *            String
	 * @param coReqSeq
	 *            long
	 * @return Object[]
	 * @throws CoException
	 */
	public CoNodRequestDetailCargo[] getNodDetailByCaseNumDocIdAndReqSeq(String caseNum,
			String docId, long coReqSeq) throws CoException {
		CoNodRequestDetailCargo[] result = null;
		CoNodRequestDetailCargo cargo = new CoNodRequestDetailCargo();
		CoNodRequestDetailCollection collection = new CoNodRequestDetailCollection();
		cargo.setCaseNum(Long.parseLong(caseNum));
		cargo.setDocId(docId);
		cargo.setCoReqSeq(coReqSeq);
		collection.setCargo(cargo);
		try {
			result = (CoNodRequestDetailCargo[])collection.select("findByCaseNumDocIdReqSeq");
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_NOD_REQUEST_DETAIL in Class CoDAOServices and method getNodDetailByCaseNumDocIdReqSeq()",
					16816);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CO_NOD_REQUEST_DETAIL",
					16817);
		}
		return result;
	}


	/**
	 * Method is used to delete CO Request Recipients for a given CO_REQ_SEQ
	 * 
	 * @param cargo
	 * @return int commitFlag
	 * @throws CoException
	 */
	public int deleteCoRequestRecipients(long coReqSeq)
			throws CoException {
		CoDebugger.debugMessage("deleteCoRequestRecipients:coReqSeq-"+coReqSeq);
		CoRequestRecipientsCargo coReqRptCargo = new CoRequestRecipientsCargo();
		int commitFlag = 0;
		CoRequestRecipientsCollection coReqRptColl = new CoRequestRecipientsCollection(
				conn);

		long coRptSeq = 0;
		try {
			Object[] objCoReqRptArr = getCoRequestAllRecipients(coReqSeq);
			if (objCoReqRptArr != null)
			{
				CoDebugger
				.debugMessage("deleteCoRequestRecipients:objCoReqRptArr.length-"
						+ objCoReqRptArr.length);
			}
			if (objCoReqRptArr != null && objCoReqRptArr.length > 0)
			{
				for (int i=0; i<objCoReqRptArr.length; i++) {
					coRptSeq = ((CoRequestRecipientsCargo)objCoReqRptArr[i]).getCoRptSeq();
					if (coRptSeq > 0) {
						coReqRptColl.setEJBSupported(false);
						coReqRptCargo.setCoReqSeq(coReqSeq);
						coReqRptCargo.setCoRptSeq(coRptSeq);
						coReqRptColl.setCargo(coReqRptCargo);
						commitFlag = deleteCoReqSeqRecipient(coReqRptColl);					
					}
				}
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Delete Failed", 16795);
		}
		return commitFlag;
	}

	private int deleteCoReqSeqRecipient(CoRequestRecipientsCollection coReqRptColl) {
		int commitFlag;
		try {
			coReqRptColl.delete();
			commitFlag = 1;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			commitFlag = -1;
		}
		return commitFlag;
	}

	/**
	 *  Update the Form sent date in Ed_Snap_Work_Reg ED for Case number	
	 * @param caseNum
	 * @return
	 */
	public EdSnapWorkRegCargo[] updateFormSentDate(long caseNum){
		EdSnapWorkRegCargo edSnpWrkRegCarg = new EdSnapWorkRegCargo();
		edSnpWrkRegCarg.setCaseNum(caseNum);

		EdSnapWorkRegCollection edSnpWrkRegColl = new EdSnapWorkRegCollection();
		edSnpWrkRegColl.setCargo(edSnpWrkRegCarg);
		EdSnapWorkRegCargo[] edSnpWrkRegCarArr = null;
		try {
			openConnection();
			edSnpWrkRegCarArr = (EdSnapWorkRegCargo[]) edSnpWrkRegColl.select("findByCaseNumber");
			//Update the Form Sent Date 
			if (null != edSnpWrkRegCarArr && edSnpWrkRegCarArr.length > 0
					&& null != edSnpWrkRegCarArr[0]) {
				edSnpWrkRegCarg = edSnpWrkRegCarArr[0];
				// Following if condition added for Defect CH-18920.
				if (null == edSnpWrkRegCarg.getEtFormSentDt()) {
					edSnpWrkRegCarg.setEtFormSentDt(new java.sql.Timestamp(CoDateFactory.getUtilDate().getTime()));
					//Updating Ed_Snap_Work_Reg table
					edSnpWrkRegColl.setCargo(edSnpWrkRegCarg);
					edSnpWrkRegColl.update();
				}
			}
		} catch(Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			closeConnection();
		}
		return edSnpWrkRegCarArr;
	}

	/**
	 * 
	 * @param coRequest
	 * @return
	 * @throws CoException
	 */
	public int insertRequestForNoticeNCH013(COCorrespondence coRequest) throws CoException{
		coRequest.setPendingTrigSw(CoConstants.CHAR_B);
		coRequest.setPrintMode(CoConstants.CHAR_B);
		int ret = 0;
		ret= insertOriginalRequest(coRequest);
		return ret;
	}

	/**
	 *  Update the Form sent date in Ed_Snap_Work_Reg ED for Case number	
	 * @param caseNum
	 * @return
	 */
	public InStDelinquentNoticeCargo[] updateProcessSwitchForNCH013(long delnoticeSeqNum) {
		InStDelinquentNoticeCargo inStDelinquentNoticeCargo = new InStDelinquentNoticeCargo();
		inStDelinquentNoticeCargo.setDelnoticeSeqNum(delnoticeSeqNum);
		openConnection();
		CoDebugger.debugInformation("In updateProcessSwitchForNCH013 delnoticeSeqNum="+delnoticeSeqNum);
		InStDelinquentNoticeCollection inStDelinquentNoticeCollection = new InStDelinquentNoticeCollection();
		inStDelinquentNoticeCollection.setCargo(inStDelinquentNoticeCargo);
		InStDelinquentNoticeCargo[] inStDelinquentNoticeCargoArr = null;
		try {
			inStDelinquentNoticeCargoArr = (InStDelinquentNoticeCargo[]) inStDelinquentNoticeCollection.select("findByDelnoticeSeqNum");
			// Update the Form Sent Date
			if (null != inStDelinquentNoticeCargoArr && inStDelinquentNoticeCargoArr.length > 0
					&& null != inStDelinquentNoticeCargoArr[0]) {
				inStDelinquentNoticeCargo = inStDelinquentNoticeCargoArr[0];
				inStDelinquentNoticeCargo.setNoticeSentDt(new java.sql.Timestamp(CoDateFactory.getUtilDate().getTime()));
				inStDelinquentNoticeCargo.setNoticeprocessedsw('P');
				inStDelinquentNoticeCollection.setCargo(inStDelinquentNoticeCargo);
				inStDelinquentNoticeCollection.update();
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			closeConnection();
		}
		return inStDelinquentNoticeCargoArr;
	}

	/**
	 * 
	 * @param snapEdEligibilityCargo
	 * @return
	 */
	public Object[] getLegaCitesDetails(
			EdEligibilityCargo snapEdEligibilityCargo) {
		Object[] params = new Object[3];
		Object[] result = null;
		params[0] = snapEdEligibilityCargo.getCaseNum();
		params[1] = snapEdEligibilityCargo.getProgramCd();
		params[2] = snapEdEligibilityCargo.getTypeOfAssistanceCd();
		EdIndvNoticeReasonsCargo edIndvNoticeReasonsCargo = new EdIndvNoticeReasonsCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "getLegaCitesDetails", edIndvNoticeReasonsCargo, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//CH-23959-Kunal-Start
	/**
	 * This method check duplicates triggers in CoRequestHistory
	 * @param aCoObj
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public boolean checkExistingRequestForDocIdCaseNumEdgeNum(COCorrespondence aCoObj)
			throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setCaseNum(Long.valueOf((aCoObj.getCaseAppNumber())));
		cargo.setEdgNum(aCoObj.getEdgeNumber());
		cargo.setGenerateDt(aCoObj.getGenerateDate());
		CoDebugger.debugMessage("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByDocIdCaseNumEdgeNum", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		return ((result != null && result.length > 0) ? true : false);
	}


	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcIndvEmployeeDetails(String caseNum) throws CoException {
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmployment", "findAllByCaseIndv", Long.valueOf(caseNum),
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_EMPLOYMENT", 16346);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_EMPLOYMENT",
					16063);
		}

		return result;

	}
	//CH-23959-Kunal-End

	/**
	 * Method to get Date Application Received from DC_CASES.
	 * 
	 * @param aAppNumberI
	 * long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */

	public Object[] getDateApplicationReceived(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();
		dcCasesCargo.setCaseNum(aAppNumberI); 
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCases", "findByCaseNum", dcCasesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/***********************Added for Child Care*************/
	/**
	 * Method to get data from ED_ELIGIBILITY based on CASE_NUM.
	 * 
	 * @param caseNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 *  
	 */
	public Object[] getEdEligibilityByCase(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			//TODO update this
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCase", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16340);
		}
		return result;
	}

	/**
	 * Method to get Case Phone Number from DC_CASES.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcRelationshipsCargo(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcRelationshipsCargo dcRelationShipCargo = new DcRelationshipsCargo();
		dcRelationShipCargo.setIndvId(aAppNumberI);
		try {
			//TODO update this
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcRelationships", "findIndiInCaseCargo", dcRelationShipCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}

		return result;
	}

	/**
	 * Method to get DcCaseProgramCargo.
	 * 
	 * @param DcCaseProgramCargo dcCaseProgramCargo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcCaseProgramCargo(DcCaseProgramCargo dcCaseProgramCargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findByCasePrgProgStatus", dcCaseProgramCargo, null , conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcEducationCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcEducationCargo(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcEducationCargo cargo = new DcEducationCargo();
		cargo.setIndvId(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEducation", "findByIndividualId", cargo, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcCaseProgramCargo.
	 * 
	 * @param DcCaseProgramCargo dcCaseProgramCargo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcCaseProgramIndvCargo(DcCaseProgramIndvCargo dcCaseProgramIndvCargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgramIndv", "findByCaseIndvCC", dcCaseProgramIndvCargo, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM_INDV", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcEmploymentCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcEmploymentCargo(long indvId) throws CoException {
		Object[] result = null;
		DcEmploymentCargo dcEmpcargo = new DcEmploymentCargo();
		dcEmpcargo.setIndvId(indvId);
		dcEmpcargo.setEffBeginDt(CoDateFactory.getTimestamp());
		dcEmpcargo.setEffEndDt(CoDateFactory.getTimestamp());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmployment", "findByIndvId", dcEmpcargo, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcSelfEmpIncomeCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcSelfEmpIncomeForForms(long indvId) throws CoException {
		Object[] result = null;
		DcSelfEmpIncomeCargo dcEmpcargo = new DcSelfEmpIncomeCargo();
		dcEmpcargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSelfEmpIncome", "findByIndvId", dcEmpcargo, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Self_Emp_Income", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcEmpPaymentExpensesCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcEmpPaymentExpensesCargo(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcEmpPaymentExpensesCargo cb = new DcEmpPaymentExpensesCargo();
		cb.setIndvId(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEmpPaymentExpenses", "findByIndvIdCargo", cb, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/**
	 * 
	 * @param caseAppNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] getHoHIndividual(String caseAppNumber) throws CoException {
		Object[] result = null;
		ArAppIndvCargo arAppIndvCargo = new ArAppIndvCargo();
		arAppIndvCargo.setAppNum(caseAppNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppIndv", "findByAppHOH", arAppIndvCargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_INDV",
					16795);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in AR_APP_INDV",
					16796);
		}
		return result;
	}

	/**
	 * 
	 * @param aAppNumberI
	 * @return
	 * @throws CoException
	 */
	public Object[] getDateApplicationReceived(String aAppNumberI) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arApplicationForAidCargo = new ArApplicationForAidCargo();
		arApplicationForAidCargo.setAppNum(aAppNumberI); 
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByAppNum", arApplicationForAidCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APPLICATION_FOR_AID", 16313);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseOnly(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setProgramCd(CoConstants.PROGRAM_CD);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseProgramForNOA", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16340);
		}
		return result;
	}

	/**
	 * 
	 * @param childIndvId
	 * @param providerId
	 * @return
	 * @throws CoException
	 */
	public Object[] getSuspendedPmEnrlmntStat(Long childIndvId, Long providerId) throws CoException {

		Object[] result = null;
		PmEnrlmntStatusCargo pmEnrlmntStatusCargo = new PmEnrlmntStatusCargo();
		pmEnrlmntStatusCargo.setChildIndvId(childIndvId);
		pmEnrlmntStatusCargo.setProviderId(providerId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmEnrlmntStatus", "findSuspendedEnrlmnt", pmEnrlmntStatusCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Pm Enrollment Status for Suspended NOA", 16340);
		}
		return result;
	}


	/**
	 * Method to get the data from PM_HOUSEHOLD_REQS
	 * 
	 * @param providerNum
	 *            String
	 * @param createDate 
	 * @return Object[]
	 * @throws CoException
	 *  
	 */
	public Object[] getProviderExpiredHouseHoldDetails(String providerNum, Timestamp createDate) throws CoException {
		Object[] result = null;
		PmHouseholdReqsCargo cargo = new PmHouseholdReqsCargo();
		cargo.setProviderId(Long.parseLong(providerNum));
		cargo.setReqExpirationDt(addDays(createDate, 30));

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmHouseholdReqs", "findExpReqByProviderIdOnly", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getting Provider Location HouseHold Details", 9966);
		}
		return result;
	}	
	/**
	 * Method to get the data from PM_PROVIDER_LOC_STATUS
	 * 
	 * @param providerNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 *  
	 */
	public Object[] getProviderLocStatusDetails(String providerNum) throws CoException {
		Object[] result = null;
		PmProviderLocStatusCargo cargo = new PmProviderLocStatusCargo();
		cargo.setProviderId(Long.parseLong(providerNum));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLocStatus", "findByProviderIdOnly", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getting Provider Location Status Details", 9966);
		}
		return result;
	}
	/**
	 * Method addMonths
	 * 
	 * @param tsTimestamp1
	 *            Timestamp
	 * @param iNoOfMonths
	 *            int
	 * @return Timestamp
	 */
	public Timestamp addDays(Timestamp tsTimestamp1, int iNoOfDays) {
		// get Calendar and add the number of days
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(tsTimestamp1);
		calendar.add(Calendar.DAY_OF_MONTH, iNoOfDays);
		return (new Timestamp(calendar.getTimeInMillis()));
	}
	/**
	 * Method to get data from DC_CASE_ADDRESSES based on CASE_NUM and Address Type Code.
	 * 
	 * @param caseAppNumber, addrTypeCd
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getCaseAddressByCaseNoType(String caseAppNumber,String addrTypeCd)
			throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(Long.parseLong(caseAppNumber));
		dcCaseAddressesCargo.setAddrTypeCd(addrTypeCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findBySdxActiveAddress",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_ADDRESSES", 16310);
		}
		return result;
	}	

	/**
	 * 
	 * @param caseAppNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getArApplicationForAidByAppOnly(String caseAppNum) throws CoException {
		Object[] result = null;
		ArApplicationForAidCargo arApplicationForAid = new ArApplicationForAidCargo();
		arApplicationForAid.setAppNum(caseAppNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByAppNum", arApplicationForAid,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ArApplicationForAid", 16340);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcCaseProgramByCaseOnly(long caseNum) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo dcCaseProgram = new DcCaseProgramCargo();
		dcCaseProgram.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findByCaseNumber", dcCaseProgram,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc Case Program", 16340);
		}
		return result;
	}

	/**
	 * 
	 * @param caseAppNumber
	 * @param addrTypeCd
	 * @return
	 * @throws CoException
	 */
	public Object[] getAppAddressByAppNoType(String caseAppNumber,String addrTypeCd)
			throws CoException {
		Object[] result = null;
		ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
		arAppAddrCargo.setAppNum(caseAppNumber);
		arAppAddrCargo.setAddrTypeCd(addrTypeCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppAddr", "findByAppNumAndTypeCd",
					arAppAddrCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for AR_APP_ADDR", 16310);
		}
		return result;
	}

	/**
	 * 
	 * @param providerNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getProviderLocDetails(String providerNum) throws CoException {
		Object[] result = null;
		PmProviderLocCargo cargo = new PmProviderLocCargo();
		cargo.setProviderId(Long.parseLong(providerNum));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLoc", "findByProviderIdOnly", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getting Provider Location details", 9966);
		}
		return result;
	}

	/**
	 * 
	 * @param providerNum
	 * @param providerLoc
	 * @return
	 * @throws CoException
	 */
	public Object[] getProviderLocCntcDetails(String providerNum, String providerLoc) throws CoException {
		Object[] result = null;
		PmProviderLocCntcCargo cargo = new PmProviderLocCntcCargo();
		cargo.setProviderId(Long.parseLong(providerNum));
		cargo.setProviderLocId(Long.parseLong(providerLoc));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLocCntc", "getSelectedContact", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getting Provider Location Contact Details", 9966);
		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getPOSORecord(Long coReqSeq) throws CoException {
		Object[] result = null;
		CoRequestPosoCargo coRequestPosoCargo = new CoRequestPosoCargo();
		coRequestPosoCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestPoso", "getPOSORecord", coRequestPosoCargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CI_APP_RELATIONSHIP", 16320);
		} finally {
			closeConnection();
		}
		return result;
	}

	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on Client Indvidual Id and case number
	 * 
	 * @param indvId
	 *            long
	 * @param caseNum
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcCaseIndividualForIndv(long indvId, long caseNum) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setIndvId(indvId);
		dcCaseIndividualCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByIndvIdLatest",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_INDIVIDUAL For Indv", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_INDIVIDUAL For Indv",
					16037);
		}
		return result;
	}


	/**
	 * Method to get the data from PM_PROVIDER_LOC_INFO
	 * 
	 * @param providerNum
	 *            String
	 * @return Object[]
	 * @throws CoException
	 *  
	 */
	public Object[] getProviderRegFeeDetails(long providerNum) throws CoException {
		Object[] result = null;
		PmProviderLocInfoCargo cargo = new PmProviderLocInfoCargo();
		cargo.setProviderId(providerNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLocInfo", "checkVendorRegFee", cargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getting Provider Location details", 9966);
		}
		return result;
	}


	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on Client Indvidual Id
	 * 
	 * @param caseNum, childIndvId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getPmIndvRegFee(long caseNum, long childIndvId) throws CoException {
		Object[] result = null;
		PmIndvRegFeeCargo pmIndvRegFeeCargo = new PmIndvRegFeeCargo();
		pmIndvRegFeeCargo.setCaseNum(caseNum);
		pmIndvRegFeeCargo.setChildIndvId(childIndvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmIndvRegFee", "findByCaseAndIndvId",
					pmIndvRegFeeCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_INDIVIDUAL For Indv", 16312);
		}
		return result;
	}

	/**
	 * Method to get data from Pm_Enrlmnt_Fndg_Prog based on Enrollment Id
	 * 
	 * @param enrlmntId
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getPmEnrlmntFndgProg(long enrlmntId) throws CoException {
		Object[] result = null;
		PmEnrlmntFndgProgCargo pmEnrlmntFndgProgCargo = new PmEnrlmntFndgProgCargo();
		pmEnrlmntFndgProgCargo.setEnrlmntId(enrlmntId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmEnrlmntFndgProg", "getPmEnrlmntFndgProgByEnrlIdHistNav",
					pmEnrlmntFndgProgCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Pm_Enrlmnt_Fndg_Prog For Enrollment", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Pm_Enrlmnt_Fndg_Prog For Enrollment",
					16037);
		}
		return result;
	}


	/**
	 * Method to get data from DC_CASE_INDIVIDUAL based on CASE_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getVendorRates(long vendorId, long providerLocId, long legalEntityId) throws CoException {
		Object[] result = null;
		PmProviderLocRateCargo pmProviderLocRateCargo = new PmProviderLocRateCargo();
		pmProviderLocRateCargo.setProviderId(vendorId);
		pmProviderLocRateCargo.setProviderLocId(providerLocId);
		pmProviderLocRateCargo.setLegalEntityId(legalEntityId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderLocRate", "findByPrimaryId",
					pmProviderLocRateCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_INDIVIDUAL",
					16037);
		}
		return result;
	}

	/**
	 * Method to get MO Employees details for a case to which the employee is assigned.
	 * 
	 * @param caseNum
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getMoEmployeesDetailsForCase(long caseNum) throws CoException {
		Object[] result = null;
		MoEmployeesCollection moEmpColl = new MoEmployeesCollection();
		try {
			openConnection();
			Object[] objList = new Object[1];
			objList[0] = caseNum;
			result = (Object[]) moEmpColl.select("findByEmployeeByCaseNum",objList);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getMoEmployeesDetails", 99665);
		} finally {
			closeConnection();
		}
		return result;
	}

	/**
	 * Method to get Case Phone Number from DC_CASES.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcOtherInStateBenefitsCargo(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcOtherInStateBenefitsCargo dcOtherInStateBenefitsCargo = new DcOtherInStateBenefitsCargo();
		dcOtherInStateBenefitsCargo.setIndvId(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcOtherInStateBenefits", "findIndividualsCargo", dcOtherInStateBenefitsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		return result;
	}

	/**
	 * Method to get DcSelfEmpPayExpensesCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcSelfEmpPayExpensesCargo(long indvId) throws CoException {
		Object[] result = null;
		DcSelfEmpPayExpensesCargo cb = new DcSelfEmpPayExpensesCargo();
		cb.setIndvId(indvId);
		return result;
	}

	/**
	 * Method to get DcImmunizationsCargo.
	 * 
	 * @param aAppNumberI
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcImmunizationsCargo(long aAppNumberI) throws CoException {
		Object[] result = null;
		DcImmunizationsCargo indvIdCargo = new DcImmunizationsCargo();
		indvIdCargo.setIndvId(aAppNumberI);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcImmunizations", "findByIndiInCase", indvIdCargo, null , conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation(e.toString());
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}

		return result;
	}

	/**
	 * Method to get data from DC_UNEARNED_INCOME based on INDV_ID
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcUnearnedIncForIndividual(long individualID) throws CoException {
		Object[] result = null;
		DcUnearnedIncomeCargo dcUnearnedIncomeCargo = new DcUnearnedIncomeCargo();
		dcUnearnedIncomeCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUnearnedIncome", "findByIndvIdHistNavInd", dcUnearnedIncomeCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME", 16319);
		}
		return result;
	}				

	/**
	 * Method to get data from DC_UNEARNED_PAY_EXPENSES based on UNEARNED_SEQ_NUM
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getDcUnearnedPayExpenses(long unearnedSeqNum) throws CoException {
		Object[] result = null;
		DcUnearnedPayExpensesCargo dcUnearnedPayExpensesCargo = new DcUnearnedPayExpensesCargo();
		dcUnearnedPayExpensesCargo.setUnearnedSeqNum(unearnedSeqNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcUnearnedPayExpenses", "findBySeqNum", dcUnearnedPayExpensesCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME", 16319);
		}
		return result;
	}

	/**
	 * Method to get data from DC_UNEARNED_PAY_EXPENSES based on UNEARNED_SEQ_NUM
	 * 
	 * @param individualID
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 *  
	 */
	public Object[] getVciMemberDetails(String caseAppNumber, char memberRole) throws CoException {
		Object[] result = null;
		VCiCaseIndvDetailsCargo vCiCaseIndvDetailsCargo = new VCiCaseIndvDetailsCargo();
		vCiCaseIndvDetailsCargo.setCaseNum(caseAppNumber);
		vCiCaseIndvDetailsCargo.setMemberRole(memberRole);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCiCaseIndvDetails", "findByMemberRoleAndCaseNum", vCiCaseIndvDetailsCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CI_CASE_INDV_DETAILS", 16320);
		}
		return result;
	}

	/**
	 * 
	 * @param memberId
	 * @return
	 * @throws CoException
	 */
	public Object[] getVciMemberAddress(long memberId) throws CoException {
		Object[] addressResult = null;
		CiAppAddrCargo[] result = null;
		CiAppAddrCargo ciappAddrCargo = new CiAppAddrCargo();
		AddressDetailCargo addressDetailCargo = new AddressDetailCargo();
		ciappAddrCargo.setMemberId(memberId);
		try {
			result = (CiAppAddrCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CiAppAddr", "findByMemberId", ciappAddrCargo, null,
					conn);
			if (result!=null & result.length>0) {
				long addressSeqNum = result[0].getAddrSeqNum();
				addressDetailCargo.setSequenceNum(addressSeqNum);
				addressResult = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"AddressDetail", "findBySequenceNumber", addressDetailCargo, null,
						conn);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ADDRESS_DETAILS", 16320);
		}
		return addressResult;
	}

	/**
	 * 
	 * @param memberId
	 * @return
	 * @throws CoException
	 */
	public Object[] getVciMemberRelationship(long[] memberId) throws CoException {
		Object[] result = null;
		try {
			result = (CiAppRelationshipCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CiAppRelationship", "findByMemberIdList", memberId, null,
					conn);	
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ADDRESS_DETAILS", 16320);
		}
		return result;
	}

	/**
	 * 
	 * @param caseAppNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] getAllVciMemberDetailsByCaseNumber(String caseAppNumber) throws CoException {
		Object[] result = null;
		VCiCaseIndvDetailsCargo vCiCaseIndvDetailsCargo = new VCiCaseIndvDetailsCargo();
		vCiCaseIndvDetailsCargo.setCaseNum(caseAppNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCiCaseIndvDetails", "findByCaseNum", vCiCaseIndvDetailsCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_CI_CASE_INDV_DETAILS", 16320);
		}
		return result;
	}


	/**
	 * 
	 * @param vCiCaseIndvDetailsColl
	 * @return
	 * @throws CoException
	 */
	public Object[] getVciCaseIndvDetailsCollection(VCiCaseIndvDetailsCollection vCiCaseIndvDetailsColl) throws CoException {
		CiAppRelationshipCollection ciAppRelationshipCollection;
		try {
			long[] individualsInCase	=	getCiRelationshipsForCase(vCiCaseIndvDetailsColl);
			Object[] methodArgs = null;
			methodArgs = new Object[1];
			methodArgs[0] = individualsInCase;
			ciAppRelationshipCollection = new CiAppRelationshipCollection();
			CiAppRelationshipCargo[] appRelationshipCargos = 
					(CiAppRelationshipCargo[]) ciAppRelationshipCollection.select("findByMemberIdList",
							methodArgs);
			return appRelationshipCargos;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CI_APP_RELATIONSHIP", 16320);
		} finally {
			closeConnection();
		}
	}


	/**
	 * 			
	 * @param indvAppIndvCollection
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	public long[] getCiRelationshipsForCase(VCiCaseIndvDetailsCollection indvAppIndvCollection)
			throws ApplicationException, FrameworkException {
		long[] individualsInCase = new long[indvAppIndvCollection
		                                    .getResultsSize()];
		for (int i = 0; i < indvAppIndvCollection.getResultsSize(); i++) {
			individualsInCase[i] = (indvAppIndvCollection.getResults(i).getIndvId());
		}
		return individualsInCase;

	}


	/**
	 * 
	 * @param caseNum
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws CoException
	 */
	public VCoRequestCargo[] getByCaseNumDateRange(String caseNum,
			String startDate, String endDate) throws CoException {
		Object[] objParams = new Object[3];
		VCoRequestCollection coRequestCol = new VCoRequestCollection();
		VCoRequestCargo[] coRequestCargos = null;
		try {
			openConnection();
			objParams[0] = caseNum;
			objParams[1] = getFormattedDate(startDate);
			objParams[2] = getFormattedDate(endDate);
			coRequestCargos = (VCoRequestCargo[]) coRequestCol.select(
					"findByCaseNumDateRange", objParams);
		} catch (FrameworkException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} catch (ApplicationException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} catch (Exception e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} finally {
			closeConnection();
		}
		return coRequestCargos;
	}


	/**
	 * 
	 * @param startDate
	 * @return
	 * @throws ParseException
	 */
	private String getFormattedDate(String startDate) throws ParseException {
		SimpleDateFormat format1 = new SimpleDateFormat("MM/dd/yyyy");
		SimpleDateFormat format2 = new SimpleDateFormat("dd-MMM-yy");
		java.util.Date date = format1.parse(startDate);
		String parsedDate = format2.format(date);
		String day = parsedDate.substring(0, 2);
		String month = parsedDate.substring(3, 6);
		String year = parsedDate.substring(7, 9);
		month = month.toUpperCase();
		parsedDate = day + "-" + month + "-" + year;
		return parsedDate;
	}


	/**
	 * 
	 * @param coReqSeqNum
	 * @return
	 * @throws CoException
	 */
	public CoRequestRecipientsCargo[] getPDFpath(String coReqSeqNum, String coRptSeqNum) throws CoException {
		Object[] objParams = new Object[1];
		CoRequestRecipientsCollection coRequestCol = new CoRequestRecipientsCollection();
		CoRequestRecipientsCargo[] coRequestCargos = null;
		CoRequestRecipientsCargo coRequestCargo = coRequestCol.getCargo();
		coRequestCargo.setCoReqSeq(Long.parseLong(coReqSeqNum));
		coRequestCargo.setCoRptSeq(Long.parseLong(coRptSeqNum));
		objParams[0] = coRequestCol.getCargo();
		try {
			openConnection();
			coRequestCargos = (CoRequestRecipientsCargo[]) coRequestCol.select(
					"findPDFpath", objParams);

		} catch (FrameworkException e) {
			throw new CoException(
					"Exception while fetching PDF path  for the given CO_REQ_SEQ "
							+ e);
		} catch (ApplicationException e) {
			throw new CoException(
					"Exception while fetching PDF path  for the given CO_REQ_SEQ"
							+ e);
		} finally {
			closeConnection();
		}

		return coRequestCargos;
	}

	/**
	 * 
	 * @param caseNum
	 * @param indvId
	 * @return
	 * @throws CoException
	 */	
	public Object[] findByCaseNumMedicaidCreditableCoverage(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		CvEdMciEdgIndividualCargo cvEdMciEdgIndividualCargo = new CvEdMciEdgIndividualCargo();
		cvEdMciEdgIndividualCargo.setCaseNum(caseNum);
		cvEdMciEdgIndividualCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CvEdMciEdgIndividual", "findByCaseNumMedicaidCreditableCoverage",
					cvEdMciEdgIndividualCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCaseNumMedicaidCreditableCoverage");
		}
		return result;
	}	

	/**
	 * 
	 * @param caseNum
	 * @param refdate
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByEdgNum(long caseNum, String refdate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = refdate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByEdgNoCaseNoNDHCELN18", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getActiveInCaseIndvByCase(long caseNum) throws CoException {
		Object[] result = null;
		VDcCaseIndividualsCargo cargo = new VDcCaseIndividualsCargo();
		cargo.setT1CaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcCaseIndividuals", "findByCaseNumActiveInCaseIndv", cargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Exception occured at getActiveInCaseIndvByCase method");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumNDHCMNN08", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}


	/** start: JIRA:ND-38247- set isSNAPonCase */  
	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNumForSNAP(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseForSNAPInCO", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}
	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByActiveCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findActiveCasesInCO", edEligibilityCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}

	/** end: JIRA:ND-38247- set isSNAPonCase */  
	/**
	 * 
	 * @param vcoRequestCargo
	 * @param docId
	 */
	public void insertFormInclusionTriggerVoterReg (VCoRequestCargo[] vcoRequestCargo, String docId) {
		for (int i = 0; i < vcoRequestCargo.length; i++) {
			COCorrespondence coRequest = new COCorrespondence();
			coRequest.setDocId(docId);
			coRequest.setEmpId(vcoRequestCargo[i].getEmpId());
			coRequest.setCaseAppFlag('C');
			coRequest.setCaseAppNumber(Long.toString((vcoRequestCargo[i]
					.getCaseNum())));
			coRequest.setDocType(CoConstants.CHAR_N);
			coRequest.setIndvId(vcoRequestCargo[i].getIndvId());
			coRequest.setJobId(CoConstants.DPHHS_HCS_VOT);
			coRequest.setOfficeNumber(vcoRequestCargo[i].getOfficeNum());

			try {
				generateCorrespondenceRequest(coRequest);
			} catch (CoException e) {
				CoDebugger
				.debugMessage("Exception in Inserting trigger for Eligibility Notice - case_num-"
						+ coRequest.getCaseAppNumber());
				CoDebugger
				.debugMessage("Exception in Inserting trigger for Eligibility Notice - doc_id-"
						+ coRequest.getDocId());
				CoDebugger
				.debugMessage("Exception in Inserting trigger for Eligibility Notice - indv_id-"
						+ coRequest.getIndvId());
				CoDebugger
				.debugException(
						"Exception in Inserting trigger for Form Inclusion of Page 2 Eligibility Notice."
								+ e.getMessage(), e);
			}
		}
	}

	/**
	 * 			
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNumForNDHCGNN12(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumNDHCGNN12", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNumAndProgramCdForNDMAELN19(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumAndProgramCdForNDMAELN19", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param childIndvIds
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNumForChild(long caseNum, String childIndvIds) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = childIndvIds;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumForChild", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByCaseNumForChild and table ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCurrentEligIndAndActiveInCase(long caseNum, String refDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCurrentEligIndAndActiveInCase", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByCurrentEligIndAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param edgNumString
	 * @param edgTraceIdString
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByEdgNumEdgTraceIdAndActiveInCase(long caseNum, String edgNumString, String edgTraceIdString, String refDate ) throws CoException {
		Object[] result = null;
		Object[] args = new Object[4];
		args[0] = caseNum;
		args[1] = edgNumString;
		args[2] = edgTraceIdString;
		args[3] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByEdgNumEdgTraceIdAndActiveInCase", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByEdgNumAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcCaseIndvDetailsByIndv(long caseNum, long indvId) throws CoException {
		Object[] result = null;
		VDcCaseIndvDetailsCargo cargo = new VDcCaseIndvDetailsCargo();
		cargo.setCaseNum(caseNum);
		cargo.setT1IndvId(indvId);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VDcCaseIndvDetails", "findByIndvId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_DC_CASE_INDV_DETAILS", 16369);
		} finally {
			closeConnection();
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_DC_CASE_INDV_DETAILS", 16072);
		}
		return result;
	}

	/**
	 * 
	 * @param casenum
	 * @return
	 */
	public String getEmailNotifFlag(String casenum) {
		String emailFlag = CoConstants.N;
		String temp = null;

		String sqlQuery = "SELECT * FROM (SELECT EMAIL_SW FROM cp_enotice_detail@ea_to_ss where  CASE_NUM = " + casenum + " ORDER BY CREATE_DT DESC ) WHERE ROWNUM <= 1";
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		try {
			openConnection();
			preparedStatement = conn.prepareStatement(sqlQuery);
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				temp = rs.getString("EMAIL_SW");
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
				}
			}
			closeConnection();
		}

		if (temp != null && temp.length() > 0) {
			emailFlag = temp;
		}

		return emailFlag;
	}

	/**
	 * 
	 * @param maxRows
	 * @param lCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] findAllByCaseIndv(int maxRows, long lCaseNum) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = lCaseNum;

		DcUnearnedIncomeCargo cargo = new DcUnearnedIncomeCargo();
		cargo.setIndvId(lCaseNum);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcUnearnedIncome", "findAllByCaseIndv", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_UNEARNED_INCOME", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_UNEARNED_INCOME", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param tsBegDate
	 * @param tsEndDate
	 * @param lCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] findByCaseIndv(int maxRows, Timestamp tsBegDate, Timestamp tsEndDate, long lCaseNum) throws CoException {
		Object[] result = null;
		Object[] args = new Object[3];
		args[0] = tsBegDate;
		args[1] = tsEndDate;
		args[2] = lCaseNum;

		DcMagiExpensesCargo cargo = new DcMagiExpensesCargo();
		cargo.setIndvId(lCaseNum);
		java.sql.Timestamp date = CoDateFactory.getTimestamp();
		cargo.setEffBeginDt(date);
		cargo.setEffEndDt(date);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcMagiExpenses", "findByCaseIndv", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_Magi_Expenses", 16751);
		}
		return result == null || result.length == 0 ? null :  result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param tsBegDate
	 * @param tsEndDate
	 * @param lCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] findSelfEmpIncomeBudgetByCaseIndv(int maxRows, java.sql.Timestamp tsBegDate, java.sql.Timestamp tsEndDate, long lCaseNum) throws CoException {
		Object[] result = null;
		Object[] args = new Object[3];
		args[0] = tsBegDate;
		args[1] = tsEndDate;
		args[2] = lCaseNum;

		DcSelfEmpIncomeBudgetCargo cargo = new DcSelfEmpIncomeBudgetCargo();
		cargo.setIndvId(lCaseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcSelfEmpIncomeBudget", "findByCaseIndv", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSelfEmpIncomeBudget", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcSelfEmpIncomeBudget", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public Object[] findByIndividualsInCase(int maxRows, long[] indvId) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = indvId;

		DcTaxinformationCargo cargo = new DcTaxinformationCargo();
		cargo.setIndvId(indvId[0]);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcTaxinformation", "findByIndividualsInCase", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcTaxinformation", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcTaxinformation", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param lCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] findDcChildSuppNonCoopByCaseIndv(int maxRows, long lCaseNum) throws CoException {//findByCaseIndvAbsentParent
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = lCaseNum;

		DcChildSuppNonCoopCargo cargo = new DcChildSuppNonCoopCargo();

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildSuppNonCoop", "findByCaseIndvAbsentParent", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcChildSuppNonCoop", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] findAbsentParentsByCaseNumber(int maxRows, long caseNumber) throws CoException {
		Object[] result = null;

		DcAbsentParentsCargo cargo = new DcAbsentParentsCargo();
		cargo.setCaseNum(caseNumber);

		Object[] args = new Object[1];
		args[0] = 0;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcAbsentParents", "findByCaseNumber", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcAbsentParents", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcAbsentParents", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param programCdString
	 * @param reviewDate
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdCaseRecertDatesByReviewDateLowerLimitAndProgCd(int maxRows, String programCdString, String reviewDate) throws CoException {
		Object[] result = null;

		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();

		Object[] args = new Object[2];
		args[0] = programCdString;
		args[1] = reviewDate;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdCaseRecertDates", "findByReviewDateLowerLimitAndProgCd", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdCaseRecertDates", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdCaseRecertDates", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param maxRows
	 * @param programCdString
	 * @param reviewDate
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdCaseRecertDatesByReviewDateRangeAndProgCd(int maxRows, String programCdString, String reviewDateFrom, String reviewDateTo) throws CoException {
		Object[] result = null;

		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();

		Object[] args = new Object[3];
		args[0] = programCdString;
		args[1] = reviewDateFrom;
		args[2] = reviewDateTo;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdCaseRecertDates", "findByReviewDateRangeAndProgCd", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdCaseRecertDates", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdCaseRecertDates", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNumber
	 * @param edgNum
	 * @param targetPersonId
	 * @param date
	 * @param edNegActionDate
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdCaseRecertDatesForNDHCREN17(long caseNumber, long edgNum, long targetPersonId, String date, String edNegActionDate)throws CoException {
		Object[] result = null;

		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();

		Object[] args = new Object[5];
		args[0] = caseNumber;
		args[1] = edgNum;
		args[2] = targetPersonId;
		args[3] = date;
		args[4] = edNegActionDate;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdCaseRecertDates", "findByConditionForNDHCREN17", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdCaseRecertDates", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdCaseRecertDates", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNumber
	 * @param edNegActionDate
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdEligibilityForNDHCREN17(long caseNumber, String edNegActionDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNumber;
		args[1] = edNegActionDate;

		EdEligibilityCargo cargo = new EdEligibilityCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByConditionForNDHCREN17", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdEligibility", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdEligibilityForNDHCGNF15(String edAdequateNoticeDate, String ACAFlag) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = edAdequateNoticeDate;

		EdEligibilityCargo cargo = new EdEligibilityCargo();
		try {
			if(null!=ACAFlag && ACAFlag.equalsIgnoreCase(CoConstants.YES_STRING_Y)){
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByConditionForNDHCGNF15", cargo, args, conn);
			}
			else if(null!=ACAFlag && ACAFlag.equalsIgnoreCase(CoConstants.NO_STRING_N)){
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByNonACAConditionForNDHCGNF15", cargo, args, conn);	
			}
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdEligibility", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param date
	 * @param coverageCodes
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdEligibilityForMassMailing(String date, String coverageCodes) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = date;
		args[1] = coverageCodes;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCoverageGroup", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdEligibility", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] getIndividualDetailsByCaseNumber(String caseNumber) throws CoException {
		Object[] result = null;

		DcIndvCargo cargo = new DcIndvCargo();


		Object[] args = new Object[1];
		args[0] = caseNumber;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndv", "findByCaseNum", cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndv", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcIndv", 16752);
		}
		return result;
	}


	/**
	 * Method to get the casenumlist.
	 * 
	 * @return ArrayList<String>
	 * @author rvelidandla
	 */
	public List<String> getEmailCaseNums() {		

		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		String temp = null;
		List<String> caseNumList = new ArrayList<String>();
		try {
			String sqlQuery = "SELECT CASE_NUM FROM cp_enotice_detail@ea_to_ss where  EMAIL_SW = 'Y' and US_MAIL_SW = 'N'";
			openConnection();
			preparedStatement = conn.prepareStatement(sqlQuery);
			rs = preparedStatement.executeQuery();
			while (rs.next()) {
				temp = rs.getString("CASE_NUM");
				caseNumList.add(temp);
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					// e.printStackTrace(); ND-12735
					CoDebugger.debugException(e.getMessage(), e);
				}
			}
			closeConnection();
		}

		return caseNumList;
	}


	/**
	 * Method to Update CO_TEMP_XML with file name.
	 * 
	 * @param coReqSeq  long
	 * @param coRptSeq long
	 * @param xmlFile  String
	 * @param status   String
	 * @param mailSw   String
	 * @return int
	 * @throws CoException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 * @author rvelidandla
	 */
	public boolean updateCoTempXml(long coReqSeq,long coRptSeq, String xmlFile,
			String status,String mailSw) {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoTempXml - started");

		boolean success = false;
		Object[] result = null;
		try {
			if (coReqSeq!=0 && coRptSeq != 0) {
				CoTempXmlCargo coTempXmlCargo =  new CoTempXmlCargo();
				TextDocument textDocument = null;
				if(xmlFile!=null){
					textDocument = new TextDocument(xmlFile);
				}				
				result = getCoTempXml(coReqSeq , coRptSeq );
				if(null == result || result.length ==0)
				{
					log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoTempXml - Inside coReqSeq , 0 ");
					result = getCoTempXml(coReqSeq , 0 );
				}
				openConnection();
				CoTempXmlCollection coTempXmlCollection = new CoTempXmlCollection();
				if (null!=result && result.length>0){
					coTempXmlCargo = (CoTempXmlCargo) result[0];
					if(null!=status){
						coTempXmlCargo.setStatus(status);
					}
					if(null!=textDocument){
						coTempXmlCargo.setXmlFile(textDocument);
					}
					if(null!=mailSw){
						coTempXmlCargo.setMiscParams(mailSw);
					}
					coTempXmlCollection.setCargo(coTempXmlCargo);
					success = coTempXmlCollection.update();
				}else{
					coTempXmlCargo.setCoReqSeq(coReqSeq);
					coTempXmlCargo.setCoRptSeq(coRptSeq);
					if(null!=status){
						coTempXmlCargo.setStatus(status);
					}
					if(null!=textDocument){
						coTempXmlCargo.setXmlFile(textDocument);
					}
					if(null!=mailSw){
						coTempXmlCargo.setMiscParams(mailSw);
					}
					coTempXmlCollection.setCargo(coTempXmlCargo);
					success = coTempXmlCollection.insert();				
				}	
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugInformation("Error in updateCoTempXml ------------"+ e.getMessage());
		} finally {
			closeConnection();
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateCoTempXml - timeTaken : " + (System.currentTimeMillis() - start));
		return success;
	}


	/**
	 * Method to retrieve CO_TEMP_XML.
	 * 
	 * @param coReqSeq
	 *            long	
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoTempXml(long coReqSeq,long coRptSeq) {
		Object[] result = null;
		CoTempXmlCargo coTempXmlCargo = new CoTempXmlCargo();
		coTempXmlCargo.setCoReqSeq(coReqSeq);
		coTempXmlCargo.setCoRptSeq(coRptSeq);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoTempXml", "findByReqSeqRptSeq",
					coTempXmlCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugInformation("Exception in getCoTempXml--- "+ e.getMessage());
			CoDebugger.debugException(e.getMessage(), e);			
		}
		if (result == null || result.length == 0) {
			CoDebugger.debugInformation("No data for coReqSeq - "+coReqSeq+ " in CO_TEMP_XML");

		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestHistoryByCoReqSeq(long coReqSeq) throws CoException {
		Object[] result = null;

		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setCoReqSeq(coReqSeq);

		Object[] args = new Object[1];
		args[0] = coReqSeq;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "findByReqSeq", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistory", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CoRequestHistory", 16752);
		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestHistoryDetailByCoReqSeq(long coReqSeq) throws CoException {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoRequestHistoryDetailByCoReqSeq - started");

		Object[] result = null;

		CoRequestHistoryDetailCargo cargo = new CoRequestHistoryDetailCargo();
		cargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistoryDetail", "findByCoReqSeq", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistoryDetail", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in CoRequestHistoryDetail", 16752);
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoRequestHistoryDetailByCoReqSeq - timeTaken : " + (System.currentTimeMillis() - start));
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestRecepientByCoReqSeq(long coReqSeq) throws CoException {
		Object[] result = null;

		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestRecipients", "findByAllRecipients", coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS for coReqSeq: " + coReqSeq, 16825);
		}
		if (result == null || result.length == 0) {
			CoDebugger.debugWarning("No data in CO_REQUEST_RECIPIENTS for coReqSeq: " + coReqSeq);
		}
		return result;
	}

	/**
	 * 
	 * @param Timestamp
	 * @return Timestamp
	 * 
	 */
	public Timestamp getNextWorkingDay(Timestamp ts){		
		Timestamp nextDay = null;
		try{
			nextDay = ALSOPUtil.addDays(ts, 1);
			nextDay = ALSOPUtil.adjustToWorkingDay(nextDay, 1);			
			CoDebugger.debugMessage("Next working day --- "+nextDay.toString());
		}catch(Exception e){
			CoDebugger.debugException("Exception while getting next business day", e);
		} finally {
			closeConnection();
		}
		return nextDay;		
	}

	/**
	 * 
	 * @param n
	 * @param asOfDate
	 * @return
	 */
	public Timestamp getNthLastBusinessDay(int n, java.util.Date asOfDate){		
		Timestamp nthLastWorkingDay = null;
		CoDebugger.debugInformation("Computing " + n +"th last working day of the month");
		try{
			if (nthLastWorkingDay == null) {
				Calendar calendar = Calendar.getInstance();
				if(asOfDate != null){
					calendar.setTime(asOfDate);
				}
				calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
				java.util.Date lastDayOfCurrentMonth = calendar.getTime();
				nthLastWorkingDay = new java.sql.Timestamp(lastDayOfCurrentMonth.getTime());
				CoDebugger.debugInformation("Last of the current monthStart Date ---> " + nthLastWorkingDay.toString());
			}

			CoDebugger.debugInformation("Start Date ---> " + nthLastWorkingDay.toString());
			for(int i=1; i<=n; i++){
				if(i>1){
					nthLastWorkingDay = ALSOPUtil.addDays(nthLastWorkingDay, -1);
				}
				nthLastWorkingDay = ALSOPUtil.adjustToWorkingDay(nthLastWorkingDay, -1);
				CoDebugger.debugInformation("i-->"+ i +" : ith Last business day of the current month ---> " +nthLastWorkingDay.toString());
			}						
			CoDebugger.debugInformation("n-->"+ n +" : nth Last business day of the current month ---> " +nthLastWorkingDay.toString());
		}catch(Exception e){
			CoDebugger.debugException("Exception while getting nth last business day", e);
		} finally {
			closeConnection();
		}
		return nthLastWorkingDay;		
	}

	/**
	 * 
	 * @param n
	 * @return
	 */
	public Timestamp getNthFirstBusinessDay(int n, java.util.Date asOfDate){		
		Timestamp nthFirstWorkingDay = null;
		CoDebugger.debugInformation("Computing " + n +"th first working day of the month");
		try{
			if (nthFirstWorkingDay == null) {
				Calendar calendar = Calendar.getInstance();
				if(asOfDate != null){
					calendar.setTime(asOfDate);
				}
				calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));
				java.util.Date firstDayOfCurrentMonth = calendar.getTime();
				nthFirstWorkingDay = new java.sql.Timestamp(firstDayOfCurrentMonth.getTime());
				CoDebugger.debugInformation("First of the current month ---> Start Date ---> " + nthFirstWorkingDay.toString());
			}

			CoDebugger.debugInformation("Start Date ---> " + nthFirstWorkingDay.toString());
			for(int i=1; i<=n; i++){
				if(i>1){
					nthFirstWorkingDay = ALSOPUtil.addDays(nthFirstWorkingDay, 1);
				}
				nthFirstWorkingDay = ALSOPUtil.adjustToWorkingDay(nthFirstWorkingDay, 1);
				CoDebugger.debugInformation("i-->"+ i +" : ith First business day of the current month ---> " +nthFirstWorkingDay.toString());
			}						
			CoDebugger.debugInformation("n-->"+ n +" : nth First business day of the current month ---> " +nthFirstWorkingDay.toString());
		}catch(Exception e){
			CoDebugger.debugException("Exception while getting nth first business day", e);
		} finally {
			closeConnection();
		}
		return nthFirstWorkingDay;		
	}

	/**
	 * 
	 * @param n
	 * @return
	 */
	public Timestamp getNthFirstDayOfMonth(int n, java.util.Date asOfDate){		
		Timestamp nthFirstDayOfMonth = null;
		CoDebugger.debugInformation("Computing " + n +"th first day of the month");
		try{
			if (nthFirstDayOfMonth == null) {
				Calendar calendar = Calendar.getInstance();
				if(asOfDate != null){
					calendar.setTime(asOfDate);
				}
				calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));
				java.util.Date firstDayOfCurrentMonth = calendar.getTime();
				nthFirstDayOfMonth = new java.sql.Timestamp(firstDayOfCurrentMonth.getTime());
				CoDebugger.debugInformation("First of the current month ---> Start Date ---> " + nthFirstDayOfMonth.toString());
			}

			CoDebugger.debugInformation("Start Date ---> " + nthFirstDayOfMonth.toString());
			for(int i=1; i<=n; i++){
				if(i>1){
					nthFirstDayOfMonth = ALSOPUtil.addDays(nthFirstDayOfMonth, 1);
				}
				CoDebugger.debugInformation("i-->"+ i +" : ith First day of the current month ---> " +nthFirstDayOfMonth.toString());
			}						
			CoDebugger.debugInformation("n-->"+ n +" : nth First day of the current month ---> " +nthFirstDayOfMonth.toString());
		}catch(Exception e){
			CoDebugger.debugException("Exception while getting nth day of the month", e);
		} finally {
			closeConnection();
		}
		return nthFirstDayOfMonth;		
	}

	/**
	 * 
	 * @param n
	 * @param asOfDate
	 * @return
	 */
	public Timestamp getNthLastDayOfMonth(int n, java.util.Date asOfDate){		
		Timestamp nthLastDayOfMonth = null;
		CoDebugger.debugInformation("Computing " + n +"th first day of the month");
		try{
			if (nthLastDayOfMonth == null) {
				Calendar calendar = Calendar.getInstance();
				if(asOfDate != null){
					calendar.setTime(asOfDate);
				}
				calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
				java.util.Date lastDayOfCurrentMonth = calendar.getTime();
				nthLastDayOfMonth = new java.sql.Timestamp(lastDayOfCurrentMonth.getTime());
				CoDebugger.debugInformation("Last of the current month ---> Start Date ---> " + nthLastDayOfMonth.toString());
			}

			CoDebugger.debugInformation("Start Date ---> " + nthLastDayOfMonth.toString());
			for(int i=1; i<=n; i++){
				if(i>1){
					nthLastDayOfMonth = ALSOPUtil.addDays(nthLastDayOfMonth, -1);
				}
				CoDebugger.debugInformation("i-->"+ i +" : ith Last day of the current month ---> " +nthLastDayOfMonth.toString());
			}						
			CoDebugger.debugInformation("n-->"+ n +" : nth Last day of the current month ---> " +nthLastDayOfMonth.toString());
		}catch(Exception e){
			CoDebugger.debugException("Exception while getting nth last day of the month", e);
		} finally {
			closeConnection();
		}
		return nthLastDayOfMonth;		
	}



	/**
	 * Method to retrieve all records for FileNet batch.
	 * 
	 * @param coReqSeq
	 *            long
	 * @param coRptSeq
	 *            long
	 * @return Object[] Resultset from the DAO
	 * 
	 */
	public Object[] getRecordsForFileNetBatch()	{
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestRecipients", "findByAllForFileNetBatch",
					coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);			
		}

		return result;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdEligibilityForNCH001(EdEligibilityCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByConditionForNCH001", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16751);
		}
		return result;
	}

	/**
	 * 
	 * @param empID
	 * @return
	 * @throws CoException
	 */
	public Object[] getMoEmployeeByEmpId(long empID) throws CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		moEmployeesCargo.setEmpId(empID);
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		moEmployeesCargo.setEffBeginDt(today);
		moEmployeesCargo.setEffEndDt(today);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "MoEmployees", "findByEmpId", moEmployeesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEES", 16061);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcCasesByCaseNumber(long caseNumber) throws CoException {
		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();
		Object[] args = new Object[1];
		args[0] = caseNumber;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcCases", "findByCaseNum", dcCasesCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASES", 16061);
		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @param status
	 * @param fileName
	 * @return
	 * @throws CoException
	 */
	public boolean updateIn1095bNormalizedStatus(long coReqSeq, String status, String fileName) throws CoException{
		CoDebugger.debugMessage("BEGIN: Update Of IN_1095B_NORMALIZED for NormalizedId ---> " + coReqSeq + " Status ---> "+status);
		boolean finalResult = false;
		In1095bNormalizedCargo[] in1095bNormalizedCargos = null;
		In1095bNormalizedCargo in1095bNormalizedCargo = null;
		CoRequestHistoryCargo[] coRequestHistoryCargos = null;
		String normalizedId = "";
		try {
			openConnection();
			coRequestHistoryCargos = (CoRequestHistoryCargo[]) getCoRequestHistoryByCoReqSeq(coReqSeq);
			if (coRequestHistoryCargos != null && coRequestHistoryCargos.length > 0 && coRequestHistoryCargos[0] != null) {
				normalizedId = coRequestHistoryCargos[0].getLocationId();
			}
			CoDebugger.debugMessage("BEGIN: Update Of IN_1095B_NORMALIZED for NormalizedId ---> " + normalizedId + " Status ---> "+status);
			openConnection();
			in1095bNormalizedCargo = new In1095bNormalizedCargo();
			in1095bNormalizedCargo.setNormalizedId(Long.parseLong(normalizedId));
			in1095bNormalizedCargos = (In1095bNormalizedCargo[]) getIn1095bNormalizedCargoByNormalizedId(in1095bNormalizedCargo);
			if (in1095bNormalizedCargos != null && in1095bNormalizedCargos.length > 0 && in1095bNormalizedCargos[0] != null) {
				in1095bNormalizedCargo = in1095bNormalizedCargos[0];
				openConnection();
				In1095bNormalizedCollection in1095bNormalizedCollection = new In1095bNormalizedCollection();
				in1095bNormalizedCollection.setEJBSupported(false);
				in1095bNormalizedCargo.setStatus(status);
				in1095bNormalizedCargo.setGeneratedFileName(fileName);
				in1095bNormalizedCollection.setCargo(in1095bNormalizedCargo);
				finalResult = in1095bNormalizedCollection.update();
			}
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		} finally {
			closeConnection();
		}

		if (finalResult) {
			CoDebugger.debugMessage("END: Successful Update Of IN_1095B_NORMALIZED for NormalizedId ---> " + normalizedId);
		} else {
			CoDebugger.debugMessage("END: Failed Update Of IN_1095B_NORMALIZED for NormalizedId ---> " + normalizedId);
		}

		return finalResult;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bDemographicsByDemographicsId(In1095bDemographicsCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bDemographics", "findByDemographicsId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_DEMOGRAPHICS", 16355);
		}
		if (result == null || result.length == 0) {			
			result = null;
		}
		return result;
	}

	/**
	 * ]
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bDemographicsByIndividualIdAndApplicableYear(In1095bDemographicsCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bDemographics", "findByIndividualIdAndApplicableYear", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_DEMOGRAPHICS", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bDemographicsByNormalizedId(In1095bDemographicsCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bDemographics", "findByNormalizedId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_DEMOGRAPHICS", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bNormalizedCargoByNormalizedId(In1095bNormalizedCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bNormalized", "findByNormalizedId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bNormalizedCargoByByIndividualIdAndApplicableYear(In1095bNormalizedCargo cargo) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bNormalized", "findByIndividualIdAndApplicableYear", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bNormalizedCargoByCorrespondenceStatusCdAndApplicableYear(String statusCdString, long applicableYear) throws CoException {
		Object[] result = null;
		In1095bNormalizedCargo cargo = new In1095bNormalizedCargo();
		Object[] args = new Object[2];
		args[0] = statusCdString;
		args[1] = applicableYear;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bNormalized", "findByCorrespondenceStatusCdAndApplicableYear", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * This method fetches the normalized record for
	 * trigger creation
	 * @param statusCodes
	 * @param applicableYear
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bNormalizedCargoForBulkTriggers(String statusCodes, long applicableYear) throws CoException {
		In1095bNormalizedCargo cargo = new In1095bNormalizedCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = statusCodes;
		args[1] = applicableYear;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bNormalized", "findForBulkCorrespondenceTriggers", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * This method fetches the demographics record for
	 * trigger creation
	 * @param statusCodes
	 * @param applicableYear
	 * @return
	 * @throws CoException
	 */
	public Object[] getIn1095bDemographicsCargoForBulkTriggers(String statusCodes, long applicableYear) throws CoException {
		In1095bDemographicsCargo cargo = new In1095bDemographicsCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = statusCodes;
		args[1] = applicableYear;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bDemographics", "findForBulkCorrespondenceTriggers", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_DEMOGRAPHICS", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * This method updates the status for the
	 * normalized records for which co triggers 
	 * have been created.
	 * 
	 * @param statusCodes
	 * @param applicableYear
	 * @return
	 * @throws CoException
	 */
	public Object[] updateIn1095BNormalizedStatus(String statusCodes, long applicableYear) throws CoException {
		In1095bNormalizedCargo cargo = new In1095bNormalizedCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = statusCodes;
		args[1] = applicableYear;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1095bNormalized", "updateStatus", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		return result;
	}
	/**
	 * This method takes n in1095bNormalizedCargos and n in1095bDemographicsCargos 
	 * and returns true upon succesfully creating n correspondence triggeres.
	 * 
	 * @param in1095bNormalizedCargos
	 * @param in1095bDemographicsCargos
	 * @param statusCodes
	 * @param applicableYear
	 * @return
	 * @throws CoException
	 */
	public boolean createBulkTriggersForFor1095B(String jobId, In1095bNormalizedCustomCargo[] in1095bNormalizedCustomCargos, String statusCodes, long applicableYear) throws CoException{
		CoDebugger.debugInformation("Size of in1095bNormalizedCustomCargos ---> " + in1095bNormalizedCustomCargos.length);

		boolean result = false;
		List<CoRequestHistoryCargo> spacesCoRequestHistoryCargoList = new ArrayList<CoRequestHistoryCargo>();
		List<CoRequestHistoryCargo> nonSpacesCoRequestHistoryCargoList = new ArrayList<CoRequestHistoryCargo>();
		List<CoRequestHistoryDetailCargo> coRequestHistoryDetailCargoList = new ArrayList<CoRequestHistoryDetailCargo>();
		List<CoRequestRecipientsCargo> coRequestRecipientsCargoList = new ArrayList<CoRequestRecipientsCargo>();
		List<In1095bNormalizedCustomCargo> in1095bNormalizedCustomCargoList = new ArrayList<In1095bNormalizedCustomCargo>();

		java.sql.Timestamp tempPrintDate = null;
		tempPrintDate = CoDateFactory.getTimestamp();
		java.sql.Timestamp nextWorkingDay = getNextWorkingDay(tempPrintDate);
		try {
			result = bulkInsert1095BTrigger(jobId, in1095bNormalizedCustomCargos, statusCodes, applicableYear, result,
					spacesCoRequestHistoryCargoList, nonSpacesCoRequestHistoryCargoList, coRequestHistoryDetailCargoList,
					coRequestRecipientsCargoList, in1095bNormalizedCustomCargoList, tempPrintDate, nextWorkingDay);			
		} catch (Exception ex) {
			result = false;
			CoDebugger.debugInformation("END: BulkInsert Of Correspondence Trigger ---> FAILED");
			CoDebugger.debugException(ex.getMessage(), ex);
			throw new CoException("BulkInsert Of Correspondence Trigger ---> FAILED", 16751);
		} finally {
			closeConnection();
		}

		if(result){
			CoDebugger.debugInformation("END: BulkInsert Of Correspondence Trigger ---> SUCCESS");
		}
		return false;

	}


	/**
	 * 
	 * @param jobId
	 * @param in1095bNormalizedCustomCargos
	 * @param statusCodes
	 * @param applicableYear
	 * @param res
	 * @param spacesCoRequestHistoryCargoList
	 * @param nonSpacesCoRequestHistoryCargoList
	 * @param coRequestHistoryDetailCargoList
	 * @param coRequestRecipientsCargoList
	 * @param in1095bNormalizedCustomCargoList
	 * @param tempPrintDate
	 * @param nextWorkingDay
	 * @return
	 * @throws CoException
	 */
	private boolean bulkInsert1095BTrigger(String jobId, In1095bNormalizedCustomCargo[] in1095bNormalizedCustomCargos, String statusCodes,
			long applicableYear, boolean res, List<CoRequestHistoryCargo> spacesCoRequestHistoryCargoList,
			List<CoRequestHistoryCargo> nonSpacesCoRequestHistoryCargoList, List<CoRequestHistoryDetailCargo> coRequestHistoryDetailCargoList,
			List<CoRequestRecipientsCargo> coRequestRecipientsCargoList, List<In1095bNormalizedCustomCargo> in1095bNormalizedCustomCargoList,
			java.sql.Timestamp tempPrintDate, java.sql.Timestamp nextWorkingDay) throws CoException {
		long coReqSeq;
		long coDetSeq;
		long coRptSeq;
		boolean result = res;
		CoDebugger.debugInformation("BEGIN: BulkInsert Of Correspondence Trigger");
		try {
			int counter = 0;
			openConnection();
			for (In1095bNormalizedCustomCargo in1095bNormalizedCustomCargo : in1095bNormalizedCustomCargos) {
				long normalizedId = 0;
				normalizedId = in1095bNormalizedCustomCargo.getNormalizedId();
				CoDebugger.debugInformation("BEGIN: Prepare cargos for NormalizedId ---> " + normalizedId);
				coReqSeq = ((CoRequestHistoryCargo[])getCoRequestHistorySeq())[0].getCoReqSeq();
				coDetSeq = ((CoRequestHistoryDetailCargo[])getCoRequestHistoryDetailSeq())[0].getCoDetSeq();
				coRptSeq = ((CoRequestRecipientsCargo[])getCoRequestRecipientsSeq())[0].getCoRptSeq();
				in1095bNormalizedCustomCargo.setStatus("T");
				in1095bNormalizedCustomCargo.setCoId(coReqSeq);
				in1095bNormalizedCustomCargo.setLatestCoId(coReqSeq);
				in1095bNormalizedCustomCargoList.add(in1095bNormalizedCustomCargo);

				CoDebugger.debugInformation("startCoReqSeq ---> "+coReqSeq);
				CoDebugger.debugInformation("startCoDetSeq ---> "+coDetSeq);
				CoDebugger.debugInformation("startCoRptSeq ---> "+coRptSeq);
				CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
				CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
				CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
				coRequestHistoryCargo.setCoReqSeq(coReqSeq);
				coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
				coRequestRecipientsCargo.setCoRptSeq(coRptSeq);
				coRequestHistoryDetailCargo.setCoDetSeq(coDetSeq);
				coRequestHistoryDetailCargo.setCoReqSeq(coReqSeq);
				coRequestHistoryDetailCargo.setCoRptSeq(coRptSeq);

				/*BEGIN: SET VALUES FOR CO_REQUEST_HISTORY*/

				// since we are also sourcing data from legacy system
				// we are not able to use CASE_NUM and INDV_ID column for
				// this notice
				coRequestHistoryCargo.setApptId(in1095bNormalizedCustomCargo.getCaseNumber());
				coRequestHistoryCargo.setProviderId(in1095bNormalizedCustomCargo.getSourceIndividualId());
				coRequestHistoryCargo.setBenefitNum(String.valueOf(in1095bNormalizedCustomCargo.getNormalizedId()));
				// Use REASON_CD_LIST to store flag
				// If the batch fails after processing certain records, this
				// will enable us to begin from where we stopped.
				coRequestHistoryCargo.setReasonCdList("Y");			

				coRequestHistoryCargo.setDocId(CoConstants.NDMAELF23);
				coRequestHistoryCargo.setDraftSw(CoConstants.CHAR_N);
				coRequestHistoryCargo.setLanguageCd(CoConstants.LANG_ENGLISH);
				coRequestHistoryCargo.setGenerateDt(tempPrintDate);
				coRequestHistoryCargo.setHistorySw(CoConstants.CHAR_N);
				coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_B);
				coRequestHistoryCargo.setDocTypeCd(CoConstants.CHAR_F);
				coRequestHistoryCargo.setRequestTypeCd(CoConstants.CHAR_C);
				coRequestHistoryCargo.setProgramCd(CoConstants.PROGRAM_MA);
				coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_N);
				coRequestHistoryCargo.setMassGeneratedSw(CoConstants.CHAR_N);
				coRequestHistoryCargo.setCreateUserId(jobId);
				coRequestHistoryCargo.setCreateDt(tempPrintDate);
				coRequestHistoryCargo.setActivate("IOR");
				if (("102").equalsIgnoreCase(in1095bNormalizedCustomCargo.getSrcType())) {
					coRequestHistoryCargo.setCaseNum(in1095bNormalizedCustomCargo.getCaseNumber());
					coRequestHistoryCargo.setIndvId(in1095bNormalizedCustomCargo.getSourceIndividualId());
					coRequestHistoryCargo.setLocationId("SPACES");
					spacesCoRequestHistoryCargoList.add(coRequestHistoryCargo);
				} else {
					if (("101").equalsIgnoreCase(in1095bNormalizedCustomCargo.getSrcType())) {
						coRequestHistoryCargo.setLocationId("TECS/VISION");
					} else if (("103").equalsIgnoreCase(in1095bNormalizedCustomCargo.getSrcType())) { 
						coRequestHistoryCargo.setLocationId("HPE");
					}
					nonSpacesCoRequestHistoryCargoList.add(coRequestHistoryCargo);
				}

				/*END: SET VALUES FOR CO_REQUEST_HISTORY*/

				/*BEGIN: SET VALUES FOR CO_REQUEST_HISTORY_DETAIL*/
				coRequestHistoryDetailCargo.setPrintMode(CoConstants.CHAR_B);
				coRequestHistoryDetailCargo.setReprintSw(CoConstants.CHAR_O);
				coRequestHistoryDetailCargo.setCreateUserId(jobId);
				coRequestHistoryDetailCargo.setCreateDt(tempPrintDate);
				coRequestHistoryDetailCargo.setReqDt(nextWorkingDay);
				coRequestHistoryDetailCargoList.add(coRequestHistoryDetailCargo);
				/*END: SET VALUES FOR CO_REQUEST_HISTORY_DETAIL*/

				/*BEGIN: SET VALUES FOR CO_REQUEST_RECIPIENTS*/
				coRequestRecipientsCargo.setRecipientType("CT");
				String recipientData = String.valueOf(coRequestHistoryCargo.getApptId()) + "|" + in1095bNormalizedCustomCargo.getFirstName() + " " + in1095bNormalizedCustomCargo.getLastName() + " -" + in1095bNormalizedCustomCargo.getSourceIndividualId();
				coRequestRecipientsCargo.setRecipientData(recipientData);
				coRequestRecipientsCargo.setPrintType(CoConstants.CHAR_B);
				coRequestRecipientsCargo.setPrintSw(CoConstants.CHAR_N);
				coRequestRecipientsCargo.setCreateUserId(jobId);
				coRequestRecipientsCargo.setCreateDt(tempPrintDate);
				coRequestRecipientsCargo.setRecipientTypeId(CoConstants.CHAR_O);					
				coRequestRecipientsCargoList.add(coRequestRecipientsCargo);
				/*END: SET VALUES FOR CO_REQUEST_RECIPIENTS*/
				CoDebugger.debugInformation("END: Prepare cargos for NormalizedId ---> " + normalizedId);

				counter++;
				CoDebugger.debugInformation("COUNTER  ---------------------------------------------------------> " + counter);					
			}


			CoDebugger.debugInformation("IN_1095B_NORMALIZED Records -----------> "+in1095bNormalizedCustomCargos.length);
			CoDebugger.debugInformation("CO_RQUEST_HISTORY Records -----------> "+(spacesCoRequestHistoryCargoList.size() + nonSpacesCoRequestHistoryCargoList.size()));
			CoDebugger.debugInformation("CO_RQUEST_HISTORY_DETAIL Records -----------> "+coRequestHistoryDetailCargoList.size());
			CoDebugger.debugInformation("CO_RQUEST_RECIPIENTS Records -----------> "+coRequestRecipientsCargoList.size());


			CoDebugger.debugInformation("BEGIN: Actual BulkInsert Process");
			if (spacesCoRequestHistoryCargoList.size() >0) {
				openConnection();
				CoDebugger.debugInformation("Bulk Insert SPACES Records Into CO_REQUEST_HISTORY");
				CoRequestHistoryCollection spacesCoRequestHistoryCollection = new CoRequestHistoryCollection();
				spacesCoRequestHistoryCollection.setEJBSupported(false);
				spacesCoRequestHistoryCollection.addAll(spacesCoRequestHistoryCargoList);
				result = spacesCoRequestHistoryCollection.insert(true);
				CoDebugger.debugInformation("Bulk Insert SPACES Records Into CO_REQUEST_HISTORY -----------> SUCCESS");
			}
			if (nonSpacesCoRequestHistoryCargoList.size() >0) {
				openConnection();
				CoDebugger.debugInformation("Bulk Insert NON  SPACES Records Into CO_REQUEST_HISTORY");
				CoRequestHistoryCollection nonSpacesCoRequestHistoryCollection = new CoRequestHistoryCollection();
				nonSpacesCoRequestHistoryCollection.setEJBSupported(false);
				nonSpacesCoRequestHistoryCollection.addAll(nonSpacesCoRequestHistoryCargoList);
				result = nonSpacesCoRequestHistoryCollection.insert(true);
				CoDebugger.debugInformation("Bulk Insert NON SPACES Records Into CO_REQUEST_HISTORY");
			}
			CoDebugger.debugInformation("Bulk Insert Into CO_REQUEST_HISTORY -----------> SUCCESS");
			if (result) {
				openConnection();
				CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection();
				coRequestRecipientsCollection.setEJBSupported(false);
				coRequestRecipientsCollection.addAll(coRequestRecipientsCargoList);
				result = coRequestRecipientsCollection.insert(true);
				CoDebugger.debugInformation("Bulk Insert Into CO_REQUEST_RECIPIENTS -----------> SUCCESS");
			}
			if (result) {
				openConnection();
				CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
				coRequestHistoryDetailCollection.setEJBSupported(false);
				coRequestHistoryDetailCollection.addAll(coRequestHistoryDetailCargoList);
				result = coRequestHistoryDetailCollection.insert(true);	
				CoDebugger.debugInformation("Bulk Insert Into CO_REQUEST_HISTORY_DETAIL -----------> SUCCESS");
			}
			CoDebugger.debugInformation("END: Actual BulkInsert Process  ---> SUCCESS");

			update1095BStatus(statusCodes, applicableYear);
		} catch (Exception e) {	
			CoDebugger.debugInformation("END: BulkInsert Of Correspondence Trigger ---> FAILED");
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("BulkInsert Into CO_REQUEST_HISTORY ---> FAILED ", 16751);
		} finally {
			closeConnection();
		}
		return result;
	}


	/**
	 * 
	 * @param statusCodes
	 * @param applicableYear
	 * @throws CoException
	 */
	private void update1095BStatus(String statusCodes, long applicableYear) throws CoException {
		try {
			CoDebugger.debugInformation("BEGIN: Update STATUS in IN_1095B_NORMALIZED table to T");
			updateIn1095BNormalizedStatus(statusCodes, applicableYear);
			CoDebugger.debugInformation("END: Update STATUS in IN_1095B_NORMALIZED table to T ---> SUCCESS");
		} catch (Exception e1) {
			CoDebugger.debugException(e1.getMessage(), e1);
			CoDebugger.debugInformation("END: Update STATUS in IN_1095B_NORMALIZED table to T ---> FAILED");
			throw new CoException("BulkInsert Of Correspondence Trigger ---> FAILED", 16751);
		}
	}



	/**
	 * 
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestHistorySeq() throws CoException {
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "getMaxSequence", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistory", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestHistoryDetailSeq() throws CoException {
		CoRequestHistoryDetailCargo cargo = new CoRequestHistoryDetailCargo();
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistoryDetail", "getMaxSequence", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistoryDetail", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}
	/**
	 * 
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestRecipientsSeq() throws CoException {
		CoRequestRecipientsCargo cargo = new CoRequestRecipientsCargo();
		Object[] result = null;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestRecipients", "getMaxSequence", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestRecipients", 16355);
		} finally {
			closeConnection();
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] updateCoRequestHistoryForForm1095B(long coReqSeq) throws CoException {
		CoRequestRecipientsCargo cargo = new CoRequestRecipientsCargo();
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = coReqSeq;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "updateCoRequestHistoryForForm1095B", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Update failed for CoRequestHistory", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}


	/**
	 * 
	 * @param casenumber
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcCaseIndividualByActiveIncaseNonDeceased(long casenumber, String date) throws CoException {
		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = casenumber;
		args[1] =  date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcCaseIndividual", "findByActiveIncaseNonDeceased", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseIndividual", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}
	
	/**
	 * 
	 * @param casenumber
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcIndvByActiveIncaseNonDeceased(long casenumber, String date) throws CoException {
		DcIndvCargo cargo = new DcIndvCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = casenumber;
		args[1] =  date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndv", "findByActiveIncaseNonDeceased", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndv", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getPendingTriggerCountForForm1095B(String date) throws CoException {
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "getPendingTriggerCountFor1095B", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistory", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * 
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] updatePendingTriggerCountFor1095B(String date) throws CoException {
		CoRequestRecipientsCargo cargo = new CoRequestRecipientsCargo();
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "updatePendingTriggerCountFor1095B", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Update failed for CoRequestHistory", 16355);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}


	/**
	 * 
	 * @param indvId
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcRelationshipByFindParentsForChild(long indvId, String date) throws CoException {
		DcRelationshipsCargo cargo = new DcRelationshipsCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = indvId;
		args[1] =  date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcRelationships", "findParentsForChild", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcRelationships", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcRelationships",	16037);
		}
		return result;
	}

	/**
	 * 
	 * @param parentIndvId1
	 * @param parentIndvId2
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcRelationshipByFindRelationsip( long parentIndvId1, long parentIndvId2, String date) throws CoException {
		DcRelationshipsCargo cargo = new DcRelationshipsCargo();
		Object[] result = null;
		Object[] args = new Object[3];
		args[0] = parentIndvId1;
		args[1] =  parentIndvId2;
		args[2] =  date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcRelationships", "findRelationsip", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcRelationships", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcRelationships",	16037);
		}
		return result;
	}

	/**
	 * 
	 * @param indvId
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcRelationshipByFindSpecifiedCareTaker(long indvId, String date) throws CoException {
		DcRelationshipsCargo cargo = new DcRelationshipsCargo();
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = indvId;
		args[1] =  date;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcRelationships", "findSpecifiedCareTaker", cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcRelationships", 16355);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcRelationships",	16037);
		}
		return result;
	}

	/**
	 * 
	 * @param caseNum
	 * @param targetPersonId
	 * @return
	 * @throws CoException
	 */	
	public Object[] getEdEligibilityByfindOnGoingRecordByCaseNumAndIndvId(long caseNum, long targetPersonId ) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setTargetPersonId(targetPersonId);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findOnGoingRecordByCaseNumAndIndvId", edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByEdgNumAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}

	/**
	 * 
	 * @param caseNumber
	 * @param progCd
	 * @return
	 * @throws CoException
	 */
	public Object[] getCasePrograms(long caseNumber, String progCd) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
		dcCaseProgramCargo.setCaseNum(caseNumber);
		dcCaseProgramCargo.setProgCd(progCd);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcCaseProgram", "findByCaseNumberProgCd", dcCaseProgramCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM", 16429);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASE_PROGRAM", 16430);
		}
		return result;
	}


	/**
	 * This method takes list of COCorrespondence objects and creates n correspondence triggers; n = size of COCorrespondence.
	 * Each COCorrespondence object must be populated with caseNumber. All other values may be ignored.
	 *
	 * @param jobId
	 * @param docId
	 * @param coCorrespondenceList
	 * @param returnSummaryReadCount
	 * @param returnSummaryFailCount
	 * @param returnSummarySuccessCount
	 * @return
	 * @throws CoException
	 */
	public boolean processBulkCorrespondenceTriggersForTriggerBatch(String jobId, String docId, List<COCorrespondence> coCorrespondenceList, 
			StringBuffer returnSummaryReadCount, StringBuffer returnSummaryFailCount, StringBuffer returnSummarySuccessCount,Map<String,String> failedMap) throws CoException {

		boolean retVal = false;
		int readCount = 0;
		int failCount = 0;
		int successCount = 0;
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> jobId  ---> " + jobId);
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> docId  ---> " + docId);
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> number of correspondence  ---> " + coCorrespondenceList.size());
		
		CoAuthRepUtil coauthrepUtil= null;

		if (jobId == null || docId == null || coCorrespondenceList == null) {
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> jobId, docId and caseNumbers are required ");
		} else if (!docId.equals(CoConstants.CO_DOC_ID_NCH049) && !docId.equals(CoConstants.NDHCGNF15) && !docId.equals(CoConstants.NDHCREF09) && 
				!docId.equals(CoConstants.NDHCREN17)&& !docId.equals(CoConstants.DOC_ID_NDMATBN97)&&!docId.equals(CoConstants.DOC_ID_NDTFMRN77)&&
				!docId.equals(CoConstants.NDTANFF72)&&!docId.equals(CoConstants.NDEBN111)&&!docId.equals(CoConstants.NDHCCSN01)&&!docId.equals(CoConstants.DOC_NDUNN054)
				&&!docId.equals(CoConstants.DOC_ID_NDCCAP71) && !docId.equals(CoConstants.NDCCAP061)&& !docId.equals(CoConstants.NDCCAP062) && !docId.equals(CoConstants.DOC_ID_NDCCAP069)
				&& !docId.equals(CoConstants.NDCDN070) && !docId.equals(CoConstants.DOC_ID_NDTFREN17) &&!docId.equals(CoConstants.DOC_ID_NDLI0086) && !docId.equals(CoConstants.DOC_ID_NDHCC013) && !docId.equals(CoConstants.DOC_ID_NDLI103)
				&&!docId.equals(CoConstants.DOC_ID_NDLI8949) &&!docId.equals(CoConstants.DOC_ID_NDLI0104) &&!docId.equals(CoConstants.NDHCMNN22) &&!docId.equals(CoConstants.NDTNFN116) &&!docId.equals(CoConstants.NDLIN084) &&!docId.equals(CoConstants.NDLIN085)
				&&!docId.equals(CoConstants.DOC_ID_NDHCC107) &&!docId.equals(CoConstants.NDCCTFLI51_DOC_ID) &&!docId.equals(CoConstants.CCAP_CERTIFICATES)) {
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Method not supported for docId ---> " + docId);
		} else {

			CoRequestHistoryCollection coRequestHistoryCollection = null;
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = null;
			CoRequestRecipientsCollection coRequestRecipientsCollection = null;
            CoRequestRecipientsCollection coRequestRecipientsCollectionAuthRep = null;
            CoRequestHistoryDetailCollection coRequestHistoryDetailCollectionAuthRep = null;

            /**Added for CR 932- Provider Copy**/
			CoRequestHistoryCollection coRequestHistoryProviderCollection = null;

					
			/**Collection for mass mailing insert*/
			CoRequestHistoryCollection coRequestHistoryCollMassMail = null;
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollMassMail = null;
			CoRequestRecipientsCollection coRequestRecipientsCollMassMail = null;
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollMassMailAuthRep = null;
            CoRequestRecipientsCollection coRequestRecipientsCollMassMailAuthRep = null;


			long coReqSeq = 0;
			long coDetSeq = 0;
			long coRptSeq = 0;

			java.sql.Timestamp today = CoDateFactory.getTimestamp();
			java.sql.Timestamp nextWorkingDay = getNextWorkingDay(today);

			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> generateDate  ---> " + today.toString());
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> printDate  ---> " + nextWorkingDay.toString());

			int loopCount = 0;
			readCount = coCorrespondenceList.size();

			char docTypeCd = CoConstants.CHAR_N;
			if (docId.equals(CoConstants.NDHCREF09)) {
				docTypeCd = CoConstants.CHAR_F;
			}

			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> BEGIN: BulkInsert Of Correspondence Trigger");
			try {
				coRequestHistoryCollection = new CoRequestHistoryCollection();
				coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
				coRequestRecipientsCollection = new CoRequestRecipientsCollection();
				coRequestHistoryDetailCollectionAuthRep = new CoRequestHistoryDetailCollection();
                coRequestRecipientsCollectionAuthRep = new CoRequestRecipientsCollection();

                /**Added for CR 932- Provider Copy**/
    			coRequestHistoryProviderCollection  = new CoRequestHistoryCollection();

                
				coRequestHistoryCollection.setEJBSupported(false);
				coRequestHistoryDetailCollection.setEJBSupported(false);
				coRequestRecipientsCollection.setEJBSupported(false);
				coRequestRecipientsCollectionAuthRep.setEJBSupported(false);
                coRequestRecipientsCollectionAuthRep.setEJBSupported(false);

                /**Added for CR 932- Provider Copy**/
                coRequestHistoryProviderCollection.setEJBSupported(false);


				for (COCorrespondence coCorrespondence : coCorrespondenceList) {
					loopCount++;
					CoRequestHistoryCargo coRequestHistoryCargo = null;
					CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = null;
					CoRequestRecipientsCargo coRequestRecipientsCargo = null;
					long caseNumber = 0;
					try {
						if(coCorrespondence.getCaseAppNumber()!=null && !coCorrespondence.getCaseAppNumber().equals(CoConstants.EMPTY_STRING)){
							caseNumber = Long.parseLong(coCorrespondence.getCaseAppNumber());
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> caseNumber  ---> " + caseNumber);
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> BEGIN: Prepare cargos for caseNumber  ---> " + caseNumber);
						}
						coRequestHistoryCargo = new CoRequestHistoryCargo();
						coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
						coRequestRecipientsCargo = new CoRequestRecipientsCargo();

						coReqSeq = ((CoRequestHistoryCargo[]) getCoRequestHistorySeq())[0].getCoReqSeq();
						coDetSeq = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0].getCoDetSeq();
						coRptSeq = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0].getCoRptSeq();

						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> coReqSeq ---> " + coReqSeq);
						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> coDetSeq ---> " + coDetSeq);
						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> coRptSeq ---> " + coRptSeq);

						coRequestHistoryCargo.setCoReqSeq(coReqSeq);
						coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
						coRequestRecipientsCargo.setCoRptSeq(coRptSeq);
						coRequestHistoryDetailCargo.setCoDetSeq(coDetSeq);
						coRequestHistoryDetailCargo.setCoReqSeq(coReqSeq);
						coRequestHistoryDetailCargo.setCoRptSeq(coRptSeq);

						/* BEGIN: SET VALUES FOR CO_REQUEST_HISTORY */
						coRequestHistoryCargo.setCaseNum(caseNumber);
						coRequestHistoryCargo.setDocId(coCorrespondence.getDocId());
						coRequestHistoryCargo.setDraftSw(CoConstants.CHAR_N);
						coRequestHistoryCargo.setLanguageCd(CoConstants.LANG_ENGLISH);
						if(docId.equalsIgnoreCase(CoConstants.NDTNFN116)){
							coRequestHistoryCargo.setGenerateDt(coCorrespondence.getGenerateDate());
						}else{
							coRequestHistoryCargo.setGenerateDt(today);
						}
						coRequestHistoryCargo.setHistorySw(CoConstants.CHAR_N);
						coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_B);
						coRequestHistoryCargo.setDocTypeCd(docTypeCd);

						if(CoConstants.DEFAUTL_CHAR_VALUE !=coCorrespondence.getCaseAppFlag()){
							if(CoConstants.CHAR_P==coCorrespondence.getCaseAppFlag() || CoConstants.CHAR_S==coCorrespondence.getCaseAppFlag()){
								coRequestHistoryCargo.setRequestTypeCd(CoConstants.CHAR_S);	
							}else if(CoConstants.CHAR_V==coCorrespondence.getCaseAppFlag()){
								coRequestHistoryCargo.setRequestTypeCd(CoConstants.CHAR_V);
							}else{
								coRequestHistoryCargo.setRequestTypeCd(CoConstants.CHAR_C);	
							}
						}else{
							coRequestHistoryCargo.setRequestTypeCd(CoConstants.CHAR_C);	
						}

						if(null != coCorrespondence.getChipAppNum()){
							coRequestHistoryCargo.setChipAppNum(coCorrespondence.getChipAppNum());
						}

						if(docId.equals(CoConstants.CO_DOC_ID_CCAP061) || docId.equals(CoConstants.CO_DOC_ID_CCAP062) || docId.equals(CoConstants.DOC_ID_NDCCAP069)
								|| docId.equals(CoConstants.NDCDN070)||docId.equals(CoConstants.DOC_ID_NDLI0086) || docId.equals(CoConstants.DOC_ID_NDLI8949) 
								|| docId.equals(CoConstants.DOC_ID_NDLI0104) || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP063) || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP064)){
							coRequestHistoryCargo.setProviderId(coCorrespondence.getProviderId());
						}

						if(docId.equals(CoConstants.NDHCCSN01) || docId.equals(CoConstants.CO_DOC_ID_NCH049) || docId.equals(CoConstants.DOC_ID_NDCCAP069)
								|| docId.equals(CoConstants.NDCDN070) || docId.equals(CoConstants.DOC_ID_NDLI8949) || docId.equals(CoConstants.NDHCREN17)
								|| docId.equals(CoConstants.DOC_ID_NDTFREN17) || docId.equals(CoConstants.DOC_ID_NDLI0104) || docId.equals(CoConstants.DOC_ID_NDLI103)
								|| docId.equals(CoConstants.DOC_NDUNN054) || docId.equals(CoConstants.NDHCMNN22) || docId.equals(CoConstants.NDTNFN116) 
								|| docId.equals(CoConstants.CO_DOC_ID_CCAP061) || docId.equals(CoConstants.CO_DOC_ID_CCAP062) ||docId.equals(CoConstants.DOC_ID_NDLI0086) 
								|| docId.equals(CoConstants.NDLIN085) || docId.equals(CoConstants.DOC_ID_NDLI084) || docId.equals(CoConstants.NDCCTFLI51_DOC_ID) 
								|| docId.equals(CoConstants.NDTANFF72)  || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP063) || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP064) || docId.equals(CoConstants.DOC_ID_NDEBN111)){
							coRequestHistoryCargo.setProgramCd(coCorrespondence.getAssistanceProgramCode());
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Inside Non-MA Program Code Set ");
						}else{
							coRequestHistoryCargo.setProgramCd(CoConstants.PROGRAM_MA);
						}
						/**ND-42561- Added for Notification of Termination of Drug Coverage Benefits **/
						if(docId.equals(CoConstants.DOC_ID_NDMATBN97)){
							coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_N);
						}
						else{
							coRequestHistoryCargo.setManuallyGeneratedSw(CoConstants.CHAR_N);
						}
						coRequestHistoryCargo.setMassGeneratedSw(CoConstants.CHAR_N);
						coRequestHistoryCargo.setCreateUserId(jobId);
						coRequestHistoryCargo.setCreateDt(today);
						coRequestHistoryCargo.setActivate("IOR");
						if (docId.equals(CoConstants.CO_DOC_ID_NCH049)) {
							coRequestHistoryCargo.setMassGeneratedSw(coCorrespondence.getMassGeneratedSw());
							coRequestHistoryCargo.setMassMailingId(coCorrespondence.getMassMailingId());
							coRequestHistoryCargo.setMiscParms(coCorrespondence.getMiscParameters());
							coRequestHistoryCargo.setAttachments(coCorrespondence.getAttachments());
							if(coCorrespondence.getMiscParameters()!=null && (coCorrespondence.getMiscParameters().equals("P") || coCorrespondence.getMiscParameters().equals("V"))){
								coRequestHistoryCargo.setProviderId(coCorrespondence.getProviderId());
							}
						}

						if(docId.equals(CoConstants.NDHCREN17) || docId.equals(CoConstants.DOC_NDUNN054)
								|| docId.equals(CoConstants.NDCCAP062) || docId.equals(CoConstants.NDCCTFLI51_DOC_ID )|| docId.equals(CoConstants.DOC_ID_NDCCAP069)){
							coRequestHistoryCargo.setMiscParms(coCorrespondence.getMiscParameters());
						}
						if(docId.equals(CoConstants.DOC_ID_NDLI103) || docId.equals(CoConstants.NDTANFF72) ){
							coRequestHistoryCargo.setMiscParms(coCorrespondence.getMiscParameters());
						}
						
						if(coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP063) || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP064) ){
							coRequestHistoryCargo.setActionCd(coCorrespondence.getActionCode());
						}

						MoEmployeesCargo moEmployeesCargo = null;
						DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = null;
						DcIndvCargo dcIndvCargo = null;
						TaskBO taskBO = new TaskBO();
						long officeNum = 0;

						if(caseNumber>0){

							//Code to Hande Task based County 
							if(!taskBO.isCaseOfficeCaseManaged(caseNumber)){
								officeNum = taskBO.findOfficeForCaseApp(String.valueOf(caseNumber), true);
								coRequestHistoryCargo.setOfficeNum(officeNum);
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> case ---> " + caseNumber + " officeNum  ---> " + officeNum);
							}else{
								try {
									moEmployeesCargo = getWorkerDetail(caseNumber, moEmployeesCargo);
								} catch (Exception e) {
									failCount++;
									failedMap.put(String.valueOf(caseNumber), "No data for worker details. Skipping trigger.");
									CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while preparing cargos for caseNumber ---> " + caseNumber);
									CoDebugger.debugException(e.getMessage(), e);
									continue;
								}
								coRequestHistoryCargo.setEmpId(moEmployeesCargo.getEmpId());
								coRequestHistoryCargo.setOfficeNum(moEmployeesCargo.getPriOfficeNum());
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> case ---> " + caseNumber + " empId  ---> " + moEmployeesCargo.getEmpId());
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> case ---> " + caseNumber + " officeNum  ---> " + moEmployeesCargo.getPriOfficeNum());
							}
							//end of Code to Hande Task based County 

							try {

								dcHeadOfHouseholdCargo = getHoHByCaseNum(caseNumber, dcHeadOfHouseholdCargo);

								dcIndvCargo = getDCIndvdetail(caseNumber, dcHeadOfHouseholdCargo, dcIndvCargo);
							} catch (Exception e) {
								failCount++;
								failedMap.put(String.valueOf(caseNumber), "No data for worker details, head of household details or individual details. Skipping trigger.");
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while preparing cargos for caseNumber ---> " + caseNumber);
								CoDebugger.debugException(e.getMessage(), e);
								continue;
							}


							coRequestHistoryCargo.setIndvId(dcHeadOfHouseholdCargo.getIndvId());
							if(docId.equalsIgnoreCase(CoConstants.DOC_ID_NDMATBN97)) {
								coRequestHistoryCargo.setIndvId(coCorrespondence.getIndvId());
							}							

							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> case ---> " + caseNumber + " indvId  ---> " + dcHeadOfHouseholdCargo.getIndvId());
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> case ---> " + caseNumber + " hohName  ---> " + dcIndvCargo.getFirstName() + " " + dcIndvCargo.getLastName());
							/* END: SET VALUES FOR CO_REQUEST_HISTORY */

							if(coRequestHistoryCargo.getOfficeNum()<=0){
								failCount++;
								failedMap.put(String.valueOf(caseNumber), "No data for office numbers. Skipping trigger.");
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while preparing cargos for caseNumber ---> " + caseNumber);
								continue;
							}else{
								if(coRequestHistoryCargo.getEmpId()<=0){
									coRequestHistoryCargo.setEmpId(99);/**Setting default emp id since the batch insert fail for task based counties*/
								}
							}
						}
						/* BEGIN: SET VALUES FOR CO_REQUEST_HISTORY_DETAIL */
						coRequestHistoryDetailCargo.setPrintMode(CoConstants.CHAR_B);
						coRequestHistoryDetailCargo.setReprintSw(CoConstants.CHAR_O);
						coRequestHistoryDetailCargo.setCreateUserId(jobId);
						coRequestHistoryDetailCargo.setCreateDt(today);
						coRequestHistoryDetailCargo.setReqDt(nextWorkingDay);
						/* END: SET VALUES FOR CO_REQUEST_HISTORY_DETAIL */

						/* BEGIN: SET VALUES FOR CO_REQUEST_RECIPIENTS */
						String recipientData="";
						if ((docId.equals(CoConstants.CO_DOC_ID_NCH049) && coCorrespondence.getMiscParameters()!=null && coCorrespondence.getMiscParameters().equals("P")) 
								|| docId.equals(CoConstants.NDCDN070)  || docId.equals(CoConstants.CO_DOC_ID_CCAP062) || docId.equals(CoConstants.DOC_ID_NDCCAP069) || coCorrespondence.getDocId().equals(CoConstants.DOC_NDCCAP063)){

							coRequestRecipientsCargo.setRecipientType("PM");
							Long providerId=coCorrespondence.getProviderId();
							PmCcapProvidersCargo[] pmCcapProvidersCargos =(PmCcapProvidersCargo[]) getProviderDetailsMetaData(Integer.parseInt(providerId.toString()));
							if(pmCcapProvidersCargos!=null && pmCcapProvidersCargos.length>0 && pmCcapProvidersCargos[0]!=null ){
								recipientData = String.valueOf(caseNumber) + "|" + pmCcapProvidersCargos[0].getFirstName() + " " + pmCcapProvidersCargos[0].getLastName() + " -" + String.valueOf(pmCcapProvidersCargos[0].getProviderId());
							}							
						}else if((docId.equals(CoConstants.CO_DOC_ID_NCH049) && coCorrespondence.getMiscParameters()!=null && coCorrespondence.getMiscParameters().equals("V")) 
								|| docId.equals(CoConstants.DOC_ID_NDLI8949) || docId.equals(CoConstants.DOC_ID_NDLI0104) ||  docId.equals(CoConstants.DOC_ID_NDLI0086) ||  docId.equals(CoConstants.DOC_ID_NDLI8949) ){
							coRequestRecipientsCargo.setRecipientType("PM");
							Long vendorId=coCorrespondence.getProviderId();


							PmLiheapVendorCargo[] vendorDetails = (PmLiheapVendorCargo[]) getPmLiheapVendorInfo(Integer.parseInt(vendorId.toString()));
							if(vendorDetails!=null && vendorDetails.length>0 && vendorDetails[0]!=null ){
								recipientData = String.valueOf(caseNumber) + "|" + vendorDetails[0].getFirstName() + " " + vendorDetails[0].getLastName() + " -" + String.valueOf(vendorDetails[0].getSpacesVendorId());



							}	
						}
						else{
							try
							{
								coauthrepUtil= new CoAuthRepUtil();
							if (null != coCorrespondence
									.getAssistanceProgramCode())
							{
								log.log(CoConstants.CO_NAME,ILog.INFO,"Programmes For Case For General Delivery and County Service :" +  coCorrespondence
										.getAssistanceProgramCode());
								boolean ishomelesscheck = coauthrepUtil.isPiHomelessCheck(coCorrespondence.getCaseAppNumber());
							    int  programListsize = coauthrepUtil.getprogramLength(coCorrespondence.getAssistanceProgramCode());
								if(ishomelesscheck)
								{
									CoDebugger.debugInformation("BEGIN: SET VALUES FOR Homeles For Doc ID :" + docId);
									if (coCorrespondence.getAssistanceProgramCode().contains(CoConstants.MA) && programListsize ==1  )
									{
										coRequestRecipientsCargo.setRecipientType(CoConstants.COUNTY_SERVICE_RECIP_TYPE);
										recipientData = String.valueOf(caseNumber) + "|" + dcIndvCargo.getFirstName() + " " + dcIndvCargo.getLastName() + " -" + String.valueOf(dcIndvCargo.getIndvId());
										if(null==recipientData || "".equals(recipientData)){
											recipientData = CoConstants.TAB;
										}
									}
									else if (coCorrespondence.getAssistanceProgramCode().contains(CoConstants.MA) && programListsize > 1)
									{
										coRequestRecipientsCargo
										.setRecipientType(CoConstants.COUNTY_SERVICE_RECIP_TYPE);
										recipientData = String.valueOf(caseNumber) + "|" + dcIndvCargo.getFirstName() + " " + dcIndvCargo.getLastName() + " -" + String.valueOf(dcIndvCargo.getIndvId());
										if(null==recipientData || "".equals(recipientData)){
											recipientData = CoConstants.TAB;
										}
										long coRptSeqGenD = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0]
												.getCoRptSeq();
										long coDetSeqGenD = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0]
												.getCoDetSeq();
										if (docId.equals(CoConstants.CO_DOC_ID_NCH049))
										{
											coRequestRecipientsCollMassMail = coauthrepUtil.getGeneraldeliveryRecipientCollection(coRequestRecipientsCollMassMail, coCorrespondence, coReqSeq, coRptSeqGenD, jobId, recipientData);
											coRequestHistoryDetailCollMassMail = coauthrepUtil
													.getAuthRepHistoryCollection(
															coRequestHistoryDetailCollMassMail,
															coCorrespondence,
															coReqSeq,
															coRptSeqGenD,
															coDetSeqGenD,
															nextWorkingDay,
															jobId);
										}
										else
										{
											coRequestRecipientsCollection = coauthrepUtil.getGeneraldeliveryRecipientCollection(coRequestRecipientsCollection, coCorrespondence, coReqSeq, coRptSeqGenD, jobId, recipientData);
											coRequestHistoryDetailCollection = coauthrepUtil
													.getAuthRepHistoryCollection(
															coRequestHistoryDetailCollection,
															coCorrespondence,
															coReqSeq,
															coRptSeqGenD,
															coDetSeqGenD,
															nextWorkingDay,
															jobId);
										}


									}
									else
									{
										coRequestRecipientsCargo.setRecipientType(CoConstants.GENERAL_DELIVERY_RECIP_TYPE);
										recipientData = String.valueOf(caseNumber) + "|" + dcIndvCargo.getFirstName() + " " + dcIndvCargo.getLastName() + " -" + String.valueOf(dcIndvCargo.getIndvId());
									}
									CoDebugger.debugInformation("BEGIN: End VALUES FOR Homeles For Doc ID :" + docId);
								}
								else
								{
									coRequestRecipientsCargo.setRecipientType(CoConstants.CLIENT);
									recipientData = String.valueOf(caseNumber) + "|" + dcIndvCargo.getFirstName() + " " + dcIndvCargo.getLastName() + " -" + String.valueOf(dcIndvCargo.getIndvId());
								}
								
							}
							else
							{
								CoDebugger.debugInformation( caseNumber + " : Programmes Code is Empty So not Executing General Delivery , County Service and Client Code:" );
								throw new CoException("Error While getting the Program Code For County Service and General Delivery For Case Number : " + caseNumber);
							}
							}
							catch(Exception e)
							{
								failCount++;
								failedMap.put(String.valueOf(caseNumber), e.getMessage());
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting the Program Code for Case Number ---> " + caseNumber);
								CoDebugger.debugException(e.getMessage(), e);
								continue;
							}
						}
						if(null==recipientData || "".equals(recipientData)){
							recipientData = CoConstants.TAB;
						}

						coRequestRecipientsCargo.setRecipientData(recipientData);
						coRequestRecipientsCargo.setPrintType(CoConstants.CHAR_B);
						coRequestRecipientsCargo.setPrintSw(CoConstants.CHAR_N);
						coRequestRecipientsCargo.setCreateUserId(jobId);
						coRequestRecipientsCargo.setCreateDt(today);
						coRequestRecipientsCargo.setRecipientTypeId(CoConstants.CHAR_O);
						/* BEGIN: SET VALUES FOR CO_REQUEST_RECIPIENTS */

						if(CoConstants.CO_DOC_ID_NCH049.equals(docId)){
							coRequestHistoryCollMassMail = new CoRequestHistoryCollection();
							coRequestHistoryDetailCollMassMail = new CoRequestHistoryDetailCollection();
							coRequestRecipientsCollMassMail = new CoRequestRecipientsCollection();
							coRequestHistoryDetailCollMassMailAuthRep = new CoRequestHistoryDetailCollection();
							coRequestRecipientsCollMassMailAuthRep = new CoRequestRecipientsCollection();

							coRequestHistoryCollMassMail.setEJBSupported(false);
							coRequestHistoryDetailCollMassMail.setEJBSupported(false);
							coRequestRecipientsCollMassMail.setEJBSupported(false);
							coRequestHistoryDetailCollMassMailAuthRep.setEJBSupported(false);
							coRequestRecipientsCollMassMailAuthRep.setEJBSupported(false);

							try{
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Overriding bulk process for mass mailing. Starting sequential insert.");
								CoDebugger.debugInformation("Authrep For Mass Mailing Started");
								coauthrepUtil= new CoAuthRepUtil();
								try
								{
									String programCodes = "";
									if (null != coCorrespondence
											.getAssistanceProgramCode()) {
										log.log(CoConstants.CO_NAME,ILog.INFO,"Programmes For Case :" +  coCorrespondence
												.getAssistanceProgramCode()); 
										if (coCorrespondence
												.getAssistanceProgramCode().contains(CoConstants.MA) || coCorrespondence
												.getAssistanceProgramCode().contains(CoConstants.SNAP)){
											programCodes = coCorrespondence
													.getAssistanceProgramCode();
											CoDebugger.debugInformation("Programmes For Authrep :" + programCodes);
											log.log(CoConstants.CO_NAME,ILog.INFO,"Programmes For Authrep :" + programCodes);
											Map<Long, Set<DcAuthRepAssociationCargo>> authRepMap = coauthrepUtil
													.getAuthrepforCase(
															coCorrespondence,
															programCodes, today);
											if (null != authRepMap
													&& authRepMap.size() > 0) {
												for(Map.Entry<Long, Set<DcAuthRepAssociationCargo>> entry : authRepMap.entrySet())
												{
													Set<DcAuthRepAssociationCargo> authRepSet = entry.getValue();
													if(!authRepSet.isEmpty() && authRepSet.size()>1)
													{
														long coRptSeqAuthrep = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0]
																.getCoRptSeq();
														long coDetSeqAuthRep = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0]
																.getCoDetSeq();
														coRequestRecipientsCollMassMailAuthRep = coauthrepUtil
																.getAuthRepRecipientCollection(
																		coRequestRecipientsCollMassMailAuthRep,
																		coCorrespondence,
																		coReqSeq,
																		coRptSeqAuthrep,
																		jobId,
																		authRepSet.iterator().next().getAuthrepSeqNum(),
																		CoConstants.RECIPIENT_AUTHORIZED_REP);
														coRequestHistoryDetailCollMassMailAuthRep = coauthrepUtil
																.getAuthRepHistoryCollection(
																		coRequestHistoryDetailCollMassMailAuthRep,
																		coCorrespondence,
																		coReqSeq,
																		coRptSeqAuthrep,
																		coDetSeqAuthRep,
																		nextWorkingDay,
																		jobId);
													}

													else
													{
														long coRptSeqAuthrep = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0]
																.getCoRptSeq();
														long coDetSeqAuthRep = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0]
																.getCoDetSeq();
														coRequestRecipientsCollMassMailAuthRep = coauthrepUtil
																.getAuthRepRecipientCollection(
																		coRequestRecipientsCollMassMailAuthRep,
																		coCorrespondence,
																		coReqSeq,
																		coRptSeqAuthrep,
																		jobId,
																		authRepSet.iterator().next().getAuthrepSeqNum(),
																		authRepSet.iterator().next().getRepProgCd());
														coRequestHistoryDetailCollMassMailAuthRep = coauthrepUtil
																.getAuthRepHistoryCollection(
																		coRequestHistoryDetailCollMassMailAuthRep,
																		coCorrespondence,
																		coReqSeq,
																		coRptSeqAuthrep,
																		coDetSeqAuthRep,
																		nextWorkingDay,
																		jobId);
													}


												}
											}
										}
									}
									else
									{
										CoDebugger.debugInformation("Programmes For Authrep is Empty So not Executing Auth Rep Code:");
										throw new CoException("No Program Code For The case number" + caseNumber);                                                   
									}
								}catch(Exception e)
								{
									failedMap.put(String.valueOf(caseNumber), e.getMessage());
									CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting the Program Code for Case Number ---> " + caseNumber);
									CoDebugger.debugException(e.getMessage(), e);
								}


								CoDebugger.debugInformation("Authrep For Mass Mailing Ended");

								coRequestHistoryCollMassMail.add(coRequestHistoryCargo);
								coRequestHistoryDetailCollMassMail.add(coRequestHistoryDetailCargo);
								coRequestRecipientsCollMassMail.add(coRequestRecipientsCargo);
								
								int coRequestHistoryCargoCountMassMail = coRequestHistoryCollMassMail.getResultsSize();
								int coRequestHistoryDetailCargoCountMassMail = coRequestHistoryDetailCollMassMail.getResultsSize();
								int coRequestRecipientsCargoCountMassMail = coRequestRecipientsCollMassMail.getResultsSize();
								int coRequestRecipientsCargoCountAuthRepMassMail = coRequestRecipientsCollMassMailAuthRep.getResultsSize();
			                    int coRequestHistoryDetailCargoCountAuthRepMassMail = coRequestHistoryDetailCollMassMailAuthRep.getResultsSize();
			                    
			                    CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CaseNumber Count for Mass Mailing-----------> " + coCorrespondenceList.size());
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY Records for Mass Mailing -----------> " + coRequestHistoryCargoCountMassMail);
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY_DETAIL Records for Mass Mailing -----------> " + coRequestHistoryDetailCargoCountMassMail);
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_RECIPIENTS Records for Mass Mailing-----------> " + coRequestRecipientsCargoCountMassMail);
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_RECIPIENTS Records for AuthRep for Mass Mailing -----------> " + coRequestRecipientsCargoCountAuthRepMassMail);
			                    CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY_DETAIL Records for AuthRep for Mass Mailing-----------> " + coRequestHistoryDetailCargoCountAuthRepMassMail);


								coRequestHistoryCollMassMail.insert(true);
								coRequestRecipientsCollMassMail.insert(true);
								coRequestHistoryDetailCollMassMail.insert(true);
								coRequestRecipientsCollMassMailAuthRep.insert(true);
								coRequestHistoryDetailCollMassMailAuthRep.insert(true);


								successCount++;

								coRequestHistoryCollMassMail = null;
								coRequestHistoryDetailCollMassMail = null;
								coRequestRecipientsCollMassMail = null;
							}catch(Exception e){
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> mass mailing Insert failed  -----> FAILED");
								failCount++;
								long failedCase = coRequestHistoryCargo.getCaseNum();
								long failedProvider = coRequestHistoryCargo.getProviderId();
								long failedMassMailingId = coRequestHistoryCargo.getMassMailingId();
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> FAILED case : "+failedCase);
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> FAILED provider : "+failedProvider);
								if(failedCase>0){
									if(e.getMessage()!=null){
										failedMap.put(String.valueOf(failedCase),"Mass mailing ID for this case failure = "+failedMassMailingId+" "+e.getMessage());
									}else{
										failedMap.put(String.valueOf(failedCase), "Mass mailing ID for this case failure = "+failedMassMailingId+" "+e.toString());
									}
								}else if(failedProvider>0){
									if(e.getMessage()!=null){
										failedMap.put(String.valueOf(failedProvider), "Mass mailing ID for this provider failure = "+failedMassMailingId+" "+e.getMessage());
									}else{
										failedMap.put(String.valueOf(failedProvider), "Mass mailing ID for this provider failure = "+failedMassMailingId+" "+e.toString());
									}
								}
								CoDebugger.debugException("processBulkCorrespondenceTriggersForTriggerBatch ---> mass mailing Insert failed  -----> FAILED",e);
								continue;
							}
						}else{

							/* BEGIN: SET VALUES FOR AUTHREP */                 
							CoDebugger.debugInformation("BEGIN: SET VALUES FOR AUTHREP For Doc ID :" + docId);
							coauthrepUtil= new CoAuthRepUtil();
							try
							{
								String programCodes = "";
								if (null != coCorrespondence
										.getAssistanceProgramCode()) {
									log.log(CoConstants.CO_NAME,ILog.INFO,"Programmes For Case :" +  coCorrespondence
											.getAssistanceProgramCode()); 
									if (coCorrespondence
											.getAssistanceProgramCode().contains(CoConstants.MA) || coCorrespondence
											.getAssistanceProgramCode().contains(CoConstants.SNAP)){
										programCodes = coCorrespondence
												.getAssistanceProgramCode();
										CoDebugger.debugInformation("Programmes For Authrep :" + programCodes);
										Map<Long, Set<DcAuthRepAssociationCargo>> authRepMap = coauthrepUtil
												.getAuthrepforCase(
														coCorrespondence,
														programCodes, today);
										if(null != authRepMap && authRepMap.size() >0)
										{
											for(Map.Entry<Long, Set<DcAuthRepAssociationCargo>> entry : authRepMap.entrySet())
											{
												Set<DcAuthRepAssociationCargo> authRepSet = entry.getValue();
												if(!authRepSet.isEmpty() && authRepSet.size()>1)
												{
													long coRptSeqAuthrep = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0]
															.getCoRptSeq();
													long coDetSeqAuthRep = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0]
															.getCoDetSeq();
													coRequestRecipientsCollectionAuthRep = coauthrepUtil
															.getAuthRepRecipientCollection(
																	coRequestRecipientsCollectionAuthRep,
																	coCorrespondence,
																	coReqSeq,
																	coRptSeqAuthrep,
																	jobId,
																	authRepSet.iterator().next().getAuthrepSeqNum(),
																	CoConstants.RECIPIENT_AUTHORIZED_REP);
													coRequestHistoryDetailCollectionAuthRep = coauthrepUtil
															.getAuthRepHistoryCollection(
																	coRequestHistoryDetailCollectionAuthRep,
																	coCorrespondence,
																	coReqSeq,
																	coRptSeqAuthrep,
																	coDetSeqAuthRep,
																	nextWorkingDay,
																	jobId);
												}

												else
												{
													long coRptSeqAuthrep = ((CoRequestRecipientsCargo[]) getCoRequestRecipientsSeq())[0]
															.getCoRptSeq();
													long coDetSeqAuthRep = ((CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailSeq())[0]
															.getCoDetSeq();
													coRequestRecipientsCollectionAuthRep = coauthrepUtil
															.getAuthRepRecipientCollection(
																	coRequestRecipientsCollectionAuthRep,
																	coCorrespondence,
																	coReqSeq,
																	coRptSeqAuthrep,
																	jobId,
																	authRepSet.iterator().next().getAuthrepSeqNum(),
																	authRepSet.iterator().next().getRepProgCd());
													coRequestHistoryDetailCollectionAuthRep = coauthrepUtil
															.getAuthRepHistoryCollection(
																	coRequestHistoryDetailCollectionAuthRep,
																	coCorrespondence,
																	coReqSeq,
																	coRptSeqAuthrep,
																	coDetSeqAuthRep,
																	nextWorkingDay,
																	jobId);
												}


											}
										}

									}
								}
								else
								{
									CoDebugger.debugInformation("Programmes For Authrep is Empty So not Executing Auth Rep Code:");
									throw new CoException("No Program Code For The case number" + caseNumber);                                                 
								}

							}catch(Exception e)
							{
								failedMap.put(String.valueOf(caseNumber), e.toString());
								CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting the Program Code for Case Number ---> " + caseNumber);
								CoDebugger.debugException(e.getMessage(), e);
							}
							
							CoDebugger.debugInformation("End: SET VALUES FOR AUTHREP For Doc ID :" + docId);

							/* END: SET VALUES FOR CO_REQUEST_RECIPIENTS for AuthRep */   

						    /**Added for CR 932- Provider Copy**/
							if (coRequestHistoryCargo.getDocId().equals(CoConstants.DOC_NDCCAP063)){
								coRequestHistoryProviderCollection.add(coRequestHistoryCargo);

							}else{
								coRequestHistoryCollection.add(coRequestHistoryCargo);
							}
							coRequestHistoryDetailCollection.add(coRequestHistoryDetailCargo);
							coRequestRecipientsCollection.add(coRequestRecipientsCargo);
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> END: Prepare cargos for caseNumber ---> " + caseNumber);
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> loopCount  ---------------------------------------------------------> " + loopCount);
							successCount++;
						}
					} catch (Exception e) {
						failCount++;
						if(caseNumber>0){
							if(e.getMessage()!=null){
								failedMap.put(String.valueOf(caseNumber), e.getMessage());
							}else{
								failedMap.put(String.valueOf(caseNumber), e.toString());
							}
						}else if(coCorrespondence.getProviderId()>0){
							if(e.getMessage()!=null){
								failedMap.put(String.valueOf(coCorrespondence.getProviderId()), e.getMessage());
							}else{
								failedMap.put(String.valueOf(coCorrespondence.getProviderId()), e.toString());
							}
						}
						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while preparing cargos for caseNumber ---> " + caseNumber);
						CoDebugger.debugException(e.getMessage(), e);
					}
				}

				if(!CoConstants.CO_DOC_ID_NCH049.equals(docId)){
					int coRequestHistoryCargoCount = coRequestHistoryCollection.getResultsSize();
					int coRequestHistoryDetailCargoCount = coRequestHistoryDetailCollection.getResultsSize();
					int coRequestRecipientsCargoCount = coRequestRecipientsCollection.getResultsSize();
					int coRequestRecipientsCargoCountAuthRep = coRequestRecipientsCollectionAuthRep.getResultsSize();
                    int coRequestHistoryDetailCargoCountAuthRep = coRequestHistoryDetailCollectionAuthRep.getResultsSize();

					int coRequestHistoryProviderCargoCount = coRequestHistoryProviderCollection.getResultsSize();

					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CaseNumber Count -----------> " + coCorrespondenceList.size());
					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY Records -----------> " + coRequestHistoryCargoCount);
					/**Added for CR-932 Provider Copy**/
					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY Records for Provider -----------> " + coRequestHistoryProviderCargoCount);

					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY_DETAIL Records -----------> " + coRequestHistoryDetailCargoCount);
					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_RECIPIENTS Records -----------> " + coRequestRecipientsCargoCount);
					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_RECIPIENTS Records for AuthRep -----------> " + coRequestRecipientsCargoCount);
                    CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> CO_RQUEST_HISTORY_DETAIL Records for AuthRep -----------> " + coRequestHistoryDetailCargoCountAuthRep);

                    
      
					if (coRequestHistoryCargoCount == successCount 
				            
							/**Added for CR-932 Provider Copy**/
							|| (coRequestHistoryCargoCount+coRequestHistoryProviderCargoCount == successCount) ) {
	
						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> BEGIN: Actual BulkInsert Process");
						boolean coRequestHistoryInsertResult = false;
						boolean coRequestHistoryDetailInsertResult = false;
						boolean coRequestRecipientsInsertResult = false;
						boolean coRequestRecipientsAuthrepInsertResult = false;
                        boolean coRequestHistoryDetailAuthRepInsertResult = false;
						boolean coRequestHistoryProviderInsertResult = false;

						openConnection();
						try{
							coRequestHistoryInsertResult = coRequestHistoryCollection.insert(true);
							coRequestHistoryProviderInsertResult = coRequestHistoryProviderCollection.insert(true);

						}catch(Exception e){
							failCount = readCount;
							successCount = 0;
							failedMap.put("InsertFailure", "Error while inserting data into CO_REQUEST_HISTORY");
							throw new Exception(e);
						}
						if (coRequestHistoryInsertResult) {
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_HISTORY -----------> SUCCESS");
							try{
								coRequestRecipientsInsertResult = coRequestRecipientsCollection.insert(true);
								coRequestRecipientsAuthrepInsertResult = coRequestRecipientsCollectionAuthRep.insert(true);
							}catch(Exception e){
								failCount = readCount;
								successCount = 0;
								failedMap.put("InsertFailure", "Error while inserting data into CO_REQUEST_RECIPIENTS");
								throw new Exception(e);
							}
						} else {
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_HISTORY -----------> FAILED");
						}
	
						if (coRequestRecipientsInsertResult) {
							openConnection();
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_RECIPIENTS -----------> SUCCESS");
							try{
								coRequestHistoryDetailInsertResult = coRequestHistoryDetailCollection.insert(true);
								coRequestHistoryDetailAuthRepInsertResult = coRequestHistoryDetailCollectionAuthRep.insert(true);
							}catch(Exception e){
								failCount = readCount;
								successCount = 0;
								failedMap.put("InsertFailure", "Error while inserting data into CO_REQUEST_HISTORY_DETAILS");
								throw new Exception(e);
							}
						} else {
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_RECIPIENTS -----------> FAILED");
						}
	
						if (coRequestHistoryDetailInsertResult) {
							openConnection();
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_HISTORY_DETAIL -----------> SUCCESS");
						} else {
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk Insert Into CO_REQUEST_HISTORY_DETAIL -----------> FAILED");
						}
	
						if (coRequestHistoryInsertResult && coRequestHistoryDetailInsertResult && coRequestRecipientsInsertResult && coRequestRecipientsAuthrepInsertResult && coRequestHistoryDetailAuthRepInsertResult) {
							retVal = true;
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> END: Actual BulkInsert Process  ---> SUCCESS");
						} else {
							CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> END: Actual BulkInsert Process  ---> FAILED");
						}
					} else {
						CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Error while forming cargos for the triggers");
						failCount = readCount;
						failedMap.put("InsertFailure", "Error while preparing cargo for the triggers. No record inserted. Cargo count for History, Details and Recipient do not match");
						successCount = 0;
					}
				}else{
					if(readCount == failCount){
						retVal = false;
					}else{
						retVal = true;
					}
					CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Bulk insert skipped for MASS MAILING. Sequential insert already completed");
				}
			} catch (Exception e) {
				CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummaryReadCount -----------> " + readCount);
				CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummarySuccessCount -----------> " + successCount);
				CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummaryFailCount -----------> " + failCount);
				returnSummaryReadCount.append(readCount);
				returnSummarySuccessCount.append(successCount);
				returnSummaryFailCount.append(failCount);

				CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> END: Actual BulkInsert Process  ---> FAILED");
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("processBulkCorrespondenceTriggersForTriggerBatch ---> END: Actual BulkInsert Process  ---> FAILED : "+e.getMessage());
			} finally {
				closeConnection();
			}
		}
		returnSummaryReadCount.append(readCount);
		returnSummarySuccessCount.append(successCount);
		returnSummaryFailCount.append(failCount);
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummaryReadCount -----------> " + readCount);
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummarySuccessCount -----------> " + successCount);
		CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> returnSummaryFailCount -----------> " + failCount);
		return retVal;
	}


	/**
	 * 
	 * @param caseNumber
	 * @param dcHeadOfHouseholdCargo
	 * @param dcIndv
	 * @return
	 * @throws CoException
	 */
	private DcIndvCargo getDCIndvdetail(long caseNumber, DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo, DcIndvCargo dcIndv) throws CoException {
		DcIndvCargo dcIndvCargo = dcIndv;
		try {
			dcIndvCargo = ((DcIndvCargo[]) getDcIndividualDetails(dcHeadOfHouseholdCargo.getIndvId()))[0];
		} catch (Exception e) {
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting DcIndv for caseNumber ---> " + caseNumber);
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting DcIndv for caseNumber ---> " + caseNumber);
		}
		return dcIndvCargo;
	}


	/**
	 * 
	 * @param caseNumber
	 * @param dcHohCargo
	 * @return
	 * @throws CoException
	 */
	private DcHeadOfHouseholdCargo getHoHByCaseNum(long caseNumber, DcHeadOfHouseholdCargo dcHohCargo) throws CoException {
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = dcHohCargo;
		try {
			dcHeadOfHouseholdCargo = ((DcHeadOfHouseholdCargo[]) getDcHeadOfHouseholdByCaseNum(caseNumber))[0];
		} catch (Exception e) {
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting DcHeadOfHousehold for caseNumber ---> " + caseNumber);
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting DcHeadOfHousehold for caseNumber ---> " + caseNumber);
		}
		return dcHeadOfHouseholdCargo;
	}


	/**
	 * 
	 * @param caseNumber
	 * @param moEmpCargo
	 * @return
	 * @throws CoException
	 */
	private MoEmployeesCargo getWorkerDetail(long caseNumber, MoEmployeesCargo moEmpCargo) throws CoException {
		MoEmployeesCargo moEmployeesCargo = moEmpCargo;
		try {
			moEmployeesCargo = ((MoEmployeesCargo[]) getCaseWorkerDetails(caseNumber))[0];
		} catch (Exception e) {
			CoDebugger.debugInformation("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting CaseWorker and Office Details for caseNumber ---> " + caseNumber);
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("processBulkCorrespondenceTriggersForTriggerBatch ---> Exception while getting CaseWorker and Office Details for caseNumber ---> " + caseNumber);
		}
		return moEmployeesCargo;
	}

	/**
	 * This is used to get a hashMap of Code and value from IN_1094B_STATIC_DATA table.
	 * @return
	 * @throws CoException
	 */
	public Map<String, String> get1094BStaticData() throws CoException {
		Map<String, String> map = null;
		Object[] result = null;
		In1094bStaticDataCargo cargo = new In1094bStaticDataCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1094bStaticData", "getAll", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1094B_STATIC_DATA", 16825);
		}
		if (result == null || result.length == 0) {
			result = null;
		}else{
			map = new HashMap<String,String>();
			for(In1094bStaticDataCargo in1094bStaticDataCargo : (In1094bStaticDataCargo[])result){
				map.put(in1094bStaticDataCargo.getCode(), in1094bStaticDataCargo.getValue());
			}
		}
		return map;
	}

	/**
	 * Calls Collection.update on the In1095bNormalizedCargo object. 
	 * @param cargo
	 * @return
	 * @throws CoException
	 */
	public boolean updateIn1095BNormalizedCoId(In1095bNormalizedCustomCargo cargo) throws CoException {

		try {
			openConnection();
			In1095bNormalizedCollection in1095bNormalizedCollection = null;			
			in1095bNormalizedCollection =  new In1095bNormalizedCollection();
			in1095bNormalizedCollection.setEJBSupported(false);
			in1095bNormalizedCollection.add(cargo);
			in1095bNormalizedCollection.update();
			return true;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("UPDATE failed for IN_1095B_NORMALIZED", 16355);
		} finally {
			closeConnection();
		}

	}

	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getDcHeadOfHouseholdByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = new DcHeadOfHouseholdCargo();
		dcHeadOfHouseholdCargo.setCaseNum(caseNum);
		dcHeadOfHouseholdCargo.setHohBeginDt(today);
		dcHeadOfHouseholdCargo.setHohEndDt(today);
		try {

			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcHeadOfHousehold", "findByHoH", dcHeadOfHouseholdCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception while fetching data from DC_HEAD_OF_HOUSEHOLD: " + e.getMessage(), e);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_HEAD_OF_HOUSEHOLD", 16796);
		}
		return result;
	}

	/**
	 * 
	 * @param coReqSeq
	 * @param coRptSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getCoRequestRecipients(long coReqSeq, long coRptSeq) throws CoException {
		Object[] result = null;
		CoRequestRecipientsCargo coRequestRecipientsCargo = new CoRequestRecipientsCargo();
		coRequestRecipientsCargo.setCoReqSeq(coReqSeq);
		coRequestRecipientsCargo.setCoRptSeq(coRptSeq);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestRecipients", "findByCoReqSAndCoRptSeqAndLocationPath", coRequestRecipientsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CO_REQUEST_RECIPIENTS", 16825);
		}
		if (result == null || result.length == 0) {
			result = null;
		}
		return result;
	}

	/**
	 * Method to get details for a case Worker
	 * 
	 * @author rparanjpe
	 * @param aCaseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getCaseWorkerDetailsNew(long aCaseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		MoEmployeesCargo moEmployeesCargo = new MoEmployeesCargo();
		Object[] objArr = new Object[2];
		objArr[0] = aCaseNum;
		objArr[1] = CoConstants.JOB_TITLE_CD_CASE_WORKER;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployees", "findByCaseRoleNew", moEmployeesCargo, objArr,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService-getCaseWorkerDetails-"+e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEES", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data for Case Worker found in MO_EMPLOYEES", 16037);
		}

		return result;

	}

	public Object[] getCaseAppNumberForNDHCELN18(COCorrespondence aCoObj)
			throws CoException {

		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setCoReqSeq(aCoObj.getCoReqSeq());
		CorrespondenceServices.formatCoObject(cargo, aCoObj);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findByReqSeqForNDHCELN18", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 99666);
		}
		return result;
	}

	/**
	 * 
	 * @param applicableYear
	 * @return
	 * @throws CoException
	 */
	public In1095bNormalizedCustomCargo[] getIn1095bNormalizedCustomCargoForBulkTriggers(long applicableYear) throws CoException {
		In1095bNormalizedCustomCargo[] cargos = null;
		Object[] parms = new Object[1];
		parms[0] = applicableYear;
		try {
			In1095bNormalizedCollection in1095bNormalizedCollection = new In1095bNormalizedCollection();
			cargos = (In1095bNormalizedCustomCargo[]) in1095bNormalizedCollection.select("findNormalizedCustomCargoForBulkCorrespondenceTriggers", parms);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (cargos == null || cargos.length == 0) {
			cargos = null;
		}
		return cargos;
	}

	/**
	 * 
	 * @param normalizedId
	 * @return
	 * @throws CoException
	 */
	public In1095bNormalizedCustomCargo[] getIn1095bNormalizedCustomCargoByNormalizedId(String normalizedId) throws CoException {
		In1095bNormalizedCustomCargo[] cargos = null;
		Object[] parms = new Object[1];
		parms[0] = normalizedId;
		try {
			In1095bNormalizedCollection in1095bNormalizedCollection = new In1095bNormalizedCollection();
			cargos = (In1095bNormalizedCustomCargo[]) in1095bNormalizedCollection.select("findNormalizedCustomCargoByNormalizedId", parms);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for IN_1095B_NORMALIZED", 16355);
		}
		if (cargos == null || cargos.length == 0) {
			cargos = null;
		}
		return cargos;
	}

	public boolean updateIn1095BNormalizedCoId(long coReqSeq, long normalizedId, String updateUserId, Timestamp currentTimestamp) throws CoException {

		try {
			if(updateUserId == null || updateUserId.length() ==0){
				updateUserId = "CON0023DLY";
			}
			openConnection();
			Object[] parms = new Object[4];
			parms[0] = coReqSeq;
			parms[1] = normalizedId;
			parms[2] = updateUserId;
			parms[3] = currentTimestamp;
			In1095bNormalizedCollection in1095bNormalizedCollection = null;
			in1095bNormalizedCollection =  new In1095bNormalizedCollection();
			in1095bNormalizedCollection.select("updateCoId", parms);
			return true;
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("UPDATE failed for IN_1095B_NORMALIZED", 16355);
		} finally {
			closeConnection();
		}

	}
	//ND-34584  added by asputta
	/**
	 * 
	 * @param edgNum
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getprogramStatusBenfitPeriod(long edgTraceId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		edEligibilityCargo.setEdgTraceId(edgTraceId);
		edEligibilityCargo.setRecBeginDt(CoDateFactory.getTimestamp());
		edEligibilityCargo.setRecEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseEdgeTraceId",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);

		}
		return result;
	}

	/**
	 * JIRA-ND-ND-39701 added by asputta
	 * @param officeName
	 * @return
	 * @throws CoException
	 */
	public Object[] getOfficeInfoByNameTransferCase(String officeName) throws CoException {
		Object[] result = null;
		MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
		moOfficesCargo.setOfficeName(officeName);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findByOffNameTransferCase", moOfficesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES", 16358);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_OFFICES", 16064);
		}
		return result;
	}
	public CostandardtextCargo[] getStandardText()
			throws CoException {
		Object[] result = null;
		CostandardtextCargo costandardtextCargo = new CostandardtextCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"Costandardtext", "findGetAllValues",
					costandardtextCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY", 16344);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in ED_ELIGIBILITY", 16344);

		}

		return result== null? null :(CostandardtextCargo[])result;
	}


	/**
	 * API to generate generateNDHCN0053Trigger
	 * @author karraj
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDHCN0053Trigger(long caseNum, long indvId , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCN0053Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isSnapNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for onlpy SNAP notice**/
		if(null!=program && program.contains(CoConstants.SNAP_PROGRAM_CD)){
			isSnapNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0053Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDHCN0053);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && isSnapNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0053Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0053Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0053Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCN0053Trigger(long,long,String)");
	}

	/**
	 * @author karraj
	 * @param program
	 * @return
	 */
	private String checkEmptyString(String program){
		if(null!=program && !CoConstants.EMPTY_STRING.equals(program)){
			return program;
		}else{
			return CoConstants.SNAP_PROGRAM_CD;
		}
	}
	/**
	 * @author karraj
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public boolean checkActiveAutomaticTriggerExist(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNum", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}

	/**
	 * @author karraj
	 * @param coReqSeq
	 * @param dcoId
	 * @return
	 * @throws CoException
	 */
	public CoInterviewScheduledCargo[] getMissedInterviewDynaData(long coReqSeq, String dcoId) throws CoException {
		Object[] result = null;
		CoInterviewScheduledCargo coInterviewScheduledCargo = new CoInterviewScheduledCargo();
		coInterviewScheduledCargo.setCoReqSeq(String.valueOf(coReqSeq));
		coInterviewScheduledCargo.setDocId(dcoId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoInterviewScheduled", "findByDocIdAndSeqNum",
					coInterviewScheduledCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Co_Interview_Scheduled", 16312);
		}
		return result == null ? null : (CoInterviewScheduledCargo[]) result;
	}


	/**
	 * @author dsingh
	 * @param coReqSeq
	 * @param dcoId
	 * @return
	 * @throws CoException
	 */
	public CoInterviewScheduledCargo[] getScheduledInterviewDynaData(long coReqSeq, String dcoId) throws CoException {
		Object[] result = null;
		CoInterviewScheduledCargo coInterviewScheduledCargo = new CoInterviewScheduledCargo();
		coInterviewScheduledCargo.setCoReqSeq(String.valueOf(coReqSeq));
		coInterviewScheduledCargo.setDocId(dcoId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoInterviewScheduled", "findByDocIdAndCoSeqNum",
					coInterviewScheduledCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Co_Interview_Scheduled", 16312);
		}
		return result == null ? null : (CoInterviewScheduledCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public ShAppointmentsCargo[] getMissedInterviewFromShAppointment(String caseNumber) throws  CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		if(null==caseNumber || "".equals(caseNumber)){
			return new ShAppointmentsCargo[0];
		}
		long caseNum = Long.parseLong(caseNumber);
		shAppointmentsCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointments", "findLatestMissedInterviewByCaseNumber",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16313);
		}
		return result == null ? null : (ShAppointmentsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param aptId
	 * @return
	 * @throws CoException
	 */
	public ShApptProgramCargo[] getProgramForInterview(long aptId) throws  CoException {
		Object[] result = null;
		ShApptProgramCargo shApptProgramCargo = new ShApptProgramCargo();
		shApptProgramCargo.setApptId(aptId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShApptProgram", "findByAppointmentID",
					shApptProgramCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16313);
		}
		return result == null ? null : (ShApptProgramCargo[]) result;
	}

	public Object[] getBvClaimIssuanceAmount(
			long caseNum) throws CoException {
		Object[] result = null;
		BvClaimHeaderCargo cargo = new BvClaimHeaderCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BvClaimHeader",
					"findIssuanceAmount", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaim", 16908);
		}
		return result;
	}


	/**
	 * Added by asputta 
	 * ND-41188
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public VCoManualDataValuesCargo[] findBySeqNumCOVPC(long[] coReqSeq) throws CoException {
		Object[] result = null;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoManualDataValues", "findBySeqNumCOVPC", coReqSeq, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Error in getting data V_Co_Manual_Data_Values", 16001);
		}
		return result == null || result.length == 0 ? null
				: (VCoManualDataValuesCargo[]) result;
	}

	public Object[] getDcIndividualList(long[]  individualID) throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndvIdList", individualID, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+individualID+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+individualID, 16319);
		}
		return result;
	}
	// end of ND-41188

	/**
	 * @author karraj
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public ShAppointmentsCargo[] getScheduledReScheduledFromShAppointment(String caseNumber) throws  CoException {
		Object[] result = null;
		ShAppointmentsCargo shAppointmentsCargo = new ShAppointmentsCargo();
		if(null==caseNumber || "".equals(caseNumber)){
			return new ShAppointmentsCargo[0];
		}
		long caseNum = Long.parseLong(caseNumber);
		shAppointmentsCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ShAppointments", "findLatestSchReschInterviewByCaseNumber",
					shAppointmentsCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16313);
		}
		return result == null ? null : (ShAppointmentsCargo[]) result;
	}

	/**
	 * @author dsingh
	 * @param caseNumber
	 * @return
	 * @throws CoException
	 */
	public BvClaimRecoveryCargo[] getBvClaimRecoveryCargoDetails(String claimID) throws  CoException {
		Object[] result = null;
		BvClaimRecoveryCargo bvClaimRecoveryCargo = new BvClaimRecoveryCargo();
		if(null==claimID || "".equals(claimID)){
			return new BvClaimRecoveryCargo[0];
		}


		bvClaimRecoveryCargo.setClaimId(claimID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimRecovery", "findByClaimId",
					bvClaimRecoveryCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimRecoveryCargo", 16313);
		}
		return result == null ? null : (BvClaimRecoveryCargo[]) result;
	}



	/**
	 * @author dsingh
	 * @param claimId
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] getCreateBvClaimCargoDetails(Timestamp date) throws  CoException {
		Object result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		if(null==date){
			return new BvClaimCargo[0];
		}
		bvClaimCargo.setCreateDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findClaimsByCreateDt",
					bvClaimCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvClaimCargo[]) result;
	}


	/**
	 * @author dsingh
	 * @param claimId
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] getUpdateBvClaimCargoDetails(Timestamp date) throws  CoException {
		Object result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		if(null==date){
			return new BvClaimCargo[0];
		}
		bvClaimCargo.setUpdateDt(date);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findClaimsByUpdateDt",
					bvClaimCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvClaimCargo[]) result;
	}
	
	/**
	 * @author karraj
	 * @param claimId
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] getCreateBvClaimCargoDetailsByCaseNum(Timestamp date, long caseNum) throws  CoException {
		Object result = null;
		if(null==date){
			return new BvClaimCargo[0];
		}
		Object [] params= new Object[2];
		params[0] = date;
		params[1] =caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findClaimsByCreateDtCaseNum",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvClaimCargo[]) result;
	}


	/**
	 * @author karraj
	 * @param claimId
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] getUpdateBvClaimCargoDetailsByCaseNum(Timestamp date, long caseNum) throws  CoException {
		Object result = null;
		if(null==date){
			return new BvClaimCargo[0];
		}
		Object [] params= new Object[2];
		params[0] = date;
		params[1] =caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findClaimsByUpdateDtCaseNum",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvClaimCargo[]) result;
	}

	/**
	 * @author dsingh
	 * @param claimId
	 * @return
	 * @throws CoException
	 */
	public BvClaimRecoveryCargo[] getManualUpdateBvClaimCargoDetails(String ClaimID) throws  CoException {
		Object[] result = null;
		BvClaimRecoveryCargo bvClaimRecoveyCargo = new BvClaimRecoveryCargo();
		if(null==ClaimID || "".equals(ClaimID)){
			return new BvClaimRecoveryCargo[0];
		}


		bvClaimRecoveyCargo.setCaseNum(Long.parseLong(ClaimID));
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaim", "findClaimsByClaimID",
					bvClaimRecoveyCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvClaimRecoveryCargo[]) result;
	}

	public BvDiscrepancyCargo[] getBvDiscrepencyDetails(String claimID) throws  CoException {	
		Object[] result = null;
		BvDiscrepancyCargo bvDiscrepancyCargo = new BvDiscrepancyCargo();
		if(null==claimID || "".equals(claimID)){
			return new BvDiscrepancyCargo[0];
		}
		bvDiscrepancyCargo.setClaimId(claimID);


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvDiscrepancy", "findByClaimIdForClaimNotice",
					bvDiscrepancyCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimCargo", 16313);
		}
		return result == null ? null : (BvDiscrepancyCargo[]) result;
	}
	/**
	 * 
	 * @param empId
	 * @return
	 * @throws CoException
	 */
	public VMoEmployeeOfficeCargo[] getEmployeeInformation(long empId) throws  CoException {
		Object[] result = null;
		VMoEmployeeOfficeCargo cargo = new VMoEmployeeOfficeCargo();
		cargo.setEmpId(empId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VMoEmployeeOffice", "findByEmpId",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for SH_APPOINTMENTS", 16313);
		}
		return result == null ? null : (VMoEmployeeOfficeCargo[]) result;
	}

	/**
	 * API to generate generateNDHCN0052Trigger
	 * @author karraj
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDHCN0052Trigger(long caseNum, long indvId , String program, String intvType) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCN0052Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		CoDebugger.debugMessage("intvType:"+intvType);
		long officeNumber = 0;
		long empID = 0;

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0052Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDHCN0052);
		correspondence.setMiscParameters(intvType);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistForMiscParam(correspondence) && this.isEligibleForSNAPorTANForMA(program)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistForMiscParam(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0052Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0052Trigger-->Unable to generate trigger. No SNAP or TANF or MA in trigger request ");
			}

		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0052Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCN0052Trigger(long,long,String)");
	}

	/**
	 * @author karraj
	 * @param program
	 * @return
	 */
	private boolean isEligibleForSNAPorTANForMA(String program){
		if(null==program || CoConstants.EMPTY_STRING.equals(program)){
			return false;
		}

		if(program.contains(CoConstants.PROGRAM_FS)){
			return true;
		}

		if(program.contains(CoConstants.PROGRAM_TF)){
			return true;
		}

		if(program.contains(CoConstants.PROGRAM_MA)){
			return true;
		}
		return false;
	}

	/**
	 * Added by tibiswas 
	 * ND-41188
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public Object[] getAppRecvDtByCaseProgram(long  caseNum, String progCd) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo cargo= new DcCaseProgramCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProgCd(progCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findAppRecvDtByCaseProgram",cargo, null, conn );
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getAppRecvDtByCaseProgram - exception - caseNum "+cargo.getCaseNum()+" program="+ cargo.getProgCd()+ " detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getAppRecvDtByCaseProgram - exception - Select failed for DC_CASE_PROGRAM "+caseNum, 16319);
		}
		return result;
	}

	/**
	 * ND-44102
	 * @author karraj
	 * @param caseAppNumber
	 * @return
	 * @throws CoException
	 */
	public ArApplicationForAidCargo[] getApplicationForAidInfo(String caseAppNumber) throws  CoException {
		Object[] result = null;
		if(null==caseAppNumber || "".equals(caseAppNumber)){
			return new ArApplicationForAidCargo[0];
		}
		ArApplicationForAidCargo cargo = new ArApplicationForAidCargo();
		cargo.setAppNum(caseAppNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArApplicationForAid", "findByAppNum",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ar_Application_For_Aid", 16313);
		}
		return result == null ? null : (ArApplicationForAidCargo[]) result;
	}


	/**
	 * ND-44102
	 * @author karraj
	 * @param caseAppNumber
	 * @return
	 * @throws CoException
	 */
	public ArAppProgramCargo[] getApplicationProgramInfo(String caseAppNumber) throws  CoException {
		Object[] result = null;
		if(null==caseAppNumber || "".equals(caseAppNumber)){
			return new ArAppProgramCargo[0];
		}
		ArAppProgramCargo cargo = new ArAppProgramCargo();
		cargo.setAppNum(caseAppNumber);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"ArAppProgram", "findWithdrawnByClient",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ar_App_Program_Cargo", 16313);
		}
		return result == null ? null : (ArAppProgramCargo[]) result;
	}
	/**
	 * @author akankshagupta
	 * @param  caseNumber,progCode
	 * @return EdEligibilityCargo[]
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getEdEligForCaseProg(long caseNumber,String progCode) throws  CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNumber);
		edEligibilityCargo.setProgramCd(progCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseFSInCO",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->findByCaseFSInCO", 16313);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	/**
	 * @author akankshagupta
	 * @param  caseNumber,progCode
	 * @return EdVerificationChecklistCargo[]
	 * @throws CoException
	 */
	public EdVerificationChecklistCargo[] getEdVerificationForCaseProg(long caseNumber,String progCode) throws  CoException {
		Object[] result = null;
		EdVerificationChecklistCargo edVerificationChecklistCargo = new EdVerificationChecklistCargo();
		edVerificationChecklistCargo.setCaseNum(caseNumber);
		edVerificationChecklistCargo.setProgramCd(progCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseNumPgm",
					edVerificationChecklistCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist--->findByCaseNumPgm", 16313);
		}
		return result == null ? null : (EdVerificationChecklistCargo[]) result;
	}

	/**
	 * @author akankshagupta
	 * @param  caseNumber,progCode
	 * @return EdEligibilityCargo[]
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getEdEligForSNAP(long caseNumber,String progCode) throws  CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNumber);
		edEligibilityCargo.setProgramCd(progCode);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "checkForFS",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->checkForFS", 16313);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	} 
	/**
	 * @author karraj
	 * @param appNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDHCN0102Trigger(String appNum, long indvId , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCN0102Trigger(String,long,String)");
		CoDebugger.debugMessage("App Num:"+appNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		ArApplicationForAidCollection employeesCollection = new ArApplicationForAidCollection();
		Object[] params = { appNum };
		ArApplicationForAidCargo[] employeesCargos = null;
		try {
			employeesCargos = (ArApplicationForAidCargo[]) employeesCollection.select("findByAppNum", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0102Trigger-->Application exception", e);
		}
		if (employeesCargos != null && employeesCargos.length > 0) {
			officeNumber = employeesCargos[0].getOfficeNum();
			empID = employeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.APPLICATION);
		correspondence.setCaseAppNumber(appNum);
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDHCN0102);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistForApplication(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0102Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0102Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCN0102Trigger(String,long,String)");
	}
	/**
	 * @author karraj
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public boolean checkActiveAutomaticTriggerExistForApplication(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setAppNum(aCoObj.getCaseAppNumber());
		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdAppNum", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) {
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}
	//for ND-43546
	public EdEligFsBudgetCargo[] getEdEligFsBudgetdao(long caseNum,String edgTraceId) throws CoException
	{
		EdEligFsBudgetCargo[] result = null;
		EdEligFsBudgetCargo edEligFsBudgetCargo = new EdEligFsBudgetCargo();
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] =edgTraceId;
		try
		{
			result =(EdEligFsBudgetCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligFsBudget", "findByCaseNumberVal", null,params, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed_Elig_Fs_Budget", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Ed_Elig_Fs_Budget", 16063); }
		return result;
	}

	/**
	 * ND-42561 added by asputta
	 * @param caseNum
	 * @param progCd
	 * @return
	 * @throws CoException
	 */
	public Object[] findEdEligibilityForNDMATBN97(long caseNumber, String programCd, Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNumber;
		args[1] = programCd;

		VEdEligibilityIndvCargo cargo=new VEdEligibilityIndvCargo();
		cargo.setBenefitstartDt(asOfDate);
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "VEdEligibilityIndv", 
							"findByConditionForNDMATBN97", cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VEdEligibilityIndv", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in VEdEligibilityIndv", 16752);
		}
		return result;
	}
	//Payment Due Notice Start
	public BvClaimRecoveryCargo[] getBvClaimRecoveryCaseNum(long caseNum) throws CoException
	{
		BvClaimRecoveryCargo[] result = null;
		BvClaimRecoveryCargo bvClaimRecoveryCargo = new BvClaimRecoveryCargo();
		bvClaimRecoveryCargo.setCaseNum(caseNum);
		try
		{
			result =(BvClaimRecoveryCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaimRecovery", "findByCaseNumberVal", bvClaimRecoveryCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim_Recovery", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Bv_Claim_Recovery", 16063); }
		return result;
	}

	public BvClaimCargo[] getBvClaimClaimNumber(String claimId) throws CoException
	{
		BvClaimCargo[] result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		bvClaimCargo.setClaimId(claimId);
		try
		{
			result =(BvClaimCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaim", "findByClaimIdOnly", bvClaimCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim", 16357);
		}
		return result == null || result.length == 0 ? null
				: (BvClaimCargo[]) result;
	}

	public BvClaimRecoveryPlanCargo[] getBvClaimRecoveryPlanClaimNumber(String claimId) throws CoException
	{
		BvClaimRecoveryPlanCargo[] result = null;
		BvClaimRecoveryPlanCargo bvClaimRecoveryPlanCargo = new BvClaimRecoveryPlanCargo();
		bvClaimRecoveryPlanCargo.setClaimId(claimId);
		try
		{
			result =(BvClaimRecoveryPlanCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaimRecoveryPlan", "findByClaimIdOnly", bvClaimRecoveryPlanCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim_Recovery_Plan", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Bv_Claim_Recovery_Plan", 16063); }
		return result;
	}

	public EdEligibilityCargo[] getEdEligibilityCaseNum(long caseNum) throws CoException
	{
		EdEligibilityCargo[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try
		{
			result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumberVal", edEligibilityCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed_Eligibility", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Ed_Eligibility", 16063); }
		return result;
	}
	public Object[] findBenefitStartDate(long caseNo) throws CoException{
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNo);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findBenefitStartDate", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findBenefitStartDate", 16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}


	public Object[] findByPendingCaseForSNAP(long  caseNum, String progCd) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo= new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProgramCd(progCd);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByPendingCaseForSNAP",cargo, null, conn );
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getAppRecvDtByCaseProgram - exception - caseNum "+cargo.getCaseNum()+" program="+ cargo.getProgramCd()+ " detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getAppRecvDtByCaseProgram - exception - Select failed for DC_CASE_PROGRAM "+caseNum, 16319);
		}
		return result;
	}
	public CoManualAdditionalInfoCargo[] getAllCoManualAddInfo(String coReqSeq) throws CoException{
		Object[] result = null;
		CoManualAdditionalInfoCargo cargo = new CoManualAdditionalInfoCargo();
		cargo.setCoReqSeq(coReqSeq);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoManualAdditionalInfo",
					"findByIndvId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllCoManualAddInfo", 16908);
		}
		return result == null || result.length == 0 ? null
				: (CoManualAdditionalInfoCargo[]) result;
	}

	public Object[] getOfficeAddrFromDcCaseAddresses(long caseNum)
			throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "getOfficeAddrFromDcCaseAddresses",
					dcCaseAddressesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for DC_CASE_ADDRESSES getOfficeAddrFromDcCaseAddresses",
					16357);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data in DC_CASE_ADDRESSES getOfficeAddrFromDcCaseAddresses ",
					16063);
		}
		return result;
	}

	/**
	 * @author akankshagupta
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcIndvCargo[] getDcIndvByIndvID(long indvId) throws CoException
	{
		DcIndvCargo[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		dcIndvCargo.setIndvId(indvId);
		try
		{
			result =(DcIndvCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndv", "findByIndividualId", dcIndvCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Indv>>>findByIndividualId", 16357);
		}
		if (result == null || result.length == 0) { result= null; }
		return result;
	}

	/**
	 * //Medical social review due
	 * @param caseNumber
	 * @param 
	 * @return
	 * @throws CoException
	 */
	public DcCaseIndividualCargo[] findDCDisabilityINdvForNDTFMRN77(long caseNumber,
			String programCd) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNumber;
		args[1] = programCd;

		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByConditionForNDTFMRN77", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DCDisability", 16751);
		}

		return result == null ? null : (DcCaseIndividualCargo[]) result;
	}
	//ND-78544
	/**
	 * //Medical social review due
	 * @param asOfDate
	 * @param 
	 * @return
	 * @throws CoException
	 */
	public DcCaseIndividualCargo[] findDCDisabilityINdvForNDTFMRN77AsOfDate(String asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		
		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		try {

		    java.util.Date parsedDate = new SimpleDateFormat("MM/dd/yyyy").parse(asOfDate);
		    Timestamp asOfDateTimestamp = new java.sql.Timestamp(parsedDate.getTime());
		    args[0] = asOfDateTimestamp;
		    
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByConditionForNDTFMRN77", cargo,
					args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DCDisability", 16751);
		}

		return result == null ? null : (DcCaseIndividualCargo[]) result;
	}
	/**
	 * Method to get data from DC_INDIVIDUAL based on Case_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public DcIndvCargo[] getDCIndividualAndProgramByCase(long caseAppNo,Timestamp asOfDateT) throws CoException {

		Object[] result = null;
		Object [] params= new Object[2];

		params[0] = caseAppNo;
		params[1]=asOfDateT;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndividualAndProgramByCase", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+caseAppNo+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+caseAppNo, 16319);
		}
		return result == null ? null : (DcIndvCargo[]) result;
	}
	
	public DcIndvCargo[] getDCIndividualAndProgramByCaseDate(long caseAppNo,Timestamp asOfDateT) throws CoException {

		Object[] result = null;
		Object [] params= new Object[2];

		params[0] = caseAppNo;
		params[1]=asOfDateT;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndividualAndProgramByCaseDate", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+caseAppNo+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+caseAppNo, 16319);
		}
		return result == null ? null : (DcIndvCargo[]) result;
	}
	/**
	 * Method to get data from REVIEW_DATE from DC_DISABILIy based on CASE_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	//medical Review Due
	public DcDisabilityCargo[] findEdRecertReviewDateByCaseNum(int maxRows, long caseNo,Timestamp asOfDateT) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];

		params[0] = caseNo;
		params[1] = asOfDateT;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisability", "findRecertReviewDueDtByCaseNum", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - findEdRecertReviewDateByCaseNum - exception - individualID "+caseNo+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - findEdRecertReviewDateByCaseNum - exception - Select failed for REVIEW_DT for indv ID "+caseNo, 16319);
		}
		return result == null ? null : (DcDisabilityCargo[]) result;
	}
	
	public DcDisabilityCargo[] findEdRecertReviewDateByCaseNumDate(int maxRows, long caseNo,Timestamp asOfDateT) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];

		params[0] = caseNo;
		params[1] = asOfDateT;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisability", "findEdRecertReviewDateByCaseNumDate", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - findEdRecertReviewDateByCaseNum - exception - individualID "+caseNo+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - findEdRecertReviewDateByCaseNum - exception - Select failed for REVIEW_DT for indv ID "+caseNo, 16319);
		}
		return result == null ? null : (DcDisabilityCargo[]) result;
	}
	


	/**Review Form queries - ND-45038*/
	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdCaseRecertDatesCargo[] getReviewDueForNextMonth(long lCaseNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findRecertReviewNextMonth",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
		}
		return result == null ? null : (EdCaseRecertDatesCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdCaseRecertDatesCargo[] getTANFMonthlyReviewDueForNextMonth(long lCaseNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findTANFMonthlyReviewNextMonth",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
		}
		return result == null ? null : (EdCaseRecertDatesCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getTANFMonthlyReviewNextMonth(long lCaseNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findTANFReviewReviewNextMonth",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param edgNums
	 * @param caseNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public VEdEligibilityIndvCargo[] getAllIndividualsDueForReview(String edgNums, long caseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = edgNums;
		params[1] = caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findIndividualsByEdgNumAndCaseNum",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
		}
		return result == null ? null : (VEdEligibilityIndvCargo[]) result;
	}

	/**
	 * Method to get data from DC_EDUCATION based on INDV_ID.
	 * @author karraj
	 * @param individualID long
	 * @return DcEducationCargo[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public DcEducationCargo[] getDcEducationInformation(long[] individualID,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = individualID;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcEducation", "findByIndividualsInCaseForNotice", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_EDUCATION", 16316);
		}
		return result == null ? null : (DcEducationCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param individualID
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public DcTaxinformationCargo[] getTaxInformatinForIndividuals(long individualID,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = individualID;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcTaxinformation", "findByIndividualsInCaseForNotice", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Taxinformation", 16316);
		}
		return result == null ? null : (DcTaxinformationCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcLiquidResourcesCargo[] getDcLiquidResource(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcLiquidResources",
					"findByIndvIdforLiqRes", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for dc_liquid_resources", 16312);
		}
		return result == null ? null : (DcLiquidResourcesCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcVehiclesCargo[] getDcVehicles(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcVehicles", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_VEHICLES", 16312);
		}
		return result == null ? null : (DcVehiclesCargo[]) result;
	}
	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcJointOwnershipCargo[] getDcJointOwnershipCargo(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcJointOwnership", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_JOINT_OWNERSHIP", 16312);
		}
		return result == null ? null : (DcJointOwnershipCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcResMaintAllowanceCargo[] getDcResMaintAllowance(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcResMaintAllowance",
					"findByIndvIDForNotice", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for dc_res_maint_allowance", 16312);
		}
		return result == null ? null : (DcResMaintAllowanceCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcTransferedResourcesCargo[] getTransferedResources(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcTransferedResources",
					"findByIndvIDForNotice", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcTransferedResourcesCargo", 16312);
		}
		return result == null ? null : (DcTransferedResourcesCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcUnusualPropertyValueCargo[] getDcUnusualPropertyValue(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcUnusualPropertyValue",
					"findByIndvIdforUnusualProp", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for dc_unusual_property_value", 16312);
		}
		return result == null ? null : (DcUnusualPropertyValueCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param sqeNum
	 * @return
	 * @throws CoException
	 */
	public DcEmploymentBudgetCargo[] getDcEmploymentBudgetCargo(long indvId,long sqeNum) throws CoException {
		Object[] result = null;
		DcEmploymentBudgetCargo cargo = new DcEmploymentBudgetCargo();
		cargo.setIndvId(indvId);
		cargo.setEmpSeqNum(sqeNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcEmploymentBudget",
					"findByBudgetAmtList", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcEmploymentBudgetCargo", 16312);
		}
		return result == null ? null : (DcEmploymentBudgetCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcSelfEmpIncomeCargo[] getSelfEmpIncomeCargo(long indvId) throws CoException {
		Object[] result = null;
		Object [] params= new Object[3];
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		params[0] = today;
		params[1] = today;
		params[2] = String.valueOf(indvId);
		try{
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcSelfEmpIncome",
					"findByAllCaseIndv", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcSelfEmpIncome", 16312);
		}
		return result == null ? null : (DcSelfEmpIncomeCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcUnearnedIncomeCargo[] getUnearnedIncomeCargo(long indvId) throws CoException {
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		DcUnearnedIncomeCargo cargo = new DcUnearnedIncomeCargo();
		cargo.setIndvId(indvId);
		cargo.setEffBeginDt(today);
		cargo.setEffEndDt(today);
		try{
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcUnearnedIncome",
					"findByIndvIdCurRow", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcUnearnedIncome", 16312);
		}
		return result == null ? null : (DcUnearnedIncomeCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param caseNum
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public VDcAbsentParentCargo[] getAbsentParentForChild(long caseNum, long indvId) throws CoException {
		Object[] result = null;
		VDcAbsentParentCargo cargo = new VDcAbsentParentCargo();		
		try{
			cargo.setCaseNum(caseNum);
			cargo.setT4ChildIndvId(indvId);
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VDcAbsentParent",
					"findByCaseNumandChildIndvId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VDcAbsentParent", 16312);
		}
		return result == null ? null : (VDcAbsentParentCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public TcClockDetailsCargo[] getTcClockDetails(long indvId) throws CoException {
		Object[] result = null;
		TcClockDetailsCargo cargo = new TcClockDetailsCargo();		
		try{
			cargo.setIndvId(indvId);
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "TcClockDetails",
					"findByPersonId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for TcClockDetails", 16312);
		}
		return result == null ? null : (TcClockDetailsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcShelterDeductionsCargo[] getShelterExpensesForIndv(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcShelterDeductions", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Shelter_Deductions", 16312);
		}
		return result == null ? null : (DcShelterDeductionsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcUtilityDeductionsCargo[] getUtilityExpensesForIndv(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcUtilityDeductions", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Utility_Deductions", 16312);
		}
		return result == null ? null : (DcUtilityDeductionsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcSupportDeductionsCargo[] getCourtOrderedExpensesForIndv(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcSupportDeductions", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Support_Deductions", 16312);
		}
		return result == null ? null : (DcSupportDeductionsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcDependCareDeductionsCargo[] getChildCareExpensesForIndv(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcDependCareDeductions", 
					"findByIncurredIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Depend_Care_Deductions", 16312);
		}
		return result == null ? null : (DcDependCareDeductionsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcMedicalDeductionsCargo[] getMedicalExpensesForIndv(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcMedicalDeductions", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Medical_Deductions", 16312);
		}
		return result == null ? null : (DcMedicalDeductionsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcActivityScheduleCargo[] getAllowableActivitiesForCaretaker(long indvId,String refDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = indvId;
		params[1] = refDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcActivitySchedule", 
					"findByIndvIDForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Activity_Schedule", 16312);
		}
		return result == null ? null : (DcActivityScheduleCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public VDcChildNonCoopSummaryCargo[] getAbsentParentInfoByCase(long caseNum) throws CoException {
		Object[] result = null;
		VDcChildNonCoopSummaryCargo cargo = new VDcChildNonCoopSummaryCargo();		
		try{
			cargo.setCaseNum(caseNum);
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VDcChildNonCoopSummary",
					"findByCaseNum", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VDcChildNonCoopSummary", 16312);
		}
		return result == null ? null : (VDcChildNonCoopSummaryCargo[]) result;
	}
	
	/**
	 * @author karraj
	 * @param childIndvId
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getProviderChildAssocsByChildAndCase(long childIndvId,long caseNum)throws CoException {
		Object[] result = null;
		PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
		cargo.setChildIndvId(childIndvId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findRecordExist",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return result == null ? null : (PmProviderChildAssocCargo[]) result;
	}

	public DcCaseIndividualCargo[] getAllIndvDetails(long caseNum) throws CoException{
		Object[] result = null;
		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCaseIndividual",
					"findIndvDetailsProgCd", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllIndvDetails", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcCaseIndividualCargo[]) result;
	}

	public DcCaseIndividualCargo[] getAllIndvDetails() throws CoException{
		Object[] result = null;
		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCaseIndividual",
					"findIndvDetailsProg", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllIndvDetails", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcCaseIndividualCargo[]) result;
	}

	public DcEducationCargo[] getAllIndvEducation(long indvId) throws CoException{
		Object[] result = null;
		DcEducationCargo cargo = new DcEducationCargo();
		cargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcEducation",
					"findByIndvIdEnrollStatus", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllIndvEducation", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcEducationCargo[]) result;
	}
	public EdEligibilityCargo[] getEdEligibilityCaseNumAll(long caseNum) throws CoException
	{
		EdEligibilityCargo[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try
		{
			result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumAll", edEligibilityCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in EdEligibility", 16063); }
		return result;
	}
	public Object[] findBenefitStartDateRepayment(long caseNo) throws CoException{
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNo);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findBenefitStartDateRepayment", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findBenefitStartDate", 16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	public BvClaimCargo[] getBvClaimClaimNumberIn(String claimId) throws CoException
	{
		BvClaimCargo[] result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		bvClaimCargo.setClaimId(claimId);
		try
		{
			result =(BvClaimCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaim", "findByClaimIdOnlyIn", bvClaimCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Bv_Claim", 16063); }
		return result;
	}
	public Object[] getCountyCdFromOfficeNum(long aOfficeNum) throws CoException {
		Object[] result = null;
		java.sql.Timestamp today = CoDateFactory.getTimestamp();
		MoOfficeCountiesCargo moOfficeCountiesCargo = new MoOfficeCountiesCargo();
		moOfficeCountiesCargo.setOfficeNum(aOfficeNum);
		/*moOfficeCountiesCargo.setEffBeginDt(today);
		moOfficeCountiesCargo.setEffEndDt(today);*/
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeCounties", "findByOfficeNumber", moOfficeCountiesCargo, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getOfficeInfo - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getOfficeInfo - exception - Select failed for MO_OFFICES", 16358);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("CoDAOServices - getOfficeInfo - exception - No data in MO_OFFICES", 16064);
		}
		return result;
	}
	/**
	 * API to generate generateNDTFMNN76Trigger
	 * @author rarout
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDTFMNN76Trigger(long caseNum, long indvId , String miscParms, String program, String requestUserId,java.sql.Timestamp generateDate) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDTFMNN76Trigger(long,long,String,String,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		CoDebugger.debugMessage("Mis_params:"+miscParms);
		// ND-61720 : requestUserId is needed for insertion in co_request_history
		CoDebugger.debugMessage("Request User Id:"+requestUserId);
		//CoDebugger.debugMessage("GenerateDate:"+generateDate);
		long officeNumber = 0;
		long empID = 0;

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.TANF_PROGRAM_CD_SN);

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDTFMNN76Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setMiscParameters(miscParms);
		 correspondence.setGenerateDate(generateDate);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDTFMNN76);
		correspondence.setRequestUserId(requestUserId);

		/*java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));*/

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDTFMNN76Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDTFMNN76Trigger-->Unable to generate trigger. No trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDTFMNN76Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDTFMNN76Trigger(long,long,String,String,Date)");
	}
	/**
	 * @author karraj
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public boolean checkIfTextUsedForCommunication(long caseNum) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = caseNum;
		boolean textUsedForCommunication = false;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcPhnDetails", 
					"findByCaseNumAndPhnNotifSw",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Phn_Details", 16312);
		}
		if(null!=result && result.length>0){
			textUsedForCommunication = true;
		}
		return textUsedForCommunication;
	}

	/**
	 * @author karraj
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public boolean checkIfEmailUsedForCommunication(long caseNum) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = caseNum;
		boolean emailUsedForCommunication = false;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcEmailDetails", 
					"findByCaseNumAndEmailNotifSw",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Email_Details", 16312);
		}
		if(null!=result && result.length>0){
			emailUsedForCommunication = true;
		}
		return emailUsedForCommunication;
	}
	
	/**
	 * @author karraj
	 * @param caseNum
	 * @return
	 * @throws CoException
	 * @throws ApplicationException 
	 * @throws FrameworkException 
	 */
	public boolean checkIfEmailUsedForCommunicationAuthRep(long caseNum) throws CoException, FrameworkException, ApplicationException {
		
		DcAuthRepCargo[] authRepsCargos = getAuthorizedRepDetails(caseNum);
		boolean emailUsedForCommunication = false;
		if (authRepsCargos != null && authRepsCargos.length > 0) {
			long[] authReps = new long[authRepsCargos.length];
			for (int i = 0; i < authRepsCargos.length; i++) {
				
				authReps[i] = authRepsCargos[i].getAuthrepSeqNum();
			}
			Object[] params = new Object[1];
			params[0] = authReps;
			Object[] result = null;
	
			
		try {
		
			DcEmailDetailsCollection addrCol = new DcEmailDetailsCollection(conn);
			result=(DcEmailDetailsCargo[]) addrCol.select("findByCaseNumAndEmailNotifSwAuthRep",params);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Email_Details", 16312);
		}
		if(null!=result && result.length>0){
			emailUsedForCommunication = true;
		}
		}else{
			emailUsedForCommunication=false;
		}
		return emailUsedForCommunication;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param sequenceNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public DcShelterExpenseCalcCargo[] getShelterExpenseAmount(long indvId, long sequenceNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[3];
		params[0] = indvId;
		params[1] = sequenceNum;
		params[2] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcShelterExpenseCalc", "findByIndvIDSequenceNumAndMonthNotice",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Shelter_Expense_Calc", 16312);
		}
		return result == null ? null : (DcShelterExpenseCalcCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param sequenceNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public DcDependCareExpCalcCargo[] getDependCareExpenseAmount(long indvId, long sequenceNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[3];
		params[0] = indvId;
		params[1] = sequenceNum;
		params[2] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDependCareExpCalc", "findByIndvIDSequenceNumAndMonthNotice",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Depend_Care_Exp_Calc", 16312);
		}
		return result == null ? null : (DcDependCareExpCalcCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param sequenceNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public DcSupportExpCalcCargo[] getSupportExpenseAmount(long indvId, long sequenceNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[3];
		params[0] = indvId;
		params[1] = sequenceNum;
		params[2] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSupportExpCalc", "findByIndvIDSequenceNumAndMonthNotice",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Support_Exp_Calc", 16312);
		}
		return result == null ? null : (DcSupportExpCalcCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param sequenceNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public DcMedicalExpCalcCargo[] getMedicalExpenseAmount(long indvId, long sequenceNum, Timestamp date) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[3];
		params[0] = indvId;
		params[1] = sequenceNum;
		params[2] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcMedicalExpCalc", "findByIndvIDSequenceNumAndMonthNotice",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Medical_Exp_Calc", 16312);
		}
		return result == null ? null : (DcMedicalExpCalcCargo[]) result;
	}


	public Object[] getBiFsDetails(long caseNum){
		Object[] result = null;
		BiFsDetailCargo cargo = new BiFsDetailCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BiFsDetail",
					"findByCaseNumProgFs", cargo, null, conn);
		} catch (Exception e) {
			log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiFsDetails", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				log(ILog.DEBUG, "Exception: " + e1.getMessage(), e1);
				CoDebugger.debugException("CoDAOServices - getBiFsDetails  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}

	public Object[] getBiFsDetailsProgFS(long caseNum){
		Object[] result = null;
		BiFsDetailCargo cargo = new BiFsDetailCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BiFsDetail",
					"findByCaseNumProgFs", cargo, null, conn);
		} catch (Exception e) {
			log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiFsDetailsProgFS", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				log(ILog.DEBUG, "Exception: " + e1.getMessage(), e1);
				CoDebugger.debugException("CoDAOServices - getBiFsDetailsProgFS  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}

	/**
	 * Method to get data from DC_INDIVIDUAL based on Case_NUM
	 * 
	 * @param caseAppNo
	 *            long
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public CoJobsGoodCauseCargo[] getNonComplaintIndvs(long coreqseqnum) throws CoException {

		Object[] result = null;
		Object [] params= new Object[1];

		params[0] = coreqseqnum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoJobsGoodCause", "findNonComplaintIndvsByCase", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+coreqseqnum+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+coreqseqnum, 16319);
		}
		return result == null ? null : (CoJobsGoodCauseCargo[]) result;
	}

	/**
	 * 
	 * @author akankshagupta
	 * @param caseNum
	 *            long	
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDcCaseProgByCaseNum(long caseNum)
			throws CoException {
		Object[] result = null;	
		//Object[] params=new Object[1];
		//params[0]= caseNum;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgram", "findByCaseNumberOnly",caseNum, null,
					conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseProgram---->findByCaseNumberOnly", 16765);
		}

		return result;
	}

	public Object[] getDcCasesCargoFromAudit(long caseNum) throws CoException {
		Object[] result = null;
		DcCasesCargo dcCasesCargo = new DcCasesCargo();

		dcCasesCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcCases",
					"findByInvestigationArchivalData", dcCasesCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASES", 16313);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DC_CASES", 16038);
		}
		return result;
	}

	public Object[] getMoEmployeeForPrevWorkerDetails(long caseAppNo)
			throws CoException {
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoEmployeeCases", "findPrevWorkerDetailForCase",
					caseAppNo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_EMPLOYEE_CASES", 16353);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in MO_EMPLOYEE_CASES",
					16059);
		}
		return result;
	}
	/**
	 * Added by asputta for NOE notice
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public EdCaseRecertDatesCargo[] getRecertDate(long caseNum,long edgNum) throws CoException{
		Object[] result = null;
		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		CoDebugger.debugInformation("NOE codaoser getRecertDt------------>");

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdCaseRecertDates",
					"findByCaseandEdgNum", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getRecertDate", 16908);
		}
		CoDebugger.debugInformation("NOE codaoser getRecertDt------------>"+result);
		return result == null || result.length == 0 ? null
				: (EdCaseRecertDatesCargo[]) result;
	}
	public EdEligibilityCargo[] getCopayIndv(String IndvIds, String edgTraceId) throws CoException{
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();

		Object [] params= new Object[3];
		params[0] = IndvIds;
		params[1] = edgTraceId;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findCoPayIndvs", null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getRecertDate", 16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	public DcIndvCargo[] getCopayChildren(long[]  individualID) throws CoException{
		Object[] result = null;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByIndvIdHealthySteps", individualID,null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getRecertDate", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcIndvCargo[]) result;
	}

	public DcDisabilityCargo[] getDisabilityIndv(String  individualIds) throws CoException{
		Object[] result = null;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcDisability",
					"findDisabilityIndv", individualIds,null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getDisabilityIndv", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcDisabilityCargo[]) result;
	}

	public DcCaseProgramIndvCargo[] getDcCaseProgramIndvMSP(long caseNum,String indvs)
			throws CoException {
		Object[] result = null;
		Object [] params=new Object[2];
		params[0]=caseNum;
		params[1]=indvs;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseProgramIndv",
					"findByCaseNumProgamCdFormCd",null,
					params,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM_INDV",
					16645);
		}
		return result == null || result.length == 0 ? null
				: (DcCaseProgramIndvCargo[]) result;
	}

	public CoHealthInsuranceCargo[] getAllCoHealthInsuranceDecision(String coReqSeq) throws CoException{
		Object[] result = null;
		CoHealthInsuranceCargo cargo = new CoHealthInsuranceCargo();
		cargo.setCoReqSeq(coReqSeq);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "CoHealthInsurance",
					"findByIndvId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllCoHealthInsuranceDecision", 16908);
		}
		return result == null || result.length == 0 ? null: (CoHealthInsuranceCargo[]) result;
	}
	//Added for Good Cause Recieved notice
	public Object[] findAbsentParentsBySeqNum(int maxrows, long seqNum) throws CoException {
		Object[] result = null;

		DcAbsentParentsCargo cargo = new DcAbsentParentsCargo();
		cargo.setAbsentParentSeqNum(seqNum);

		Object[] args = new Object[1];
		args[0] = 0;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcAbsentParents", "findBySeqNumber", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcAbsentParents", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcAbsentParents", 16752);
		}
		return result;
	}

	/**
	 * ND-50981
	 * @author shreyasingh
	 * @param recpNo
	 * @return
	 * @throws CoException
	 */
	public CoRequestRecipientsCargo[] getAllCoRequestRecipients(long recpNo) throws CoException{
		Object[] result = null;
		CoRequestRecipientsCargo cargo = new CoRequestRecipientsCargo();
		cargo.setCoRptSeq(recpNo);

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestRecipients","findRecipientSeqNo", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllCoRequestRecipients", 16908);
		}
		return result == null || result.length == 0 ? null: (CoRequestRecipientsCargo[]) result;
	}

	/**
	 * ND-50981
	 * @author shreyasingh
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcIndvCargo[] getAllDCIndv(long caseNum) throws CoException{
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = caseNum;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndv","findByIndvIdByCaseName", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllDcIndv", 16908);
		}
		return result == null || result.length == 0 ? null: (DcIndvCargo[]) result;
	}

	/**
	 * ND-50981
	 * @author shreyasingh
	 * @param caseNum
	 * @param authrepSeqNum
	 * @return
	 * @throws CoException
	 */
	public DcAuthRepCargo[] getAllDcAuthRep(long caseNum, long authrepSeqNum) throws CoException{
		Object[] result = null;
		DcAuthRepCargo cargo = new DcAuthRepCargo();
		cargo.setCaseNum(caseNum);
		cargo.setAuthrepSeqNum(authrepSeqNum);

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcAuthRep","findByCaseNumAuthRepSeqNum", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllCoRequestRecipients", 16908);
		}
		return result == null || result.length == 0 ? null: (DcAuthRepCargo[]) result;
	}



	public void generateNDHCCSN03Trigger(long caseNum, long indvId , String program, String verificationReason) 
	{
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCCSN03Trigger(long,long,String,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isTanfNotice = false;
		boolean isMedicaidNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		//ND-53973-Verifications_Proof_Required-BEGIN
		if(null!=verificationReason){
			CoDebugger.debugMessage("Verification Reason :"+verificationReason);
			correspondence.setMiscParameters(verificationReason);
		}
		//ND-53973-Verifications_Proof_Required-END

		/**Logic to check for program**/
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_TANF)){
			isTanfNotice = true;
		}
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_MEDICAID)){
			isMedicaidNotice = true;
		}

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCCSN03Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.NDHCCSN03);

		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && (isTanfNotice || isMedicaidNotice)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0053Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0053Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0053Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCN0053Trigger(long,long,String,String)");
	}

	public EdMaClientShareCargo[] getClientShare(Long indvId) throws CoException{
		Object[] result = null;
		EdMaClientShareCargo cargo = new EdMaClientShareCargo();
		cargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdMaClientShare",
					"findClientShare", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getClientShare---NDMAELN13Assembler", 16908);
		}
		return result == null || result.length == 0 ? null: (EdMaClientShareCargo[]) result;
	}



	/**
	 * 
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByCaseNumAndProgramCdForNDHCGNF15(long caseNum) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumAndProgramCdForNDHCGNF15", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_ELIGIBILITY");
		}
		return result;
	}

	public Object[] findChildSuppNonCoopParentsByCase(long lCaseNum) throws CoException {//findByCaseIndvAbsentParent
		Object[] result = null;
		DcChildSuppNonCoopCargo cargo = new DcChildSuppNonCoopCargo();
		cargo.setCaseNumber(lCaseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildSuppNonCoop", "findByCaseAbsentAndCustodialParent", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcChildSuppNonCoop", 16752);
		}
		return result;
	}

	public Object[] findIndvIDForAbsentParentGoodCauseNDHCCSN01(String asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = asOfDate;
		DcChildSuppNonCoopCargo dcChildSuppNonCoopCargo = new DcChildSuppNonCoopCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildSuppNonCoop", "findByAsOfDateAbsentParentIndvID", dcChildSuppNonCoopCargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
		}
		return result;
	}

	public Object[] findByCustodialIndvIdExistsInCase(List<Long> custodialParentIndvIdList) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = custodialParentIndvIdList;
		DcCaseIndividualCargo caseIndividualCargo=new DcCaseIndividualCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"DcCaseIndividual", "findByIndvExistsInCase", caseIndividualCargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseIndividual", 16751);
		}
		return result;
	}

	public boolean isCaseMATF(Long caseNumber,String currentAsOfDateString) throws CoException {
		Object[] result = null;
		Object [] params=new Object[2];
		params[0]=caseNumber;
		params[1]=currentAsOfDateString;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","EdEligibility",
					"findIsMATFEligibility",null,params,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->isCaseMATF:",16645);
		}
		if (result == null || result.length == 0) {
			return false;
		}
		return true;
	}

	public Object[] findMATFcases(Long caseNumber,String currentAsOfDateString) throws CoException {
		Object[] result = null;
		Object [] params=new Object[2];
		params[0]=caseNumber;
		params[1]=currentAsOfDateString;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","EdEligibility",
					"findIsMATFEligibility",null,params,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->isCaseMATF:",16645);
		}
		return result;
	}

	/**
	 * Added by asputta
	 * @param caseNum
	 * @param programCd
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getAuthorizedSnap(long caseNum,String programCd)
			throws CoException {
		Object[] result = null;
		Object [] params=new Object[1];
		params[0]=caseNum;
		params[1]=programCd;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility",
					"getSnapAuthorised",null,
					params,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM_INDV",
					16645);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	/**
	 * added by asputta
	 * @param indvIds
	 * @return
	 * @throws CoException
	 */
	public DcIndvLivingArngmntsCargo[] getLivingArrgtIMDAI(String  indvIds) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = indvIds;
		DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
		try {

			java.sql.Timestamp date = CoDateFactory.getTimestamp();
			dcIndvLivingArngmntsCargo.setEffBeginDt(date);
			dcIndvLivingArngmntsCargo.setEffEndDt(date);
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvLivingArngmnts", "findIndividualsforIMDAI",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
					16745);
		}
		return result == null ? null : (DcIndvLivingArngmntsCargo[]) result;

	}
	/**
	 * added by asputta
	 * @param caseNum
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public Object[] findClousreDateOfBenft(String[] progCd,long caseNum, String indvIds,String edgNum)
			throws CoException {
		Object[] result = null;
		Object [] params= new Object[4];
		params[0] = progCd;
		params[1] = indvIds;
		params[2] = edgNum;
		params[3]=caseNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CvEdMciEdgIndividual", "findClousreDateByIndvIdEdgNum",
					null, params,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCaseNumMedicaidCreditableCoverage");
		}
		return result;
	}	

	/* 
	 * @author akankshagupta
	 * @param caseNum
	 *            long	
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCoMassMailEligible(String date,String prog)
			throws CoException {
		Object[] result = null;	
		Object[] args = new Object[2];
		args[0] = date;
		args[1] = prog;
		VEdEligibilityIndvCargo cargo=new VEdEligibilityIndvCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "getCoMassMilingEligibleRecords",cargo,args,conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getCoMassMailEligible---->getCoMassMilingEligibleRecords", 16765);
		}

		return result;
	}


	/**
	 * 
	 * @author akankshagupta
	 * @param date String
	 * @param prog String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public VDcCaseIndvDetailsCargo[] getDcIndvsForMassMail(String date,String prog)
			throws CoException {
		VDcCaseIndvDetailsCargo[] result = null;				
		Object[] args = new Object[2];
		args[0] = date;
		args[1] = prog;
		VEdEligibilityIndvCargo cargo=new VEdEligibilityIndvCargo();
		try {
			result = (VDcCaseIndvDetailsCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VDcCaseIndvDetails", "findCoByExistingIndv",cargo,args,conn);		


		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getElderlyForMassMailing---->findCoByExistingIndv", 16765);
		}

		return result;
	}



	/**
	 * 
	 * @author akankshagupta
	 * @param date String
	 * @param ltc String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public DcCaseIndividualCargo[] getDcLivingArrMassMailing(String date,String ltc)
			throws CoException {
		DcCaseIndividualCargo[] result = null;				
		Object[] args = new Object[2];
		args[0] = date;
		args[1] = ltc;
		DcCaseIndividualCargo cargo=new DcCaseIndividualCargo();
		try {
			result = (DcCaseIndividualCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findbyLivingArrLTCInCO",cargo,args,conn);		


		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getDcLivingArrMassMailing---->findbyLivingArrLTCInCO", 16765);
		}

		return result;
	}



	/**
	 * 
	 * @author akankshagupta
	 * @param date String		
	 * @return DcCaseAddressesCargo[] Resultset from the DAO
	 * @throws CoException
	 */
	public DcCaseAddressesCargo[] getDcAddressMassMailing(String date,String counties)
			throws CoException {
		DcCaseAddressesCargo[] result = null;				
		Object[] args = new Object[2];
		args[0] = date;		
		args[1]= counties;
		DcCaseAddressesCargo cargo=new DcCaseAddressesCargo();
		try {
			result = (DcCaseAddressesCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "getDcCountyForMassMailCO",cargo,args,conn);		


		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getDcAddressMassMailing---->getDcCountyForMassMailCO", 16765);
		}

		return result;
	}

	/**
	 * 
	 * @author akankshagupta
	 * @param date String		
	 * @return DcCaseAddressesCargo[] Resultset from the DAO
	 * @throws CoException
	 */
	public DcLiheapCargo[] getDcLIForMassMailing(String date)
			throws CoException {
		DcLiheapCargo[] result = null;				
		Object[] args = new Object[1];
		args[0] = date;		
		DcLiheapCargo cargo=new DcLiheapCargo();
		try {
			result = (DcLiheapCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiheap", "findLIForCoMassMail",cargo,args,conn);		


		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getDcLIForMassMailing---->findForCoMassMail", 16765);
		}

		return result;
	}
	//ND-85903 
	public BvClaimRecoveryCargo[] getBvClaimRecoverCaseNumFS(String claimId) throws CoException
	{
		BvClaimRecoveryCargo[] result = null;
		BvClaimRecoveryCargo bvClaimRecoveryCargo = new BvClaimRecoveryCargo();
		bvClaimRecoveryCargo.setClaimId(claimId);
		try
		{
			result =(BvClaimRecoveryCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaimRecovery", 
					"findByClaimId", bvClaimRecoveryCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim_Recovery", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in Bv_Claim_Recovery", 16063); }
		return result;
	}

	/**
	 * findCaseIndvMaTf
	 * @param caseNumber
	 * @param indvID
	 * @return
	 * @throws CoException
	 */
	public Object[] findCaseIndvMaTf(long caseNumber,long indvID) throws CoException {
		Object[] result = null;
		DcCaseProgramIndvCargo caseProgramIndvCargo =  new DcCaseProgramIndvCargo();
		caseProgramIndvCargo.setCaseNum(caseNumber);
		caseProgramIndvCargo.setIndvId(indvID);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","DcCaseProgramIndv",
					"findByCaseIndvCurrRec",caseProgramIndvCargo,null,conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseProgramIndv--->findByCaseIndvCurrRec:",16645);
		}
		return result;
	}



	/**
	 * Added by asputta
	 * @param caseNum
	 * @param traceId
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdIndvEligibilityByEdgNumCaseNum(long caseNum,String edgTraceIds)
			throws CoException {
		Object[] args = new Object[2];
		Object[] result = null;
		args[0]=edgTraceIds;
		args[1] = caseNum;	
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCaseNumberEdgTraceIdforNCH001",
					null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdIndvEligibilityByEdgNumCaseNum - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdIndvEligibilityByEdgNumCaseNum - exception - Select failed for ED_INDV_ELIGIBILITY",
					16342);
		}
		return result;
	}
	/**
	 * added b y asputta 
	 * @param caseNum
	 * @param indvId
	 * @param edgNum
	 * @return
	 * @throws CoException
	 */
	public EdVerificationChecklistCargo[] getEdVerificationForNCH001(String caseNum, String indvId,String edgNum) throws  CoException {
		Object[] result = null;
		Object [] params= new Object[3];
		params[0] = caseNum;
		params[1] = indvId;
		params[2] = edgNum;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();
		//need to change method

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCasePersonEdgLtDummy",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist--->findByCaseNumPgm", 16313);
		}
		return result == null ? null : (EdVerificationChecklistCargo[]) result;
	}

	public EdVerificationChecklistCargo[] getEdVerificationForSNAPNCH001(long caseNum,long edgNum,String programCd) throws  CoException {
		Object[] result = null;
		Object[] params= new Object[3];
		params[0] = caseNum;
		params[1] = edgNum;
		params[2] = programCd;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseEdgNumFS",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist--->findByCaseNumPgm", 16313);
		}
		return result == null ? null : (EdVerificationChecklistCargo[]) result;
	}
	public InTopAddressMatchCargo[] getInTopAddressCaseNum(long caseNum) throws CoException
	{
		InTopAddressMatchCargo[] result = null;
		InTopAddressMatchCargo inTopAddressMatchCargo = new InTopAddressMatchCargo();
		inTopAddressMatchCargo.setCaseNum(caseNum);
		try
		{
			result =(InTopAddressMatchCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "InTopAddressMatch", "findByCaseNumberVal", inTopAddressMatchCargo, null, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in InTopAddress", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("NO DATA IN InTopAddress", 16063); }
		return result;
	}

	/**
	 * added by asputta
	 * @param caseNum
	 * @param edgNumString
	 * @param edgTraceIdString
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdEligibilityByEdgNumEdgTraceIdSNAPCase(long caseNum, String edgNumString, String edgTraceIdString, String refDate ) throws CoException {
		Object[] result = null;
		Object[] args = new Object[4];
		args[0] = caseNum;
		args[1] = edgNumString;
		args[2] = edgTraceIdString;
		args[3] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", 
					"findByEdgNumEdgTraceIdSNAPCase", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByEdgNumAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}
	public Object[] getEdEligibilityByEdgNumEdgTraceIdMACase(long caseNum, String edgNumString, String edgTraceIdString, String refDate ) throws CoException {
		Object[] result = null;
		Object[] args = new Object[4];
		args[0] = caseNum;
		args[1] = edgNumString;
		args[2] = edgTraceIdString;
		args[3] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByEdgNumEdgTraceIdAndActiveInMACase", 
					edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByEdgNumAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}
	/**
	 * added by asputta 
	 * @param caseNum
	 * @param traceId
	 * @return
	 * @throws CoException
	 */
	public Object[] getEdgFSBudgetGRNT(long caseNum, String  edgtraceIds)
			throws CoException {
		Object[] result = null;
		EdEligFsBudgetCargo edEligFsBudgetCargo = new EdEligFsBudgetCargo();
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] =edgtraceIds;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligFsBudget", "findByTfCaseEdgTraceIdStringNCH001",null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG FS Budget", 16325);
		}
		return result;
	}
	public Object[] getIndividualReasonsSNAP(long caseNum, String edgTraceIdString)

			throws CoException {
		Object[] result = null;
		Object[] obj = { new Long(caseNum), edgTraceIdString };
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvNoticeReasons", "findByCaseEdgTraceIdNCH001",
					null, obj, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	public EdDcIndvDisqPenaltiesCargo[] findSANFDisqIndv(EdEligibilityCargo eligCargo) throws CoException, ApplicationException, FrameworkException {

		EdDcIndvDisqPenaltiesCargo edDcIndvDisqPenaltiesCargo = new EdDcIndvDisqPenaltiesCargo();
		edDcIndvDisqPenaltiesCargo.setCaseNum(eligCargo.getCaseNum());
		edDcIndvDisqPenaltiesCargo.setPenDisBeginDt(eligCargo.getPaymentBegDt());
		edDcIndvDisqPenaltiesCargo.setProgramCd(eligCargo.getProgramCd());
		EdDcIndvDisqPenaltiesCollection edDcIndvDisqPenaltiesColl = new EdDcIndvDisqPenaltiesCollection();
		edDcIndvDisqPenaltiesColl.setCargo(edDcIndvDisqPenaltiesCargo);
		EdDcIndvDisqPenaltiesCargo[] edDcIndvDisqPenaltiesCarArr = null;
		edDcIndvDisqPenaltiesCarArr = (EdDcIndvDisqPenaltiesCargo[]) edDcIndvDisqPenaltiesColl
				.select("findSNAPDisqIndv");
		return edDcIndvDisqPenaltiesCarArr;
	}

	public Object[] getEdEligibilityByCurrentEligIndAndActiveInCaseMA(long caseNum, String refDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCurrentEligIndAndActiveInCaseMA", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByCurrentEligIndAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}
	public Object[] getEdEligibilityByCurrentEligIndAndActiveInCaseSNAP(long caseNum, String refDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCurrentEligIndAndActiveInCaseSNAP", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByCurrentEligIndAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}

	public EdMaClientShareCargo[] getClientShareByCaseIndv(Long caseNum,String indvIds) throws CoException{
		Object[] result = null;
		EdMaClientShareCargo cargo = new EdMaClientShareCargo();
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = indvIds;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdMaClientShare",
					"findClientShareByCaseNumIndvId", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getClientShare---NOE", 16908);
		}
		return result == null || result.length == 0 ? null: (EdMaClientShareCargo[]) result;
	}
	public BvClaimHeaderCargo[] getCaseNumFromClaimIds(String claimId) throws CoException { 
		Object[] result = null;
		BvClaimHeaderCargo cargo = new BvClaimHeaderCargo();
		cargo.setClaimId(claimId);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaimHeader", "findByAllClaimIds", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getCaseNumFromClaimIds", 16751);
		}
		return result == null ? null : (BvClaimHeaderCargo[]) result;
	}

	public EdEligibilityCargo[] getUnderPaymentReasonCode(long caseNum, String cd) throws CoException { 
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProgramCd(cd);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByTitleCode", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getCaseNumFromClaimIds", 16751);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	} 

	/**
	 * API to generate generateNDCCAP092Trigger
	 * @author shreyasingh
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDCCAP092Trigger(long caseNum, long providerId , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP092Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isCCAPNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for only CCAP notice**/
		if(null!=program && program.contains(CoConstants.CCAP_PROG_CD)){
			isCCAPNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = null;

		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
			
			if(caseNum>0){
				dcHeadOfHouseholdCargo = getHoHByCaseNum(caseNum, dcHeadOfHouseholdCargo);
			}
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP092Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setProviderId((providerId));;;
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDCCAP092);
		if(null != dcHeadOfHouseholdCargo && 0L != dcHeadOfHouseholdCargo.getIndvId()){
		correspondence.setIndvId(dcHeadOfHouseholdCargo.getIndvId());
		}
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence) && isCCAPNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP092Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP092Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP092Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCCAP092Trigger(long,long,String)");
	}


	public void generateNDFS0057Trigger(long caseNum, long indvId , String program,String create_id, String claimIDs) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDFS0057Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		//ND-85903
		CoDebugger.debugMessage("Claim IDs:"+claimIDs);
		long officeNumber = 0;
		long empID = 0;
		boolean isSnapNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for onlpy SNAP notice**/
		if(null!=program && program.contains(CoConstants.SNAP_PROGRAM_CD)){
			isSnapNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDFS0057Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}

		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDFS0057);
		correspondence.setRequestUserId(create_id);
		//ND-85903
		correspondence.setMiscParameters(claimIDs);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && isSnapNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDFS0057Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDFS0057Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDFS0057Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDFS0057Trigger(long,long,String)");
	}

	public BiTanfDetailCargo[] getBiTanfDetails(long caseNum){
		Object[] result = null;
		BiTanfDetailCargo cargo = new BiTanfDetailCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BiTanfDetail",
					"findByCaseNumProgTanf", cargo, null, conn);
		} catch (Exception e) {
			log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for BiTanfDetailCargo", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				log(ILog.DEBUG, "Exception: " + e1.getMessage(), e1);
				CoDebugger.debugException("CoDAOServices - BiTanfDetailCargo  "
						+ e1.getMessage(), e1);
			}
		}
		return result == null || result.length == 0 ? null
				: (BiTanfDetailCargo[]) result;

	}

	public Object[] getAllActivePrograms(String prog){
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = prog;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setProgramCd(prog);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findAllPrograms", edEligibilityCargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getAllActivePrograms", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				log(ILog.DEBUG, "Exception: " + e1.getMessage(), e1);
				CoDebugger.debugException("CoDAOServices - getAllActivePrograms  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}
	//Payment Notification Start
	public VBiCcdmiPayeeCargo[] getVBiCcdmiPayeeCargoCaseNum(long caseNum,Timestamp issuedt) throws CoException
	{
		VBiCcdmiPayeeCargo[] result = null;
		VBiCcdmiPayeeCargo vBiCcdmiPayeeCargo = new VBiCcdmiPayeeCargo();
		vBiCcdmiPayeeCargo.setCaseNum(caseNum);
		vBiCcdmiPayeeCargo.setIssueDt(issuedt);
		try
		{
			result =(VBiCcdmiPayeeCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee", "findByCaseNumPayment", vBiCcdmiPayeeCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VBiCcdmiPayee", 16357);
		}
		if (result == null || result.length == 0) {		CoDebugger.debugInformation("No records found in VBiCcdmiPayee" );}
		return result;
	}
	public VBiWarrantDetailCargo[] getVBiWarrantDetailCaseNum(long caseNum,Timestamp issuedt) throws CoException
	{
		VBiWarrantDetailCargo[] result = null;
		VBiWarrantDetailCargo vBiWarrantDetailCargo = new VBiWarrantDetailCargo();
		vBiWarrantDetailCargo.setCaseNum(caseNum);
		vBiWarrantDetailCargo.setT1IssueDt(issuedt);
		try
		{
			result =(VBiWarrantDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VBiWarrantDetail", "findByCaseNumCCAP", vBiWarrantDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VBiWarrantDetail", 16357);
		}
		if (result == null || result.length == 0) { CoDebugger.debugInformation("No records found in VBiWarrantDetail" ); }
		return result;
	}
		public VBiCcdmiPayeeCargo[] getVBiCcdmiPayeeCargoIndvId(long indvId,String benefitmonth) throws CoException
		{
			VBiCcdmiPayeeCargo[] result = null;
			Object[] params=new Object[2];
			params[0]= indvId;
			params[1]=benefitmonth;

			try
			{
				result =(VBiCcdmiPayeeCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee", "findByIndvPayment", null, params, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for VBiCcdmiPayee", 16357);
			}
			if (result == null || result.length == 0) {		CoDebugger.debugInformation("No records found in VBiCcdmiPayee" );}
			return result;
		}
		public VBiWarrantDetailCargo[] getVBiWarrantDetailIndvId(long indvId,String benefitmonth) throws CoException
		{
			VBiWarrantDetailCargo[] result = null;
			Object[] params=new Object[2];
			params[0]= indvId;
			params[1]=benefitmonth;

			try
			{
				result =(VBiWarrantDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VBiWarrantDetail", "findByIndvCCAP", null, params, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for VBiWarrantDetail", 16357);
			}
			if (result == null || result.length == 0) { CoDebugger.debugInformation("No records found in VBiWarrantDetail" ); }
			return result;
		}
	public BiIssuanceTriggerCargo[] getBiIssuanceTriggerCaseNum(long caseNum,Timestamp asOfDate) throws CoException
	{
		BiIssuanceTriggerCargo[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = asOfDate;
		try
		{
			result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BiIssuanceTrigger", "findByCaseNumCurrMonth", null, args, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VBiWarrantDetail", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in VBiWarrantDetail", 16063); }
		return result;
	}
	public Object[] findBiTriggerForNDCCAP71(long caseNumber, Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = asOfDate;
		BiIssuanceTriggerCargo cargo=new BiIssuanceTriggerCargo();
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", 
							"findByConditionForNDCCAP71", null, args, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTrigger", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BiIssuanceTrigger", 16752);
		}
		return result;
	}
	public Object[] findWarrantTriggerForNDCCAP71(Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		//args[0] = asOfDate;
		VBiWarrantDetailCargo cargo=new VBiWarrantDetailCargo();
		cargo.setT3IssueDt(asOfDate);
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "VBiWarrantDetail", 
							"findByConditionForNDCCAP71Warrant", cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VBiWarrantDetail", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in VBiWarrantDetail", 16752);
		}
		return result;
	}
	public Object[] findCcdmiTriggerForNDCCAP71(Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = asOfDate;
		VBiCcdmiPayeeCargo cargo=new VBiCcdmiPayeeCargo();
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee", 
							"findByConditionForNDCCAP71Ccdmi", null, args, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for VBiCcdmiPayee", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in VBiCcdmiPayee", 16752);
		}
		return result;
	}
	////Payment Notification End

	//Added for ND-55912
	public boolean checkActiveAutomaticTriggerExistForMiscParam(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNumMiscParam", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}

	public Object[] findIpvcRecordsByCase(String indvIdList) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = indvIdList;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndvIpvSanctions", "findIpvByIndvID", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
		}
		return result;
	}

	public void generateNDHCMNN22Trigger(long caseNum, long indvId , String program, char action) 
	{
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCMNN22Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isTanfNotice = false;
		boolean isSNAPNotice = false;
		boolean isCCAPNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(program);

		/**Logic to check for program**/
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_TANF)){
			isTanfNotice = true;
		}
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_SNAP)){
			isSNAPNotice = true;
		}
		if(null!=program && program.contains(CoConstants.CCAP_PROG_CD)){
			isCCAPNotice = true;
		}

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCMNN22Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.NDHCMNN22);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && (isTanfNotice || isSNAPNotice || isCCAPNotice)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){			
				if(action=='D'){
					CoRequestHistoryCargo[] cargo = this.deletingTriggerforIPV(caseNum,CoConstants.NDHCMNN22);
					CoRequestHistoryCargo updateCargo = new CoRequestHistoryCargo();
					if(null!=cargo && cargo.length>0){
						try{
							updateCargo = cargo[0];
							updateCargo.setPendingTrigSw(CoConstants.CHAR_C);
							CoRequestHistoryCollection coll = new CoRequestHistoryCollection();
							coll.setCargo(updateCargo);
							coll.update();
						}catch(FrameworkException e){
							log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
							CoDebugger.debugMessage("CoDAOService.generateNDHCMNN22Trigger-->Update failed ");
						}catch(ApplicationException e){
							log(ILog.DEBUG, "Exception: " + e.getMessage(), e);
							CoDebugger.debugMessage("CoDAOService.generateNDHCMNN22Trigger-->Update failed ");
						}

					}

				}
				CoDebugger.debugMessage("CoDAOService.generateNDHCMNN22Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCMNN22Trigger-->Unable to generate trigger. No SNAP or TANF or CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCMNN22Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCMNN22Trigger(long,long,String)");
	}

	public CoRequestHistoryCargo[] deletingTriggerforIPV(long caseNum, String docId) throws CoException{
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(docId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNum", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return (CoRequestHistoryCargo[])result;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return new CoRequestHistoryCargo[0];
		}		
	}


	public void generateNDHCCN117Trigger(long caseNum, long indvId , String program, String createUserId) 
	{
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCCN117Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isMedicaidNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for program**/
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_MEDICAID)){
			isMedicaidNotice = true;
		}

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCCN117Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		
		DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = null;
		if(caseNum>0){
			try {
				dcHeadOfHouseholdCargo = getHoHByCaseNum(caseNum, dcHeadOfHouseholdCargo);
			} catch (CoException e) {
				CoDebugger.debugInformation("Exception while getting the HOH for NDHCCN117 : "+e.getMessage());
				CoDebugger.debugException(e.getMessage(),e);
			}
		}
		if(null != dcHeadOfHouseholdCargo && 0L != dcHeadOfHouseholdCargo.getIndvId()){
			correspondence.setIndvId(dcHeadOfHouseholdCargo.getIndvId());
		} 
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setMiscParameters(Long.toString(indvId));
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.NDHCCN117);
		correspondence.setRequestUserId(createUserId);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && isMedicaidNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCCN117Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCCN117Trigger-->Unable to generate trigger. No Medicaid trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCCN117Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCCN117Trigger(long,long,String)");
	}
	/**
	 * API to generate generateNDCCAP092Trigger
	 * @param caseNum
	 * @param indvId
	 * @param program
	 * @throws CoException 
	 */
	public void generateNDCCAP066Trigger(long caseNum, long providerId, String program) throws CoException {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP066Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+CoConstants.CCAP_PROG_CD);
		long officeNumber = 0;
		boolean isCCAPNotice=true;
		long empID = 0;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP066Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setProviderId(providerId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDCCAP066);
		/* ND-100394- For populating PI name on dyna table*/
		long indiv_id = 0;
		if(caseNum > 0){
			indiv_id = getPrimaryIndividualIDFromCase(String.valueOf(caseNum));
		}
		if(indiv_id > 0){
			correspondence.setIndvId(indiv_id);
		}
		/* End  ND-100394- For populating PI name on dyna table*/
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence) && isCCAPNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP066Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP066Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP066Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCCAP066Trigger(long,long,String)");
	}
	

	/**
	 * added by asputta
	 * @param caseNum
	 * @param traceId
	 * @return
	 * @throws CoException
	 */


	public PmProviderChildAssocCargo[] getProviderClosingRecipients(String asOfDate) throws CoException{
		PmProviderChildAssocCargo assocCargo= new PmProviderChildAssocCargo();


		Object[] result = null;
		Object[] params=new Object[1];
		params[0]= asOfDate;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc",
					"getProviderClosingRecipients", null, params, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getProviderClosingRecipients", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}

	public PmProviderChildAssocCargo[] findChildByProviderIDandCaseNumber(long providerId, String caseNumber) throws CoException{
		PmProviderChildAssocCargo assocCargo= new PmProviderChildAssocCargo();
		assocCargo.setProviderId(((Long) providerId).intValue());
		assocCargo.setCaseNum(Long.parseLong(caseNumber));
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc",
					"findByProviderIDandCaseNumber", assocCargo, null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findChildByProviderIDandCaseNumber", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}

	public Object[] getEdgTANFFBudgetDetails(long caseNum, String edgTraceIds )
			throws CoException {
		Object[] args = new Object[2];
		Object[] result = null;
		args[0]=edgTraceIds;
		args[1] = caseNum;	

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligTanfBudget", "findByCaseNumberEdgTraceIdTANF",
					null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Ed ELIG TANF Budget",
					16327);
		}
		return result;
	}
	//Form 1099 Start
	public PmCcapPaymentCargo[] getPmCcapPayment(long providerId) throws CoException{
		PmCcapPaymentCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmCcapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmCcapPayment", "CofindByProviderId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmCcapPayment", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmCcapPayment", 16063); }
		return result;
	}
	public PmCcapTransactionCargo[] getPmCcapTransaction(int paymentTransactionId) throws CoException{
		PmCcapTransactionCargo[] result = null;
		Object [] params= new Object[1];
		params[0] = paymentTransactionId;
		try
		{
			result =(PmCcapTransactionCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmCcapTransaction", "findByPaymentTransactionID", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmCcapTransaction", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmCcapTransaction", 16063); }
		return result;
	}
	public DlProviderCargo[] getDlProvide(long providerId) throws CoException{
		DlProviderCargo[] result = null;
		DlProviderCargo dlProviderCargo = new DlProviderCargo();
		dlProviderCargo.setDclProviderId(((Long) providerId).intValue());
		try
		{
			result =(DlProviderCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DlProvider", "findByProviderId", dlProviderCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DlProvider", 16357);
		}
		return result == null || result.length == 0 ? null : (DlProviderCargo[]) result;
	}
	public PmAddressCargo[] getPmAddress(long providerId) throws CoException{
		PmAddressCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmAddressCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmAddress", "findByProviderId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmAddress", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmAddress", 16063); }
		return result;
	}
	public PmBankAccountCargo[] getPmBankAccount(long providerId) throws CoException{
		PmBankAccountCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmBankAccountCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmBankAccount", "findByProviderId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmBankAccount", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmBankAccount", 16063); }
		return result;
	}
	public In1099FiscalSendCargo[] getAmtIn1099Fiscal(long providerId) throws CoException {
		In1099FiscalSendCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(In1099FiscalSendCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "In1099FiscalSend", "getFiscalDataByTaxPayerId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for In1099FiscalSend", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in In1099FiscalSend", 16063); }
		return result;
	}
	//Form 1099 End


	//findByProviderId
	public Object[] getProviderAddress(int providerId)

			throws CoException {
		Object[] result = null;
		PmAddressCargo cargo=new PmAddressCargo();
		cargo.setVendorProviderId(providerId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmAddress", "findByProviderIdCo",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//findByProviderId
	public Object[] getProviderDetailsMetaData(long providerId)

			throws CoException {
		Object[] result = null;
		PmCcapProvidersCargo cargo=new PmCcapProvidersCargo();
		cargo.setProviderId(((Long)providerId).intValue());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findByProviderID",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}
	public Object[] getBiFsDetailsProgTF(long caseNum){
		Object[] result = null;
		BiTanfDetailCargo cargo = new BiTanfDetailCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BiTanfDetail",
					"findByCaseNumProgTanf", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiFsDetailsProgFS", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				CoDebugger.debugException("CoDAOServices - getBiFsDetailsProgTF  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}

	public Object[] getBiDetailsProgCCAP(VBiCcdmiPayeeCargo[] progName){
		Object[] result = null;
		VBiCcdmiPayeeCargo cargo = new VBiCcdmiPayeeCargo();

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee",
					"findByCaseNumProgCCAP", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiFsDetailsProgFS", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				CoDebugger.debugException("CoDAOServices - getBiDetailsProgCCAP  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}

	public Object[] getProgramsNDEBN111Insert() throws CoException {
		Object[] result = null;
		BiIssuanceTriggerCargo edEligibilityCargo = new BiIssuanceTriggerCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findProgramsNDEBN111Insert", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at getProgramsNDEBN111 and table ED_ELIGIBILITY");
		}
		return result;
	}
	public Object[] getProgramsNDEBN111RemoveCaseNum(String caseNum) throws CoException {
		Object[] result = null;
		BiIssuanceTriggerCargo edEligibilityCargo = new BiIssuanceTriggerCargo();
		Object[] args = new Object[1];
		args[0] = caseNum;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findProgramsNDEBN111Remove", null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at getProgramsNDEBN111 and table ED_ELIGIBILITY");
		}
		return result;
	}


	public Object[] getProgramsNDEBN111FinalCaseNum(String finalCaseNums, String caseNum) throws CoException {
		Object[] result = null;
		BiIssuanceTriggerCargo edEligibilityCargo = new BiIssuanceTriggerCargo();
		Object[] args = new Object[2];
		args[0] = finalCaseNums;
		args[1] = caseNum;

		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findProgramsNDEBN111Final", null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at getProgramsNDEBN111 and table ED_ELIGIBILITY");
		}
		return result;
	}

	public Object[] getProgramsNDEBN111DeleteCaseNum() throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo edEligibilityCargo = new CoRequestHistoryCargo();


		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "CoRequestHistory", "findProgramsNDEBN111Delete", edEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at getProgramsNDEBN111 and table CoRequestHistory");
		}
		return result;
	}



	/**
	 * API to generate notices,sent to a provider when the provider has received an IPV.
	 * @author ashwinkala
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDCDN114Trigger(Long providerID){
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCDN114Trigger(long caseNum, long providerID)");
		CoDebugger.debugMessage("Provider ID :"+providerID);
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setProviderId(providerID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.NDCDN114);
		correspondence.setCaseAppFlag(CoConstants.RECIPIENT_PROVIDER);
		correspondence.setRequestUserId("VMNDCDN114");
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);

		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCCAPProvider(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCCAPProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCDN114Trigger-->Skipping this trigger. Active trigger for today already exists ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCDN114Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCDN114Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCDN114Trigger(long caseNum, long providerID)");
	}

	/**
	 * API to generate generateNDTFN115Trigger
	 * @author ashwinkala
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDTFN115Trigger(long caseNum, long indvId ,long edgNum, String program, String createUserId){
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDTFN115Trigger -->");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Edge Num:"+edgNum);
		CoDebugger.debugMessage("Program Code:"+program);

		long officeNumber = 0;
		long empID = 0;
		boolean isTANF = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for only TANF notice**/
		if(null!=program && program.contains(CoConstants.PROGRAM_TF)){
			isTANF = true;
		}

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = {caseNum, CoConstants.EMPTY_STRING};
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDTFN115Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setRequestUserId(createUserId);
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setEdgeNumber(edgNum);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.NDTFN115);

		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseNumIndvID(correspondence) && isTANF) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseNumIndvID(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDTFN115Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDTFN115Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDTFN115Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDTFN115Trigger(long,long,String)");
	}

	/**
	 * Method to update Pm Provider Details by ID.
	 * 
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getPmCDProviderDetailsByID(long providerId) throws CoException {
		Object[] result = null;
		int provID = ((Long)providerId).intValue();
		PmCcapProvidersCargo pmCcapProvidersCargo=new PmCcapProvidersCargo();
		pmCcapProvidersCargo.setProviderId(provID);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findByProviderId", pmCcapProvidersCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_PROVIDERS", 99664);
		}
		return result;
	}

	/**
	 * Method to identify Disqualified CCAP Provider for Provider ID
	 * 
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getDisqualifiedProviderForID(long providerId) throws CoException {
		Object[] result = null;

		int provID = ((Long) providerId).intValue();
		PmProviderStatusCargo cargo= new PmProviderStatusCargo();
		cargo.setProviderId(provID);
		cargo.setStatusTypeCd(CoConstants.DISQUALIFIED);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findByStatusType", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderStatus", 99664);
		}
		return result;
	}

	/**
	 * Method to identify CCAP Provider IPV Details for Provider ID
	 * 
	 * @param providerId
	 *            Provider ID
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] getCDProviderIPVDetails(long providerId) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = providerId;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmIpv", "findIpvByProviderIdLatest", null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderStatus", 99664);
		}
		return result;
	}

	/**
	 * @author akala
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public boolean checkActiveAutomaticTriggerExistCCAPProvider(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setProviderId(aCoObj.getProviderId());

		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdProviderId", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}
	public void generateNDCCAP65Trigger(long providerId , String program,String create_id, Timestamp generateDt) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP65Trigger(long,String,String)");
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setCaseAppNumber(null);//Updated for number format exception
		correspondence.setProviderId(providerId);
		correspondence.setDocId(CoConstants.DOC_ID_NDCCAP65);
		correspondence.setRequestUserId(create_id);
		correspondence.setAssistanceProgramCode(program);
		correspondence.setMiscParameters("P");

		java.util.Date dt = null;
		if (generateDt == null) {
			dt = CoDateFactory.getUtilDate();
			correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		} else {
			correspondence.setGenerateDate(generateDt);
		}

		try {
			if (!this.checkActiveAutomaticTriggerExist1099Provider(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist1099Provider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP65Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP65Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP65Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCCAP65Trigger(long,String,String)");
	}

	public void generateNDCCAP65TriggerDraft(long providerId , String program,String create_id, Timestamp generateDt) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP65Trigger(long,String,String)");
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setCaseAppNumber(null);//Updated for number format exception
		correspondence.setProviderId(providerId);
		correspondence.setDocId(CoConstants.DOC_ID_NDCCAP65);
		correspondence.setRequestUserId(create_id);
		correspondence.setAssistanceProgramCode(program);
		correspondence.setMiscParameters("P");
		correspondence.setDraftSwitch('Y');
		java.util.Date dt = null;
		if (generateDt == null) {
			dt = CoDateFactory.getUtilDate();
			correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		} else {
			correspondence.setGenerateDate(generateDt);
		}

		try {
			if (!this.checkActiveAutomaticTriggerExist1099Provider(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist1099Provider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP65Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP65Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP65Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCCAP65Trigger(long,String,String)");
	}


	//Added for NDCCAP110Assembler
	public void generateNDCCAP110Trigger(long caseNum, Long providerId, java.sql.Timestamp generateDate) {

		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP110Trigger(long,long,String,String,Date)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("providerId:"+providerId);
		CoDebugger.debugMessage("GenerateDate:"+generateDate);
		long officeNumber = 0;
		long empID = 0;

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROGRAM_CD);

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP110Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.RECIPIENT_PROVIDER);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setEmpId(empID);
		correspondence.setGenerateDate(generateDate);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDCCAP110);
		correspondence.setProviderId(providerId);

		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)) {
				correspondence.setCaseAppNumber(null);
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP110Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP110Trigger-->Unable to generate trigger. No trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP110Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCCAP110Trigger(long,long,String,String,Date)");

	}

	//Added for Annual Renewal
	public Object[] getProviderStatusDetails(int providerId)

			throws CoException {
		Object[] result = null;
		PmProviderStatusCargo cargo=new PmProviderStatusCargo();
		cargo.setProviderId(providerId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findByProviderId",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	public Object[] getProviderChildAssocs(int providerId)throws CoException {
		Object[] result = null;
		PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
		cargo.setProviderId(providerId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findByProviderID",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	public Object[] getNonCoopIndv(String indvId) throws CoException{
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = indvId;
		DcChildSuppNonCoopCargo cargo=new DcChildSuppNonCoopCargo();
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcChildSuppNonCoop", "findByIndvId",
					null, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	public Object[] getbyIndvId(long individualID) throws CoException {
		Object[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		dcIndvCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndividualId", dcIndvCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getbyIndvId - exception - individualID "+individualID+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getbyIndvId - exception - Select failed for DC_INDV for indv ID "+individualID, 16319);
		}
		return result;
	}

	/*start:akanksha massmail prov + approved relative pend*/

	//findByProviderIdCaseAssoc
	public Object[] getProviderAssocs(String date, String providers)

			throws CoException {
		Object[] result = null;
		PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
		Object[] args= new Object[2];
		args[0]=date;
		args[1]=providers;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findByProviderIdCaseAssoc",
					cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}


	//findByProviderCountyCOMassMail
	public Object[] getProviderCountyMassMail(String date,String counties)

			throws CoException {
		Object[] result = null;
		PmAddressCargo cargo=new PmAddressCargo();
		Object[] args=new Object[2];
		args[0]=date;
		args[1]=counties;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmAddress", "findByProviderCountyCOMassMail",
					cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//findByProviderStatusCOMassMail
	public Object[] getProviderStatusMassMail(String date)

			throws CoException {
		Object[] result = null;
		PmProviderStatusCargo cargo=new PmProviderStatusCargo();
		Object[] args=new Object[1];
		args[0]=date;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findByProviderStatusCOMassMail",
					cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//findByProviderAllStatusCOMassMail
	public Object[] getProviderAllStatusMassMail(String date,String statuses)

			throws CoException {
		Object[] result = null;
		PmProviderStatusCargo cargo=new PmProviderStatusCargo();
		Object[] args=new Object[2];
		args[0]=date;
		args[1]=statuses;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findByProviderAllStatusCOMassMail",
					cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//findByProviderLicenseTypeCOMassMail
	public Object[] getProviderLicenseTypesMassMail(String date,String licenses)

			throws CoException {
		Object[] result = null;
		PmCcapProvidersCargo cargo=new PmCcapProvidersCargo();
		Object[] args=new Object[2];
		args[0]=date;
		args[1]=licenses;


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findByProviderLicenseTypeCOMassMail",
					cargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	public Object[] getPendingTriggersForBatchRequestNCH049Providers(String docIds,
			String minVal, String maxVal, String generateDate)
					throws CoException {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - started");

		Object[] objParams = new Object[5];
		VCoRequestCollection coRequestCol = new VCoRequestCollection();
		VCoRequestCargo[] coRequestCargos = null; 

		objParams[0] = coRequestCol.getCargo();
		objParams[1] = minVal;
		objParams[2] = maxVal;
		objParams[3] = docIds;
		objParams[4] = generateDate;

		try {
			if(docIds != null && docIds.equalsIgnoreCase(CoConstants.CO_DOC_ID_NCH049)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvProvidersNCH049", objParams);
			}else if(docIds != null && docIds.equalsIgnoreCase(CoConstants.DOC_ID_NDCCAP65)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForNDCCAP65", objParams);
			}
		} catch (FrameworkException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} catch (ApplicationException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		}		
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - timeTaken : " + (System.currentTimeMillis() - start));
		return coRequestCargos;
	}	

	//findByPendingApprovalProvider
	public Object[] getPendingApprovalProvDetails(long providerId)

			throws CoException {
		Object[] result = null;
		PmProviderStatusCargo cargo=new PmProviderStatusCargo();
		Long provider=providerId;
		cargo.setProviderId(Integer.parseInt(provider.toString()));


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findApprovedRelativePendingProviders",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	//getIsHomelessForMassMailCO
	public Object[] getHomelessDetailsForMassMailCO(String date,String caseNumbers,String homelessSws)

			throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo cargo=new DcCaseAddressesCargo();
		Object args[]= new Object[3];
		args[0]=date;
		args[1]=caseNumbers;
		args[2]=homelessSws;					

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "getIsHomelessForMassMailCO",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}

	/*end: akanksha*/

	public Object[] findChildSuppNonCoopParentsBySeq(int maxRows, long seqNum) throws CoException {//findByCaseIndvAbsentParent
		Object[] result = null;
		DcChildSuppNonCoopCargo cargo = new DcChildSuppNonCoopCargo();
		cargo.setAbsentParentSeqNum(seqNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildSuppNonCoop", "findByCaseAbsentAndCustodialParent", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcChildSuppNonCoop", 16752);
		}
		return result;
	}

	/**Statement of Fact DAO finders*./

	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param indvId
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getBenefitMonthForCase(long lCaseNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findBenefitMonthForSOFNotice",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param indvId
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getRetroMonthsForIndv(long lCaseNum, long indvId) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = indvId;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findRetroMonthsForIndv",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}
	/**
	 * @author karraj
	 * @param individualID
	 * @return
	 * @throws CoException
	 */
	public DcDemographicsCargo[] getIndvParticipatedInStrike(long individualID) throws CoException {
		Object[] result = null;
		DcDemographicsCargo dcDemographicsCargo = new DcDemographicsCargo();
		dcDemographicsCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDemographics", "findByIndivIdEffEndDateStrikeSw", dcDemographicsCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_DEMOGRAPHICS", 16315);
		}
		return result == null ? null : (DcDemographicsCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param lCaseNum
	 * @param indvId
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getTANFDeniedForIndv(long lCaseNum, long indvId) throws NoDataFoundException, CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = indvId;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findIndvDeniedTANFAssistance",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public DcUnpaidMedicalCargo[] getUnpaidMedicalBillsForIndv(long indvId) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = indvId;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcUnpaidMedical", 
					"findByIndvUnpaidBillsForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_UNPAID_MEDICAL", 16312);
		}
		return result == null ? null : (DcUnpaidMedicalCargo[]) result;
	}

	/**
	 * @author karraj
	 * @param indvId
	 * @param refDate
	 * @return
	 * @throws CoException
	 */
	public DcIndvNonCooperationCargo[] getJobQuitInfoForIndv(long indvId) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = indvId;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","DcIndvNonCooperation", 
					"findJobQuitterForNotice",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Indv_Non_Cooperation", 16312);
		}
		return result == null ? null : (DcIndvNonCooperationCargo[]) result;
	}
	public PmCcapProvidersCargo[] getProviderName(long providerID){
		Object[] result = null;
		Object[] params= new Object[2];

		PmCcapProvidersCargo pmCcapProvidersCargo = new PmCcapProvidersCargo();
		pmCcapProvidersCargo.setProviderId(((Long) providerID).intValue());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findByProviderID",
					pmCcapProvidersCargo,null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

		}
		return result == null ? null : (PmCcapProvidersCargo[]) result;
	}

	public PmProviderStatusCargo[] getPeoviderStatus(long providerID){
		Object[] result = null;
		Object[] params= new Object[2];

		PmProviderStatusCargo pmCcapProvidersCargo = new PmProviderStatusCargo();
		pmCcapProvidersCargo.setProviderId(((Long) providerID).intValue());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderStatus", "findStatusByProviderID",
					pmCcapProvidersCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

		}
		return result == null ? null : (PmProviderStatusCargo[]) result;
	}

	public PmProviderChildAssocCargo[] getChildAssoc(long providerID){
		Object[] result = null;
		Object[] params= new Object[2];

		PmProviderChildAssocCargo pmProviderChildAssocCargo = new PmProviderChildAssocCargo();
		pmProviderChildAssocCargo.setProviderId(((Long) providerID).intValue());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findChildAssocByProviderID",
					pmProviderChildAssocCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

		}
		return result == null ? null : (PmProviderChildAssocCargo[]) result;
	}
	public DcIndvCargo[] getChilName(Long childIdv){
		Object[] result = null;
		Object[] params= new Object[2];

		DcIndvCargo dcIndvCargo =new DcIndvCargo();
		dcIndvCargo.setIndvId(childIdv);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findChildAssocByProviderID",
					dcIndvCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);

		}
		return result == null ? null : (DcIndvCargo[]) result;
	}

	/**
	 * ND-54010
	 * 
	 * @author shreyasingh
	 * @param caseNum
	 * 
	 * @return
	 * @throws CoException
	 */
	public DcIndvCargo[] getAllDisabilityIndv(long caseNum) throws CoException {
		Object[] result = null;
		DcIndvCargo cargo = new DcIndvCargo();
		Object[] params = new Object[1];
		params[0] = caseNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findDisablityIndvByCaseNum", cargo, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllDisabilityIndv",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (DcIndvCargo[]) result;
	}

	/**
	 * ND-54010
	 * 
	 * @author shreyasingh
	 * @param indvId
	 * 
	 * @return
	 * @throws CoException
	 */
	public BvMaPremiumDtlsCargo[] getAllByIndvId(long indvId)
			throws CoException {
		Object[] result = null;
		BvMaPremiumDtlsCargo cargo = new BvMaPremiumDtlsCargo();
		cargo.setIndvId(indvId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvMaPremiumDtls", "findAllByIndvId", cargo,
					null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllByIndvId",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (BvMaPremiumDtlsCargo[]) result;
	}
	/**
	 * ND-54010
	 * 
	 * @author shreyasingh
	 * @param indvId
	 * 
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getAllDisabilityByIndvId(long indvId) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		Object[] params = new Object[1];
		params[0] = indvId;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findDisabilityByIndvId", cargo, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllDisabilityByIndvId",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}


	public boolean checkActiveAutomaticTriggerExistByIndvId(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setIndvId(Long.valueOf(aCoObj.getIndvId()));
		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdIndvId", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}
	public void generateNDCCAP71Trigger(long caseNum, long indvId , String program,String create_id) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP71Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;

		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP71Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}

		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_ID_NDCCAP71);
		correspondence.setRequestUserId(create_id);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP71Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP71Trigger-->Unable to generate trigger. No SNAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP71Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDCCAP71Trigger(long,long,String)");
	}



	/**
	 * @author akala
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public boolean checkActiveAutomaticTriggerExistCaseNumIndvID(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
		cargo.setIndvId(aCoObj.getIndvId());
		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByCaseNumIndvID", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}

	public VBiCcdmiPayeeCargo[] getBiCCAPDetails(long caseNum){
		Object[] result = null;
		VBiCcdmiPayeeCargo cargo = new VBiCcdmiPayeeCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee",
					"findByCaseNumProgCCAP", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiCCAPDetails", 16908);
			} catch (CoException e1) {
			//	e1.printStackTrace(); JIRA ND-82178
				CoDebugger.debugException("CoDAOServices - getBiCCAPDetails  "
						+ e1.getMessage(), e1);
			}
		}
		return result == null || result.length == 0 ? null
				: (VBiCcdmiPayeeCargo[]) result;

	}

	/**
	 * getSanctionedRecordsIndvIdTANF
	 * @param caseNum
	 * @param indvId
	 * @param edgNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdDcIndvDisqPenaltiesCargo[] getSanctionedRecordsIndvIdTANF(long caseNum, long indvId,long edgNum) throws NoDataFoundException, CoException {
		Object[] result = null;
		EdDcIndvDisqPenaltiesCargo cargo= new EdDcIndvDisqPenaltiesCargo();
		cargo.setIndvId(indvId);
		cargo.setProgramCd(CoConstants.PROGRAM_TF);
		cargo.setEdgNum(edgNum);
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdDcIndvDisqPenalties", "findByEdgNumCaseNumIndvIdTF",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdDcIndvDisqPenaltiesCargo-->>getSanctionedRecordsIndvIdTANF", 16312);
		}
		return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
	}

	public Object[] getProgramsNDEBN111(long caseNum, String asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = asOfDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findProgramsNDEBN111", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result == null ? null : (BiIssuanceTriggerCargo[]) result;
	}

	public void generateNDHCN0067Trigger(Long providerID){
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCN0067Trigger(long providerID)");
		CoDebugger.debugMessage("Provider ID :"+providerID);
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setProviderId(providerID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDHCN0067);
		correspondence.setRequestUserId("VMNDCDN114");
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);
		PmProviderChildAssocCargo childAssocCargo= new PmProviderChildAssocCargo();
		childAssocCargo.setProviderId(Integer.parseInt(providerID.toString()));
		PmProviderChildAssocCargo[] pmProviderChildAssocCargos;
		try {
			pmProviderChildAssocCargos = (PmProviderChildAssocCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc", "findChildAssocByProviderID", childAssocCargo, null, conn);
			if (pmProviderChildAssocCargos.length>0 && pmProviderChildAssocCargos!=null){
				correspondence.setCaseAppNumber(pmProviderChildAssocCargos[0].getCaseNum()+"");
			}
		} catch (Exception e1) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0067Trigger-->Error while getting case number for Provider", e1);
		}
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCCAPProvider(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCCAPProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0067Trigger-->Skipping this trigger. Active trigger for today already exists ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCN0067Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCN0067Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCN0067Trigger( long providerID)");
	}
	public BiIssuanceTriggerCargo[] getBiIssuanceTriggerExtraBenefits(long caseNum) throws CoException
	{
		BiIssuanceTriggerCargo[] result = null;
		BiIssuanceTriggerCargo biIssuanceTriggerCargo = new BiIssuanceTriggerCargo();
		biIssuanceTriggerCargo.setCaseNum(caseNum);
		try
		{
			result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findByCaseNumExtraBen", biIssuanceTriggerCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getBiIssuanceTriggerExtraBenefits", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in getBiIssuanceTriggerExtraBenefits", 16063); }
		return result;
	}

	public Object[] getBiDetailsProgCCAPInsertion(long caseNum){
		Object[] result = null;
		VBiCcdmiPayeeCargo cargo = new VBiCcdmiPayeeCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "VBiCcdmiPayee",
					"findByCaseNumProgCCAP", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			try {
				throw new CoException("Select failed for getBiDetailsProgCCAPInsertion", 16908);
			} catch (CoException e1) {
				//e1.printStackTrace(); JIRA ND-82178
				CoDebugger.debugException("CoDAOServices - getBiDetailsProgCCAPInsertion  "
						+ e1.getMessage(), e1);
			}
		}
		return result;

	}
	public EdEligibilityCargo[] getEdEligibilityDetails(long caseNum) throws CoException{
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findByCaseNumSorted", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	public EdEligibilityCargo[] getEdEligibilityDateDetails(long caseNum) throws CoException{
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility",
					"findByCaseNumDateDetails", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	/**
	 * API to generate generateNDCCAP063Trigger
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateNDCCAP063Trigger(long caseNum, long providerId , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP063Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isCCAPNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);

		/**Logic to check for only CCAP notice**/
		if(null!=program && program.contains(CoConstants.CCAP_PROG_CD)){
			isCCAPNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP063Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setChipAppNum(String.valueOf(caseNum));
		correspondence.setProviderId(providerId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDCCAP063);
		correspondence.setCaseAppFlag(CoConstants.RECIPIENT_SPACES_PROVIDER);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence) && isCCAPNotice) { 
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP063Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP063Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP063Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCCAP063Trigger(long,long,String)");
	}
	/**
	 * API to generate generateNDCCAP064Trigger
	 * @param caseNum
	 * @param indvId
	 * @param program
	 * @throws CoException 
	 */
	public void generateNDCCAP064Trigger(long caseNum, long providerId , String program,String create_user) throws CoException {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDCCAP064Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isCCAPNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);

		/**Logic to check for only CCAP notice**/
		if(null!=program && program.contains(CoConstants.CCAP_PROG_CD)){
			isCCAPNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP064Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setProviderId(providerId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDCCAP064);
		correspondence.setRequestUserId(create_user);
		/* ND-100394- For populating PI name on dyna table*/
		long indiv_id = 0;
		if(caseNum > 0){
			indiv_id = getPrimaryIndividualIDFromCase(String.valueOf(caseNum));
		}
		if(indiv_id > 0){
			correspondence.setIndvId(indiv_id);
		}
		/* End  ND-100394- For populating PI name on dyna table*/
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence) && isCCAPNotice) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP064Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDCCAP064Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDCCAP064Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCCAP064Trigger(long,long,String)");
	}
	/**
	 * API to generate generateCCAPCertificateTrigger
	 * @param caseNum
	 * @param indvId
	 * @param program
	 */
	public void generateCCAPCertificateTrigger(long caseNum, long providerId , String program,String create_user) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateCCAPCertificateTrigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Provider Id:"+providerId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isCCAPNotice = false;
		
		List<COCorrespondence> correspondenceList = new ArrayList<>();
		if(null!=program && program.contains(CoConstants.CCAP_PROG_CD)){
			isCCAPNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateCCAPCertificateTrigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		/** NDCCAP063 cargo*/
		COCorrespondence correspondence1 = new COCorrespondence();
		correspondence1.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);

		/**Logic to check for only CCAP notice**/
		
		correspondence1.setOfficeNumber(officeNumber);
		correspondence1.setCaseAppNumber(String.valueOf(caseNum));
		correspondence1.setChipAppNum(String.valueOf(caseNum));
		correspondence1.setProviderId(providerId);
		correspondence1.setEmpId(empID);
		correspondence1.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence1.setDocId(CoConstants.DOC_NDCCAP063);
		correspondence1.setCaseAppFlag(CoConstants.RECIPIENT_SPACES_PROVIDER);
		java.util.Date dt = null;
		if (correspondence1.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence1.getGenerateDate();
		}
		correspondence1.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		/** NDCCAP063 cargo*/
		COCorrespondence correspondence2 = new COCorrespondence();
		correspondence2.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);
		/**Logic to check for only CCAP notice**/
		correspondence2.setOfficeNumber(officeNumber);
		correspondence2.setCaseAppFlag(CoConstants.CASE);
		correspondence2.setCaseAppNumber(String.valueOf(caseNum));
		correspondence2.setProviderId(providerId);
		correspondence2.setEmpId(empID);
		correspondence2.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence2.setDocId(CoConstants.DOC_NDCCAP064);
		correspondence2.setRequestUserId(create_user);
		if (correspondence2.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence2.getGenerateDate();
		}
		correspondence2.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		try{
			if (!this.checkActiveAutomaticTriggerExistCaseProvider(correspondence1) && isCCAPNotice) {
				correspondenceList.add(correspondence1);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence1)){
				CoDebugger.debugMessage("CoDAOService.generateCCAPCertificateTrigger-->Skipping "+CoConstants.DOC_NDCCAP063+" trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateCCAPCertificateTrigger-->Unable to generate trigger for "+CoConstants.DOC_NDCCAP063+". No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateCCAPCertificateTrigger-->Error while checking the existence of the request in the co_request_details for "+CoConstants.DOC_NDCCAP063, e);
		}
		
		try{
			if (!this.checkActiveAutomaticTriggerExist(correspondence2) && isCCAPNotice) {
				correspondenceList.add(correspondence2);
			}else if(this.checkActiveAutomaticTriggerExistCaseProvider(correspondence2)){
				CoDebugger.debugMessage("CoDAOService.generateCCAPCertificateTrigger-->Skipping "+CoConstants.DOC_NDCCAP064+" trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateCCAPCertificateTrigger-->Unable to generate trigger for  "+CoConstants.DOC_NDCCAP064+" . No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateCCAPCertificateTrigger-->Error while checking the existence of the request in the co_request_details for "+CoConstants.DOC_NDCCAP064, e);
		}
				
		for(COCorrespondence correspondence : correspondenceList){
			try{
				this.generateCorrespondenceRequest(correspondence);
			}catch (CoException e) {
				CoDebugger.debugException("CoDAOService.generateCCAPCertificateTrigger-->Error while inserting trigger for CCAP certificate", e);
			}
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateCCAPCertificateTrigger(long,long,String)");
	}
	
	public DcActivityScheduleCargo[] getCareTakerIndvId(ArrayList<Long> indvIds,String date) throws CoException{
		Object[] result = null;
		long[]id=new long[indvIds.size()];
		int i=0;
		for(long indv:indvIds){
			id[i]=indv;
			i++;
		}
		
		Object[] obj = {id,date};
	
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcActivitySchedule",
					"findCareTakerIndvId", null , obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result == null || result.length == 0 ? null
				: (DcActivityScheduleCargo[]) result;
	}

	public Object[] getProviderChildAssocsDetails(long case_num)

			throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = case_num;
		PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
		cargo.setCaseNum(case_num);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findByCaseNum",
					cargo, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
		}
		return result;
	}
	public Object[] getProviderIdDetails(int[] indvs) throws CoException {
		Object[] result = null;
		Object[] obj = { indvs };
		try {
			PmCcapProvidersCargo cargo = new PmCcapProvidersCargo();
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmCcapProviders",
					"findByprovIdList", cargo, obj, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmCcapProviders ", 16795);
		}

		return result;
	}

	/**
	 * Fetching cargos for NDCCAP069 triggers
	 * @author karraj
	 * @param asOfDate
	 * @return
	 * @throws CoExceptions
	 */
	public PmProviderChildAssocCargo[] getCargoForNDCCAP069Trigger(Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = asOfDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","PmProviderChildAssoc", 
					"findAssociationForCCAPByAsOfDate",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return result == null ? null : (PmProviderChildAssocCargo[]) result;
	}
	
	/**
	 * Fetching cargos for NDCCAP069 triggers MLY
	 * @author arunt
	 * @param asOfDate
	 * @return
	 * @throws CoExceptions
	 */
	public PmProviderChildAssocCargo[] getCargoForNDCCAP069TriggerMLY(Timestamp asOfDate) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = asOfDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom","PmProviderChildAssoc", 
					"findAssociationForCCAPByAsOfDateMLY",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssocMLY", 16312);
		}
		return result == null ? null : (PmProviderChildAssocCargo[]) result;
	}
	

	/**
	 * 
	 * @param providerId
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public PmProviderChildAssocCargo[] getProviderChildAssocsByProviderIdCaseNum(int providerId,long caseNum)throws CoException {
		Object[] result = null;
		PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
		cargo.setProviderId(providerId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findByProviderIDandCaseNumber",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return result == null ? null : (PmProviderChildAssocCargo[]) result;
	}
	/**added by asputta
	 * @param indvIds
	 * @return
	 * @throws CoException
	 */
	public Object[] getIndvFailedResource(ArrayList<Long> indvIds)
			throws CoException {
		Object[] result = null;
		long[]id=new long[indvIds.size()];
		int i=0;
		for(long indv:indvIds){
			id[i]=indv;
			i++;
		}

		Object[] obj = {id};
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcTransferedResources",
					"findIndividualsInCase",
					null,obj,conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for DC_TRANSFERED_RESOURCES",
					16777);
		}
		return result;
	}

	/**
	 * added by tdatta
	 * @param 
	 * @return
	 * @throws CoException
	 */
	public PmProviderChildAssocCargo[] getHouseholdClosingRecipients(String asOfDate) throws CoException{
		Object[] result = null;
		Object[] params=new Object[1];
		params[0]= asOfDate;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc",
					"getHouseholdClosingRecipients", null, params, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getProviderClosingRecipients", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}
	
	public Object[] getEdEligibilityByCurrentEligIndAndActiveInCaseCCAP(long caseNum, String refDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNum;
		args[1] = refDate;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCurrentEligIndAndActiveInCaseCCAP", edEligibilityCargo, args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed at findByCurrentEligIndAndActiveInCase and table ED_ELIGIBILITY");
		}
		return result;
	}

	public EdVerificationChecklistCargo[] getEdVerificationForCCAPNCH001(long caseNum,long edgNum) throws  CoException {
		Object[] result = null;
		Object[] params= new Object[2];
		params[0] = caseNum;
		params[1] = edgNum;
		EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();


		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdVerificationChecklist", "findByCaseEdgNumCD",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdVerificationChecklist--->findByCaseNumPgm", 16313);
		}
		return result == null ? null : (EdVerificationChecklistCargo[]) result;
	}

	public InChildSuppRcvChildCargo[] findAbsentChildByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		InChildSuppRcvChildCargo cargo = new InChildSuppRcvChildCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "InChildSuppRcvChild",
					"findByCaseNumber", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findAbsentChildByCaseNum",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (InChildSuppRcvChildCargo[]) result;
	}

	public InChildSuppRcvCargo[] findAbsentParentByRefNum(long refNum) throws CoException {
		Object[] result = null;
		InChildSuppRcvCargo cargo = new InChildSuppRcvCargo();
		cargo.setReferralNumber(refNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "InChildSuppRcv",
					"findByRefNumber", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findAbsentParentByRefNum",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (InChildSuppRcvCargo[]) result;
	}
	public void generateNDHCCTF79Trigger(long caseNum, long indvId , String program, String create_ID) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDHCCTF79Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isTanfNotice = false;
		boolean isMedicaidNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));

		/**Logic to check for onlygenerate CCAP notice**/
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_TANF)){
			isTanfNotice = true;
		}
		if(null!=program && program.contains(CoConstants.SELECTED_VAL_MEDICAID)){
			isMedicaidNotice = true;
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
		MoEmployeesCargo[] moEmployeesCargos = null;
		try {
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOService.generateNDHCCTF79Trigger-->Application exception", e);
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
			empID = moEmployeesCargos[0].getEmpId();
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDHCCTF79);
		correspondence.setRequestUserId(create_ID);

		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate();
		} else {
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && (isMedicaidNotice||isTanfNotice)) {
				this.generateCorrespondenceRequest(correspondence);
			}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
				CoDebugger.debugMessage("CoDAOService.generateNDHCCTF79Trigger-->Skipping this trigger. Active trigger for today already exist ");
			}else{
				CoDebugger.debugMessage("CoDAOService.generateNDHCCTF79Trigger-->Unable to generate trigger. No Medicaid or TANF trigger request ");
			}
		} catch (CoException e) {
			CoDebugger.debugException("CoDAOService.generateNDHCCTF79Trigger-->Error while checking the existence of the request in the co_request_details", e);
		}
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDHCCTF79Trigger(long,long,String)");
	}

	/**
	 * ND-54005
	 * 
	 * @author shreyasingh
	 * @param indvID
	 * 
	 * @return
	 * @throws CoException
	 */
	public DcIndvCargo[] getAllByIndvID(long indvID) throws CoException {
		Object[] result = null;
		DcIndvCargo cargo = new DcIndvCargo();
		Object[] params = new Object[1];
		params[0] = indvID;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByActiveIndvId", cargo, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getAllByIndvID",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (DcIndvCargo[]) result;
	}


	/**
	 * Method to get data from BV_CLAIM_LIABLE_INDV based on CLAIM_ID,
	 * LIABLE_SW.
	 * 
	 * @param claimId
	 *            String
	 * @param liableSW
	 *            Liability Switch
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getBvClaimLiableIndvByClaimIDAndLiableSW(String claimId) throws CoException {
		Object[] result = null;

		BvClaimLiableIndvCargo bvClaimLiableIndvCargo = new BvClaimLiableIndvCargo();
		bvClaimLiableIndvCargo.setClaimId(claimId);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvClaimLiableIndv", "findByLiableClmIdSwY",
					bvClaimLiableIndvCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimLiableIndv", 16909);
		}
		return result;
	}
	/**ND Relative Provider Annual Renewal**/
	public PmCcapProvidersCargo[] getProviderDetailsPmCcap(long providerId) throws CoException{
		PmCcapProvidersCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmCcapProvidersCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmCcapProviders", "coFindByProviderId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmCcapProvidersCargo", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmCcapProvidersCargo", 16063); }
		return result;
	}
	public PmProviderStatusCargo[] getProviderDetailsPmProvider(long providerId,String refdate) throws CoException{
		PmProviderStatusCargo[] result = null;
		Object [] params= new Object[2];
		params[0] =providerId;
		params[1] =refdate;
		try
		{
			result =(PmProviderStatusCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmProviderStatus", "coFindByProviderId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderStatusCargo", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmProviderStatusCargo", 16063); }
		return result;
	}
	public EdEligibilityCargo[] findAllProgramsCase(long providerId) throws CoException{
		EdEligibilityCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findAllProgramsCase", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in EdEligibility", 16063); }
		return result;
	}

	
	public EdEligibilityCargo[] findAllProgramsCaseAsc(long providerId) throws CoException{
		EdEligibilityCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findAllProgramsCaseAsc", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in EdEligibility", 16063); }
		return result;
	}
	
	
	public boolean checkActiveAutomaticTriggerExistCaseProvider(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setProviderId(aCoObj.getProviderId());
		cargo.setCaseNum(Long.parseLong(aCoObj.getCaseAppNumber()));

		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNumProviderId", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}
	public boolean checkActiveAutomaticTriggerExist1099Provider(COCorrespondence aCoObj)throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setProviderId(aCoObj.getProviderId());

		CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findAutomaticTriggersByDocIdProviderId1099", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequest", 16099);
		}
		if (result != null && result.length > 0) { // then check in Detail
			CoDebugger.debugInformation("CO Request Exist");
			return true;
		} else {
			CoDebugger.debugInformation("CO Request Does not  Exist");
			return false;
		}		
	}
	/**
	 * ND-54005
	 * 
	 * @author shreyasingh
	 * @param providerID
	 * 
	 * @return
	 * @throws CoException
	 */
	public PmProviderStatusCargo[] getByProviderID(int providerID)
			throws CoException {
		Object[] result = null;
		PmProviderStatusCargo cargo = new PmProviderStatusCargo();
		// cargo.setProviderId(providerID);
		Object[] params = new Object[1];
		params[0] = providerID;

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"PmProviderStatus", "findByProviderId", cargo,
							params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderStatus", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderStatusCargo[]) result;
	}

	/**
	 * ND-54005
	 * 
	 * @author shreyasingh
	 * @param providerId
	 * 
	 * @return
	 * @throws CoException
	 */
	public PmProviderChildAssocCargo[] getDetailsProviderID(int providerId, long caseNum)
			throws CoException {
		Object[] result = null;
		PmProviderChildAssocCargo cargo = new PmProviderChildAssocCargo();
		cargo.setProviderId(providerId);
		cargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "findByProviderIDandCaseNumber", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}
	public EdIndvEligibilityCargo[] getchildIdNOE(long EdgTraceId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo cargo = new EdIndvEligibilityCargo();
		cargo.setEdgPartStatusCd("EC");
		cargo.setEdgTraceId(EdgTraceId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findChildIDNOE", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvEligibility",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (EdIndvEligibilityCargo[]) result;
	}
	public void generateNDLIN0104Trigger(long caseNum, long vendorId, String miscParms, String program) {}

	/** ND-60886 : LIHEAP - Remittance Advice Start**/
	public BiLiheapDetailCargo[] getBiVendor(long vendorId) throws CoException{
		BiLiheapDetailCargo[] result = null;
		BiLiheapDetailCargo biLiheapDetailCargo = new BiLiheapDetailCargo();
		biLiheapDetailCargo.setVendorId(vendorId);
		try
		{
			result =(BiLiheapDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiLiheapDetail", "findByVendorId", biLiheapDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiLiheapDetailCargo", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiLiheapDetailCargo", 16063); }
		return result;
	}
	public BiPayeeDetailCargo[] getBiPayeeAccountNum(long benefitRecLink) throws CoException{
		BiPayeeDetailCargo[] result = null;
		BiPayeeDetailCargo biPayeeDetailCargo = new BiPayeeDetailCargo();
		biPayeeDetailCargo.setBenefitRecLink(benefitRecLink);
		try
		{
			result =(BiPayeeDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiPayeeDetail", "findByBenefitRecLink", biPayeeDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiPayeeDetailCargo", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiPayeeDetailCargo", 16063); }
		return result;
	}
	public BiWarrantPaymentDetailCargo[] getBiVendorWarrant(long vendorId) throws CoException{
		BiWarrantPaymentDetailCargo[] result = null;
		BiWarrantPaymentDetailCargo biWarrantPaymentDetailCargo = new BiWarrantPaymentDetailCargo();
		biWarrantPaymentDetailCargo.setProviderId(vendorId);
		try
		{
			result =(BiWarrantPaymentDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiWarrantPaymentDetail", "findByVendorId", biWarrantPaymentDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiWarrantPaymentDetail", 16063); }
		return result;
	}
	/** ND-60886 : LIHEAP - Remittance Advice End**/
	public EdEligCdcBudgetCargo[] getfplLimit(long EdgTraceId, long caseNum)
			throws CoException {
		Object[] result = null;
		EdEligCdcBudgetCargo cargo = new EdEligCdcBudgetCargo();

		cargo.setEdgTraceId(EdgTraceId);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligCdcBudget", "getfplLimitNOE", cargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvEligibility",
					16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligCdcBudgetCargo[]) result;
	}

	/**
	 * getBiIssuanceTriggerProviderId
	 * @param providerId
	 * @return
	 * @throws CoException
	 */
	public BiIssuanceTriggerCargo[] getBiIssuanceTriggerProviderId(long providerId, Timestamp authorizationDate) throws CoException
	{
		BiIssuanceTriggerCargo[] result = null;
		BiIssuanceTriggerCargo biIssuanceTriggerCargo = new BiIssuanceTriggerCargo();

		biIssuanceTriggerCargo.setProviderId(providerId);
		biIssuanceTriggerCargo.setAuthorizationDt(authorizationDate);

		try{
			result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BiIssuanceTrigger", "findByProviderIdCurrMonth", biIssuanceTriggerCargo, null, conn);
		}
		catch (Exception e){
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getBiIssuanceTriggerProviderId", 16357);
		}
		if (result == null || result.length == 0) { 
			CoDebugger.debugInformation("No data in getBiIssuanceTriggerProviderId"); 
		}
		return result;
	}
	/**
	 * getVBiCcdmiPayeeCargoProviderId
	 * @param providerId
	 * @param edgnum
	 * @return
	 * @throws CoException
	 */
	public VBiCcdmiPayeeCargo[] getVBiCcdmiPayeeCargoProviderId(long providerId,Timestamp authorizationDate) throws CoException
	{
		VBiCcdmiPayeeCargo[] result = null;
		VBiCcdmiPayeeCargo vBiCcdmiPayeeCargo = new VBiCcdmiPayeeCargo();
		vBiCcdmiPayeeCargo.setT1ProviderId(providerId);
		vBiCcdmiPayeeCargo.setIssueDt(authorizationDate);
		vBiCcdmiPayeeCargo.setPayCareTakerSw(CoConstants.NO_CHAR);

		try
		{
			result =(VBiCcdmiPayeeCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"VBiCcdmiPayee", "findByCaseNumProviderIdPayment", vBiCcdmiPayeeCargo, null, conn);
		}
		catch (Exception e){
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CODAOServices--->getVBiCcdmiPayeeCargoProviderId", 16357);
		}
		if (result == null || result.length == 0) { 
			CoDebugger.debugInformation("No data in CODAOServices--->getVBiCcdmiPayeeCargoProviderId"); }
		return result;
	}
	/**
	 * getVBiWarrantDetailProviderId
	 * @param providerId
	 * @param edgnum
	 * @return
	 * @throws CoException
	 */
	public VBiWarrantDetailCargo[] getVBiWarrantDetailProviderId(long providerId,Timestamp authorizationDate) throws CoException
	{
		VBiWarrantDetailCargo[] result = null;
		VBiWarrantDetailCargo vBiWarrantDetailCargo = new VBiWarrantDetailCargo();
		vBiWarrantDetailCargo.setT3ProviderId(providerId);
		vBiWarrantDetailCargo.setT3IssueDt(authorizationDate);
		vBiWarrantDetailCargo.setPayCareTakerSw(CoConstants.NO_CHAR);

		try{
			result =(VBiWarrantDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"VBiWarrantDetail", "findByCaseNumCCAPProviderId", vBiWarrantDetailCargo, null, conn);
		}catch (Exception e){
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CODAOServices--->getVBiWarrantDetailProviderId", 16357);
		}
		if (result == null || result.length == 0) { 
			CoDebugger.debugInformation("No data in VBiWarrantDetail"); }
		return result;
	}

	//Addded for  CCAP- Remittance Advice Notice
	public Object[] findBiTriggerForNDCDN070(String programCd, Timestamp asOfDateTimestamp) throws CoException {
		Object[] result = null;

		BiIssuanceTriggerCargo cargo=new BiIssuanceTriggerCargo();
		cargo.setProgramCd(programCd);
		Object[] args = new Object[2];
		args[0] = programCd;
		args[1] = asOfDateTimestamp;
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", 
							"findByConditionForNDCDN070", null, args, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findBiTriggerForNDCDN070", 16751);
		}
		if (result == null || result.length == 0) {
			CoDebugger.debugInformation("No data in findBiTriggerForNDCDN070");
		}
		return result;
	}

	/**
	 * ND-60876
	 * @author karraj
	 * @param lCaseNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getDiversionInfoForCase(long lCaseNum) throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = lCaseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findDiversionInfoForCase",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	/**
	 * ND-60876
	 * @author karraj
	 * @param lCaseNum
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdEligibilityCargo[] findCaseNumbersForNonReciptOfMonthlyRpt(Timestamp date) throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findCaseNumbersForNonReciptOfMonthlyRpt",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}


	/** ND-60886 : LIHEAP - Vendor Payment Start**/
	public BiLiheapDetailCargo[] getBiVendorApproved(long vendorId,long edgTraceId,long caseNum) throws CoException{
		BiLiheapDetailCargo[] result = null;
		BiLiheapDetailCargo biLiheapDetailCargo = new BiLiheapDetailCargo();
		biLiheapDetailCargo.setVendorId(vendorId);
		biLiheapDetailCargo.setEdgTraceId(edgTraceId);
		biLiheapDetailCargo.setCaseNum(caseNum);
		try
		{
			result =(BiLiheapDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiLiheapDetail", "findByVendorIdSysdate", biLiheapDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiLiheapDetailCargo", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiLiheapDetailCargo", 16063); }
		return result;
	}
	public BiWarrantPaymentDetailCargo[] getBiVendorWarrantApproved(long vendorId,long edgTraceId,long caseNum) throws CoException{
		BiWarrantPaymentDetailCargo[] result = null;
		BiWarrantPaymentDetailCargo biWarrantPaymentDetailCargo = new BiWarrantPaymentDetailCargo();
		biWarrantPaymentDetailCargo.setProviderId(vendorId);
		biWarrantPaymentDetailCargo.setEdgTraceId(edgTraceId);
		biWarrantPaymentDetailCargo.setCaseNum(caseNum);
		try
		{
			result =(BiWarrantPaymentDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiWarrantPaymentDetail", "findByVendorIdSysdate", biWarrantPaymentDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetail", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiWarrantPaymentDetail", 16063); }
		return result;
	}
	public Object[] findBiTriggerForNDLI0086(long caseNumber, String programCd) throws CoException {
		Object[] result = null;
		Object[] args = new Object[2];
		args[0] = caseNumber;
		args[1] = programCd;

		BiIssuanceTriggerCargo cargo=new BiIssuanceTriggerCargo();
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", 
							"findByConditionForNDLI0086", cargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTrigger", 16751);
		}
		return result;
	}
	public Object[] findBiTriggerForNDLI0086(long caseNumber, String programCd, String asOfDate) throws CoException {
		Object[] result = null;
		Object[] args = new Object[3];
		args[0] = caseNumber;
		args[1] = programCd;
		args[2] = asOfDate;

		BiIssuanceTriggerCargo cargo=new BiIssuanceTriggerCargo();
		try {
			result = CoDAOFactory.select
					("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", 
							"findByConditionForNDLI0086", null, args, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTrigger", 16751);
		}
		return result;
	}
	public BiIssuanceTriggerCargo[] getBiIssuanceTriggerCaseLI(long caseNum,Timestamp asOfDate,long providerId) throws CoException, ParseException
	{
		BiIssuanceTriggerCargo[] result = null;
		BiIssuanceTriggerCargo cargo = new BiIssuanceTriggerCargo();
		cargo.setCaseNum(caseNum);
		cargo.setProviderId(providerId);
		cargo.setAuthorizationDt(asOfDate);
		
		try
		{
			result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "findByCaseNumCurrMonthLiheap", cargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTriggerDetail", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiIssuanceTriggerDetail", 16063); }
		return result;
	}

	public Object[] getPendingTriggersForBatchRequestLIProviders(String docIds,
			String minVal, String maxVal, String generateDate)
					throws CoException {
		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - started");

		Object[] objParams = new Object[5];
		VCoRequestCollection coRequestCol = new VCoRequestCollection();
		VCoRequestCargo[] coRequestCargos = null; 

		objParams[0] = coRequestCol.getCargo();
		objParams[1] = minVal;
		objParams[2] = maxVal;
		objParams[3] = docIds;
		objParams[4] = generateDate;

		try {
			if(docIds.equals(CoConstants.DOC_ID_NDLI0086)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvProvidersNDLI0086", objParams);
			} else if(docIds.equals(CoConstants.DOC_ID_NDLI8949)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvProvidersNDLI8949", objParams);
			} else if(docIds.equals(CoConstants.DOC_ID_NDLI0104)){
				coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvProvidersNDLI0104", objParams);
			}
		} catch (FrameworkException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		} catch (ApplicationException e) {
			throw new CoException(
					"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
							+ e);
		}		
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequest - timeTaken : " + (System.currentTimeMillis() - start));
		return coRequestCargos;
	}	
	/** ND-60886 : LIHEAP - Vendor Payment END**/

	/** for IT6 notice **/
	public DcCaseAddressesCargo[] getIndvDetails(long casenum) throws CoException {
		Object[] result = null;
		DcCaseAddressesCargo cargo = new DcCaseAddressesCargo();
		cargo.setCaseNum(casenum);
		Object[] params = new Object[1];
		params[0] = casenum;

		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"DcCaseAddresses", "findCurrentAddressesEffEndDateByCaseNum", cargo,
							params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseAddresses", 16908);
		}
		return result == null || result.length == 0 ? null
				: (DcCaseAddressesCargo[]) result;


	}

	public Object[] getOfficeAddr(long officeNum)
			throws CoException {
		Object[] result = null;
		MoOfficeAddressesCargo moOfficesAddrCargo = new MoOfficeAddressesCargo();
		moOfficesAddrCargo.setOfficeNum(officeNum);
		try {			
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOfficeAddresses", "findByOfficeNo",
					moOfficesAddrCargo, null, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for MO_OFFICES_ADDRESS", 16359);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException(
					"No data for case in MO_OFFICES_ADDRESS", 16011);
		}
		return result;
	}

	public EdEligibilityCargo[] getEdEligABAWD(long caseNumber,long indivId) throws  CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNumber);
		edEligibilityCargo.setIndivId(indivId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByIndvId",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->findByCaseFSInCO", 16313);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}

	public Object[] getTypeOfEmployment(long caseNum, long indvId)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo edIndvEligibilityCargo = new EdIndvEligibilityCargo();
		edIndvEligibilityCargo.setCaseNum(caseNum);
		edIndvEligibilityCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByCaseNumIndvIdForSnap",
					edIndvEligibilityCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - getEdIndvEligibility - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getEdIndvEligibility - exception - Select failed for ED_INDV_ELIGIBILITY",
					16342);
		}
		return result;
	}

	public Object[] getIndvDetailsForSnap(long individualID) throws CoException {
		Object[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		dcIndvCargo.setIndvId(individualID);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByIndvIdAndSnap", dcIndvCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception - individualID "+individualID+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV for indv ID "+individualID, 16319);
		}
		return result;
	}
	/**
	API to generate generateNDFSN0106Trigger
	@param caseNum
	@param indvId
	@param program
	 */
	public void generateNDFSN0106Trigger(long caseNum, long indvId , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDFSN0106Trigger(long,long,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Indv Id:"+indvId);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isSnapNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));
		/*Logic to check for onlpy SNAP notice*/
		if(null!=program && program.contains(CoConstants.SNAP_PROGRAM_CD)){ 
			isSnapNotice = true; 
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params ={ caseNum, CoConstants.EMPTY_STRING }	;
		MoEmployeesCargo[] moEmployeesCargos = null;
		try	{
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params); 
		}
		catch (Exception e)	{
			CoDebugger.debugException("CoDAOService.generateNDFSN0106Trigger-->Application exception", e); 
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0){ 
			officeNumber = moEmployeesCargos[0].getPriOfficeNum(); empID = moEmployeesCargos[0].getEmpId(); 
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setIndvId(indvId);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDFSN0106);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate(); 
		}
		else{ 
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && isSnapNotice)	{
				this.generateCorrespondenceRequest(correspondence); 
			}
			else if(this.checkActiveAutomaticTriggerExist(correspondence))	{
				CoDebugger.debugMessage("CoDAOService.generateNDFSN0106Trigger-->Skipping this trigger. Active trigger for today already exist "); 
			}
			else{
				CoDebugger.debugMessage("CoDAOService.generateNDFSN0106Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e)	{ 
			CoDebugger.debugException("CoDAOService.generateNDFSN0106Trigger-->Error while checking the existence of the request in the co_request_details", e); }
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDFSN0106Trigger(long,long,String)");
	}
	/**
	 * added by asputta
	 * @param caseNumber
	 * @param edgTraceIds
	 * @return
	 * @throws CoException
	 */
	public EdIndvRscDtlsCargo[] getExcessAssetsByEdgTrace(long caseNumber,String edgTraceIds) throws  CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = caseNumber;
		params[1] = edgTraceIds;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvRscDtls", "findExcessAssetsByCaseNumEdgTrace",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->findByCaseFSInCO", 16313);
		}
		return result == null ? null : (EdIndvRscDtlsCargo[]) result;
	}
	/** ND-60861 : LIHEAP - Request for Payment**/
	public PmLiheapVendorCargo[] getPmLiheapVendorInfo(long providerId) throws CoException{
		PmLiheapVendorCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmLiheapVendorCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "coFindByVendorId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmLiheapVendor", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}

	/**
	 * added by asputta
	 * @param caseNum
	 * @param programCd
	 * @param traceId
	 * @param edgNum
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getCanceledRecordsNCH001(long caseNum, String programCd) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] = programCd;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findCanceledRecordsNCH001", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->getCanceledRecordsNCH001", 16313);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
	}	
	/**
	 * ND-60936
	 * 
	 * @author shreyasingh
	 * @return EdEligibilityCargo
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getIndvInLTC(Timestamp asOfDate) throws CoException {
		Object[] result = null;
		EdEligibilityCargo cargo = new EdEligibilityCargo();
		cargo.setPaymentBegDt(asOfDate);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdEligibility","findIndvInLTC", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility",16908);
		}
		return result == null || result.length == 0 ? null: (EdEligibilityCargo[]) result;
	}
	/**
	 * ND-60936
	 * @author shreyasingh
	 * @param indvId long
	 * @return DcCaseIndividualCargo
	 * @throws CoException
	 */
	public Object[] getDcCaseIndvByIndvId(long indvId) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setIndvId(indvId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByIndvId",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcCaseIndividual - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcCaseIndividual - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		return result;
	}
	/**
	 * ND-60936
	 * @author shreyasingh
	 * @param caseNum long
	 * @return DcCaseIndividualCargo
	 * @throws CoException
	 */
	public Object[] getDcCaseIndvByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(caseNum);;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findByCaseNumber",
					dcCaseIndividualCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcCaseIndividual - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcCaseIndividual - exception - Select failed for DC_CASE_INDIVIDUAL", 16312);
		}
		return result;
	}
	/**
	 * The method to get data from DC_INDV_LIVING_ARNGMNTS based on INDV_ID who live in LTC
	 * ND-60936
	 * @author shreyasingh
	 * @param caseNum long
	 * @return DcCaseIndividualCargo
	 * @throws CoException
	 */
	public Object[] getLivingArrgtDetailsLTC(long indvId) throws CoException {
		Object[] result = null;
		DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
		try {
			dcIndvLivingArngmntsCargo.setIndvId(indvId);
			java.sql.Timestamp date = CoDateFactory.getTimestamp();
			dcIndvLivingArngmntsCargo.setEffBeginDt(date);
			dcIndvLivingArngmntsCargo.setEffEndDt(date);
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndvLivingArngmnts", "findIndvIdinLTC",
					dcIndvLivingArngmntsCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
					16745);
		}
		return result;
	}

	/**
	 * @author chabansal
	 * Request for Payment for liheap
	 */

	public PmLiheapPaymentCargo[] getPmLiheapPaymentInfo(long vendorId, String asOfDate) throws CoException, ParseException
	{
		PmLiheapPaymentCargo[] result = null;
		PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
		pmLiheapPaymentCargo.setVendorId(vendorId);
		pmLiheapPaymentCargo.setId(asOfDate);
		try
		{
			result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "coFindByVendorId", pmLiheapPaymentCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}
	public PmPaymentFileCargo[] getPmPaymentFileInfo(long providerId) throws CoException{
		PmPaymentFileCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(PmPaymentFileCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmPaymentFile", "coFindByVendorId", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmPaymentFile", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in PmPaymentFile", 16063); }
		return result;
	}
	public DcHeadOfHouseholdCargo[] getHoh(long caseNum) throws CoException{
		DcHeadOfHouseholdCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =caseNum;
		try
		{
			result =(DcHeadOfHouseholdCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcHeadOfHousehold", "findByCaseNum", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcHeadOfHousehold", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}

	/**
	 * Method to update History_sw to Y for NDMAELN13
	 * CODE
	 * 
	 * @param coReqSeq
	 * 
	 */
	public boolean updateForNDMAELN13Pending(long coReqSeq){
		boolean success = false;
		try {
			openConnection();
			CoRequestHistoryCargo[]  coRequestHistoryCargos = (CoRequestHistoryCargo[]) getCoRequestHistoryByCoReqSeq(coReqSeq);
			if(coRequestHistoryCargos != null && coRequestHistoryCargos.length>0){
				CoRequestHistoryCargo coRequestHistoryCargo = coRequestHistoryCargos[0];
				if(coRequestHistoryCargo != null){
					coRequestHistoryCargo.setHistorySw(CoConstants.CHAR_Y);
					coRequestHistoryCargo.setPendingTrigSw(CoConstants.CHAR_N);
					coRequestHistoryCargo.setDraftSw(CoConstants.CHAR_N);
					coRequestHistoryCargo.setOrigPrintDt(CoDateFactory.getTimestamp());

					String casenum =  coRequestHistoryCargo.getCaseNum().toString();
					String userid = coRequestHistoryCargo.getUpdateUserId();
					CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
					coRequestHistoryCollection.setEJBSupported(false);
					coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
					success = updateForLocalPrint(coReqSeq, success, casenum, userid, coRequestHistoryCollection);
				}
			}

			if(success){
				CoRequestHistoryDetailCargo[]  coRequestHistoryDetailCargos = (CoRequestHistoryDetailCargo[]) getCoRequestHistoryDetailByCoReqSeq(coReqSeq);
				if(coRequestHistoryDetailCargos != null && coRequestHistoryDetailCargos.length>0){
					CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = coRequestHistoryDetailCargos[0];
					if(coRequestHistoryDetailCargo != null){
						openConnection();
						coRequestHistoryDetailCargo.setPrintDt(CoDateFactory.getTimestamp());
						coRequestHistoryDetailCargo.setPrintMode(CoConstants.CHAR_O);

						CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
						coRequestHistoryDetailCollection.setEJBSupported(false);
						coRequestHistoryDetailCollection.setCargo(coRequestHistoryDetailCargo);
						success = updateHistoryDetailCollection(coReqSeq, success, coRequestHistoryDetailCollection);
					}
				}
			}

			if(success){
				CoRequestRecipientsCollection coRequestRecipientsCollection = new CoRequestRecipientsCollection();
				coRequestRecipientsCollection.setEJBSupported(false);
				CoRequestRecipientsCargo[] coRequestRecipientsCargos = null;
				coRequestRecipientsCargos = getRequestRecepientByCoReqSeq(coReqSeq, coRequestRecipientsCollection);
				if (coRequestRecipientsCargos != null && coRequestRecipientsCargos.length>0) {
					openConnection();
					for(CoRequestRecipientsCargo coRequestRecipientsCargo : coRequestRecipientsCargos){
						if(coRequestRecipientsCargo != null){
							coRequestRecipientsCargo.setPrintSw(CoConstants.CHAR_Y);
							coRequestRecipientsCargo.setPrintType(CoConstants.CHAR_O);
							coRequestRecipientsCollection.setCargo(coRequestRecipientsCargo);
							success = updatecoRequestRecipients(coReqSeq, success, coRequestRecipientsCollection);
						}
					}
				}
			}			
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - updateForNDMAELN13Pending - exception - "+e.getMessage(), e);
			success = false;
		} finally {
			closeConnection();
		}
		return success;		
	}


	public Object[] getMembersDetails(long casenum,String type) throws CoException {
		Object[] result = null;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		Object[] params = new Object[2];
		params[0] = casenum;
		params[1] = type;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcIndv", "findByCaseNumAndProgram", dcIndvCargo, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getDcIndividual - exception message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV", 16319);
		}
		return result;
	}

	/**
	API to generate generateNDFSN0055Trigger
	@param caseNum
	@param misc params
	@param program
	 */
	public void generateNDFSN0055Trigger(long caseNum, String miscparams , String program) {
		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDFSN0055Trigger(long,String,String)");
		CoDebugger.debugMessage("Case Num:"+caseNum);
		CoDebugger.debugMessage("Misc Parms:"+miscparams);
		CoDebugger.debugMessage("Programs:"+program);
		long officeNumber = 0;
		long empID = 0;
		boolean isSnapNotice = false;
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(this.checkEmptyString(program));
		/*Logic to check for onlpy SNAP notice*/
		if(null!=program && program.contains(CoConstants.SNAP_PROGRAM_CD)){ 
			isSnapNotice = true; 
		}
		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
		Object[] params ={ caseNum, CoConstants.EMPTY_STRING }	;
		MoEmployeesCargo[] moEmployeesCargos = null;
		try	{
			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params); 
		}
		catch (Exception e)	{
			CoDebugger.debugException("CoDAOService.generateNDFSN0055Trigger-->Application exception", e); 
		}
		if (moEmployeesCargos != null && moEmployeesCargos.length > 0){ 
			officeNumber = moEmployeesCargos[0].getPriOfficeNum(); 
			empID = moEmployeesCargos[0].getEmpId(); 
		}
		correspondence.setOfficeNumber(officeNumber);
		correspondence.setCaseAppFlag(CoConstants.CASE);
		correspondence.setCaseAppNumber(String.valueOf(caseNum));
		correspondence.setMiscParameters(miscparams);
		correspondence.setEmpId(empID);
		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
		correspondence.setDocId(CoConstants.DOC_NDFSN0055);
		java.util.Date dt = null;
		if (correspondence.getGenerateDate() == null) {
			dt = CoDateFactory.getUtilDate(); 
		}
		else{ 
			dt = correspondence.getGenerateDate();
		}
		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
		try {
			if (!this.checkActiveAutomaticTriggerExist(correspondence) && isSnapNotice)	{
				this.generateCorrespondenceRequest(correspondence); 
			}
			else if(this.checkActiveAutomaticTriggerExist(correspondence))	{
				CoDebugger.debugMessage("CoDAOService.generateNDFSN0055Trigger-->Skipping this trigger. Active trigger for today already exist "); 
			}
			else{
				CoDebugger.debugMessage("CoDAOService.generateNDFSN0055Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e)	{ 
			CoDebugger.debugException("CoDAOService.generateNDFSN0055Trigger-->Error while checking the existence of the request in the co_request_details", e); }
		CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDFSN0055Trigger(long,long,String)");
	}
	public Object[] getStateMaxRate(String age,String providertype,String levelofcare,String effectiveDt) throws CoException {
		Object[] result = null;
		CcapStateMaxRateCargo ccapStateMaxRateCargo = new CcapStateMaxRateCargo();
		ccapStateMaxRateCargo.setProviderType(providertype);
		ccapStateMaxRateCargo.setAgeGroup(age);
		ccapStateMaxRateCargo.setLevelOfCare(levelofcare);
		ccapStateMaxRateCargo.setServiceMonth(effectiveDt);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CcapStateMaxRate", "findByProviderTypeAgeGroup", ccapStateMaxRateCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getStateMaxRate - exception  "+providertype+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getStateMaxRate - exception - Select failed for CCAP_STATE_MAX_RATE", 16319);
		}
		return result;
	}
	
	
	public Object[] getOLDStateMaxRate(String age,String providertype,String levelofcare,String effectiveDt) throws CoException {
		Object[] result = null;
		CcapStateMaxRateCargo ccapStateMaxRateCargo = new CcapStateMaxRateCargo();
		ccapStateMaxRateCargo.setProviderType(providertype);
		ccapStateMaxRateCargo.setAgeGroup(age);
		ccapStateMaxRateCargo.setLevelOfCare(levelofcare);
		ccapStateMaxRateCargo.setServiceMonth(effectiveDt);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CcapStateMaxRate", "findByLOCAgeGrpProvType", ccapStateMaxRateCargo, null,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getStateMaxRate - exception  "+providertype+" detailed message"+e.getMessage(), e);
			throw new CoException("CoDAOServices - getStateMaxRate - exception - Select failed for CCAP_STATE_MAX_RATE", 16319);
		}
		return result;
	}
	

	public Object[] getLevelofCare(long indvid, long caseNum)
			throws CoException {
		Object[] result = null;
		EdIndvEligibilityCargo cargo = new EdIndvEligibilityCargo();
		cargo.setIndvId(indvid);
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findByIndividualsPartStatusCd", cargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("CoDAOServices - getLevelofCare - exception - Select failed for ED_INDV_ELIGIBILITY", 16319);
		
		}
		return result;
	}
	
	
	public Object[] getLevelofCarePartstatus(long acaseNum, long aindvId,Timestamp paymentEndDt) throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setPaymentEndDt(paymentEndDt);
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findByIndividualsWithoutPartStatusCd",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception in getLevelofCarePartstatus", 16431);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	
	public Object[] getLevelofCarePartstatusASC(long acaseNum, long aindvId,Timestamp paymentEndDt) throws CoException {
		Object[] result = null;
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		cargo.setT1CaseNum(acaseNum);
		cargo.setIndvId(aindvId);
		cargo.setPaymentEndDt(paymentEndDt);
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "findByIndividualsWithoutPartStatusCdASC",
					cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception in getLevelofCarePartstatus", 16431);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	/**
  	 * @author akankshagupta
  	 * @param program LIHEAP
  	 * @return
  	 */
  	private String checkEmptyStringNDLIFCN91(String program){
  		if(null!=program && !(CoConstants.EMPTY_STRING.equals(program) || program.equals(CoConstants.SELECTED_VAL_LIHEAP))){
  			return program;
  		}else{
  			return CoConstants.LIHEAP_PROGRAM;
  		}
  	}
  	
	public boolean checkActiveAutomaticTriggerExistCaseVendor(COCorrespondence aCoObj)throws CoException {
	Object[] result = null;
	CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
	cargo.setDocId(aCoObj.getDocId());
	cargo.setProviderId(aCoObj.getProviderId());
	cargo.setCaseNum(Long.parseLong(aCoObj.getCaseAppNumber()));

	CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNumVendorId", cargo, null,
				conn);
	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
		throw new CoException("Select failed for CoRequest", 16099);
	}
	if (result != null && result.length > 0) { // then check in Detail
		CoDebugger.debugInformation("CO Request Exist");
		return true;
	} else {
		CoDebugger.debugInformation("CO Request Does not  Exist");
		return false;
	}		
}
  	
  	/**
	 * API to generate generateNDLIFCN91Trigger
	 * @author akankshagupta
	 * @param caseNum
	 * @param indvId
	 * @param program
	 * @param vendorId
	 */
	public void generateNDLIFCN91Trigger(long caseNum, long indvId , String program, long vendorId,String requestUserId) {
  		CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDLIFCN91Trigger(long,long,long)");
  		CoDebugger.debugMessage("Case Num:"+caseNum);
  		CoDebugger.debugMessage("Indv Id:"+indvId);
  		CoDebugger.debugMessage("Programs:"+program);
  		CoDebugger.debugMessage("VendorId:"+vendorId);
  		long officeNumber = 0;
      	long empID = 0;

      	COCorrespondence correspondence = new COCorrespondence();
      	correspondence.setAssistanceProgramCode(this.checkEmptyStringNDLIFCN91(program));

  		MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
  		Object[] params = { caseNum, CoConstants.EMPTY_STRING };
  		MoEmployeesCargo[] moEmployeesCargos = null;
  		try {
  			moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
  		} catch (Exception e) {
  			CoDebugger.debugException("CoDAOService.generateNDLIFCN91Trigger-->Application exception", e);
  		}
  		if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
  			officeNumber = moEmployeesCargos[0].getPriOfficeNum();
  			empID = moEmployeesCargos[0].getEmpId();
  		}
  		correspondence.setOfficeNumber(officeNumber);
  		correspondence.setCaseAppFlag(CoConstants.CASE);
  		correspondence.setCaseAppNumber(String.valueOf(caseNum));
  		correspondence.setIndvId(indvId);
  		correspondence.setEmpId(empID);
  		correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
  		correspondence.setDocId(CoConstants.DOC_ID_NDLIFCN91);
  		correspondence.setProviderId(vendorId);
  		correspondence.setRequestUserId(requestUserId);
  		java.util.Date dt = null;
  		if (correspondence.getGenerateDate() == null) {
  			dt = CoDateFactory.getUtilDate();
  		} else {
  			dt = correspondence.getGenerateDate();
  		}
  		correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
  		
  		try {
  			if (!this.checkActiveAutomaticTriggerExistCaseVendor(correspondence)) {
  				this.generateCorrespondenceRequest(correspondence);
  			}else if(this.checkActiveAutomaticTriggerExistCaseVendor(correspondence)){
  				CoDebugger.debugMessage("CoDAOService.generateNDLIFCN91Trigger-->Skipping this trigger. Active trigger for today already exist ");
  			}
  			
  		} catch (CoException e) {
  			CoDebugger.debugException("CoDAOService.generateNDLIFCN91Trigger-->Error while checking the existence of the request in the co_request_details", e);
  		}
  		CoDebugger.debugMessage("EXITING:: CoDAOservices.generateNDLIFCN91Trigger(long,long,String,long)");
  	}
	
	
	//START:Furnace Chimney Notice
			public PmVendorCaseAssocCargo[] getForFurnaceChimneyCo(long caseNum,String date,long vendorId) throws CoException{
				 CoDebugger.debugInformation("START: CODAOServices -> getForFurnaceChimneyCo ");
				PmVendorCaseAssocCargo[] result = null;
				Object [] params= new Object[3];
				params[0] =caseNum;
				params[1]=date;
				params[2]=vendorId;
		                  try
		                  {
		                                 result =(PmVendorCaseAssocCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findForFurnaceChimneyCo", null, params, conn);
		                  }
		                  catch (Exception e)
		                  {
		                                 CoDebugger.debugException(e.getMessage(), e);
		                                 throw new CoException("CODAOSERVICES --> Select failed for PmVendorCaseAssocDAO --> findForFurnaceChimneyCo --", 16357);
		                  }	           
		                  CoDebugger.debugInformation("EXIT: CODAOServices -> getForFurnaceChimneyCo ");
		                  return result;
			}
			
			public DcCaseAddressesCargo[] getAddrForCoFurnaceChmny(long caseNum,String date)
					throws CoException {
				 CoDebugger.debugInformation("START: CODAOServices -> getAddrForCoFurnaceChmny ");
				DcCaseAddressesCargo[] result = null;				
				Object[] args = new Object[2];
				args[0] = caseNum;		
				args[1]= date;
				DcCaseAddressesCargo cargo=new DcCaseAddressesCargo();
				try {
					result = (DcCaseAddressesCargo[]) CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"DcCaseAddresses", "findForCoFurnaceChmny",cargo,args,conn);		
				
				
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for DcCaseAddresses---->findForCoFurnaceChmny", 16765);
				}
				
				 CoDebugger.debugInformation("EXIT: CODAOServices -> getAddrForCoFurnaceChmny ");
				return result;
			}
			
			public DcPhnXrefCargo[] getFromPHXref(long caseNum)
					throws CoException {
				 CoDebugger.debugInformation("START: CODAOServices -> getFromPHXref ");
				 DcPhnXrefCargo[] result = null;			
			
				DcPhnXrefCargo cargo=new DcPhnXrefCargo();
				cargo.setPhnSrcId(caseNum);
				try {
					result = (DcPhnXrefCargo[]) CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"DcPhnXref", "findByPhnSrcId",cargo,null,conn);		
				
				
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for DcPhnXrefDAO---->findByPhnSrcId", 16765);
				}
				
				 CoDebugger.debugInformation("EXIT: CODAOServices -> getFromPHXref ");
				return result;
			}
			
			
			public DcPhnDetailsCargo[] getByPhnSeqNum(String phnSeq)
					throws CoException {
				 CoDebugger.debugInformation("START: CODAOServices -> getByPhnSeqNum ");
				 DcPhnDetailsCargo[] result = null;				
				Object[] args = new Object[1];
				args[0] = phnSeq;	
			
				DcPhnDetailsCargo cargo=new DcPhnDetailsCargo();
				try {
					result = (DcPhnDetailsCargo[]) CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"DcPhnDetails", "findByPhnSeqNum",cargo,args,conn);		
				
				
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for DcPhnDetailsDAO---->findByPhnSeqNum", 16765);
				}
				
				 CoDebugger.debugInformation("EXIT: CODAOServices -> getByPhnSeqNum ");
				return result;
			}
			
			
			/**
			 * ND-60876
			 * @author karraj
			 * @param lCaseNum
			 * @return
			 * @throws NoDataFoundException
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findSNAPExtendABAWDCaseDueForClosure(long caseNum, Timestamp date) throws CoException {
				Object[] result = null;
				Object[] params = new Object[2];
				params[0] = caseNum;
				params[1] = date;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findSNAPExtendABAWDCaseDueForClosure",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16312);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * ND-60876
			 * @author karraj
			 * @param lCaseNum
			 * @return
			 * @throws NoDataFoundException
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findDiversionCaseDueForClosure(long caseNum, Timestamp date) throws CoException {
				Object[] result = null;
				Object[] params = new Object[2];
				params[0] = caseNum;
				params[1] = date;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findDiversionCaseDueForClosure",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16312);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * ND-60876
			 * @author karraj
			 * @param lCaseNum
			 * @return
			 * @throws NoDataFoundException
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findTANFCaseDueForClosure(long caseNum, Timestamp date) throws CoException {
				Object[] result = null;
				Object[] params = new Object[2];
				params[0] = caseNum;
				params[1] = date;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findTANFCaseDueForClosure",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16312);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * ND-60876
			 * @author karraj
			 * @param lCaseNum
			 * @return
			 * @throws NoDataFoundException
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findLIHEAPCaseDueForClosure(long caseNum, Timestamp date) throws CoException {
				Object[] result = null;
				Object[] params = new Object[2];
				params[0] = caseNum;
				params[1] = date;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findLIHEAPCaseDueForClosure",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16312);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * @author karraj
			 * ND-60876
			 * @param caseNumber
			 * @param edNegActionDate
			 * @return
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findEdEligibilityForNDHCREN17CaseNotAuth(long caseNumber, String edNegActionDate) throws CoException {
				Object[] result = null;
				Object[] args = new Object[2];
				args[0] = caseNumber;
				args[1] = edNegActionDate;

				EdEligibilityCargo cargo = new EdEligibilityCargo();
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByConditionForNDHCREN17CaseNotAuth", cargo, args, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16751);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * @author karraj
			 * ND-60876
			 * @param caseNumber
			 * @param edNegActionDate
			 * @return
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findActiveCWDCases(long caseNumber, Timestamp edNegActionDate) throws CoException {
				Object[] result = null;
				Object[] args = new Object[2];
				args[0] = caseNumber;
				args[1] = edNegActionDate;

				EdEligibilityCargo cargo = new EdEligibilityCargo();
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findActiveCWDCases", cargo, args, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16751);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * @author karraj
			 * ND-60876
			 * @param caseNumber
			 * @param edNegActionDate
			 * @return
			 * @throws CoException
			 */
			public EdEligibilityCargo[] findActiveWWDCases(long caseNumber, Timestamp edNegActionDate) throws CoException {
				Object[] result = null;
				Object[] args = new Object[2];
				args[0] = caseNumber;
				args[1] = edNegActionDate;

				EdEligibilityCargo cargo = new EdEligibilityCargo();
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findActiveWWDCases", cargo, args, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligibility", 16751);
				}
				return result == null ? null : (EdEligibilityCargo[]) result;
			}
			
			/**
			 * ND-60876
			 * @author karraj
			 * @param indvId
			 * @param caseNum
			 * @param date
			 * @return
			 * @throws CoException
			 */
			public BvMaPremiumPymtDtlsCargo[] findIfPremiumPaidByMonth(long indvId, long caseNum, Timestamp date) throws CoException {
				Object[] result = null;
				Object[] args = new Object[3];
				args[0] = indvId;
				args[1] = caseNum;
				args[2] = date;

				BvMaPremiumDtlsCargo cargo = new BvMaPremiumDtlsCargo();
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvMaPremiumPymtDtls", "findPaymentsByIndvIdCaseBenMonth", cargo, args, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for BvMaPremiumPymtDtls", 16751);
				}
				return result == null ? null : (BvMaPremiumPymtDtlsCargo[]) result;
			}
		

		public PmVendorCaseAssocCargo[] findCaseNumberByProviderId(String providerId, String caseNo) throws CoException {
				Object[] result = null;
				PmVendorCaseAssocCargo assocCargo = new PmVendorCaseAssocCargo();
				assocCargo.setAssociationStatus(providerId);
				assocCargo.setCaseNum(Long.valueOf(caseNo));
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findCaseNumberByProviderId", assocCargo, null, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for PmVendorCaseAssoc > NDNLIREHH90Assembler", 16751);
				}
				return result == null ? null : (PmVendorCaseAssocCargo[]) result;
			}

		public PmLiheapVendorCargo findNameByProviderId(String providerId) throws CoException {
			Object result = null;
			PmLiheapVendorCargo assocCargo = new PmLiheapVendorCargo();
			assocCargo.setSpacesVendorId(Integer.getInteger(providerId));
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findCaseNumberByProviderId", assocCargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmLiheapVendorCargo > NDNLIREHH90Assembler", 16751);
			}
			return result == null ? null : (PmLiheapVendorCargo) result;
		}
		public CoRequestHistoryCargo[] findBySeqNumCOVHC(long[] coReqSeq) throws CoException {
			  Object[] result = null;
	        try {
	              result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","CoRequestHistory", "findBySeqNumCOVPC", coReqSeq, null,conn);
	        } catch (Exception e) {
	              CoDebugger.debugException(e.getMessage(), e);
	              throw new CoException("Error in getting data CoRequestHistory", 16001);
	        }
	        return result == null || result.length == 0 ? null : (CoRequestHistoryCargo[]) result;
		}

		public EdEligibilityCargo[] findForCOVHC(long caseNum,Timestamp asOfDate) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setCaseNum(caseNum);
	  	    edEligibilityCargo.setCreateDt(asOfDate);
	                  try
	                  {
	                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforCOVHC", edEligibilityCargo, null, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findForCOVHC", 16357);
	                  }
	      	        return result == null || result.length == 0 ? null : result;

		}
		
		public EdEligibilityCargo[] findForDetailCOVHC(String caseNum) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;			
			Object[] objParams = new Object[1];
			objParams[0] = caseNum;
	      try
	      {
	         result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforDetailCOVHC", null, objParams, conn);
	      }

	       catch (Exception e){
	           CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findForCOVHC", 16357);
	        }
	      	 return result == null || result.length == 0 ? null : result;

		}
		
		public DcChildAbsntDetailsCargo[] findChildAbsntByIndvID(String indvId) throws ParseException, CoException{
			DcChildAbsntDetailsCargo[] result = null;			
			Object[] objParams = new Object[1];
			objParams[0] = indvId;
	      try
	      {
	         result =(DcChildAbsntDetailsCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildAbsntDetails", "findChildAbsntByIndvID", null, objParams, conn);
	      }

	       catch (Exception e){
	           CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findForCOVHC", 16357);
	        }
	      	 return result == null || result.length == 0 ? null : result;

		}
		
		public EdEligibilityCargo[] findEligibilityByIndvIDTOA(String indvId) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;			
			Object[] objParams = new Object[1];
			objParams[0] = indvId;
	      try
	      {
	         result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByIndvIDTOA", null, objParams, conn);
	      }

	       catch (Exception e){
	           CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findByIndvIDTOA", 16357);
	        }
	      	 return result == null || result.length == 0 ? null : result;

		}
		
		public DcDemographicsCargo[] findByIndvHealthservice(String indvId) throws ParseException, CoException{
			DcDemographicsCargo[] result = null;			
			Object[] objParams = new Object[1];
			objParams[0] = indvId;
	      try
	      {
	         result =(DcDemographicsCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcDemographics", "findByIndvHealthservice", null, objParams, conn);
	      }

	       catch (Exception e){
	           CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findByIndvHealthservice", 16357);
	        }
	      	 return result == null || result.length == 0 ? null : result;

		}
		
		public EdEligibilityCargo[] findForReqPayment(long caseNum,String asOfDate) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			  
			Object[] objParams = new Object[2];
			objParams[0] = caseNum;
			objParams[1] = asOfDate;
			
	                  try
	                  {
	                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforReqPayment", null, objParams, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findForReqPayment", 16357);
	                  }
	                  return result == null || result.length == 0 ? null: result;
		}
		
		public EdEligibilityCargo[] findByCaseNumMAForEligibility(long caseNum) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			  
			Object[] objParams = new Object[1];
			objParams[0] = caseNum;
			
	                  try
	                  {
	                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findByCaseNumMAForEligibility", null, objParams, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findByCaseNumMAForEligibility", 16357);
	                  }
	                  return result == null || result.length == 0 ? null: result;
		}
		
		public EdEligibilityCargo[] findForReqPaymentInSummerFill(long caseNum,String asOfDate) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			Object[] objParams = new Object[2];
			objParams[0] = caseNum;
			objParams[1] = asOfDate;
          try
          {
             result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforReqPaymentInSummerFill", null, objParams, conn);
          }
          catch (Exception e){
	         CoDebugger.debugException(e.getMessage(), e);
	         throw new CoException("Select failed for findForReqPaymentInSummerFill", 16357);
          }
          
      	return result == null || result.length == 0 ? null: result;
		}
		
		public EdEligibilityCargo[] findEligForReqPaymentInSummerFill(long caseNum,String asOfDate) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			Object[] objParams = new Object[2];
			objParams[0] = caseNum;
			objParams[1] = asOfDate;
          try
          {
             result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindEligforReqPaymentInSummerFill", null, objParams, conn);
          }
          catch (Exception e){
	         CoDebugger.debugException(e.getMessage(), e);
	         throw new CoException("Select failed for findEligForReqPaymentInSummerFill", 16357);
          }
          
      	return result == null || result.length == 0 ? null: result;
		}
		
		public EdEligibilityCargo[] findRecForPaymentEndDt(long caseNum) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			Object[] objParams = new Object[1];
			objParams[0] = caseNum;
          try
          {
             result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforReqPaymentEndDt", null, objParams, conn);
          }
          catch (Exception e){
	         CoDebugger.debugException(e.getMessage(), e);
	         throw new CoException("Select failed for findRecForPaymentEndDt", 16357);
          }
          
      	return result == null || result.length == 0 ? null: result;
		}
		
		public PmLiheapPaymentCargo[] findReqForPayment(String asOfDate) throws ParseException, CoException{
			PmLiheapPaymentCargo[] result = null;
			PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
			pmLiheapPaymentCargo.setPaymentRequestStatus(asOfDate);
	                  try
	                  {
	                                 result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "coReqForPayment", pmLiheapPaymentCargo, null, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findReqForPayment", 16357);
	                  }
	                
	                  return result;
		}
		/**
	  	 * getCasesForClosedLI
	  	 * @param caseNum
	  	 * @param progCd
	  	 * @return
	  	 * @throws CoException
	  	 */
		public Object[] getCasesForClosedLI(Timestamp benefitStartdt, Timestamp benefitEndDt, String progCd) throws CoException {
			Object[] result = null;
			
			DcCaseProgramCargo cargo= new DcCaseProgramCargo();
			cargo.setEffBeginDt(benefitStartdt);
			cargo.setEffEndDt(benefitEndDt);
			cargo.setProgCd(progCd);
			cargo.setProgCd(CoConstants.PROGRAM_LI);
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCaseProgram", "findCasesForClosedLI",cargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException("CoDAOServices - getCasesForClosedLI - exception :"+e.getMessage(), e);
				throw new CoException("CoDAOServices - getCasesForClosedLI - exception - Select failed for DC_CASE_PROGRAM :", 16319);
			}
			return result;
		}
		
		/**
	  	 * getVBiWarrantDetailProviderId - 
	  	 * Method to fetch Authorized payments for Closed Cases in VBiWarrantDetail
	  	 * @param providerId
	  	 * @param edgnum
	  	 * @return
	  	 * @throws CoException
	  	 */
	  	public VBiWarrantDetailCargo[] getVBiWarrantDetailForLiheapCase(String caseNums) throws CoException
	    {
	  		VBiWarrantDetailCargo[] result = null;
	  		Object[] params = new Object[2];
			params[0] = CoConstants.PROGRAM_LI;
			params[1] = caseNums;
			
	  		try{
		        result =(VBiWarrantDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
		        		"VBiWarrantDetail", "findVBiWarrantDetailForLiheapCase", null, params, conn);
		      }catch (Exception e){
		         CoDebugger.debugException(e.getMessage(), e);
		         throw new CoException("Select failed for CODAOServices--->findVBiWarrantDetailForLiheapCase", 16357);
		      }
		      if (result == null || result.length == 0) { 
		    	  CoDebugger.debugInformation("CODAOServices.findVBiWarrantDetailForLiheapCase ---> No data in VBiWarrantDetail");
		    	  }
		      return result;
	    }
	  	
	  	/**
	  	 * getVBiLiheapPayeeDetailByCaseNum -
	  	 * Method to fetch Authorized payments for Closed Cases in VBiLiheapPayee
	  	 * @param providerId
	  	 * @param edgnum
	  	 * @return
	  	 * @throws CoException
	  	 */
	  	public VBiLiheapPayeeCargo[] getVBiLiheapPayeeDetailByCaseNum(String caseNums) throws CoException
	    {
	  		VBiLiheapPayeeCargo[] result = null;
	  		Object[] params = new Object[2];
			params[0] = CoConstants.PROGRAM_LI;
			params[1] = caseNums;
		      
	  		try{
		        result =(VBiLiheapPayeeCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
		        		"VBiLiheapPayee", "findVBiLiheapPayeeDetailByCaseNum", null, params, conn);
		      }catch (Exception e){
		         CoDebugger.debugException(e.getMessage(), e);
		         throw new CoException("Select failed for CODAOServices--->getVBiLiheapPayeeDetailByCaseNum", 16357);
		      }
		      if (result == null || result.length == 0) { 
		    	  CoDebugger.debugInformation("CODAOServices.getVBiLiheapPayeeDetailByCaseNum ---> No data in VBiLiheapPayee"); 
		    	  }
		      return result;
	    }
	  	
	  	/**
		 * added by asputta
		 * @param caseNum
		 * @param edgTraceIds
		 * @return
		 * @throws CoException
		 */
	  	public EdIndvIncDtlsCargo[] getIncomeDetailsNCH001(long caseNum, String edgTraceIds) throws CoException {
			Object[] args = new Object[2];
			Object[] result = null;
			args[0]=edgTraceIds;
			args[1] = caseNum;
			try {
				result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvIncDtls", "findByCaseEdgTraceNCH001", null,
					args, conn);
					} catch (Exception e) {
			 			CoDebugger.debugException(e.getMessage(), e);
			 			throw new CoException("Select failed for EdIndvIncDtls--->findByCaseEdgTraceNCH001", 16313);
					}
					return result == null ? null : (EdIndvIncDtlsCargo[]) result;
				}		
		
		
		/**
		 * Method to get Wc Sanction By IndvId.
		 * 
		 * @param indvId
		 *            long IndvId
		 * @return WcSanctionCargo[] Resultset from the DAO
		 * @throws CoException
		 * 
		 */
		public WcSanctionCargo[] findSanctionStatusByIndvId(long indvId) throws CoException{
			WcSanctionCargo wcSanctionCargo= new WcSanctionCargo();
			wcSanctionCargo.setIndvId(indvId);

			Object[] result = null;

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom", "WcSanction",
						"findByIndvId", wcSanctionCargo, null, conn);

			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for findSanctionStatusByIndvId", 16908);
			}
			return result == null || result.length == 0 ? null
					: (WcSanctionCargo[]) result;
		}
		
		
		/**
		 * Method to get Ed Eligibility By CaseProgram and Program Status.
		 * 
		 * @param caseNum
		 *            long Case Number
		 * @param edgNums
		 *            programCd
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 * 
		 */
		public Object[] getEdEligibilityByCaseProgramCdStatus(long caseNum,
				String programCd) throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo=new EdEligibilityCargo();
			edEligibilityCargo.setCaseNum(caseNum);
			edEligibilityCargo.setProgramCd(programCd);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findByCaseProgramCDStatus", edEligibilityCargo,
						null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligibility ", 16098);
			}
			return result;
		}
		
		
		/**
		 * Method to get Ed Dc Indv Disq Penalties  By CaseNum and indvId.
		 * 
		 * @param caseNum
		 *            long Case Number
		 * @param indvId
		 *            long indvId
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 * 
		 */
		public EdDcIndvDisqPenaltiesCargo[] getPenaltyRecordsIndvIdTANF(long caseNum, long indvId, long nonCoopSeqNum) throws NoDataFoundException, CoException {
			Object[] result = null;
			EdDcIndvDisqPenaltiesCargo cargo= new EdDcIndvDisqPenaltiesCargo();
			cargo.setIndvId(indvId);
			cargo.setCaseNum(caseNum);
			cargo.setNonCoopSeqNum(nonCoopSeqNum);

			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdDcIndvDisqPenalties", "findByIndvIdForET",
						cargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdDcIndvDisqPenaltiesCargo-->>getPenaltyRecordsIndvIdTANF", 16312);
			}
			return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
		}
		
		
		/**
		 * Method to get Ed Indv Eligibility By CaseNum and indvId.
		 * 
		 * @param caseNum
		 *            long Case Number
		 * @param indvId
		 *            long indvId
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 * 
		 */
		public EdIndvEligibilityCargo[] findByIndvIdCaseNumPotentialGranteeSwitch(long indvId,long caseNum) throws CoException{
			EdIndvEligibilityCargo edIndvEligibilityCargo= new EdIndvEligibilityCargo();
			edIndvEligibilityCargo.setIndvId(indvId);
			edIndvEligibilityCargo.setCaseNum(caseNum);
			Object[] result = null;

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom", "EdIndvEligibility",
						"findByIndvIdCaseNumPotentialGranteeSwitch", edIndvEligibilityCargo, null, conn);

			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for findByIndvIdCaseNumPotentialGranteeSwitch", 16908);
			}
			return result == null || result.length == 0 ? null
					: (EdIndvEligibilityCargo[]) result;
		}
		
		
		public Object[] findByIndvIdCaseNumAndReferredToCd(long caseNum,long indvId ) throws CoException {
			Object[] result = null;
			DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
			dcWorcReferralCargo.setCaseNum(caseNum);
			dcWorcReferralCargo.setIndvId(indvId);
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcWorcReferral", "findByIndvIdCaseNumAndReferredToCd", dcWorcReferralCargo,
						null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Dc_Worc_Referral", 348);
			}
			return result == null ? null : (DcWorcReferralCargo[]) result;

		}
		
		public EdEligibilityCargo[] getDiversionCheck(String caseNum) throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setCaseNum(Long.valueOf(caseNum));
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findDiversionCheck", edEligibilityCargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed at getProgramsNDEBN111 and table ED_ELIGIBILITY");
			}
			return result == null || result.length == 0 ? null
					: (EdEligibilityCargo[]) result;
		}
		
		public WcSanctionActivityCargo[] findSanctionRecordForSeqNum(long indvId,long seqNum) throws CoException {
			Object[] result = null;
			Object[] params = new Object[2];
			params[0] = indvId;
			params[1] = seqNum;
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"WcSanctionActivity", "findSanctionRecordForSeqNum", null,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for WcSanctionActivity", 348);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in WcSanctionActivity", 348);
			}
			return (WcSanctionActivityCargo[]) result;
		}
		
		
		public DcCaseIndividualCargo[] getAllNonCompliantIndvDetailsByCase(long caseNum, String asOfDate) throws CoException{
			Object[] result = null;
			Object[] params= new Object[2];
			params[0]=caseNum;
			params[1]=asOfDate;
		

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom", "DcCaseIndividual",
						"getAllNonCompliantIndvDetailsByCase", null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getAllNonCompliantIndvDetailsByCase", 16908);
			}
			return result == null || result.length == 0 ? null
	                : (DcCaseIndividualCargo[]) result;
		}
		/**
		 * This function gets records from CvEdMciEdgIndividual where program_cd = 'MA' 
		 * @author shreyasingh
		 * @param caseNum
		 * @param indvId
		 * @return
		 * @throws CoException
		 */	
		public Object[] getCvEdMciEdgIndividualByCaseNumIndvId(long caseNum, long indvId)
				throws CoException {
			Object[] result = null;
			CvEdMciEdgIndividualCargo cvEdMciEdgIndividualCargo = new CvEdMciEdgIndividualCargo();
			cvEdMciEdgIndividualCargo.setCaseNum(caseNum);
			cvEdMciEdgIndividualCargo.setIndvId(indvId);
			cvEdMciEdgIndividualCargo.setEligEffEndDt(CoDateFactory.getTimestamp());
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"CvEdMciEdgIndividual", "findCvEdMciEdgIndividualByCaseNumIndvId",
						cvEdMciEdgIndividualCargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for findCvEdMciEdgIndividualByCaseNumIndvId");
			}
			return result;
		}	
		
		/**
		 * This function gets records from EdCaseRecertDates based on caseNum and edgNum order by recert_review_due_dt desc
		 * @author shreyasingh
		 * @param edgNum long[]
		 * @return
		 * @throws CoException
		 */	
		public Object[] getEdCaseRecertDatesRecertReviewDate(long caseNum, long[] edgNum)
				throws CoException {
			Object[] result = null;
			//start
			EdCaseRecertDatesCargo edCaseRecertDatesCargo= new EdCaseRecertDatesCargo();
			Object[] args=new Object[2];
			args[0]=caseNum;
			args[1]=edgNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdCaseRecertDates",
						"findRecertReviewDtByEdgNum",
						edCaseRecertDatesCargo,args,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for EdCaseRecertDatesCargo",
						16777);
			}
			return result;
		}
		/**
		 * This function gets records from DcRelationships based on indvId and finds the spose of that individual
		 * @author shreyasingh
		 * @param indvId long
		 * @return
		 * @throws CoException
		 */	
		public Object[] getDcRelationshipsSpouseByIndvId(long indvId)
				throws CoException {
			Object[] result = null;
			DcRelationshipsCargo dcRelationshipsCargo= new DcRelationshipsCargo();
			dcRelationshipsCargo.setRefIndvId(indvId);
			dcRelationshipsCargo.setRelationshipTypeCd("'SPS'");
			dcRelationshipsCargo.setEffBeginDt(CoDateFactory.getTimestamp());
			dcRelationshipsCargo.setEffEndDt(CoDateFactory.getTimestamp());
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcRelationships",
						"findByIndvIDRelType",
						dcRelationshipsCargo,null,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for DcRelationshipsCargo",
						16777);
			}
			return result;
		}
		/**
		 * This function gets records from EdEligibility based on indvId and caseNum where program_cd = 'MA'
		 * @author shreyasingh
		 * @param indvId long
		 * @param caseNum long
		 * @return
		 * @throws CoException
		 */	
		public Object[] getEdEligibilityByCaseNumIndvId(long indvId, long caseNum)
				throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setTargetPersonId(indvId);
			edEligibilityCargo.setCaseNum(caseNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility",
						"findEdEligibilityByCaseNumIndvId",
						edEligibilityCargo,null,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for EdEligibilityCargo",
						16777);
			}
			return result;
		}
		/**
		 * This function gets records from EdEligRscBudget based on indvId and caseNum where program_cd = 'MA'
		 * @author shreyasingh
		 * @param indvId long
		 * @param caseNum long
		 * @return
		 * @throws CoException
		 */	
		public Object[] getEdEligRscBudgetByEdgTraceIdCaseNum(long edgTraceId, long caseNum)
				throws CoException {
			Object[] result = null;
			EdEligRscBudgetCargo edEligRscBudgetCargo = new EdEligRscBudgetCargo();
			edEligRscBudgetCargo.setEdgTraceId(edgTraceId);
			edEligRscBudgetCargo.setCaseNum(caseNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligRscBudget",
						"findAllByEdgTraceId",
						edEligRscBudgetCargo,null,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for EdEligibilityCargo",
						16777);
			}
			return result;
		}
		
		public PmLiheapVendorCargo[] findVendorIdByCaseNumber(String caseNum) throws CoException {
			Object[] result = null;
			Object[] params = new Object[1];
			params[0] = caseNum;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findVendorIdByCaseNumber", null, params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed at findVendorIdByCaseNumber and table PmVendorCaseAssocCargo");
			}
			return result == null || result.length == 0 ? null
					: (PmLiheapVendorCargo[]) result;
		}
		
		public BiLiheapDetailCargo[] getBiLiheapDetails(String caseNum) throws CoException {
			Object[] result = null;
			Object[] params = new Object[1];
			params[0] = caseNum;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiLiheapDetail", "findUnderPayAmyByCaseNum", null, params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed at getBiLiheapDetails and table BiLiheapDetail");
			}
			return result == null || result.length == 0 ? null
					: (BiLiheapDetailCargo[]) result;
		}
		
		//start: massMail liheap
		//findByVendTypeCo
		public PmLiheapVendorCargo[] getByVendTypeCO(String sdate,String eDate,String vendorTypes) throws CoException {
			Object[] result = null;
			Object[] args=new Object[3];
			args[0]=sdate;
			args[1]=eDate;
			args[2]=vendorTypes;
			
			PmLiheapVendorCargo assocCargo = new PmLiheapVendorCargo();			
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findByVendTypeCo", assocCargo, args, conn);


			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmLiheapVendorDAO > findByVendTypeCo ", 16751);
			}					
			return result==null ? null : (PmLiheapVendorCargo[])result;
		}

		//findByFuelTypeCo
		public PmLiheapVendorCargo[] getByFuelTypeCO(String sDate,String eDate,String fuelTypes) throws CoException {
			Object[] result = null;
			Object[] args=new Object[3];
			args[0]=sDate;
			args[1]=eDate;
			args[2]=fuelTypes;
			
			PmLiheapVendorCargo assocCargo = new PmLiheapVendorCargo();			
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findByFuelTypeCo", assocCargo, args, conn);

			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmLiheapVendorDAO > findByFuelTypeCo ", 16751);
			}
			
			return result==null ? null : (PmLiheapVendorCargo[])result;				
		}
				
				//findByUnearnedIncomeTypeCo
				public DcUnearnedIncomeCargo[] getByUnearnedIncomeTypeCO(String unearnedIncomeTypes) throws CoException {
					Object[] result = null;
					Object[] args=new Object[1];
					args[0]=unearnedIncomeTypes;			
					
					DcUnearnedIncomeCargo cargo = new DcUnearnedIncomeCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcUnearnedIncome", "findByUnearnedIncomeTypeCo", cargo, args, conn);

					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcUnearnedIncomeDAO > findByUnearnedIncomeTypeCo ", 16751);
					}
					
					return result==null ? null : (DcUnearnedIncomeCargo[])result;
				
				}
				
				public DcLiheapCargo[] getByPrimaryFuelTypeCO(String heatingSeason,String fuelTypes) throws CoException {
					Object[] result = null;
					Object[] args=new Object[2];
					args[0]=heatingSeason;
					args[1]=fuelTypes;
					
					DcLiheapCargo cargo = new DcLiheapCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcLiheap", "findPrimaryFuelCo", cargo, args, conn);
					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcLiheapDAO > findPrimaryFuelCo ", 16751);
					}
					
					return result==null ? null : (DcLiheapCargo[])result;				
				}			

				//findSecondaryFuelCo
				public DcLiheapCargo[] getBySecondaryFuelTypeCO(String heatingSeason,String fuelTypes) throws CoException {
					Object[] result = null;
					Object[] args=new Object[2];
					args[0]=heatingSeason;
					args[1]=fuelTypes;
					
					DcLiheapCargo cargo = new DcLiheapCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcLiheap", "findSecondaryFuelCo", cargo, args, conn);

					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcLiheapDAO > findSecondaryFuelCo ", 16751);
					}
					
					return result==null ? null : (DcLiheapCargo[])result;
				}
				
				//getCoMassMilingByStatusRecords
				public VEdEligibilityIndvCargo[] getByEdStatusTypeCO(String sdate,String edate,String prog,String statuses) throws CoException {
					Object[] result = null;
					Object[] args=new Object[4];
					args[0]=sdate;
					args[1]=edate;
					args[2]=prog;
					args[3]=statuses;
					
					VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "VEdEligibilityIndv", "getCoMassMilingByStatusRecords", cargo, args, conn);
					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for  VEdEligibilityIndvDAO> getCoMassMilingByStatusRecords ", 16751);
					}					
					return result==null ? null : (VEdEligibilityIndvCargo[])result;
				}
				
				
				//findByFYVendorCo
				public PmLiheapVendorCargo[] getByFYVendor(String sDate,String eDate) throws CoException {
					Object[] result = null;
					Object[] args=new Object[2];
					args[0]=sDate;
					args[1]=eDate;
					
					PmLiheapVendorCargo assocCargo = new PmLiheapVendorCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findByFYVendorCo", assocCargo, args, conn);
					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);

						throw new CoException("Select failed for PmLiheapVendorDAO > findByFYVendorCo ", 16751);
					}
					
					return result==null ? null : (PmLiheapVendorCargo[])result;				
				}
				
				//findByLIDenialMassMailCo
				public EdEligNoticeReasonsCargo[] getByDenialRsnLI(String sDate,String eDate,String reasons) throws CoException {
					Object[] result = null;
					Object[] args=new Object[3];

					args[0]=sDate;
					args[1]=eDate;
					args[2]=reasons;
					
					EdEligNoticeReasonsCargo assocCargo = new EdEligNoticeReasonsCargo();			
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligNoticeReasons", "findByLIDenialMassMailCo", assocCargo, args, conn);
					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for EdEligNoticeReasonsDAO > findByLIDenialMassMailCo ", 16751);
					}
					
					return result==null ? null : (EdEligNoticeReasonsCargo[])result;				
				}
				
				public Object[] getPendingTriggersForBatchRequestNCH049Vendors(String docIds,
						String minVal, String maxVal, String generateDate)
								throws CoException {
					long start =  new FwDate().getTimeInMillis(); 
					log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequestNCH049Vendors - started");

					Object[] objParams = new Object[5];
					VCoRequestCollection coRequestCol = new VCoRequestCollection();
					VCoRequestCargo[] coRequestCargos = null; 

					objParams[0] = coRequestCol.getCargo();
					objParams[1] = minVal;
					objParams[2] = maxVal;
					objParams[3] = docIds;
					objParams[4] = generateDate;

					try {
						if(docIds != null && docIds.equalsIgnoreCase(CoConstants.CO_DOC_ID_NCH049)){
							coRequestCargos = (VCoRequestCargo[])coRequestCol.select("findByPendTrigForBatchDrvVendorsNCH049", objParams);
						}
					} catch (FrameworkException e) {
						throw new CoException(
								"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
										+ e);
					} catch (ApplicationException e) {
						throw new CoException(
								"Exception while fetching CO Request Recipients for the given CO_REQ_SEQ "
										+ e);
					}		
					log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getPendingTriggersForBatchRequestNCH049Vendors - timeTaken : " + (System.currentTimeMillis() - start));
					return coRequestCargos;
				}					
				
				//end:massMail liheap
				public EdDcIndvDisqPenaltiesCargo[] getTFJobsSantionsPenaltyMonth(long caseNum, long edgeNum) throws NoDataFoundException, CoException {
					Object[] result = null;
					EdDcIndvDisqPenaltiesCargo cargo= new EdDcIndvDisqPenaltiesCargo();
					cargo.setProgramCd(CoConstants.PROGRAM_TF);
					cargo.setCaseNum(caseNum);
					cargo.setEdgNum(edgeNum);
					
					try {
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"EdDcIndvDisqPenalties", "findPenaltyMonthByCaseNumTF",
								cargo, null, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for EdDcIndvDisqPenaltiesCargo-->>getTFJobsSantionsPenaltyMonth", 16312);
					}
					return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
				}

				 public DcIndvNonCooperationCargo[] getSanctionReasonByCaseNum(long caseNum) throws CoException {
				 		
				 		DcIndvNonCooperationCargo[] result = null;
				 		DcIndvNonCooperationCargo indvDisqPenaltiesCargo = new DcIndvNonCooperationCargo();
				 		DcIndvNonCooperationCollection nonCooperationCollection = new DcIndvNonCooperationCollection();
				 		indvDisqPenaltiesCargo.setCaseNum(caseNum);
				 		nonCooperationCollection.setCargo(indvDisqPenaltiesCargo);
				 		try {
				 			result = (DcIndvNonCooperationCargo[])nonCooperationCollection
				 					.select("findSanctionRsnByCaseNum");
				 		} catch (Exception e) {
				 			CoDebugger.debugException(e.getMessage(), e);
				 			throw new CoException("Select failed for DC_INDV_NON_COOPERATION",
				 					16346);
				 		}
				 		return result;
				 	}
				 
				 public Object[] getDcWorcReferralByIndvId(long indvId) throws CoException {
						Object[] result = null;
						DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
						dcWorcReferralCargo.setIndvId(indvId);
						
						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"DcWorcReferral", "findByOnlyIndvId", 
									dcWorcReferralCargo,null, conn);
						} catch (Exception e) {

							CoDebugger.debugException(e.getMessage(), e);
							//e.printStackTrace(); ND-12735
							throw new CoException("Select failed for Dc_Worc_Referral", 16312);
						}
						if (result == null || result.length == 0) {
							throw new NoDataFoundException("No data in Dc_Worc_Referral", 16037);
						}

						return result;
					}
				 
				 public Object[] getDcWorcReferralForJOBSByIndvId(long indvId) throws CoException {
						Object[] result = null;
						DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
						dcWorcReferralCargo.setIndvId(indvId);
						
						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"DcWorcReferral", "findByOnlyIndvIdForJOBS", 
									dcWorcReferralCargo,null, conn);
						} catch (Exception e) {

							CoDebugger.debugException(e.getMessage(), e);
							//e.printStackTrace(); ND-12735
							throw new CoException("Select failed for Dc_Worc_Referral", 16312);
						}
						return result;
					}
				 
				 public PmVendorCaseAssocCargo[] findVendorAssocByCaseNumber(long caseNum) throws CoException {Object[] result = null;
					PmVendorCaseAssocCargo cargo= new PmVendorCaseAssocCargo();
					cargo.setCaseNum(caseNum);
					
					try {
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"PmVendorCaseAssoc", "findVendorAssocByCaseNumber",
								cargo, null, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for PmVendorCaseAssocCargo-->>findVendorAssocByCaseNumber", 16312);
					}
					return result == null ? null : (PmVendorCaseAssocCargo[]) result;
					}
				 
					public Object[] getPmLiheapVendorInfoByVendorId(String vendorIdList) throws CoException {Object[] result = null;
					Object[] args = new Object[1];
					args[0] = vendorIdList;
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findVendorInfoByVendorId", null, args, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for PmLiheapVendor", 16751);
					}
					return result;
					}
					
					public Object[] getPmAddressByVendorId(int vendorId) throws CoException {Object[] result = null;
					PmAddressCargo cargo = new PmAddressCargo();
					cargo.setVendorProviderId(vendorId);
					try {
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmAddress", "findByProviderIdCo", cargo, null, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for PmLiheapVendor", 16751);
					}
					return result;
					}
					
					public Object[] findVendorDetailsPerVendorPerCase(long caseNum, int vendorId) throws CoException {
						Object[] result = null;
						PmVendorCaseAssocCargo cargo = new PmVendorCaseAssocCargo();
						cargo.setCaseNum(caseNum);
						cargo.setSpacesVendorId(vendorId);
						try {
							result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findCaseNumberByProviderId", cargo, null, conn);
						} catch (Exception e) {
							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for PmVendorCaseAssoc", 16751);
						}
						return result;
					}
					public EdEligibilityCargo[] getCurrentEligibilityDetail(long caseNum,String asOfDate) throws ParseException, CoException{
						EdEligibilityCargo[] result = null;
						EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
						edEligibilityCargo.setCaseNum(caseNum);
				  	    edEligibilityCargo.setCoe(asOfDate);
				                  try
				                  {
				                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findCurrentEligibilityDetail", edEligibilityCargo, null, conn);
				                  }
				                  catch (Exception e)
				                  {
				                                 CoDebugger.debugException(e.getMessage(), e);
				                                 throw new CoException("Select failed for getCurrentEligibilityDetail", 16357);
				                  }
				                  if (result == null ) { throw new NoDataFoundException("No data in getCurrentEligibilityDetail", 16063); }
				                  return result;
					}
					
					public EdEligibilityCargo[] getPreviousEligibilityDetail(EdEligibilityCargo cargo) throws ParseException, CoException{
						EdEligibilityCargo[] result = null;
						Object[] args= new Object[1];
						args[0]=cargo;
/*						EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
						edEligibilityCargo.setCaseNum(caseNum);
				  	    edEligibilityCargo.setCoe(asOfDate);
				  	    edEligibilityCargo.setCoverageGroup(coverageGroup);*/
				                  try
				                  {
				                                 result =(EdEligibilityCargo[])CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findPreviousEligibilityDetail", null, args, conn);
				                  }
				                  catch (Exception e)
				                  {
				                                 CoDebugger.debugException(e.getMessage(), e);
				                                 throw new CoException("Select failed for getPreviousEligibilityDetail", 16357);
				                  }
				                  if (result == null ) { throw new NoDataFoundException("No data in getPreviousEligibilityDetail", 16063); }
				                  return result;
					}
					
					public EdEligibilityCargo[] getOngoingCaseByCaseNum(long caseNum) throws NoDataFoundException, CoException {
						Object[] result = null;
						EdEligibilityCargo cargo= new EdEligibilityCargo();
						cargo.setProgramCd(CoConstants.PROGRAM_TF);
						cargo.setCaseNum(caseNum);
						
						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"EdEligibility", "findOngoingCaseByCaseNum",
									cargo, null, conn);
						} catch (Exception e) {
							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for EdEligibilityCargo-->>findOngoingCaseByCaseNum", 16312);
						}
						return result == null ? null : (EdEligibilityCargo[]) result;
					}
					
					/**Method to get BiIssuanceTrigger by invoice number**/
					public BiIssuanceTriggerCargo[] getIssuanceCargo(long invoiceNum,long caseNum) throws CoException{
						BiIssuanceTriggerCargo biIssuanceTriggerCargo= new BiIssuanceTriggerCargo();
						biIssuanceTriggerCargo.setInvoiceNum(invoiceNum+"");
						biIssuanceTriggerCargo.setCaseNum(caseNum);
						Object[] result = null;

						try {
							result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger",
									"findByInvoiceNum", biIssuanceTriggerCargo, null, conn);

						} catch (Exception e) {
							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for getIssuanceCargo", 16908);
						}
						return result == null || result.length == 0 ? null : (BiIssuanceTriggerCargo[]) result;
					}

					public EdEligibilityCargo[] getSnapEdEligibilty(long caseNum,String asOfDate) throws ParseException, CoException{
						EdEligibilityCargo[] result = null;
						EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
						edEligibilityCargo.setCaseNum(caseNum);
				  	    edEligibilityCargo.setCoe(asOfDate);
				                  try
				                  {
				                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findSNAPCasePeriod", edEligibilityCargo, null, conn);
				                  }
				                  catch (Exception e)
				                  {
				                                 CoDebugger.debugException(e.getMessage(), e);
				                                 throw new CoException("Select failed for getSnapEdEligibilty", 16357);
				                  }
				                  if (result == null || result.length == 0) { throw new NoDataFoundException("No data in getSnapEdEligibilty", 16063); }
				                  return result;
					}
/**
 * added by asputta					
 * @param caseNum
 * @return
 * @throws CoException
 */
 public DcLiheapCargo[] getLiheapSourceDetails(long caseNum) throws  CoException {
	Object[] result = null;
	Object [] params= new Object[1];
	params[0] = caseNum;
	try {
			result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"DcLiheap", "findByCaseNumNCH001",
				null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcLiheapCargo--->findByCaseNumNCH001", 16313);
		}
		return result == null ? null : (DcLiheapCargo[]) result;
		}
 
 /**
	 * getBiIssuanceAuthPaymentsLI
	 * @param caseNum
	 * @param asOfDate
	 * @param providerId
	 * @return
	 * @throws CoException
	 * @throws ParseException
	 */
	public BiIssuanceTriggerCargo[] getBiIssuanceAuthPaymentsLI(long caseNum,String asOfDate) throws CoException, ParseException
	{
		BiIssuanceTriggerCargo[] result = null;
		BiIssuanceTriggerCargo biIssuanceTriggerCargo = new BiIssuanceTriggerCargo();
		biIssuanceTriggerCargo.setCaseNum(caseNum);
		
		SimpleDateFormat dateFormat = new SimpleDateFormat(CoConstants.DATE_FORMAT);
		java.util.Date parsedDate = dateFormat.parse(asOfDate);
		Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
		
		biIssuanceTriggerCargo.setAuthorizationDt(timestamp);
		
		try
		{
			result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BiIssuanceTrigger", "findByAuthPaymentCaseNum", biIssuanceTriggerCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BiIssuanceTriggerDetail", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiIssuanceTriggerDetail", 16063); }
		return result;
	}
	
	/**
	 * getLiheapDetailCase
	 * @param edgTraceId
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BiLiheapDetailCargo[] getLiheapDetailCase(long edgTraceId,long caseNum) throws CoException{
		BiLiheapDetailCargo[] result = null;
		BiLiheapDetailCargo biLiheapDetailCargo = new BiLiheapDetailCargo();
		biLiheapDetailCargo.setEdgTraceId(edgTraceId);
		biLiheapDetailCargo.setCaseNum(caseNum);
		try
		{
			result =(BiLiheapDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BiLiheapDetail", "findPaymentLiheapDetailCase", biLiheapDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getLiheapDetailCase", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiLiheapDetailCargo", 16063); }
		return result;
	}
	
	/**
	 * getWarrantPaymentDetailCase
	 * @param edgTraceId
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BiWarrantPaymentDetailCargo[] getWarrantPaymentDetailCase(long edgTraceId,long caseNum) throws CoException{
		BiWarrantPaymentDetailCargo[] result = null;
		BiWarrantPaymentDetailCargo biWarrantPaymentDetailCargo = new BiWarrantPaymentDetailCargo();
		biWarrantPaymentDetailCargo.setEdgTraceId(edgTraceId);
		biWarrantPaymentDetailCargo.setCaseNum(caseNum);
		try
		{
			result =(BiWarrantPaymentDetailCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BiWarrantPaymentDetail", "findPaymentWarrantDetailCase", biWarrantPaymentDetailCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getWarrantPaymentDetailCase", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in BiWarrantPaymentDetail", 16063); }
		return result;
	}
	
	public PmVendorCaseAssocCargo[] findByCaseNumber(long caseNum)
			throws CoException {
		PmVendorCaseAssocCargo pmVendorCaseAssoc = new PmVendorCaseAssocCargo();
		pmVendorCaseAssoc.setCaseNum(caseNum);
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmVendorCaseAssoc", "findByCaseNumber", pmVendorCaseAssoc,
					null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCaseNumber", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmVendorCaseAssocCargo[]) result;
	}
					
					
	public PmLiheapVendorCargo[] findByVendorId(Integer spacesVendorId)
			throws CoException {
		PmLiheapVendorCargo pmVendorCaseAssoc = new PmLiheapVendorCargo();
		pmVendorCaseAssoc.setSpacesVendorId(spacesVendorId);
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmLiheapVendor", "findByVendorId", pmVendorCaseAssoc,
					null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCaseNumber", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmLiheapVendorCargo[]) result;
	}
	
	public EdEligibilityCargo[] findLIAppDate(long caseNum)
			throws CoException {
		EdEligibilityCargo edEliCargo = new EdEligibilityCargo();
		edEliCargo.setCaseNum(caseNum);
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findLIAppDate", edEliCargo,
					null, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findLIAppDate", 16908);
		}
		return result == null || result.length == 0 ? null
				: (EdEligibilityCargo[]) result;
	}
	/**
	 * added by asputta
	 * @param caseNum
	 * @param date
	 * @param vendorId
	 * @return
	 * @throws CoException
	 */
	public PmVendorCaseAssocCargo[] getPaymentTypeVendorDetails(long caseNum) throws CoException{
		
		 PmVendorCaseAssocCargo[] result = null;
		 Object [] params= new Object[1];
		 params[0] =caseNum;
		
                 try
                 {
                  result =(PmVendorCaseAssocCargo[]) CoDAOFactory.select
                		  ("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findVendorDetailsByCase", null, params, conn);
                 }
                 catch (Exception e)
                 {
                                CoDebugger.debugException(e.getMessage(), e);
                                throw new CoException("CODAOSERVICES --> Select failed for PmVendorCaseAssocDAO ** findVendorDetailsByCase --", 16357);
                 }	           
                 return result == null || result.length == 0 ? null
         				: (PmVendorCaseAssocCargo[]) result;
	}
	public Object[] getPmProviderNoticeByID(long providerId,String programCd) throws CoException {
		Object[] result = null;
		VCoRequestCargo cargo = new VCoRequestCargo();
		cargo.setProviderId(((Long) providerId).intValue());
		cargo.setProgramCd(programCd);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByProviderId", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_CCAPPROVIDERS", 99664);
		}
		return result;
	}
	
	
	public Object[] getPmProviderNoticeDetailsByID(long providerId,VCoRequestCargo vcCargo) throws CoException {
		Object[] result = null;
		VCoRequestCargo cargo = new VCoRequestCargo();
		cargo.setProviderId((long) providerId);
		cargo.setReqDt(vcCargo.getReqDt());
		cargo.setPrintDt(vcCargo.getPrintDt());

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VCoRequest", "findByProviderIdReqdate", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_CCAPPROVIDERS", 99664);
		}
		return result;
	}

public Object[] getProviderByLicense(String licenseNum) throws CoException {
Object[] result = null;
PmCcapProvidersCargo cargo = new PmCcapProvidersCargo();
cargo.setLicenseNum(licenseNum);

try {
result = CoDAOFactory.select(
		"gov.state.nextgen.common.collection.custom",
		"PmCcapProviders", "findProviderIdByLicense", cargo, null, conn);
} catch (Exception e) {

CoDebugger.debugException(e.getMessage(), e);
throw new CoException("Select failed for PM_CCAP_PROVIDERS", 99664);
}
return result;
}
/**
 * This function gets records from PmLiheapPayment based on case number and delivery year
 * @author shreyasingh
 * @param caseNum long
 * @param year String
 * @return PmLiheapPaymentCargo
 * @throws CoException
 */	
public PmLiheapPaymentCargo[] getPmLiheapPaymentByCaseDeliveryDt(long caseNum, long year) throws CoException{
	PmLiheapPaymentCargo[] result = null;
	Object[] args=new Object[2];
	args[0]=caseNum;
	args[1]=year;
	try
	{
		result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
				"PmLiheapPayment", "findByCaseNoDeliveryDt", null, args, conn);
	}
	catch (Exception e)
	{
		CoDebugger.debugException(e.getMessage(), e);
		throw new CoException("Select failed for getWarrantPaymentDetailCase", 16357);
	}
	return result;
}
/**
 * This function gets records from EdEligibilityCargo where program_cd = LIHEAP and 
 * @author shreyasingh
 * @return EdEligibilityCargo
 * @throws CoException
 */	
public Object[] getEdEligibilityLiheapClosed()
		throws CoException {
	Object[] result = null;
	EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"EdEligibility",
				"findAllLiheapClosed",
				edEligibilityCargo,null,conn);
	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
		CoDebugger.debugException("Exception  " + e.getMessage(), e);
		throw new CoException("Select failed for EdEligibilityCargo",
				16777);
	}
	return result;
}

/**
 * This function gets records from DcCaseProgramCargo where program_cd = LIHEAP and fiscal year is previous year
 * @author shreyasingh
 * @return DcCaseProgramCargo
 * @throws CoException
 */	
public Object[] getDcCaseProgramLiheapDetails(long caseNumbers[], String year )
		throws CoException {
	Object[] result = null;
	Object[] args=new Object[2];
	args[0]=caseNumbers;
	args[1]=year;
	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"DcCaseProgram",
				"findLiheapDetails",
				null,args,conn);
	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
		CoDebugger.debugException("Exception  " + e.getMessage(), e);
		throw new CoException("Select failed for DcCaseProgramCargo",
				16777);
	}
	return result;
}
/**
 * added by asputta
 * 
 */
public EdEligLiheapBudgetCargo[] getLiheapBudgetDetails(long caseNum,String edgtraceId) throws CoException{
	EdEligLiheapBudgetCargo[] result = null;
	Object[] args=new Object[2];
	args[0]=caseNum;
	args[1]=edgtraceId;
	try
	{
		result =(EdEligLiheapBudgetCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
				"EdEligLiheapBudget", "findByCaseNumEdgTraceId", null, args, conn);
	}
	catch (Exception e)
	{
		CoDebugger.debugException(e.getMessage(), e);
		throw new CoException("Select failed for getLiheapBudgetDetails", 16357);
	}
	
	return result == null || result.length == 0 ? null: result; 
}

public EdEligibilityCargo[] findLIHEAPAssistanceClosedCase(long caseNum, String asOfDate) throws NoDataFoundException, CoException {
	EdEligibilityCargo[] result = null;
	EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
	edEligibilityCargo.setCaseNum(caseNum);
	    edEligibilityCargo.setCoe(asOfDate);
              try
              {
                             result =(EdEligibilityCargo[])CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findLIHEAPAssistanceClosedCase", edEligibilityCargo, null, conn);
              }
              catch (Exception e)
              {
                             CoDebugger.debugException(e.getMessage(), e);
                            // throw new CoException("Select failed for getPreviousEligibilityDetail", 16357);
              }
             // if (result == null ) { throw new NoDataFoundException("No data in getPreviousEligibilityDetail", 16063); }
              return result;
}

public EdEligibilityCargo[] findApprovedAuthStatus(long caseNum, String asOfDate) throws NoDataFoundException, CoException {
	EdEligibilityCargo[] result = null;
	EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
	edEligibilityCargo.setCaseNum(caseNum);
	    edEligibilityCargo.setCoe(asOfDate);
              try
              {
                             result =(EdEligibilityCargo[])CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findApprovedAuthStatus", edEligibilityCargo, null, conn);
              }
              catch (Exception e)
              {
                             CoDebugger.debugException(e.getMessage(), e);
                            // throw new CoException("Select failed for getPreviousEligibilityDetail", 16357);
              }
             // if (result == null ) { throw new NoDataFoundException("No data in getPreviousEligibilityDetail", 16063); }
              return result;
}


public Object[] getVendorNameByID(long vendorId) throws CoException {
Object[] result = null;
PmLiheapVendorCargo cargo = new PmLiheapVendorCargo();
cargo.setSpacesVendorId(((Long)vendorId).intValue());

try {
result = CoDAOFactory.select(
"gov.state.nextgen.common.collection.custom",
"PmLiheapVendor", "findByVendorId", cargo, null, conn);
} catch (Exception e) {

CoDebugger.debugException(e.getMessage(), e);
throw new CoException("Select failed for Pm_Liheap_Vendor", 99664);
}
return result;
}

public PmVendorCaseAssocCargo[] findCaseNumAssocByVendorId(long vendorId)
		throws CoException {
	PmVendorCaseAssocCargo pmVendorCaseAssoc = new PmVendorCaseAssocCargo();
	pmVendorCaseAssoc.setCaseNum(vendorId);
	Object[] result = null;

	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"PmVendorCaseAssoc", "findByVendorId", pmVendorCaseAssoc,
				null, conn);

	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
	}
	return result == null || result.length == 0 ? null
			: (PmVendorCaseAssocCargo[]) result;
}

public Object[] getHohByCaseNum(String caseNumList) throws CoException {
	Object[] result = null;
	Object[] args = new Object[1];
	args[0] = caseNumList;
	try {
		result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcHeadOfHousehold", "getHohByCaseNum", null, args, conn);
	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
	}
	return result;
}

public DcIndvCargo[] findByIndvId(long indvId)
		throws CoException {
	DcIndvCargo cargo = new DcIndvCargo();
	cargo.setIndvId(indvId);
	Object[] result = null;

	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"DcIndv", "findByIndvId", cargo,
				null, conn);

	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
	}
	return result == null || result.length == 0 ? null
			: (DcIndvCargo[]) result;
}

public PmVendorCaseAssocCargo[] findByCaseNumberAndVendorId(long caseNum,Long vendorId)
		throws CoException {
	PmVendorCaseAssocCargo cargo = new PmVendorCaseAssocCargo();
	cargo.setCaseNum(caseNum);
	cargo.setSpacesVendorId(vendorId.intValue());
	Object[] result = null;

	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"PmVendorCaseAssoc", "findByCaseNumberAndVendorId", cargo,
				null, conn);

	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
	}
	return result == null || result.length == 0 ? null
			: (PmVendorCaseAssocCargo[]) result;
}

public PmLiheapPaymentCargo[] findByCaseNumberAndVendorIdAssoc(long caseNum,Long vendorId)
		throws CoException {
	PmLiheapPaymentCargo cargo = new PmLiheapPaymentCargo();
	cargo.setCaseNum(caseNum);
	cargo.setVendorId(vendorId);
	Object[] result = null;

	try {
		result = CoDAOFactory.select(
				"gov.state.nextgen.common.collection.custom",
				"PmLiheapPayment", "findByCaseNumVendorId", cargo,
				null, conn);

	} catch (Exception e) {
		CoDebugger.debugException(e.getMessage(), e);
	}
	return result == null || result.length == 0 ? null
			: (PmLiheapPaymentCargo[]) result;
}

		public DcLiheapCargo[] getNonResidentialFuelSw(long caseNum) throws CoException{
		Object[] result = null;
		DcLiheapCargo cargo= new DcLiheapCargo();
		cargo.setCaseNum(caseNum);
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcLiheap", "findByCaseNum",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcLiheapCargo-->>getNonResidentialFuelSw", 16312);
		}
		return result == null ? null : (DcLiheapCargo[]) result;
		}
		
		public BiIssuanceTriggerCargo[] getNDEBN111triggers(String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BiIssuanceTrigger", "getNDEBN111triggers", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (BiIssuanceTriggerCargo[]) result;
		}

		/**
		 * added to get previous review records
		 * 
		 */
		public EdEligibilityCargo[] getPreviousReviewRecords(EdEligibilityCargo cargo,String edEdgTraceIds) throws CoException{
		Object[] result = null;
		Object [] params= new Object[3];
		params[0] =cargo.getDiActionDt();
		params[1] = edEdgTraceIds;
		params[2] = cargo.getCaseNum();
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findPreviousReviewRecords",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ****** findPreviousReviewRecords", 16312);
		}
		return result == null ? null : (EdEligibilityCargo[]) result;
		}
	
		public Object[] getVendorBybill(String billingNum) throws CoException {
			Object[] result = null;
			PmVendorCaseAssocCargo cargo = new PmVendorCaseAssocCargo();
			cargo.setBillingNumber(Long.valueOf(billingNum));

			try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmVendorCaseAssoc", "findVendorIdByBill", cargo, null, conn);
			} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_CCAP_PROVIDERS", 99664);
			}
			return result;
			}
		public Object[] getLocationofcareforAR(Integer vendorProviderId,String Addrtype)

				throws CoException {
			Object[] result = null;
			PmAddressCargo cargo=new PmAddressCargo();
			cargo.setVendorProviderId(vendorProviderId);
			cargo.setAddrTypeCd(Addrtype);

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"PmAddress", "findByProviderIdVendorType",
						cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result;
		}
		public Object[] getLocationofcareforARtypeC(long providerId)

				throws CoException {
			Object[] result = null;
			PmProviderPersonCargo cargo=new PmProviderPersonCargo();
			cargo.setProviderId(providerId);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"PmProviderPerson", "findByProvIdPersonType",
						cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result;
		}

		public CoMassMailingReqCargo[] findMassMailingseqNum(long massMailingseqNum) throws ApplicationException, FrameworkException {

			CoMassMailingReqCargo coMassMailingReqCargo = new CoMassMailingReqCargo();
			coMassMailingReqCargo.setMassMailingSeqNum(massMailingseqNum);;

			CoMassMailingReqCollection coMassMailingReqColl = new CoMassMailingReqCollection();
			coMassMailingReqColl.setCargo(coMassMailingReqCargo);
			CoMassMailingReqCargo[] coMassMailingReqCarArr = null;
			coMassMailingReqCarArr = (CoMassMailingReqCargo[]) coMassMailingReqColl
					.select("findMassMailingseqNum");
			return coMassMailingReqCarArr;
		}
		
		public PmProviderChildAssocCargo[] getProviderChildAssocsProvider(long providerId)throws CoException {
			Object[] result = null;
			PmProviderChildAssocCargo cargo=new PmProviderChildAssocCargo();
			cargo.setProviderId(((Long) providerId).intValue());
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","PmProviderChildAssoc", "findByProviderIDAssoc",cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (PmProviderChildAssocCargo[]) result;
		}
		
		public EdIndvEligibilityCargo[] getChildCaretaker(long caseNum) throws CoException{
			Object[] result = null;
			EdEligibilityCargo cargo = new EdEligibilityCargo();
			cargo.setCaseNum(caseNum);
			try{
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","EdIndvEligibility", "CoFindForEligibleCCAPCareTaker",cargo, null, conn);
			}catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (EdIndvEligibilityCargo[]) result;
			
		}
		
		public EdDcIndvDisqPenaltiesCargo[] getNDHCMNN22triggers(String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdDcIndvDisqPenalties", "getNDHCMNN22triggers", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
		}
		
		public Object[] findIpvRecordsByIndvIdList(String indvIdList, String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[2];
			args[0] = indvIdList;
			args[1] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdDcIndvDisqPenalties", "findIpvByIndvID", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdDcIndvDisqPenalties", 16751);
			}
			return result;
		}
		
		public EdDcIndvDisqPenaltiesCargo[] getNDTNFN116triggers(String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdDcIndvDisqPenalties", "getNDTNFN116triggers", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
		}
		
		/**
		 * added to get medicaid span records
		 * 
		 */
		public EdIndvDateSpecificCargo[] getSpanRecords(long caseNum,String edEdgTraceIds) throws CoException{
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] =caseNum;
		params[1] = edEdgTraceIds;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvDateSpecific", "findByEdgTraceId",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ****** findMASpanwRecords", 16312);
		}
		return result == null ? null : (EdIndvDateSpecificCargo[]) result;
		}
	
		public Object[] getEdEligCdcBudgetByCaseNumEdgTraceIdNOE(
				long caseNum, String edgTraceId) throws CoException {
			Object[] result = null;
			Object [] params= new Object[2];
			params[0] =caseNum;
			params[1] = edgTraceId;

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligCdcBudget", "findByCaseNumEdgTraceId", null, params,
						conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligCdcBudget", 16900);
			}
			return result == null ? null : (EdEligCdcBudgetCargo[]) result;

}	
		
		public PmVendorCaseAssocCargo[] findAssocProviderId(long vendorId) throws CoException {
			Object[] result = null;
			Object [] params= new Object[1];
			params[0] = vendorId;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findAssociatedVendorID", null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmVendorCaseAssoc for Mass Mailing", 16751);
			}
			return result == null ? null : (PmVendorCaseAssocCargo[]) result;
		}

		public PmLiheapPaymentCargo[] getPmLiheapPaymentMassMailing(long vendorId, String beginDt, String endDt) throws CoException, ParseException
		{
			PmLiheapPaymentCargo[] result = null;
			Object [] params= new Object[3];
			params[0] = vendorId;
			params[1] = beginDt;
			params[2] = endDt;
			try
			{
				result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "coFindByVendorIdMassMailing", null, params, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
			}
			return result == null || result.length == 0 ? null: result;
		}
		
		public EdEligibilityCargo[] findForReqPaymentMass(long caseNum) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setCaseNum(caseNum);
	                  try
	                  {
	                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "coFindforReqPaymentMass", edEligibilityCargo, null, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findForReqPayment", 16357);
	                  }
	                  return result == null || result.length == 0 ? null: result;
		}
		
		public Object[] getlevelofcare(long acaseNum, long aindvId) throws CoException {
			Object[] result = null;
			VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
			cargo.setT1CaseNum(acaseNum);
			cargo.setIndvId(aindvId);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VEdEligibilityIndv", "findByIndividualsPartStatusCd",
						cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException(
						"Exception while getting Edges by Program code", 16431);
			}
			return result == null || result.length == 0 ? null: result;
		}
		
		/**
		 * Added by assputa to get transfered assets list		
		 * @param caseNum
		 * @param nonCoseqList
		 * @return
		 * @throws CoException
		 */
				
		public Object[] getTransferedResourceDetailsNonCoseqNum(
					long caseNum,String nonCoseqList) throws CoException {
					Object[] result = null;
					Object [] params= new Object[2];
					params[0] = caseNum;
					params[1] = nonCoseqList;

					try {
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"DcTransferedResources",
								"findTransferedAssets", null,
								params, conn);
					}  catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcTransferedResources", 16900);
					}
					return result == null ? null : (DcTransferedResourcesCargo[]) result;
				}
		public PmLiheapPaymentCargo[] findByCaseNumberAndVendorIdBill(long caseNum)	throws CoException {
			PmLiheapPaymentCargo cargo = new PmLiheapPaymentCargo();
			cargo.setCaseNum(caseNum);
			Object[] result = null;

			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","PmLiheapPayment", "findByCaseNumCreateDt", cargo,null, conn);

			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null || result.length == 0 ? null : (PmLiheapPaymentCargo[]) result;
		}
		
		
		public DlProviderCargo[] getDlProviderByLicenseNum(String licenseNum) throws CoException{
			DlProviderCargo[] result = null;
			DlProviderCargo dlProviderCargo = new DlProviderCargo();
			dlProviderCargo.setLicenseNum(licenseNum);
			try
			{
				result =(DlProviderCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DlProvider", "findByLicenseNumber", dlProviderCargo, null, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DlProvider", 16357);
			}
			return result == null || result.length == 0 ? null : (DlProviderCargo[]) result;
		}
		
		/**
		 * @author karraj
		 * @param year
		 * @return
		 * @throws CoException
		 */
		public DcCaseProgramCargo[] getClosedCasesLIWithPayment(String year )throws CoException {
			Object[] result = null;
			Object[] args=new Object[1];
			args[0]=year;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCaseProgram",
						"getClosedCasesLIWithPayment",
						null,args,conn);
			} catch (Exception e) {
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for DcCaseProgramCargo",16777);
			}
			return result == null || result.length == 0 ? null : (DcCaseProgramCargo[]) result;
		}

 public PmVendorCaseAssocCargo[] findByCaseVendor(long caseNum,int vendorId) throws CoException {
			 Object[] result = null;
			PmVendorCaseAssocCargo cargo= new PmVendorCaseAssocCargo();
			cargo.setCaseNum(caseNum);
			cargo.setSpacesVendorId(vendorId);
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"PmVendorCaseAssoc", "findByVendorIdCase",
						cargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmVendorCaseAssocCargo-->>findByVendorIdCase", 16312);
			}
			return result == null ? null : (PmVendorCaseAssocCargo[]) result;
			}
 	public DcCaseIndividualCargo[] findCaseNumFromBillingNum(String billingNum) throws CoException {
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = billingNum;

		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom","DcCaseIndividual", "findCaseNumFromBillingNum", null,args, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findCaseNumFromBillingNum", 16751);
		}

		return result == null ? null : (DcCaseIndividualCargo[]) result;
	}
 
	/**
	 * 
	 * @param caseNum
	 * @param year
	 * @return
	 * @throws CoException
	 */
	public BiLiheapDetailCargo[] getBiLiheapDetailsByCase(long caseNum, long year )throws CoException {
		Object[] result = null;
		Object[] args=new Object[2];
		args[0]=caseNum;
		args[1]=year;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiLiheapDetail",
					"getBiLiheapDetailsByCase",
					null,args,conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for BiLiheapDetailCargo",16777);
		}
		return result == null || result.length == 0 ? null : (BiLiheapDetailCargo[]) result;
	}
	
	/**
	 * 
	 * @param caseNum
	 * @param year
	 * @return
	 * @throws CoException
	 */
	public BiWarrantPaymentDetailCargo[] getBiLiheapWarrantDetailsByCase(long caseNum, long year )throws CoException {
		Object[] result = null;
		Object[] args=new Object[2];
		args[0]=caseNum;
		args[1]=year;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPaymentDetail",
					"getBiLiheapWarrantDetailsByCase",
					null,args,conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for BiWarrantPaymentDetailCargo",16777);
		}
		return result == null || result.length == 0 ? null : (BiWarrantPaymentDetailCargo[]) result;
	}
	
	
	/**
	 * @author asputta
	 * @param indvIds
	 * @return
	 * @throws CoException
	 */
	public BvMaPremiumPaymentDtlsCargo[] getMaPermiumDetails(String indvIds,long caseNum)throws CoException {
		Object[] result = null;
		Object[] args=new Object[2];
		args[0]=indvIds;
		args[1]=caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BvMaPremiumPaymentDtls",
					"findPaymentsByIndvIdCase",
					null,args,conn);
		} catch (Exception e) {
			CoDebugger.debugException("Exception  " + e.getMessage(), e);
			throw new CoException("Select failed for BvMaPremiumPaymentDtlsCargo",16777);
		}
		return result == null || result.length == 0 ? null : (BvMaPremiumPaymentDtlsCargo[]) result;
	}
	private int insertRequestRecipientForNoticeNDHCN0067(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		coRequest.setCaseAppFlag(CoConstants.RECIPIENT_SPACES_PROVIDER);
			ret= insertOriginalRequest(coRequest);
		
		return ret;
		
	}
	
	private int insertRequestRecipientForNoticeNDLIHP093(COCorrespondence coRequest) throws CoException{
		int ret = 0;
		coRequest.setCaseAppFlag(CoConstants.RECIPIENT_VENDOR);
			ret= insertOriginalRequest(coRequest);
		
		return ret;
		
	}
	
	
	/**
	 * 
	 * @author tdatta
	 * Request for Payment for liheap
	 */
	public PmLiheapPaymentCargo[] getRemittanceRecipients(String asOfDate) throws ParseException, CoException{
		PmLiheapPaymentCargo[] result = null;
		PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
		pmLiheapPaymentCargo.setPaymentRequestStatus(asOfDate);

	
		try
		{
			result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "getRemittanceRecipients", pmLiheapPaymentCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getRemittanceRecipients", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	/**
	 * 
	 * @author tdatta
	 * Request for Payment for liheap
	 */

	public PmLiheapPaymentCargo[] getLiHeapRemittancePayments(long vendorId, String asOfDate) throws CoException, ParseException
	{
		PmLiheapPaymentCargo[] result = null;
		PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
		pmLiheapPaymentCargo.setVendorId(vendorId);
		pmLiheapPaymentCargo.setId(asOfDate);
		try
		{
			result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "getLiHeapRemittancePayments", pmLiheapPaymentCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	public EdIndvEligibilityCargo[] getEdIndvEligABAWD(long caseNumber,long indivId) throws  CoException {
		Object[] result = null;
		EdIndvEligibilityCargo edEligibilityCargo = new EdIndvEligibilityCargo();
		edEligibilityCargo.setCaseNum(caseNumber);
		edEligibilityCargo.setIndvId(indivId);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvEligibility", "findABAWDdetails",
					edEligibilityCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility--->findByCaseFSInCO", 16313);
		}
		return result == null ? null : (EdIndvEligibilityCargo[]) result;
	}
	
	
	/**
	 * @author asputta
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BvClaimRecoveryCargo[] getClaimRecoveryDetails(long caseNum,String programCd) throws CoException
	{
		BvClaimRecoveryCargo[] result = null;
		Object[] args=new Object[2];
		args[0]=caseNum;		
		args[1]=programCd;
		try
		{
			result =(BvClaimRecoveryCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
					"BvClaimRecovery", 
					"findClaimByCaseNum", null, args, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim_Recovery", 16357);
		}
		return result == null || result.length == 0 ? null : (BvClaimRecoveryCargo[]) result;
		
	}	
	
	
	/**
	 * @author asputta
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BvClaimRecoveryPlanCargo[] getClaimRecoveryPlans(String claimIds) throws CoException
	{
		BvClaimRecoveryPlanCargo[] result = null;
		Object[] args=new Object[1];
		args[0]=claimIds;
		try
		{
			result =(BvClaimRecoveryPlanCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
					"BvClaimRecoveryPlan", 
					"findByClaimIds", null, args, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimRecoveryPlan", 16357);
		}
		return result == null || result.length == 0 ? null : (BvClaimRecoveryPlanCargo[]) result;
	}	
	
	/**
	 * @author asputta
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] getClaimDetails(String claimIds) throws CoException
	{
		BvClaimCargo[] result = null;
		Object[] args=new Object[1];
		args[0]=claimIds;
		try
		{
			result =(BvClaimCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
					"BvClaim", 
					"findByClaimIds", null, args, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimRecoveryPlan", 16357);
		}
		return result == null || result.length == 0 ? null : (BvClaimCargo[]) result;
	}	
	
	/**
	 * @author asputta
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public BvRecoveryPlanDetCargo[] getClaimDetailsByResq(String claimIds,String recSeqs) throws CoException
	{
		BvRecoveryPlanDetCargo[] result = null;
		Object[] args=new Object[2];
		args[0]=claimIds;
		args[1]=recSeqs;
		
		try
		{
			result =(BvRecoveryPlanDetCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
					"BvRecoveryPlanDet", 
					"findPaymentPlanByClaimIdS", null, args, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvRecoveryPlanDet", 16357);
		}
		return result == null || result.length == 0 ? null : (BvRecoveryPlanDetCargo[]) result;
	}	

	public int updateRequestHistoryRFV(COCorrespondence coRequest) {
		int commitFlag = 0;
		CoDebugger.debugMessage("updateRequestHistoryRFV:coRequest-->"+coRequest.toString());

		boolean finalResult = false;
		CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
		coRequestHistoryCargo.setPendingTrigSw('B');
		coRequestHistoryCargo.setCoReqSeq(coRequest.getCoReqSeq());
		CorrespondenceServices.formatCoObject(coRequestHistoryCargo, coRequest);
		coRequestHistoryCargo.setRequestTypeCd(coRequest.getCaseAppFlag());
		coRequestHistoryCargo.setMiscParms("");
		coRequestHistoryCargo.setProgramCd(coRequest.getAssistanceProgramCode());
		coRequestHistoryCargo.setOrigPrintDt(null);
		coRequestHistoryCargo.setLanguageCd("EN");
		coRequestHistoryCargo.setActionCd(coRequest.getActionCode());
		coRequestHistoryCargo.setArchiveDt(Timestamp.valueOf("2999-12-31 00:00:00.0"));
		coRequestHistoryCargo.setDraftSw(coRequest.getDraftSwitch());
		coRequestHistoryCargo.setHistorySw(coRequest.getHistorySwitch());
		coRequestHistoryCargo.setDocTypeCd(coRequest.getDocType());
		coRequestHistoryCargo.setCreateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setCreateUserId(coRequest.getRequestUserId());
		coRequestHistoryCargo.setOrigPrintDt(null);
		coRequestHistoryCargo.setUpdateDt(CoDateFactory.getTimestamp());
		coRequestHistoryCargo.setManuallyGeneratedSw('N');
		coRequestHistoryCargo.setUpdateUserId(coRequest.getRequestUserId());
		coRequestHistoryCargo.setApptId(coRequest.getApptId());
		coRequestHistoryCargo.setDocId(coRequest.getDocId());
		coRequestHistoryCargo.setGenerateDt(coRequest.getGenerateDate());
		openConnection();
		CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
		coRequestHistoryCollection.setEJBSupported(false);
		coRequestHistoryCollection.setCargo(coRequestHistoryCargo);
		CoDebugger.debugMessage("udpateRequestHistory:coRequestHistoryCargo-->"	+ coRequestHistoryCargo.toString());
		try {
			StringBuffer actionName = new StringBuffer("Update:CoRequestHistory:");
			actionName.append(coRequest.getCaseAppNumber());
			StringBuffer issued = new StringBuffer("Issued by:");
			issued.append(coRequest.getRequestUserId());
			logStatement("CoDAOServices:updtRequestHistory", actionName.toString(),issued.toString(),conn);
			finalResult = coRequestHistoryCollection.update();
			logStatement("","","",conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
			commitFlag = -1;
		} finally {
			closeConnection();
		}
		if (finalResult) {
			openConnection();
			CoRequestHistoryDetailCollection coRequestHistoryDetailCollection = new CoRequestHistoryDetailCollection();
			coRequestHistoryDetailCollection.setEJBSupported(false);
			finalResult = false;
			CoRequestHistoryDetailCargo coRequestHistoryDetailCargo = new CoRequestHistoryDetailCargo();
			coRequestHistoryDetailCargo.setPrintMode(coRequest.getPrintMode());
			coRequestHistoryDetailCargo.setCoReqSeq(coRequest.getCoReqSeq());
			coRequestHistoryDetailCargo.setCoDetSeq(coRequest.getCoDetSeq());
			if (null!=coRequest && coRequest.getGenerateDate()!=null){
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(coRequest.getGenerateDate()));
			} else {
				coRequestHistoryDetailCargo.setReqDt(getNextWorkingDay(CoDateFactory.getTimestamp()));
			}
			coRequestHistoryDetailCargo.setReprintSw(CoConstants.PRINT_ORIGINAL);
			coRequestHistoryDetailCargo.setPrintDt(null);
			coRequestHistoryDetailCargo.setCreateDt(coRequest.getGenerateDate());
			coRequestHistoryDetailCargo.setCreateUserId(coRequest.getRequestUserId());
			coRequestHistoryDetailCargo.setUpdateUserId(coRequest.getRequestUserId());
			coRequestHistoryDetailCargo.setUpdateDt(CoDateFactory.getTimestamp());
			coRequestHistoryDetailCargo.setUpdateUserId(coRequest.getRequestUserId());
			coRequestHistoryDetailCargo.setArchiveDt(Timestamp.valueOf("2999-12-31 00:00:00.0"));
			coRequestHistoryDetailCollection.setCargo(coRequestHistoryDetailCargo);
			CoDebugger.debugMessage("udpateRequestHistory:coRequestHistoryDetailCargo-->" + coRequestHistoryDetailCargo.toString());
			try {
				finalResult = coRequestHistoryDetailCollection.update();
				commitFlag = 1;
			} catch (Exception e) {
				CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
				commitFlag = -1;
			} finally {
				closeConnection();
			}
		} else {
			commitFlag = -1;
		}
		try {
			if (conn != null && ("I").equals(coRequest.getRunMode())) {
				CoDebugger.debugInformation("updateRequestHistory to not close for online");
			}
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - updateRequestHistory - exception - "+e.getMessage(), e);
			commitFlag = -1;
		}
		return commitFlag;
	}
	
	public String getNotesTextFromCoManualData(long coReqSeq, long SeqNum, long fieldOrderNum){
             CoManualDataCargo coManualDataCargo = new CoManualDataCargo();
             CoManualDataCollection coManualDataColl = new CoManualDataCollection();
             CoManualDataCargo[] coManualDataCargoArr = null;
             Object[] obj = new Object[1];
             coManualDataCargo.setCoReqSeq(coReqSeq);
             coManualDataCargo.setSeqNum(SeqNum);
             coManualDataCargo.setFieldOrderNum(fieldOrderNum);
             coManualDataColl.setCargo(coManualDataCargo);
             obj[0]= coManualDataCargo;
             try {
                    coManualDataCargoArr = (CoManualDataCargo[]) coManualDataColl.select("findBySeqNumReqSeqAndFieldOrder", obj);
             } catch (Exception e) {
                    CoDebugger.debugException("CoDAOServices - getNotesTextFromCoManualData - exception - "+e.getMessage(), e);
             }
             if(null != coManualDataCargoArr[0].getNotesTxt() && !("".equalsIgnoreCase(coManualDataCargoArr[0].getNotesTxt().toString()))){
                    return coManualDataCargoArr[0].getNotesTxt().toString();
             } else {
                    return "";
             }
       
       

}
	
	//ND-58777 Changes for cases are flagged for change reporting-BEGIN
		/**
		 * findFlagChangeReportingRTRC
		 * @param caseNum
		 * @return
		 * @throws CoException
		 */
		public EdChangeReportingDtlsCargo[] findFlagChangeReportingRTRC() throws CoException {
			Object[] obj = new Object[1];
			EdChangeReportingDtlsCollection dtlsCollection= new EdChangeReportingDtlsCollection();
			EdChangeReportingDtlsCargo[] edChangeReportingDtlsCargos=null;
			EdChangeReportingDtlsCargo cargo = new EdChangeReportingDtlsCargo();
			cargo.setChangeRptFlg(CoConstants.YES_CHAR);
			dtlsCollection.setCargo(cargo);
			obj[0]=cargo;
			
             try {
            	 edChangeReportingDtlsCargos = (EdChangeReportingDtlsCargo[]) dtlsCollection.select("findChangeReportingMA", obj);
             } catch (Exception e) {
 				CoDebugger.debugException(e.getMessage(), e);
 				throw new CoException("Select failed for EdChangeReportingDtlsCargo", 16751);
 			}
			
             if (edChangeReportingDtlsCargos == null || edChangeReportingDtlsCargos.length == 0) {
     			throw new NoDataFoundException("No data in edChangeReportingDtlsCargos",16037);
     		}

     		return edChangeReportingDtlsCargos;
		}
	//ND-58777 Changes for cases are flagged for change reporting-END	
		
		public int updateExistingMassMailing(CoMassMailingReqCollection col) {
			long startTime =  new FwDate().getTimeInMillis(); 
			log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - updateExistingMassMailing - started");
			int commitFlag = 0;
			boolean finalResult = false;
			openConnection();
			// End of changes to persist
					try {
						openConnection();
						CoDebugger.logWithLevel("OPENED CONNECTION***************", ILog.FATAL);
						finalResult = col.update();
						
					} catch (Exception e) {

						CoDebugger.debugException("CoDAOServices - updateExistingMassMailing - exception - "+e.getMessage(), e);			
						commitFlag = -1;
						return commitFlag;
					} finally {
						closeConnection();
						CoDebugger.logWithLevel("CLOSED CONNECTION***************", ILog.FATAL);

					}

			return 0;
			
		}
		
		
		public PmVendorCaseAssocCargo[] findByCaseNumberProviderIdAndFuelType(String providerId, String caseNo, String fuelType) throws CoException {
			Object[] result = null;
			PmVendorCaseAssocCargo assocCargo = new PmVendorCaseAssocCargo();
			assocCargo.setAssociationStatus(providerId);
			assocCargo.setCaseNum(Long.valueOf(caseNo));
			assocCargo.setApprovedFuelType(fuelType);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findByCaseNumberProviderIdAndFuelType", assocCargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for PmVendorCaseAssoc > NDLI0104Assembler", 16751);
			}
			return result == null ? null : (PmVendorCaseAssocCargo[]) result;
		}
		public Object[] getMembersDetailsforSnap(long casenum) throws CoException {
			Object[] result = null;
			DcIndvCargo dcIndvCargo = new DcIndvCargo();
			Object[] params = new Object[1];
			params[0] = casenum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcIndv", "findByCaseNumForSnap", dcIndvCargo, params,
						conn);
			} catch (Exception e) {
				CoDebugger.debugException("CoDAOServices - getDcIndividual - exception message"+e.getMessage(), e);
				throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV", 16319);
			}
			return result;
		}
		
		/**
		 * @author asputta
		 * @param caseNum
		 * @return
		 * @throws CoException
		 */
		public EdIndvPenaltiesCargo[] getTranferedIndvDetails(long caseNum,String nonCoopSeq) throws CoException
		{
			EdIndvPenaltiesCargo[] result = null;
			Object[] args=new Object[2];
			args[0]=caseNum;
			args[1]=nonCoopSeq;
			try
			{
				result =(EdIndvPenaltiesCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
						"EdIndvPenalties", 
						"findByCaseNonCoop", null, args, conn);
			}
			catch (Exception e)
			{

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdIndvPenalties", 16357);
			}
			return result == null || result.length == 0 ? null : (EdIndvPenaltiesCargo[]) result;
		}	
		
		public DcIndvNonCooperationCargo[] getNDTNFN116triggersForOpenCases(String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndvNonCooperation", "getNDTNFN116triggersForOpenCases", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		public DcIndvNonCooperationCargo[] getNDTNFN116triggersForClosedCases(String asOfDate) throws CoException{
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = asOfDate;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndvNonCooperation", "getNDTNFN116triggersForClosedCases", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		public DcIndvNonCooperationCargo[] getNDTNFN116triggersForOpenCasesOnFirstWorkingDayOfMonth(String adequateNoticeDate, String firstWorkingDayOfMonth) throws CoException{
			Object[] result = null;
			Object[] args = new Object[2];
			args[0] = adequateNoticeDate;
			args[1] = firstWorkingDayOfMonth;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndvNonCooperation", "getNDTNFN116triggersForOpenCasesOnFirstWorkingDayOfMonth", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		public DcIndvNonCooperationCargo[] getNDTNFN116triggersForClosedCasesOnFirstWorkingDayOfMonth(String adequateNoticeDate, String firstWorkingDayOfMonth) throws CoException{
			Object[] result = null;
			Object[] args = new Object[2];
			args[0] = adequateNoticeDate;
			args[1] = firstWorkingDayOfMonth;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndvNonCooperation", "getNDTNFN116triggersForClosedCasesOnFirstWorkingDayOfMonth", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		public DcCaseProgramCargo[] getOpenCaseByCaseNum(long caseNum) throws NoDataFoundException, CoException {
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = caseNum;

			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCaseProgram", "findOpenCaseByCaseNum",
						null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcCaseProgramCargo-->>getOpenCaseByCaseNum", 16312);
			}
			return result == null ? null : (DcCaseProgramCargo[]) result;
		}
		
		public DcCaseProgramCargo[] getClosedCaseByCaseNum(long caseNum) throws NoDataFoundException, CoException {
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = caseNum;

			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCaseProgram", "findClosedCaseByCaseNum",
						null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcCaseProgramCargo-->>getClosedCaseByCaseNum", 16312);
			}
			return result == null ? null : (DcCaseProgramCargo[]) result;
		}
		
		/**
		  * added by aayush				
		  * @param indivId
		  * @return
		  * @throws CoException
		  */
		  public DcLiheapCargo[] getLiheapSourceDetailsForIndv(long[] IndivId) throws  CoException {
		 	Object[] result = null;
		 	Object [] params= new Object[1];
		 	params[0] = IndivId;
		 	try {
		 			result = CoDAOFactory.select(
		 				"gov.state.nextgen.common.collection.custom",
		 				"DcLiheap", "findIndividualsInCase",
		 				null, params, conn);
		 		} catch (Exception e) {
		 			CoDebugger.debugException(e.getMessage(), e);
		 			throw new CoException("Select failed for DcLiheapCargo--->findIndividualsInCase", 16313);
		 		}
		 		return result == null ? null : (DcLiheapCargo[]) result;
		 	}
		  
		  
		  /**
			  * added by tdatta				
			  * @param caseNo
			  * @return
			  * @throws CoException
			  */
		  public PmVendorCaseAssocCargo[] findLatestByCaseNumber(String caseNo) throws CoException {
				Object[] result = null;
				PmVendorCaseAssocCargo assocCargo = new PmVendorCaseAssocCargo();
				assocCargo.setCaseNum(Long.valueOf(caseNo));
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findLatestByCaseNumber", assocCargo, null, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for PmVendorCaseAssoc > NDNLIREHH90Assembler", 16751);
				}
				return result == null ? null : (PmVendorCaseAssocCargo[]) result;
			}
		
	  public CoHealthInsuranceCargo[] getHealthInsuranceDynaData(long coReqSeq) throws CoException {
				Object[] result = null;
				CoHealthInsuranceCargo coHealthInsuranceCargo = new CoHealthInsuranceCargo();
				coHealthInsuranceCargo.setCoReqSeq(String.valueOf(coReqSeq));
				
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"CoHealthInsurance", "findByDocIdAndSeqNum",
							coHealthInsuranceCargo, null, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for coHealthInsurance", 16312);
				}
				return result == null ? null : (CoHealthInsuranceCargo[]) result;
			}
	  public CoManualAdditionalInfoCargo[] getAddInfoDynaData(long coReqSeq) throws CoException {
			Object[] result = null;
			CoManualAdditionalInfoCargo coManualAdditionalInfoCargo = new CoManualAdditionalInfoCargo();
			coManualAdditionalInfoCargo.setCoReqSeq(String.valueOf(coReqSeq));
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"CoManualAdditionalInfo", "findByDocIdAndSeqNum",
						coManualAdditionalInfoCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for coManualAdditionalInfo", 16312);
			}
			return result == null ? null : (CoManualAdditionalInfoCargo[]) result;
		}
	  public CoJobsGoodCauseCargo[] getJobsGoodCauseDynaData(long coReqSeq) throws CoException {
			Object[] result = null;
			CoJobsGoodCauseCargo coManualAdditionalInfoCargo = new CoJobsGoodCauseCargo();
			coManualAdditionalInfoCargo.setCoReqSeq(String.valueOf(coReqSeq));
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"CoJobsGoodCause", "findByDocIdAndSeqNum",
						coManualAdditionalInfoCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for CoJobsGoodCause", 16312);
			}
			return result == null ? null : (CoJobsGoodCauseCargo[]) result;
		}
	  
	  public EdEligibilityCargo[] getEligibilityByJustCaseNum(long caseNum) throws CoException {
			Object[] result = null;
		 	Object [] params= new Object[1];
		 	params[0] = caseNum;
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "getEligibilityByJustCaseNum",
						null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligibility", 16312);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;
		}
	  private int insertRequestRecipientForNoticeNDCCAP65(COCorrespondence coRequest) throws CoException{
			int ret = 0;
			coRequest.setCaseAppFlag(CoConstants.RECIPIENT_SPACES_PROVIDER);
				ret= insertOriginalRequest(coRequest);
			
			return ret;
			
		}
	  

	  /**
	   * @author asputta
	   * @param indvIds
	   * @return
	   * @throws CoException
	   */
	  public DcPregnanciesCargo[] getPregnancyDueDate(String indvIds) throws CoException {
			Object[] result = null;
		 	Object [] params= new Object[1];
		 	params[0] = indvIds;
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcPregnancies", "findByPregnantIndvIds",
						null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligibility", 16312);
			}
			return result == null ? null : (DcPregnanciesCargo[]) result;
		}
	  
	  public void CCAPcertificateTrigger(long caseNum, long providerId , String program,String create_user){
		  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Start");
		  try{
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Inserting trigger for NDCCAP064 and NDCCAP063");
			  generateCCAPCertificateTrigger(caseNum, providerId, program, create_user);
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Trigger for NDCCAP064 and NDCCAP063 inserted successfully");
		  }catch(Exception e){
			  CoDebugger.debugException("CoDAOServices - CCAPcertificateTrigger - exception while inserting trigger for NDCCAP064 and NDCCAP063  - "+e.getMessage(), e);
		  }finally{
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Connection closed for NDCCAP064 and NDCCAP063");
			  this.closeConnection();
		  }
		  
		  /*try{
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Inserting trigger for NDCCAP063");
			  if(triggerInsertedForNoticeCCAP63){
				  generateNDCCAP063Trigger(caseNum, providerId, program);
			  }
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Trigger for NDCCAP063 inserted successfully");
		  }catch(Exception e){
			  CoDebugger.debugException("CoDAOServices - CCAPcertificateTrigger - exception while inserting trigger for NDCCAP063 - "+e.getMessage(), e);
		  }finally{
			  CoDebugger.debugMessage("CoDAOServices - CCAPcertificateTrigger - Connection closed for NDCCAP063");
			  this.closeConnection();
		  }*/
	  }
	  
	  public Object[] getAllIndvByINDVID(long indvId) throws CoException {
			Object[] result = null;
			VDcCaseIndvDetailsCargo cargo = new VDcCaseIndvDetailsCargo();
			cargo.setT1IndvId(indvId);
			try {
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"VDcCaseIndvDetails", "findByCoIndvId", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for V_DC_CASE_INDV_DETAILS",
						16369);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in V_DC_CASE_INDV_DETAILS",
						16072);
			}
			return result;
		}
	  
	  
		public boolean checkActiveAutomaticTriggerExistForCaseAndProvider(COCorrespondence aCoObj)throws CoException {
			Object[] result = null;
			CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
			cargo.setDocId(aCoObj.getDocId());
			cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
			cargo.setProviderId(Long.valueOf(aCoObj.getProviderId()));
			CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNumProviderId", cargo, null,
						conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for CoRequest", 16099);
			}
			if (result != null && result.length > 0) { // then check in Detail
				CoDebugger.debugInformation("CO Request Exist");
				return true;
			} else {
				CoDebugger.debugInformation("CO Request Does not  Exist");
				return false;
			}		
		}

		
			  
		  public void generateNDLIN0109Trigger(long caseNum, long vendor_id, long assoc_id) {
				CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDLIN0109Trigger(long,long,long)");
				CoDebugger.debugMessage("Case Num:"+caseNum);
				CoDebugger.debugMessage("Vendor Id:"+vendor_id);
				CoDebugger.debugMessage("Association id:"+assoc_id);
				long officeNumber = 0;
				long empID = 0;
				COCorrespondence correspondence = new COCorrespondence();
				correspondence.setAssistanceProgramCode(CoConstants.SELECTED_VAL_LIHEAP);				
				MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
				Object[] params = { caseNum, CoConstants.EMPTY_STRING };
				MoEmployeesCargo[] moEmployeesCargos = null;
				try {
					moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
				} catch (Exception e) {
					CoDebugger.debugException("CoDAOService.generateNDLIN0109Trigger-->Application gexception", e);
				}
				if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
					officeNumber = moEmployeesCargos[0].getPriOfficeNum();
					empID = moEmployeesCargos[0].getEmpId();
				}
				correspondence.setOfficeNumber(officeNumber);
				correspondence.setCaseAppFlag(CoConstants.RECIPIENT_VENDOR);
				correspondence.setCaseAppNumber(String.valueOf(caseNum));
				correspondence.setEmpId(empID);
				correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
				correspondence.setDocId(CoConstants.DOC_ID_NDLIN0109);
				correspondence.setProviderId(vendor_id);
				correspondence.setMiscParameters(String.valueOf(assoc_id));
				java.util.Date dt = null;
				if (correspondence.getGenerateDate() == null) {
					dt = CoDateFactory.getUtilDate();
				} else {
					dt = correspondence.getGenerateDate();
				}
				correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
				try {
					if (!this.checkActiveAutomaticTriggerExistForCaseVendorAssocId(correspondence)) {
						this.generateCorrespondenceRequest(correspondence);
					}else if(this.checkActiveAutomaticTriggerExistForCaseVendorAssocId(correspondence)){
						CoDebugger.debugMessage("CoDAOService.generateNDLIN0109Trigger-->Skipping this trigger. Active trigger for today already exist ");
					}else{
						CoDebugger.debugMessage("CoDAOService.generateNDLIN0109Trigger-->Unable to generate trigger. No LIHEAP trigger request ");
					}
				} catch (CoException e) {
					CoDebugger.debugException("CoDAOService.generateNDLIN0109Trigger-->Error while checking the existence of the request in the co_request_details", e);
				}
				CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDLIN0109Trigger(long,long,long)");
			}
	
			/**
			 * This function  fetches from pm_vendor_case_assoc based on assoc_id
			 * @author shreyasingh
			 * @param assoc_id
			 * @return Object
			 * @throws CoException
			 */
				  
			public PmVendorCaseAssocCargo[] getAssociatedVendor(long assoc_id) throws CoException {
				Object[] result = null;
				PmVendorCaseAssocCargo assocCargo = new PmVendorCaseAssocCargo();
				assocCargo.setVendorCaseAssocId(assoc_id);
				try {
					result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findAssociatedVendor", assocCargo, null, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for PmVendorCaseAssoc > LiheapReferral", 16751);
				}
				return result == null ? null : (PmVendorCaseAssocCargo[]) result;
			}
		
		
		public DcChildAbsntDetailsCargo[] findChildWithAbsentParentByCaseNum(long case_num) throws CoException {
			Object[] result = null;
			DcChildAbsntDetailsCargo cargo = new DcChildAbsntDetailsCargo();
			cargo.setCaseNum(case_num);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildAbsntDetails", "findChildWithAbsentParentByCaseNum", cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcChildAbsntDetailsCargo > NDHCCTF79Assembler", 16751);
			}
			return result == null ? null : (DcChildAbsntDetailsCargo[]) result;
		}
		
		public DcChildAbsntDetailsCargo[] findChildWithAbsentParentByCaseNumNotReferred(long case_num) throws CoException {
			Object[] result = null;
			DcChildAbsntDetailsCargo cargo = new DcChildAbsntDetailsCargo();
			cargo.setCaseNum(case_num);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildAbsntDetails", "findChildWithAbsentParentByCaseNumNotReferred", cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcChildAbsntDetailsCargo > NDHCCTF79Assembler", 16751);
			}
			return result == null ? null : (DcChildAbsntDetailsCargo[]) result;
		}
		
		public DcAbsentParentsCargo[] findAbsentParentByCaseNumSeqNum(long case_num, long seq_num) throws CoException {
			Object[] result = null;
			DcAbsentParentsCargo cargo = new DcAbsentParentsCargo();
			cargo.setCaseNum(case_num);
			cargo.setAbsentParentSeqNum(seq_num);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcAbsentParents", "findByCaseNumSeqNum", cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcAbsentParentsCargo > NDHCCTF79Assembler", 16751);
			}
			return result == null ? null : (DcAbsentParentsCargo[]) result;
		}
		  public Object[] getDetailsByBillingNo(long billingno) throws CoException {
				Object[] result = null;
				Object [] params= new Object[1];
			 	params[0] = billingno;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"DcIndv", "findByBillingNumber", null, params,
							conn);
				} catch (Exception e) {
					CoDebugger.debugException("CoDAOServices - getDetailsByBillingNo- exception - individualID "+e.getMessage(), e);
					
				}
				return result;
			}
		  public Object[] findByIncomeAssetEligible(long caseNum) throws CoException {
				Object[] result = null;
				EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
				edEligibilityCargo.setCaseNum(caseNum);
				
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findByIncomeAssetEligible", edEligibilityCargo,
							null, conn);
				} catch (Exception e) {

					CoDebugger.debugException("CoDAOServices - findByIncomeAssetEligible - exception - "+e.getMessage(), e);
					
				}
				return result;
			}
		  public Object[] findLiheapCaseNum(long caseNum) throws CoException {
				Object[] result = null;
				EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
				edEligibilityCargo.setCaseNum(caseNum);
				
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "findLiheapCaseNum", edEligibilityCargo,
							null, conn);
				} catch (Exception e) {

					CoDebugger.debugException("CoDAOServices - findByIncomeAssetEligible - exception - "+e.getMessage(), e);
					
				}
				return result;
			}

		  
		  /**
		   * This fuction checks if trigger exists based on doc id, case_num and vendor_case_assoc_id
		   * @param aCoObj
		   * @return
		   * @throws CoException
		   */
		  
			public boolean checkActiveAutomaticTriggerExistForCaseVendorAssoc(COCorrespondence aCoObj)throws CoException {
				Object[] result = null;
				CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
				cargo.setDocId(aCoObj.getDocId());
				cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
				cargo.setMiscParms(aCoObj.getMiscParameters());
				CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"CoRequestHistory", "findAutomaticTriggersByDocIdCaseNumVendorAssocID", cargo, null,
							conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for CoRequest", 16099);
				}
				if (result != null && result.length > 0) { // then check in Detail
					CoDebugger.debugInformation("CO Request Exist");
					return true;
				} else {
					CoDebugger.debugInformation("CO Request Does not  Exist");
					return false;
				}		
			}
			  /**
			   * This fuction checks if trigger exists based on doc id, case_num and vendor_case_assoc_id and vendor_id
			   * @param aCoObj
			   * @return
			   * @throws CoException
			   */
			  
				public boolean checkActiveAutomaticTriggerExistForCaseVendorAssocId(COCorrespondence aCoObj)throws CoException {
					Object[] result = null;
					CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
					cargo.setDocId(aCoObj.getDocId());
					cargo.setProviderId(aCoObj.getProviderId());
					cargo.setCaseNum(Long.valueOf(aCoObj.getCaseAppNumber()));
					cargo.setMiscParms(aCoObj.getMiscParameters());
					CoDebugger.debugInformation("CO Request Generate Date is " + aCoObj.getGenerateDate());
					try {
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"CoRequestHistory", "findAutomaticTriggersByDocIdProviderIdAssocId", cargo, null,
								conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for CoRequest", 16099);
					}
					if (result != null && result.length > 0) { // then check in Detail
						CoDebugger.debugInformation("CO Request Exist");
						return true;
					} else {
						CoDebugger.debugInformation("CO Request Does not  Exist");
						return false;
					}		
				}
			
			 /**
			   * @author asputta
			   * @param asOfDate
			   * @return
			   * @throws CoException
			   */
				public EdEligibilityCargo[] getAuthRecords(long caseNum, String programCd) throws CoException{
					Object[] result = null;
					Object[] params=new Object[2];
					params[0]= caseNum;
					params[1]= programCd;

					try {
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom", "EdEligibility",
								"findByCurrentEligRecordsByProgram", null, params, conn);

					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for getAuthRecords", 16908);
					}
					return result == null || result.length == 0 ? null
							: (EdEligibilityCargo[]) result;
				}	 
				
				
				/**
				 * @author asputta
				 */
			public DcTransferedResourcesCargo[] getTransferedResourceDetailsbyCaseNum(
						long caseNum) throws CoException {
						Object[] result = null;
						Object [] params= new Object[1];
						params[0] = caseNum;
						
						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"DcTransferedResources",
									"findByIndividualsInCase", null,
									params, conn);
						}  catch (Exception e) {

							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for DcTransferedResources", 16900);
						}
						return result == null ? null : (DcTransferedResourcesCargo[]) result;
					}		
			
			  /**START: client Notice Of Action*/
				public EdEligibilityCargo[] getEdRecordsLI(long caseNum,String asOfDate) throws CoException {
					Object[] result = null;
					EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
					Object[] args = new Object[2];
					args[0]=caseNum;
					args[1]=asOfDate;
					try {
						result =  CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"EdEligibility", "findLICases",
								edEligibilityCargo, args, conn);
					} catch (Exception e) {

						CoDebugger.debugException("CoDAOServices - getEdRecordsLI - exception - "+e.getMessage(), e);
						throw new CoException("CoDAOServices - getEdRecordsLI - exception - Select failed for ED_ELIGIBILITY", 16335);
					}			
					return result == null ? null : (EdEligibilityCargo[]) result;
				}
				
				public PmVendorCaseAssocCargo[] getVendorsByCase(long caseNum) throws CoException{
					 CoDebugger.debugInformation("START: CODAOServices -> getVendorsByCase ");
					PmVendorCaseAssocCargo[] result = null;
					Object [] params= new Object[1];
					params[0]=caseNum;
				
			                  try
			                  {
			                                 result =(PmVendorCaseAssocCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findByCaseVendors", null, params, conn);
			                  }
			                  catch (Exception e)
			                  {
			                                 CoDebugger.debugException(e.getMessage(), e);
			                                 throw new CoException("CODAOSERVICES --> Select failed for PmVendorCaseAssocDAO --> getVendorsByCase --", 16357);
			                  }	           
			                  CoDebugger.debugInformation("EXIT: CODAOServices -> getVendorsByCase ");
			                  return result;
				}
				
				public EdEligibilityCargo[] getPrevEdDetails(EdEligibilityCargo cargo) throws CoException{
					 CoDebugger.debugInformation("START: CODAOServices -> getPrevEdDetails ");
					 EdEligibilityCargo[] result = null;		
					 Object[] args= new Object[1];
					 args[0]=cargo;
				
			                  try
			                  {
			                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findLIPrevEdRecords", null, args, conn);
			                  }
			                  catch (Exception e)
			                  {
			                                 CoDebugger.debugException(e.getMessage(), e);
			                                 throw new CoException("CODAOSERVICES --> Select failed for EdEligibilityDAO --> findLIPrevEdRecords --", 16357);
			                  }	           
			                  CoDebugger.debugInformation("EXIT: CODAOServices -> getPrevEdDetails ");
			                  return result;
				}
				
				
				public PmLiheapVendorCargo[] getVendorData(Integer vendorId) throws CoException{
					 CoDebugger.debugInformation("START: CODAOServices -> getVendorData ");
					 PmLiheapVendorCargo[] result = null;	
					 PmLiheapVendorCargo cargo=new PmLiheapVendorCargo();
					 cargo.setSpacesVendorId(vendorId);
					 
				
			                  try
			                  {
			                                 result =(PmLiheapVendorCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "coFindByVendorIdHist", cargo,null, conn);
			                  }
			                  catch (Exception e)
			                  {
			                                 CoDebugger.debugException(e.getMessage(), e);
			                                 throw new CoException("CODAOSERVICES --> Select failed for PmLiheapVendorDAO --> coFindByVendorIdHist --", 16357);
			                  }	           
			                  CoDebugger.debugInformation("EXIT: CODAOServices -> getVendorData ");
			                  return result;
				}
				
				public DcLiheapCargo[] getCaseVendorFuel(String heatingSeason,long caseNum) throws CoException{
					 CoDebugger.debugInformation("START: CODAOServices -> getCaseVendorFuel ");
					 DcLiheapCargo[] result = null;		
					 Object[] args= new Object[2];
					 args[0]=heatingSeason;
					 args[1]=caseNum;
				
			                  try
			                  {
			                                 result =(DcLiheapCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcLiheap", "findCaseFuelCo", null, args, conn);
			                  }
			                  catch (Exception e)
			                  {
			                                 CoDebugger.debugException(e.getMessage(), e);
			                                 throw new CoException("CODAOSERVICES --> Select failed for DcLiheapDAO --> findCaseFuelCo --", 16357);
			                  }	           
			                  CoDebugger.debugInformation("EXIT: CODAOServices -> getCaseVendorFuel ");
			                  return result;
				}				
				
			  /*END of Client Notice Of Action*/
				/**
				 * @author shreyasingh
				 * @param providerId
				 * @return
				 * @throws CoException
				 */
				public PmLiheapVendorCargo[] getByVendorIdHistNav(long providerId) throws CoException{
					PmLiheapVendorCargo[] result = null;
					PmLiheapVendorCargo cargo=new PmLiheapVendorCargo();
					cargo.setSpacesVendorId(((Long)providerId).intValue());
					try
					{
						result =(PmLiheapVendorCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findByVendorIdHistNav", cargo, null, conn);
					}
					catch (Exception e)
					{
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for PmLiheapVendor", 16357);
					}
					return result == null || result.length == 0 ? null: result;
				}
				
/**
 * @author asputta
 */
 public TcClockDetailsCargo[] getTanfClckDetails(long caseNum) throws CoException {
	 Object[] result = null;
		Object [] params= new Object[1];
		params[0] = caseNum;					
						
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"TcClockDetails",
					"findByPersonIdForTanfTimeClk", null,
					params, conn);
		}  catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for TcClockDetailsCargo", 16900);
		}				
						return result == null ? null : (TcClockDetailsCargo[]) result;
	}	
 
	/**
	 * Method to get data from BI_PAYEE_DETAIL based on edg_num and benefit_num.
	 * @author shreyasingh
	 * @param edgNum
	 *            long
	 * @param benefitNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getByEdgeBenefitRecordLink(long edgNum, long benefitRecLink, String benefitNum)
			throws CoException {
		Object[] result = null;
		BiPayeeDetailCargo biPayeeDetailCargo = new BiPayeeDetailCargo();
		biPayeeDetailCargo.setEdgNum(edgNum);
		biPayeeDetailCargo.setBenefitNum(benefitNum);
		biPayeeDetailCargo.setBenefitRecLink(benefitRecLink);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiPayeeDetail", "findByEdgeBenefitRecordLink",
					biPayeeDetailCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_PAYEE_DETAIL", 000);
		}
		return result == null || result.length == 0 ? null: result;
	}
	/**
	 * Method to get data from BI_PAYEE_DETAIL based on edg_num and benefit_num.
	 * @author shreyasingh
	 * @param edgNum
	 *            long
	 * @param benefitNum
	 *            String
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getByWarrantLinkNum(long warrantLinkNum)
			throws CoException {
		Object[] result = null;
		BiWarrantPayeeDetailCargo biWarrantPayeeDetailCargo = new BiWarrantPayeeDetailCargo();
		biWarrantPayeeDetailCargo.setWarrantLinkNum(warrantLinkNum);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiWarrantPayeeDetail", "findByWarrantLinkNum",
					biWarrantPayeeDetailCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_PAYEE_DETAIL", 000);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	/**
	 * @author shreyasingh
	 * 
	 */

	public PmLiheapPaymentCargo[] getRejectedPayments(long caseNum, Timestamp asOfDate) throws CoException, ParseException{
		PmLiheapPaymentCargo[] result = null;
		PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
		pmLiheapPaymentCargo.setCreateDt(asOfDate);
		pmLiheapPaymentCargo.setCaseNum(caseNum);
		try
		{
			result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "findRejectedPayments", pmLiheapPaymentCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	 /**
		 * getBiIssuanceAuthPaymentsLI fetches from BiIssuanceTrigger based on case number and authorization date
		 * @author shreyasingh
		 * @param caseNum
		 * @param asOfDate
		 * @return
		 * @throws CoException
		 * @throws ParseException
		 */
		public BiIssuanceTriggerCargo[] getBiIssuancefindByAuthDate(long caseNum,Timestamp asOfDate) throws CoException, ParseException
		{
			BiIssuanceTriggerCargo[] result = null;
			BiIssuanceTriggerCargo biIssuanceTriggerCargo = new BiIssuanceTriggerCargo();
			biIssuanceTriggerCargo.setCaseNum(caseNum);
			biIssuanceTriggerCargo.setAuthorizationDt(asOfDate);
			
			try
			{
				result =(BiIssuanceTriggerCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
						"BiIssuanceTrigger", "findByAuthDate", biIssuanceTriggerCargo, null, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for BiIssuanceTriggerDetail", 16357);
			}
			return result == null || result.length == 0 ? null: result;

		}
		public EdEligibilityCargo[] findEligforAPTNCases(long caseNum,String asOfDate) throws ParseException, CoException{
			EdEligibilityCargo[] result = null;
			  
			Object[] objParams = new Object[2];
			objParams[0] = caseNum;
			objParams[1] = asOfDate;
			
	                  try
	                  {
	                                 result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findEligforAPTNCases", null, objParams, conn);
	                  }
	                  catch (Exception e)
	                  {
	                                 CoDebugger.debugException(e.getMessage(), e);
	                                 throw new CoException("Select failed for findEligforAPTNCases", 16357);
	                  }
	                  return result == null || result.length == 0 ? null: result;
		}
		
		/*START:NOTICE OF CLAIM*/
		/* 
		 * @author akankshagupta
		 * @param caseNum
		 *            long	
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 */
		public Object[] getCCAPEligibleNoticeOfClaim(long caseNum,String claimBegDt,String claimEndDt)
				throws CoException {
			Object[] result = null;	
			Object[] args = new Object[3];
			args[0] = caseNum;
			args[1] = claimBegDt;
			args[2] = claimEndDt;
			VEdEligibilityIndvCargo cargo=new VEdEligibilityIndvCargo();
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"VEdEligibilityIndv", "getCCAPEligibleForNoticeOfClaim",cargo,args,conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getCCAPEligibleNoticeOfClaim---->getCCAPEligibleForNoticeOfClaim", 16765);
			}

			return result;
		}
		/*END:NOTICE OF CLAIM*/
		
		public DcCaseProgramCargo[] getClosedCCAPCaseByCaseNum(long caseNum) throws CoException, ParseException
		{
			DcCaseProgramCargo[] result = null;
			DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
			dcCaseProgramCargo.setCaseNum(caseNum);
			
			try
			{
				result =(DcCaseProgramCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
						"DcCaseProgram", "getClosedCCAPCaseByCaseNum", dcCaseProgramCargo, null, conn);
			}
			catch (Exception e)
			{
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getClosedCCAPCaseByCaseNum", 16357);
			}
			return result == null || result.length == 0 ? null: result;

		}
		public EdEligibilityCargo[] getCancelledLiheapLumpSumCases(long caseNum) throws CoException {
			EdEligibilityCargo[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setCaseNum(caseNum);
		
			try {
				result = (EdEligibilityCargo[]) CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findByCancelledLiheapLumpSumRecords", edEligibilityCargo,
						null, conn);
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - getCancelledLiheapLumpSumCases - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - getCancelledLiheapLumpSumCases - exception - Select failed for ED_ELIGIBILITY", 16335);
			}
			return result;
		}
		
		  public EdEligibilityCargo[] getEdRecordsLIFromVm(long caseNum, String asOfDate) throws CoException
		  {
		    Object[] result = null;
		    EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		    Object[] args = new Object[2];
		    args[0] = Long.valueOf(caseNum);
		    args[1] = asOfDate;
		    try {
		      result = CoDAOFactory.select(
		        "gov.state.nextgen.common.collection.custom", 
		        "EdEligibility", "findLICasesCoFromVm", 
		        edEligibilityCargo, args, this.conn);
		    }
		    catch (Exception e) {
		      CoDebugger.debugException("CoDAOServices - getEdRecordsLIFromVm - exception - " + e.getMessage(), e);
		      throw new CoException("CoDAOServices - getEdRecordsLIFromVm - exception - Select failed for ED_ELIGIBILITY", 16335);
		    }
		    return ((result == null) ? null : (EdEligibilityCargo[])result);
		  }
		  /**
		   * @author asputta
		   */
		   public  DcOtherProgramsCargo[] getEarnedRightBenefitsDetails(long caseNum) throws CoException {
		  	 Object[] result = null;
		  		Object [] params= new Object[1];
		  		params[0] = caseNum;					
		  						
		  		try {
		  			result = CoDAOFactory.select(
		  					"gov.state.nextgen.common.collection.custom",
		  					"DcOtherPrograms",
		  					"findByCaseNum", null,
		  					params, conn);
		  		}  catch (Exception e) {

		  			CoDebugger.debugException(e.getMessage(), e);
		  			throw new CoException("Select failed for TcClockDetailsCargo", 16900);
		  		}				
		  						return result == null ? null : (DcOtherProgramsCargo[]) result;
		  	}
		   
			public EdEligibilityCargo[] getEdEligibilityforDeniedIndv(long caseNum, long indvId)
					throws CoException {
				Object[] result = null;
				EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
				edEligibilityCargo.setCaseNum(caseNum);
				edEligibilityCargo.setTargetPersonId(indvId);
				//edEligibilityCargo.setEligEffEndDt(CoDateFactory.getTimestamp());
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligibility", "getEdEligibilityforDeniedIndv",
							edEligibilityCargo, null, conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for getEdEligibilityforDeniedIndv");
				}
				return ((result == null) ? null : (EdEligibilityCargo[])result);
			}
			
			
			public Object[] getOverrideReasons(long caseNum, String edgTraceIdsStringForQuery) throws CoException {
				Object[] result = null;
				Object[] params=new Object[2];
				params[0]=caseNum;
				params[1]=edgTraceIdsStringForQuery;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "EdEdgOverride",
							"findByEdgTraceId", null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEdgOverride ", 16795);
				}

				return result;
			}
			
			public Object[] getOverrideReasonsForSnapTanf(long caseNum, String edgNumsStringForQuery) throws CoException {
				Object[] result = null;
				Object[] params=new Object[2];
				params[0]=caseNum;
				params[1]=edgNumsStringForQuery;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "EdEdgOverride",
							"findByEdgNums", null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEdgOverride ", 16795);
				}

				return result;
			}
			
			public EdIndvEligibilityCargo[] getCCAPChild(String EdgTraceId, long caseNum)
					throws CoException {
				Object[] result = null;
				
				Object[] params=new Object[2];
				params[0]=caseNum;
				params[1]=EdgTraceId;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdIndvEligibility", "findChildIDNOE",null,params,
							conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdIndvEligibility",
							16908);
				}
				return result == null || result.length == 0 ? null
						: (EdIndvEligibilityCargo[]) result;
			}
			
			public EdEligCdcBudgetCargo[] getCCAPBudgetDetails(String EdgTraceId, long caseNum)
					throws CoException {
				Object[] result = null;
				Object[] params=new Object[2];
				params[0]=caseNum;
				params[1]=EdgTraceId;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"EdEligCdcBudget", "getCCApBudgetDetails", null,params,
							conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdEligCdcBudget",
							16908);
				}
				return result == null || result.length == 0 ? null
						: (EdEligCdcBudgetCargo[]) result;
			}				
			
			/**
			 * Added by assputa to get transfered assets list		
			 * @author asputta
			 */
					
			public Object[] getTransferedResourceDetailsMA(
						String indvIdList,String nonCoseqList) throws CoException {
						Object[] result = null;
						Object [] params= new Object[2];
						params[0] = indvIdList;
						params[1] = nonCoseqList;

						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"DcTransferedResources",
									"findTransferedMAAssets", null,
									params, conn);
						}  catch (Exception e) {

							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for DcTransferedResources", 16900);
						}
						return result == null ? null : (DcTransferedResourcesCargo[]) result;
					}
			
	
			public Object[] getDisqualificationDatesMA(
						long caseNum,String programCd) throws CoException {
						Object[] result = null;
						Object [] params= new Object[2];
						params[0] = caseNum;
						params[1] = programCd;

						try {
							result = CoDAOFactory.select(
									"gov.state.nextgen.common.collection.custom",
									"EdDcIndvDisqPenalties",
									"findtransferAssets", null,
									params, conn);
						}  catch (Exception e) {

							CoDebugger.debugException(e.getMessage(), e);
							throw new CoException("Select failed for EdDcIndvDisqPenalties", 16900);
						}
						return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
					}
			/**
			 * 
			 * @param asOfDate
			 * @return
			 * @throws ParseException
			 * @throws CoException
			 */
			public PmLiheapPaymentCargo[] findReqForPaymentLIHEAP(String prevRunDate, String asOfDate) throws ParseException, CoException{
				PmLiheapPaymentCargo[] result = null;
				PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
				pmLiheapPaymentCargo.setPaymentRequestStatus(asOfDate);
				pmLiheapPaymentCargo.setSsDisplayMessage(prevRunDate);
		                  try
		                  {
		                                 result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "reqForPaymentLIHEAP", pmLiheapPaymentCargo, null, conn);
		                  }
		                  catch (Exception e)
		                  {
		                                 CoDebugger.debugException(e.getMessage(), e);
		                                 throw new CoException("Select failed for findReqForPayment", 16357);
		                  }
		                
		                  return result;
			}
				
			
			/**
			 * @author asputta
			 * 
			 */
			
			public EdMaClientShareCargo[] getClientShare(long caseNum,String indvIds,String currInd) throws CoException{
				Object[] result = null;
				EdMaClientShareCargo cargo = new EdMaClientShareCargo();
				Object[] args = new Object[3];
				args[0] = caseNum;
				args[1] = indvIds;
				args[2]=currInd;

				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "EdMaClientShare",
							"findClientShareAmt", null, args, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for getClientShare---NOE", 16908);
				}
				return result == null || result.length == 0 ? null: (EdMaClientShareCargo[]) result;
			}	
			
			/**
			 * @author asputta
			 * 
			 */
			
			public EdMaClientShareCargo[] getClientShareVAAA(long caseNum,String indvIds,String currInd) throws CoException{
				Object[] result = null;
				EdMaClientShareCargo cargo = new EdMaClientShareCargo();
				Object[] args = new Object[3];
				args[0] = caseNum;
				args[1] = indvIds;
				args[2] =currInd;

				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "EdMaClientShare",
							"findClientShareForVAAA", null, args, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for getClientShare---NOE", 16908);
				}
				return result == null || result.length == 0 ? null: (EdMaClientShareCargo[]) result;
			}		
	
			
			 /**
			API to generate generateNDTANFN119Trigger
			@param caseNum
			@param misc params 
			@param program
			*misc params will contatin a string indicating agency code of worker
			*/
			public void generateNDTANFN119Trigger(long caseNum, String miscParams , String program, long indivId) {
				CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDTANFN119Trigger()");
				long officeNumber = 0;
				long empID = 0;
				boolean isTANFNotice = false;
				COCorrespondence correspondence = new COCorrespondence();
				correspondence.setAssistanceProgramCode(this.checkEmptyString(program));
				
				if(null!=program && (program.contains(CoConstants.TF_PROGRAM) || program.contains(CoConstants.TANF_PROGRAM))){ 
					isTANFNotice = true; 
				}
				MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
				Object[] params ={ caseNum, CoConstants.EMPTY_STRING }	;
				MoEmployeesCargo[] moEmployeesCargos = null;
				try	{
					moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params); 
				}
				catch (Exception e)	{
					CoDebugger.debugException("CoDAOService.generateNDTANFN119Trigger-->Application exception", e); 
				}
				if (moEmployeesCargos != null && moEmployeesCargos.length > 0){ 
					officeNumber = moEmployeesCargos[0].getPriOfficeNum(); 
					empID = moEmployeesCargos[0].getEmpId(); 
				}
				correspondence.setOfficeNumber(officeNumber);
				correspondence.setCaseAppFlag(CoConstants.CASE);
				correspondence.setCaseAppNumber(String.valueOf(caseNum));
				correspondence.setMiscParameters(miscParams);
				correspondence.setEmpId(empID);
				correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
				correspondence.setDocId(CoConstants.DOC_NDTANFN119);
				correspondence.setIndvId(indivId);
				java.util.Date dt = null;
				if (correspondence.getGenerateDate() == null) {
					dt = CoDateFactory.getUtilDate(); 
				}
				else{ 
					dt = correspondence.getGenerateDate();
				}
				correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
				try {
					if (!this.checkActiveAutomaticTriggerExist(correspondence) && isTANFNotice)	{
						this.generateCorrespondenceRequest(correspondence); 
					}
					else if(this.checkActiveAutomaticTriggerExist(correspondence))	{
						CoDebugger.debugMessage("CoDAOService.generateNDTANFN119Trigger-->Skipping this trigger. Active trigger for today already exist "); 
					}
					else{
						CoDebugger.debugMessage("CoDAOService.generateNDTANFN119Trigger-->Unable to generate trigger. No trigger request ");
					}
				} catch (CoException e)	{ 
					CoDebugger.debugException("CoDAOService.generateNDTANFN119Trigger-->Error while checking the existence of the request in the co_request_details", e); }
				CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDTANFN119Trigger(long,String,String)");
			}

			
			 /**
			API to generate generateNDTANFN120Trigger
			@param caseNum
			@param misc params 
			@param program
			*misc params will contatin a string indicating agency code of worker
			*/
			public void generateNDTANFN120Trigger(long caseNum, String miscParams , String program, long indivId) {
				CoDebugger.debugMessage("Entering:: CoDAOservices.generateNDTANFN120Trigger()");
				long officeNumber = 0;
				long empID = 0;
				boolean isTANFNotice = false;
				COCorrespondence correspondence = new COCorrespondence();
				correspondence.setAssistanceProgramCode(this.checkEmptyString(program));
				
				if(null!=program && (program.contains(CoConstants.TF_PROGRAM) || program.contains(CoConstants.TANF_PROGRAM))){ 
					isTANFNotice = true; 
				}
				MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
				Object[] params ={ caseNum, CoConstants.EMPTY_STRING }	;
				MoEmployeesCargo[] moEmployeesCargos = null;
				try	{
					moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params); 
				}
				catch (Exception e)	{
					CoDebugger.debugException("CoDAOService.generateNDTANFN120Trigger-->Application exception", e); 
				}
				if (moEmployeesCargos != null && moEmployeesCargos.length > 0){ 
					officeNumber = moEmployeesCargos[0].getPriOfficeNum(); 
					empID = moEmployeesCargos[0].getEmpId(); 
				}
				correspondence.setOfficeNumber(officeNumber);
				correspondence.setCaseAppFlag(CoConstants.CASE);
				correspondence.setCaseAppNumber(String.valueOf(caseNum));
				correspondence.setMiscParameters(miscParams);
				correspondence.setEmpId(empID);
				correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
				correspondence.setDocId(CoConstants.DOC_NDTANFN120);
				correspondence.setIndvId(indivId);
				
				java.util.Date dt = null;
				if (correspondence.getGenerateDate() == null) {
					dt = CoDateFactory.getUtilDate(); 
				}
				else{ 
					dt = correspondence.getGenerateDate();
				}
				correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));
				try {
					if (!this.checkActiveAutomaticTriggerExist(correspondence) && isTANFNotice)	{
						this.generateCorrespondenceRequest(correspondence); 
					}
					else if(this.checkActiveAutomaticTriggerExist(correspondence))	{
						CoDebugger.debugMessage("CoDAOService.generateNDTANFN120Trigger-->Skipping this trigger. Active trigger for today already exist "); 
					}
					else{
						CoDebugger.debugMessage("CoDAOService.generateNDTANFN120Trigger-->Unable to generate trigger. No trigger request ");
					}
				} catch (CoException e)	{ 
					CoDebugger.debugException("CoDAOService.generateNDTANFN120Trigger-->Error while checking the existence of the request in the co_request_details", e); }
				CoDebugger.debugMessage("Exiting:: CoDAOservices.generateNDTANFN120Trigger(long,String,String)");
			}

		
			/**
			 * @author smrutiBarik
			 * @param indivId
			 * @return WcIcmInfoCargo[]
			 * @throws CoException
			 */
			public WcIcmInfoCargo[] getSchdeuledGoodCauseDeterminationMeetingsByIndivId(Timestamp date, String indivId) throws  CoException {
				Object result = null;
				Object [] params= new Object[2];
				params[0] = date;
				params[1] =indivId;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"WcIcmInfo", "findSchdeuledGoodCauseDeterminationMeetingByIndivId",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException("CoDAOService.getSchdeuledGoodCauseDeterminationMeetingsByIndivId() --> Exception occurred while querying in WC_ICM_INFO table", e);
					throw new CoException("Exception occurred while querying in WC_ICM_INFO table", 16313);
				}
				return result == null ? null : (WcIcmInfoCargo[]) result;
			}
			
			
			/**
			 * @author smrutiBarik
			 * @param indivId
			 * @return WcIcmInfoCargo[]
			 * @throws CoException
			 */
			public WcIcmInfoCargo[] getGoodCauseMeetingResultByIndivId(Timestamp date, String indivId) throws  CoException {
				Object result = null;
				Object [] params= new Object[2];
				params[0] = date;
				params[1] =indivId;
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"WcIcmInfo", "findGoodCauseMeetingResultByIndivId",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException("CoDAOService.getGoodCauseMeetingResultByIndivId() --> Exception occurred while querying in WC_ICM_INFO table", e);
					throw new CoException("Exception occurred while querying in WC_ICM_INFO table", 16313);
				}
				return result == null ? null : (WcIcmInfoCargo[]) result;
			}
			
			
			/**
			 * Method to get Wc Sanction By IndvId.
			 * 
			 * @param indvId
			 *            long IndvId
			 * @return WcSanctionCargo[] Resultset from the DAO
			 * @throws CoException
			 * 
			 */
			public WcSanctionCargo[] getSanctionStatusByIndvId(long indvId) throws CoException{
				WcSanctionCargo wcSanctionCargo= new WcSanctionCargo();
				wcSanctionCargo.setIndvId(indvId);

				Object[] result = null;

				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "WcSanction",
							"findByIndvId", wcSanctionCargo, null, conn);

				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for findSanctionStatusByIndvId", 16908);
				}
				return result == null || result.length == 0 ? null
						: (WcSanctionCargo[]) result;
			}
			
			/**
			 * @param caseNumber
			 * @param asOfDate
			 * @return
			 * @throws CoException
			 */
			
			
			public Object[] findUnmetCleintShareForNDHCREN17(long caseNumber,
					Timestamp asofDate) throws CoException {
				Object[] result = null;
				Object[] args = new Object[2];
				args[0] = caseNumber;
				args[1] = asofDate;
				
			    BiMaClientShareCargo cargo = new BiMaClientShareCargo();
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"BiMaClientShare", "findUnmetCleintShareForNDHCREN17",
							cargo, args, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for BiClientShareDetail",
							16751);
				}
				return result == null ? null :(BiMaClientShareCargo[]) result;
			}
			
			/**
			 * @author shreyasingh
			 * 
			 */

			public PmLiheapPaymentCargo[] getAllRejectedPayments(Timestamp asOfDate) throws CoException, ParseException
			{
				PmLiheapPaymentCargo[] result = null;
				PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
				pmLiheapPaymentCargo.setCreateDt(asOfDate);
				try
				{
					result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "findAllRejectedPayments", pmLiheapPaymentCargo, null, conn);
				}
				catch (Exception e)
				{
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
				}
				return result == null || result.length == 0 ? null: result;
			}
			/**
			 * @author asputta
			 */
			public EdCaseRecertDatesCargo[] getReviewPktRcvDt(long caseNum,long edgNum) throws CoException{
				Object[] result = null;
				EdMaClientShareCargo cargo = new EdMaClientShareCargo();
				Object[] args = new Object[2];
				args[0] = caseNum;
				args[1] = edgNum;
				

				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom", "EdCaseRecertDates",
							"findReviewPacketRcvDt", null, args, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for EdCaseRecertDates---NOE", 16908);
				}
				return result == null || result.length == 0 ? null: (EdCaseRecertDatesCargo[]) result;
			}

	/**
	 * Code added for cr 476 - starts
	 * 
	 * @param date
	 * @return
	 * @throws CoException
	 */
	public DcCaseIndividualCargo[] getDcCaseIndvCasesAbtToCrossAgeLimit(
			long casenumber, Timestamp date, String typeOfAssistance)
			throws CoException {
		DcCaseIndividualCargo cargo = new DcCaseIndividualCargo();
		Object[] result = null;
		Object[] args = new Object[3];
		args[0] = casenumber;
		args[1] = date;
		args[2] = typeOfAssistance;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseIndividual", "findCwdWwdCasesAbtToCrossAgeLimit",
					cargo, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcCaseIndividual", 16355);
		}
		return result == null ? null : (DcCaseIndividualCargo[]) result;
	}

	public VEdEligibilityIndvCargo[] getMedneedySocialReviewIncompleteRec(
			long casenumber, String asOfdate, Timestamp lastDayOfMonth,
			String medNeedyTOAs) throws CoException {
		VEdEligibilityIndvCargo cargo = new VEdEligibilityIndvCargo();
		Object[] result = null;
		Object[] args = new Object[4];
		args[0] = casenumber;
		args[1] = asOfdate;
		args[2] = lastDayOfMonth;
		args[3] = medNeedyTOAs;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv",
					"getMedneedySocialReviewIncompleteRecords", cargo, args,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_ED_ELIGIBILITY_INDV",
					16355);
		}
		return result == null ? null : (VEdEligibilityIndvCargo[]) result;
	}
	/** Code added for cr 476 - ends */

	public PmProviderChildAssocCargo[] findByCasenumHistnav(long casenum) throws CoException{
		PmProviderChildAssocCargo assocCargo= new PmProviderChildAssocCargo();


		Object[] result = null;
		Object[] params=new Object[1];
		params[0]= casenum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc",
					"findByCasenumHistnav", null, params, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCasenumHistnav", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}
	
	public PmProviderChildAssocCargo[] findByCasenumHistnavAssocDates(long casenum) throws CoException{
		PmProviderChildAssocCargo assocCargo= new PmProviderChildAssocCargo();


		Object[] result = null;
		Object[] params=new Object[1];
		params[0]= casenum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "PmProviderChildAssoc",
					"findByCasenumAssocDates", null, params, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findByCasenumHistnav", 16908);
		}
		return result == null || result.length == 0 ? null
				: (PmProviderChildAssocCargo[]) result;
	}
	
	
	
	public Object[] getAllIndvByCaseNumForBEST(long caseNum) throws CoException {
		Object[] result = null;
		DcWorcReferralCargo cargo = new DcWorcReferralCargo();
		cargo.setCaseNum(caseNum);
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"DcWorcReferral", "getAllIndvByCaseNumForBEST", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcWorcReferralCargo",
					16369);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in DcWorcReferralCargo",
					16072);
		}
		return result;
	}
	public DcIndvCargo[] getByIndvNameDetails(String indvIds) throws CoException{
		Object[] result = null;
		Object[] args = new Object[1];
		args[0] = indvIds;
		

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findByIndvNameDetails", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndvCargo---BEST", 16908);
		}
		return result == null || result.length == 0 ? null: (DcIndvCargo[]) result;
	}
	
	public PmLiheapPaymentCargo[] findByCaseNumAndVendorId(PmVendorCaseAssocCargo cargo) throws CoException, ParseException
	{
		 CoDebugger.debugInformation("START: CODAOServices -> findByCaseNumAndVendorId ");
		PmLiheapPaymentCargo[] result = null;
		PmLiheapPaymentCargo pmLiheapPaymentCargo = new PmLiheapPaymentCargo();
		pmLiheapPaymentCargo.setVendorId((long)cargo.getSpacesVendorId());
		pmLiheapPaymentCargo.setCaseNum(cargo.getCaseNum());
		try
		{
			result =(PmLiheapPaymentCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapPayment", "findByCaseNumAndVendorId", pmLiheapPaymentCargo, null, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getPmLiheapPaymentInfo", 16357);
		}
		 CoDebugger.debugInformation("STOP: CODAOServices -> findByCaseNumAndVendorId ");
		return result == null || result.length == 0 ? null: result;
	}
	public PmVendorCaseAssocCargo[] findByCaseVendorType(long caseNum) throws CoException{
		 CoDebugger.debugInformation("START: CODAOServices -> findByCaseVendorType ");
		PmVendorCaseAssocCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =caseNum;

                 try
                 {
                                result =(PmVendorCaseAssocCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "findByCaseVendorType", null, params, conn);
                 }
                 catch (Exception e)
                 {
                                CoDebugger.debugException(e.getMessage(), e);
                                throw new CoException("CODAOSERVICES --> Select failed for PmVendorCaseAssocDAO --> findByCaseVendorType --", 16357);
                 }	           
                 CoDebugger.debugInformation("EXIT: CODAOServices -> findByCaseVendorType ");
                 return result == null ? null : (PmVendorCaseAssocCargo[]) result;
	}
	
	/**
	 * 
	 * @param asOfDate
	 * @return
	 * @throws ParseException
	 * @throws CoException
	 */
	public PmVendorCaseAssocCargo[] findAssociatedLiheapVendors(String prevRunDate, String asOfDate) throws ParseException, CoException{
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = asOfDate;
		params[1] = prevRunDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", 
					"findAssociatedLiheapVendors", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmVendorCaseAssoc > NDLI8949Assembler", 16751);
		}
		return result == null ? null : (PmVendorCaseAssocCargo[]) result;
	}
	
	/**
	 * 
	 * @param asOfDate
	 * @return
	 * @throws ParseException
	 * @throws CoException
	 */
	public PmLiheapVendorCargo[] findNewlyEnrolledVendor(String prevDate, String asOfDate) throws ParseException, CoException{
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = asOfDate;
		params[1] = prevDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmLiheapVendor", "findNewlyEnrolledVendor", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmLiheapVendorCargo > NDLI8949Assembler", 16751);
		}
		return result == null ? null : (PmLiheapVendorCargo[]) result;
	}
	
	
	/**
	 * 
	 * @param asOfDate
	 * @return
	 * @throws ParseException
	 * @throws CoException
	 */
	public PmVendorCaseAssocCargo[] getRecordsForAssociatedLiheapVendor(long vendorID, String asOfDate) throws ParseException, CoException{
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = vendorID;
		params[1] = asOfDate;
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "PmVendorCaseAssoc", "getRecordsForAssociatedLiheapVendor", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmVendorCaseAssoc > NDLI8949Assembler", 16751);
		}
		return result == null ? null : (PmVendorCaseAssocCargo[]) result;
	}
	
	public EdEligibilityCargo[] getRecordsForLSPerc(String caseNum) throws ParseException, CoException{
		EdEligibilityCargo[] result = null;
		Object[] objParams = new Object[1];
		objParams[0] = caseNum;
      try
      {
         result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "getRecordsForLSPerc", null, objParams, conn);
      }
      catch (Exception e){
         CoDebugger.debugException(e.getMessage(), e);
         throw new CoException("Select failed for findRecForPaymentEndDt", 16357);
      }
      
  	return result == null || result.length == 0 ? null: result;
	}
	
	public PmLiheapPaymentCargo[] findByCaseNumbersVendorIdAssoc(String caseNum,String vendorId)
			throws CoException {
		Object[] objParams = new Object[2];
		objParams[0] = caseNum;
		objParams[1] = vendorId;
		Object[] result = null;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmLiheapPayment", "findByCaseNumbersVendorId", null,
					objParams, conn);

		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
		}
		return result == null || result.length == 0 ? null
				: (PmLiheapPaymentCargo[]) result;
	}
	
	public DcHeadOfHouseholdCargo[] findHOHByCaseNumbers(String caseNum) throws CoException{
		DcHeadOfHouseholdCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =caseNum;
		try
		{
			result =(DcHeadOfHouseholdCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcHeadOfHousehold", "findHOHByCaseNumbers", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcHeadOfHousehold", 16357);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	
	/**
	 * @author aayush
	 * @param indvId
	 * @return
	 * @throws CoException
	 */
	public DcIndvCargo[] getDcIndvByIndvIDs(String indvIds) throws CoException
	{
		DcIndvCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =indvIds;
		try
		{
			result =(DcIndvCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcIndv", "findByIndividualIds", null, params, conn);
		}
		catch (Exception e)
		{

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Dc_Indv>>>findByIndividualId", 16357);
		}
		if (result == null || result.length == 0) { result= null; }
		return result;
	}
	/**
	 * Method to get data from CO_MASTER based on DOC_ID.
	 *  @author akshayas
	 * @param docId
	 *            COCorrespondence
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 * 
	 */
	public Object[] getCoMasterDataByDocId(String docId)
			throws CoException {

		long start =  new FwDate().getTimeInMillis(); 
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoMasterDataByDocId - started");
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoMasterDataByDocId - started.The Doc is....."+docId);
		Object[] result = null;
		CoMasterCargo coMasterCargo = new CoMasterCargo();
		coMasterCargo.setDocId(docId);
		CoDebugger.debugInformation("starting getCoMasterDataByDocId--get doc id"+coMasterCargo.getDocId());
		coMasterCargo.setEffBeginDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoMaster", "findByDocId", coMasterCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getCoMasterDataByDocId - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getCoMasterDataByDocId - exception - Select failed for CO_MASTER FOR DOC id"+docId, 16096);
		}
		if (result == null || result.length == 0) {
			return null;
		}
		log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getCoMasterDataByDocId - timeTaken : " + (System.currentTimeMillis() - start));
		return result;
	}
	
public EdIndvCountersCargo[] getEdIndvCountersCargos(EdEligibilityCargo cargo) throws CoException{
		
		Object[] result = null;
		
		try{
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"EdIndvCounters", "findTLPforCase", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdIndvCountersCargo",
					16369);
		}
		
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in EdIndvCountersCargo",
					16072);
		}
		
		return  (EdIndvCountersCargo[])result;
	}

		/*
		 * find wor_referral details From case number
		 * input : casenum
		 * 
		 */
		public DcWorcReferralCargo[] findByDcWorkReferralByCaseNum(long caseNum) throws CoException {
			Object[] result = null;
			DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
			dcWorcReferralCargo.setCaseNum(caseNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcWorcReferral", "findByCaseNum", dcWorcReferralCargo,
						null, conn);
			} catch (Exception e) {
				
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Dc_Worc_Referral", 348);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in Dc_Worc_Referral for queried case", 348);
			}
			return result == null ? null : (DcWorcReferralCargo[]) result;
		}
		
		
		public EdChangeReportingDtlsCargo[] getEdChangeReportingDtlsCargos(long caseNum) throws CoException{
			Object[] result = null;
			EdChangeReportingDtlsCargo cargo = new EdChangeReportingDtlsCargo();
			cargo.setCaseNum(caseNum);
			Object[] args = new Object[1];
			args[0] = caseNum;
			try{
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"EdChangeReportingDtls", "findByCaseNumOnlyForNotices", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdChangeReportingDtlsCargo",
						16369);
			}
			
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in EdChangeReportingDtlsCargo",
						16072);
			}
			
			return  (EdChangeReportingDtlsCargo[])result;
		}
/**
 * @author asputta		
 */
		public Object[] getUpFrontParentDetails(String childIds,String absPrts) throws CoException {
			Object[] result = null;
			DcChildrenLinkCargo dcChildrenLinkCargo = new DcChildrenLinkCargo();
			Object[] params = new Object[2];
			params[0] = childIds;
			params[1] = absPrts;

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcChildrenLink", "findBychildIdAbsSeq", dcChildrenLinkCargo,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DC_CHILDREN_LINK", 16314);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DC_CHILDREN_LINK", 16039);
			}
			return result;
		}
		
		public DcIndvLivingArngmntsCargo[] getDcIndvLivingArngmntsCargos(long indvId) throws CoException{
			Object[] result = null;
			DcIndvLivingArngmntsCargo cargo = new DcIndvLivingArngmntsCargo();
			cargo.setIndvId(indvId);
			Object[] args = new Object[1];
			args[0] = indvId;
			try{
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"DcIndvLivingArngmnts", "findByIndvId", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcIndvLivingArngmntsCargo",
						16369);
			}
			
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DcIndvLivingArngmntsCargo",
						16072);
			}
			
			return  (DcIndvLivingArngmntsCargo[])result;
			
		}
		
		
		public DcIndvLivingArngmntsCargo[] getPrevDcIndvLivingArngmntsCargos(long indvId) throws CoException{
			Object[] result = null;
			DcIndvLivingArngmntsCargo cargo = new DcIndvLivingArngmntsCargo();
			cargo.setIndvId(indvId);
			Object[] args = new Object[1];
			args[0] = indvId;
			try{
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"DcIndvLivingArngmnts", "findPrevRecord", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcIndvLivingArngmntsCargo",
						16369);
			}
			
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DcIndvLivingArngmntsCargo",
						16072);
			}
			
			return  (DcIndvLivingArngmntsCargo[])result;
			
		}
		
		public Object[] getProviderAddressforNDLIHP093(int providerId)

				throws CoException {
			Object[] result = null;
			PmAddressCargo cargo=new PmAddressCargo();
			cargo.setVendorProviderId(providerId);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"PmAddress", "findByProviderIdCoforNDLIHP093",
						cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result;
		}
		
		public EdVerificationChecklistCargo[] getEdVerificationForNCH001DueDt(long caseNum,long edgNum, String programCd,  String asOfDate) throws  CoException {
			Object[] result = null;
			Object[] params= new Object[4];
			params[0] = caseNum;
			params[1] = edgNum;
			params[2] = programCd;
			params[3] = asOfDate;

			EdVerificationChecklistCargo edVerificationCargo = new EdVerificationChecklistCargo();


			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdVerificationChecklist", "findByCaseEdgNumTF",
						null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdVerificationChecklist--->findByCaseNumPgm", 16313);
			}
			return result == null ? null : (EdVerificationChecklistCargo[]) result;
		}
		
		public Object[] findAbsentParentSeqNumByDN403Sw(int maxRows,long caseNumber, String absPrts) throws CoException {//findByCaseIndvAbsentParent
			Object[] result = null;
			Object[] params = new Object[2];
			params[0] = caseNumber;
			params[1] = absPrts;
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildSuppNonCoop", "findAbsentParentSeqNumByDN403Sw", null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcChildSuppNonCoop", 16751);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DcChildSuppNonCoop", 16752);
			}
			return result;
		}
		
		public Object[] findAbsentParentswithsnfFormAsNo(int maxRows, long caseNumber) throws CoException {
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = caseNumber;

			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcAbsentParents", "findAbsentParentswithsnfFormAsNo", null, args, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcAbsentParents", 16751);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DcAbsentParents", 16752);
			}
			return result;
		}
		
		public Object[] getLatestCaseProgramStatus(long caseNumber, String progCd) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
		dcCaseProgramCargo.setCaseNum(caseNumber);
		dcCaseProgramCargo.setProgCd(progCd);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcCaseProgram", "findByCaseNumLatestProgramCd", dcCaseProgramCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM", 16429);
		}		
		return result;
	}
		
	
		
		/**
		 * Find all the reffered dc work referral
		 * @param caseNum
		 * @return
		 * @throws CoException
		 */
		public DcWorcReferralCargo[] findRefferedByDcWorkReferralByCaseNum(long caseNum) throws CoException {
			Object[] result = null;
			DcWorcReferralCargo dcWorcReferralCargo = new DcWorcReferralCargo();
			dcWorcReferralCargo.setCaseNum(caseNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcWorcReferral", "findAgencyCodeByCaseNum", dcWorcReferralCargo,
						null, conn);
			} catch (Exception e) {
				
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Dc_Worc_Referral", 348);
			}
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in Dc_Worc_Referral for queried case", 348);
			}
			return result == null ? null : (DcWorcReferralCargo[]) result;
		}
		
		public DcPregFetusesCargo[] findByCaseIndv(long indvId) throws CoException {
			Object[] result = null;
			DcPregFetusesCargo dcPregFetusesCargo = new DcPregFetusesCargo();
			dcPregFetusesCargo.setIndvId(indvId);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcPregFetuses", "findByCaseIndv", dcPregFetusesCargo,
						null, conn);
			} catch (Exception e) {
				
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcPregFetusesCargo", 348);
			}
			
			return result == null ? null : (DcPregFetusesCargo[]) result;
		}
		
		public EdEligibilityCargo[] findSNAPNoIssuanceRecords(long caseNum) throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			Object [] params= new Object[1];
			params[0] = caseNum;
		
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findSNAPNoIssuanceRecords", null,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - findSNAPNoIssuanceRecords - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - findSNAPNoIssuanceRecords - exception - Select failed for ED_ELIGIBILITY", 16335);
			}
			return result == null ? null : (EdEligibilityCargo[])result;
		}
		
		public EdEligibilityCargo[] findNoIssuanceRecordsProgram(long caseNum, String programCd) throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			Object [] params= new Object[2];
			params[0] = caseNum;
			params[1] = programCd;
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findNoIssuanceRecordsProgram", null,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - findSNAPNoIssuanceRecords - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - findSNAPNoIssuanceRecords - exception - Select failed for ED_ELIGIBILITY", 16335);
			}
			return result == null ? null : (EdEligibilityCargo[])result;
		}
		
		public Object[] getIndvHhStatusDetails(long[] indvs,String caseNumber) throws CoException {
			Object[] result = null;
			Object[] params=new Object[2];
			params[0]= indvs;
			params[1]= new Long(caseNumber).longValue();
			try {
				DcIndvCargo cargo = new DcIndvCargo();
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom", "DcIndvHhStatus",
						"findByIndvCaseNum", null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DC_INDV_HH_STATUS ", 16795);
			}

			return result;
		}
		
		public DcIndvNonCooperationCargo[] findByIndvIdForVJQS(String indvIds) throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			Object [] params= new Object[1];
			params[0] = indvIds;
		
			
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcIndvNonCooperation", "findByIndvIdForVJQS", null,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException("CoDAOServices - findByIndvIdForVJQS - exception - "+e.getMessage(), e);
				throw new CoException("CoDAOServices - findByIndvIdForVJQS - exception - Select failed for DcIndvNonCooperation", 16335);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[])result;
		}
		/**
		 * @author asputta
		 */
		public TcExtendedBnftDetailsCargo[] getTcExtendedBnft(long caseNum) throws CoException {
			Object[] result = null;
			Object [] params= new Object[1];
			params[0] = caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"TcExtendedBnftDetails", "findByCaseNumForTanfTimeClk", null,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Tc_Extended_Bnft_Details",
						16346);
			}
			return result == null ? null : (TcExtendedBnftDetailsCargo[])result;
		}
		
		/**
		 * API to generate generateLTCSubsidyTrigger
		 * @param caseNum
		 * @param indvId
		 * @param createUser
		 */
		public void generateNDHCC118Trigger(long caseNum, long indvId, String createUser) {
			CoDebugger.debugMessage("Entering:: CoDAOservices.generateLTCSubsidyTrigger(long,long,String)");
			CoDebugger.debugMessage("Case Num:"+caseNum);
			long officeNumber = 0;
			long empID = 0;
						
			MoEmployeesCollection moEmployeesCollection = new MoEmployeesCollection();
			Object[] params = { caseNum, CoConstants.EMPTY_STRING };
			MoEmployeesCargo[] moEmployeesCargos = null;
			try {
				moEmployeesCargos = (MoEmployeesCargo[]) moEmployeesCollection.select("findByCaseRole", params);
			} catch (Exception e) {
				CoDebugger.debugException("CoDAOService.generateLTCSubsidyTrigger-->Application exception", e);
			}
			if (moEmployeesCargos != null && moEmployeesCargos.length > 0) {
				officeNumber = moEmployeesCargos[0].getPriOfficeNum();
				empID = moEmployeesCargos[0].getEmpId();
			}
			/** NDHCC118 cargo **/
			COCorrespondence correspondence = new COCorrespondence();
			correspondence.setAssistanceProgramCode(CoConstants.PROGRAM_MA);
			correspondence.setOfficeNumber(officeNumber);
			correspondence.setCaseAppFlag(CoConstants.CASE);
			correspondence.setCaseAppNumber(String.valueOf(caseNum));
			correspondence.setIndvId(indvId);
			correspondence.setEmpId(empID);
			correspondence.setRequestUserId(createUser);
			correspondence.setDocType(CoConstants.CO_DOC_TYPE_CD_N);
			correspondence.setDocId(CoConstants.DOC_ID_NDHCC118);
			java.util.Date dt = null;
			if (correspondence.getGenerateDate() == null) {
				dt = CoDateFactory.getUtilDate();
			} else {
				dt = correspondence.getGenerateDate();
			}
			correspondence.setGenerateDate(new java.sql.Timestamp(dt.getTime()));

			try{
				if (!this.checkActiveAutomaticTriggerExist(correspondence)) {
					this.generateCorrespondenceRequest(correspondence);
				}else if(this.checkActiveAutomaticTriggerExist(correspondence)){
					CoDebugger.debugMessage("CoDAOService.generateLTCSubsidyTrigger-->Skipping "+CoConstants.DOC_ID_NDHCC118+" trigger. Active trigger for today already exist ");
				}else{
					CoDebugger.debugMessage("CoDAOService.generateLTCSubsidyTrigger-->Unable to generate trigger for "+CoConstants.DOC_ID_NDHCC118+". No trigger request ");
				}
			} catch (CoException e) {
				CoDebugger.debugException("CoDAOService.generateLTCSubsidyTrigger-->Error while checking the existence of the request in the co_request_details for "+CoConstants.DOC_NDCCAP063, e);
			}
					
			CoDebugger.debugMessage("Exiting:: CoDAOservices.generateLTCSubsidyTrigger(long,long,String)");
		}
		
		public TcTransactionsCargo[] getTcTransactions(long caseNum) throws CoException {
			Object[] result = null;
			TcTransactionsCargo tcTransactionsCargo = new TcTransactionsCargo();
			Object[] params = new Object[1];
			params[0] = caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"TcTransactions", "findByStateCounterForTanfTimeClk", tcTransactionsCargo,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Tc_Transactions", 16312);
			}
			return result == null ? null : (TcTransactionsCargo[])result;

			
		}
		public TcClockDetailsCargo[] getTcclockDetails(long caseNum) throws CoException {
			Object[] result = null;
			TcClockDetailsCargo tcclockDetailsCargo = new TcClockDetailsCargo();
			Object[] params = new Object[1];
			params[0] = caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"TcClockDetails", "findByIndvForTanfTimeClk", tcclockDetailsCargo,
						params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Tc_Clock_Tick", 16312);
			}
			return result == null ? null : (TcClockDetailsCargo[])result;

			
		}		
		
		public BiSupportiveServicesCargo[] findByCaseNumBenBeginDtCreateDt(long caseNum,Timestamp benBegDt,Timestamp createDt) throws CoException {
            Object[] result = null;
            /*Object [] params= new Object[3];
            params[0] = caseNum;
            params[1] = benBegDt;
            params[2] = createDt;*/
            BiSupportiveServicesCargo cargo=new BiSupportiveServicesCargo();
            cargo.setCaseNum(caseNum);
            cargo.setBenBeginDt(benBegDt);
            cargo.setCreateDt(createDt);
            try {
                   result = CoDAOFactory.select(
                            "gov.state.nextgen.common.collection.custom",
                               "BiSupportiveServices", "findByCaseNumberBenBeginDtCreateDt", cargo, null
                               , conn);
            } catch (Exception e) {

                  CoDebugger.debugException(e.getMessage(), e);
                   throw new CoException("Select failed for BI_SUPPORTIVE_SERVICES",
                               16346);
            }
            return result == null ? null : (BiSupportiveServicesCargo[])result;
      }
		
		public DcIndvLivingArngmntsCargo[] getLivingArrgtIMD(long indvId,Timestamp paymentBegDt) throws CoException {
			Object[] result = null;
			Object [] params= new Object[2];
			params[0] = indvId;
			params[1] = paymentBegDt;
			DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
			try {
				dcIndvLivingArngmntsCargo.setIndvId(indvId);
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcIndvLivingArngmnts", "findForIMD",
						null, params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
						16745);
			}
			return result == null ? null : (DcIndvLivingArngmntsCargo[]) result;

		}
		/**
		 * @author asputta
		 */
		public EdIndvDateSpecificCargo[] getBenefitSpanRecords(long caseNum,String edEdgTraceIds) throws CoException{
			Object[] result = null;
			Object [] params= new Object[2];
			
			params[0] = edEdgTraceIds;
			params[1] =caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdIndvDateSpecific", "findDatesByedgTraceIds",
						null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligibility ****** getBenefitSpanRecords", 16312);
			}
			return result == null ? null : (EdIndvDateSpecificCargo[]) result;
			}
		
		public EdIndvDateSpecificCargo[] getClosureRecords(long caseNum,String indvIds) throws CoException{
			Object[] result = null;
			Object [] params= new Object[2];
			
			params[0] = indvIds;
			params[1] =caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdIndvDateSpecific", "findClosureDates",
						null, params, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for EdEligibility ****** getClosureRecords", 16312);
			}
			return result == null ? null : (EdIndvDateSpecificCargo[]) result;
			}		
		
		
	/**
	 * ND-91320
	 * @param lCaseNum
	 * @param date
	 * @return
	 * @throws NoDataFoundException
	 * @throws CoException
	 */
	public EdCaseRecertDatesCargo[] getReviewDueForNextMonthForManuallyGenerated(
			long lCaseNum, Timestamp date) throws NoDataFoundException,
			CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = lCaseNum;
		params[1] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates",
					"findRecertReviewNextMonthForManuallyGenerated", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ed_Case_Recert_Dates",
					16312);
		}
		return result == null ? null : (EdCaseRecertDatesCargo[]) result;
	}
	/**
	 * @author asputta
	 */
	public EdIndvDateSpecificCargo[] getMidMonthClosureSpans(long caseNum,String edgTraceIds) throws CoException{
		Object[] result = null;
		Object [] params= new Object[2];
		
		params[0] = edgTraceIds;
		params[1] =caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdIndvDateSpecific", "findMidMonthClosureDates",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility ****** getMidMonthClosureSpans", 16312);
		}
		return result == null ? null : (EdIndvDateSpecificCargo[]) result;
		}
	 /**
	 * Changes for ND-93254
	 * author akshayas
	 */
	public Object[] getLatestCaseNumProgramStatus(long caseNumber, String progCd) throws CoException {
		Object[] result = null;
		DcCaseProgramCargo dcCaseProgramCargo = new DcCaseProgramCargo();
		dcCaseProgramCargo.setCaseNum(caseNumber);
		dcCaseProgramCargo.setProgCd(progCd);
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcCaseProgram", "findByCaseAndLatestProgramCd", dcCaseProgramCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_CASE_PROGRAM", 16429);
		}		
		return result;
	}
	
	/**
	 * Method added for ND-93241
	 * @param edEligibilityCargo
	 * @param ssCategory
	 * @param ssType
	 * @return
	 * @throws CoException
	 */
	public BiSupportiveServicesCargo[] findByCaseNumberCategorySubCategory(
			EdEligibilityCargo edEligibilityCargo, String ssCategory,
			String ssType) throws CoException {
		Object[] result = null;
		BiSupportiveServicesCargo cargo = new BiSupportiveServicesCargo();
		cargo.setCaseNum(edEligibilityCargo.getCaseNum());
		cargo.setSsCategory(ssCategory);
		cargo.setSsType(ssType);
		cargo.setEdgTraceId(edEligibilityCargo.getEdgTraceId());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiSupportiveServices",
					"findByCaseNumberCategorySubCategory", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_SUPPORTIVE_SERVICES",
					16346);
		}
		return result == null ? null : (BiSupportiveServicesCargo[]) result;
	}
	
	/**
	 * Method added for ND-93241
	 * @param indvIds
	 * @return
	 * @throws CoException
	 */
	public DcSpecialItemsNeedCargo[] findByIndvIdStringEffEndDateNull(
			String indvIds) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = indvIds;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcSpecialItemsNeed",
					"findByIndvIdStringEffEndDateNull", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DC_SPECIAL_ITEMS_NEED",
					16346);
		}
		return result == null ? null : (DcSpecialItemsNeedCargo[]) result;
	}
	//ND-93447-akshayas
	public EdEligibilityCargo[] findCCAPeligEndDate(long providerId) throws CoException{
		EdEligibilityCargo[] result = null;
		Object [] params= new Object[1];
		params[0] =providerId;
		try
		{
			result =(EdEligibilityCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "EdEligibility", "findCCAPeligEndDate", null, params, conn);
		}
		catch (Exception e)
		{
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdEligibility", 16357);
		}
		if (result == null || result.length == 0) { throw new NoDataFoundException("No data in EdEligibility", 16063); }
		return result;
	}
	
	//ND-93980	
		public Object[] getVendorNameAssocByID(long vendorId) throws CoException {
			Object[] result = null;
			PmLiheapVendorCargo cargo = new PmLiheapVendorCargo();
			cargo.setSpacesVendorId(((Long)vendorId).intValue());

			try {
			result = CoDAOFactory.select(
			"gov.state.nextgen.common.collection.custom",
			"PmLiheapVendor", "findByAssocVendorId", cargo, null, conn);
			} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Pm_Liheap_Vendor", 99664);
			}
			return result;
			}
		//ND-93483
		public EdCaseRecertDatesCargo[] getTANFMonthlyReviewDueForNextMonthManuallyGenerated(long lCaseNum, Timestamp date) throws NoDataFoundException, CoException {
			Object[] result = null;
			Object[] params = new Object[2];
			params[0] = lCaseNum;
			params[1] = date;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdCaseRecertDates", "findTANFMonthlyReviewNextMonthForManuallyGenerated",
						null, params, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for ed_Case_Recert_Dates", 16312);
			}
			return result == null ? null : (EdCaseRecertDatesCargo[]) result;
		}
		
		public DcIndvLivingArngmntsCargo[] getDcIndvLivingArngmntsCargosDesc(long indvId) throws CoException{
			Object[] result = null;
			DcIndvLivingArngmntsCargo cargo = new DcIndvLivingArngmntsCargo();
			cargo.setIndvId(indvId);
			Object[] args = new Object[1];
			args[0] = indvId;
			try{
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"DcIndvLivingArngmnts", "findByIndvIdDesc", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcIndvLivingArngmntsCargo",
						16369);
			}
			
			if (result == null || result.length == 0) {
				throw new NoDataFoundException("No data in DcIndvLivingArngmntsCargo",
						16072);
			}
			
			return  (DcIndvLivingArngmntsCargo[])result;
			
		}			
		
		/**Added for ND-95380*/
		public Object[] getIndividualReasonsHOHSNAP(long caseNum, String edgTraceIdString)

				throws CoException {
			Object[] result = null;
			Object[] obj = { new Long(caseNum), edgTraceIdString };
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdIndvNoticeReasons", "findByCaseEdgTraceIdNCH001forHOH",
						null, obj, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
			}
			return result;
		}
		/**
		 * This method checks if the case is closed
		 * @author shreyasingh
		 * @param caseNum
		 * @return result
		 * @throws CoException
		 */
		
		public DcCasesCargo[] checkCaseClosed(long caseNum) throws CoException{
			Object[] result = null;
			DcCasesCargo cargo = new DcCasesCargo();
			cargo.setCaseNum(caseNum);			
			try{
				result = CoDAOFactory
						.select("gov.state.nextgen.common.collection.custom",
								"DcCases", "findByCaseNumWithStatusClosed", cargo,
								null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcCases",
						16369);
			}
			
			return (DcCasesCargo[])result;
			
		}	
		/**
		 * @author shreyasingh
		 * @param indvIds
		 * @return
		 * @throws CoException
		 */
		public BvMaPremiumPymtDtlsCargo[] getMaPremiumDetails(String indvIds,long caseNum)throws CoException {
			Object[] result = null;
			Object[] args=new Object[2];
			args[0]=indvIds;
			args[1]=caseNum;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"BvMaPremiumPymtDtls",
						"findPaymentsByIndvIdCase",
						null,args,conn);
			} catch (Exception e) {
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for BvMaPremiumPymtDtlsCargo",16777);
			}
			return result == null || result.length == 0 ? null : (BvMaPremiumPymtDtlsCargo[]) result;
		}
		
		/**
		 * ND-96453
		 * @author tdatta
		 * @param caseNum
		 * @return result
		 * @throws CoException
		 */
		
		 public BvMaPremiumPymtDtlsCargo[] findIfPremiumPaidForLastThreeMonths(long indvId, long caseNum, Timestamp date, Timestamp closureMonth) throws CoException{
			Object[] result = null;
			Object[] args = new Object[4];
			args[0] = Long.valueOf(indvId);
			args[1] = Long.valueOf(caseNum);
			args[2] = date;
			args[3] = closureMonth;
			    
			BvMaPremiumDtlsCargo cargo = new BvMaPremiumDtlsCargo();
			 try
			 {
			   result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvMaPremiumPymtDtls", "findPaymentsByIndvIdCaseBenMonthForPremium", cargo, args, this.conn);
			 }
			  catch (Exception e)
			{
			   CoDebugger.debugException(e.getMessage(), e);
			  throw new CoException("Select failed for BvMaPremiumPymtDtls", 16751);
			}
			return result == null ? null : (BvMaPremiumPymtDtlsCargo[])result;
		 }
		 
		 /**
		     * ND-96446
			 * Method to get data from T1001_App_Rqst based on App_Num.
			 * 
			 * @param caseNum
			 *            long
			 * @return Object[] Resultset from the DAO
			 * @throws CoException
			 * 
			 */
			public T1001AppRqstCargo[] getApplicationMode(String appNum) throws CoException {
				Object[] result = null;
				T1001AppRqstCargo t1001AppRqstCargo = new T1001AppRqstCargo();
				t1001AppRqstCargo.setAppNum(appNum);
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"T1001AppRqst", "findByAppNum", t1001AppRqstCargo, null,
							conn);
				} catch (Exception e) {

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for AR_APPLICATION_FOR_AID",
							16079);
				}
				if (result == null || result.length == 0) {
					throw new NoDataFoundException("No data in AR_APPLICATION_FOR_AID",
							16014);
				}
				return (T1001AppRqstCargo[]) result;
			}
			
			/**
			 * @author ND-96939 
			 * @param asofdate
			 * @return
			 * @throws CoException
			 */
			public BvClaimCargo[] findAllClaimIdsForNDCCTFLI51(Timestamp asOfdate)  throws CoException { 
				Object result = null;
				BvClaimCargo bvClaimCargo = new BvClaimCargo();
				if(null == asOfdate  ){
					return new BvClaimCargo[0];
				}
				bvClaimCargo.setUpdateDt(asOfdate);
				try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"BvClaim", "findAllClaimIdsForNDCCTFLI51",
							bvClaimCargo, null, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for BvClaimCargo ---> findAllClaimIdsForNDCCTFLI51", 16313);
				}
				return result == null ? null : (BvClaimCargo[]) result;
			}
			
			/**
			 * @author ND-96939 
			 * @param claimIds
			 * @return
			 * @throws CoException
			 */
			
			public BvClaimRecoveryCargo[] findByClaimIdForNDCCTFLI51(String claimIds) throws CoException { 
				BvClaimRecoveryCargo[] result = null;
				Object[] args=new Object[1];
				args[0]=claimIds;
				try
				{
					result =(BvClaimRecoveryCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
							"BvClaimRecovery", 
							"findByClaimIdForNDCCTFLI51", null, args, conn);
				}
				catch (Exception e)
				{

					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for Bv_Claim_Recovery --> findByClaimIdForNDCCTFLI51", 16357);
				}
				return result == null || result.length == 0 ? null : (BvClaimRecoveryCargo[]) result;
				
			}
			
			/**
		     * Added for ND-96939
		     * @param claimIds
		     * @return
		     * @throws CoException
		     */
		     public BvClaimRecoveryCargo[] findByCaseNumForNDCCTFLI51(long caseNum,
		              Timestamp date) throws CoException {
		         BvClaimRecoveryCargo[] result = null;
		         Object[] args = new Object[2];
		         args[0] = caseNum;
		         args[1] = date;
		         try {
		              result = (BvClaimRecoveryCargo[]) CoDAOFactory.select(
		                       "gov.state.nextgen.common.collection.custom",
		                       "BvClaimRecovery", "findByCaseNumForNDCCTFLI51", null,
		                       args, conn);
		         } catch (Exception e) {

		              CoDebugger.debugException(e.getMessage(), e);
		              throw new CoException(
		                       "Select failed for Bv_Claim_Recovery --> findByCaseNumForNDCCTFLI51",
		                       16357);
		         }
		         return result == null || result.length == 0 ? null
		                  : (BvClaimRecoveryCargo[]) result;

		     }
		       
		       
		    /**
		      * Added for ND-96939
		      * @param  caseNumber,progCode
		      * @return EdEligibilityCargo[]
		      * @throws CoException
		      */
		     public EdEligibilityCargo[] getEdRecordsForNDCCTFLI51(long caseNumber,
		              Timestamp generateDate) throws CoException {
		         Object[] result = null;
		         EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		         edEligibilityCargo.setCaseNum(caseNumber);
		          edEligibilityCargo.setBenefitEndDt(generateDate);
		         try {
		              result = CoDAOFactory.select(
		                       "gov.state.nextgen.common.collection.custom",
		                       "EdEligibility", "getEdRecordsForNDCCTFLI51",
		                       edEligibilityCargo, null, conn);
		         } catch (Exception e) {
		              CoDebugger.debugException(e.getMessage(), e);
		              throw new CoException(
		                       "Select failed for EdEligibility--->getEdRecordsForNDCCTFLI51",
		                       16313);
		         }
		         return result == null ? null : (EdEligibilityCargo[]) result;
		     }
		     
		 	/**
		 	 * ND-96154
		 	 * This method finds individual in a case who has been living in an institution (Long Term Care or State Hospital) for 6 months
		 	 * @author shreyasingh
		 	 * @return EdIndvEligibilityCargo
		 	 * @throws CoException
		 	 */
			 	public EdIndvEligibilityCargo[] getIndvInstitutionalised(Timestamp asOfDate, long caseNum) throws CoException {
			 		Object[] result = null;
			 		EdEligibilityCargo cargo = new EdEligibilityCargo();
			 		cargo.setCaseNum(caseNum);
			 		cargo.setPaymentBegDt(asOfDate);
			 		try {
			 			result = CoDAOFactory.select(
			 					"gov.state.nextgen.common.collection.custom", "EdIndvEligibility","findIndvInstitutionalised", cargo, null, conn);
			 		} catch (Exception e) {
			 			CoDebugger.debugException(e.getMessage(), e);
			 			throw new CoException("Select failed for EdEligibility",16908);
			 		}
			 		return result == null || result.length == 0 ? null: (EdIndvEligibilityCargo[]) result;
			 	}
			 	
			 	 /**
			      * Added for ND-97281
			      * @param  caseNumber,progCode
			      * @return EdEligibilityCargo[]
			      * @throws CoException
			      */
			     public EdEligibilityCargo[] getEdRecordsForTANFJobsSanction(long caseNumber) throws CoException {
			         Object[] result = null;
			         EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			         edEligibilityCargo.setCaseNum(caseNumber);
			          try {
			              result = CoDAOFactory.select(
			                       "gov.state.nextgen.common.collection.custom",
			                       "EdEligibility", "getEdRecordsForTANFJobsSanction",
			                       edEligibilityCargo, null, conn);
			         } catch (Exception e) {
			              CoDebugger.debugException(e.getMessage(), e);
			              throw new CoException(
			                       "Select failed for EdEligibility--->getEdRecordsForTANFJobsSanction",
			                       16313);
			         }
			         return result == null ? null : (EdEligibilityCargo[]) result;
			     }
			     
	/**
	 * @author ND-96939
	 * @param asofdate
	 * @return
	 * @throws CoException
	 */
	public BvClaimCargo[] findByClaimIdForNDCCTFLI51(Timestamp asOfdate,
			String claimIds) throws CoException {
		Object result = null;
		BvClaimCargo bvClaimCargo = new BvClaimCargo();
		if (null == asOfdate) {
			return new BvClaimCargo[0];
		}
		bvClaimCargo.setUpdateDt(asOfdate);
		bvClaimCargo.setClaimId(claimIds);
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BvClaim",
					"findByClaimIdForNDCCTFLI51", bvClaimCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for BvClaimCargo ---> findByClaimIdForNDCCTFLI51",
					16313);
		}
		return result == null ? null : (BvClaimCargo[]) result;
	}
	
	/**
	 * @author ND-96939 FOR BV_CLAIM_A
	 * @param claimIds
	 *            , date
	 * @return
	 * @throws CoException
	 */

	public BvClaimCargo[] findForBvclaimAForNDCCTFLI51(String ClaimId,
			Timestamp date) throws CoException {
		Object[] result = null;
		BvClaimCargo cargo = new BvClaimCargo();
		cargo.setClaimId(ClaimId);
		cargo.setUpdateDt(date);
		Object[] args = new Object[2];
		args[0] = ClaimId;
		args[1] = date;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BvClaim",
					"findForBvclaimAForNDCCTFLI51", cargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for findForBvclaimAForNDCCTFLI51", 16369);
		}

		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BvClaimCargo", 16072);
		}

		return result == null ? null : (BvClaimCargo[]) result;

	}
	/**
	 * ND-97572
	 * @author shreyasingh
	 * @param coReqSeq
	 * @return
	 * @throws CoException
	 */
	public EdCaseRecertDatesCargo[] getbyCaseNumEdgNumPrgCd(long caseNum,long edgNum, String programCd) throws CoException{
		Object[] result = null;
		EdCaseRecertDatesCargo cargo = new EdCaseRecertDatesCargo();
		cargo.setCaseNum(caseNum);
		cargo.setEdgNum(edgNum);
		cargo.setProgramCd(programCd);
		CoDebugger.debugInformation("NOE findbyCaseNumEdgNumPrgCd------------>");

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdCaseRecertDates",
					"findbyCaseNumEdgNumPrgCd", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findbyCaseNumEdgNumPrgCd", 16908);
		}
		CoDebugger.debugInformation("NOE codaoser findbyCaseNumEdgNumPrgCd------------>"+result);
		return result == null || result.length == 0 ? null
				: (EdCaseRecertDatesCargo[]) result;
	}

	/** ND-97526
	 * Method to get latest data from ED_CASE_RECERT_DATES based on EDG NUM and CASE NUM.
	 * @param caseNum
	 *            long
	 * @param edgNum
	 *            long
	 * @return Object[]
	 * @throws CoException
	 * 
	 */
	public EdCaseRecertDatesCargo[] getMMRStatusByCaseEdgNum(long caseNum,long edgNum,String programCd) throws NoDataFoundException, CoException {
		Object[] result = null;
		EdCaseRecertDatesCargo edCaseRecertCargo = new EdCaseRecertDatesCargo();
		edCaseRecertCargo.setCaseNum(caseNum);
		edCaseRecertCargo.setEdgNum(edgNum);
		edCaseRecertCargo.setProgramCd(programCd);
		edCaseRecertCargo.setEffEndDt(CoDateFactory.getTimestamp());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdCaseRecertDates", "findLatestByCaseEdgNumProgramCd",
					edCaseRecertCargo, null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for ED_CASE_RECERT_DATES",
					16323);
		}
		
		return result == null ? null : (EdCaseRecertDatesCargo[]) result;
	}
	
	/**
 	 * ND-97909
 	 * This method finds individual in a case eligible for Medicaid
 	 * @author akshayas
 	 * @return EdIndvEligibilityCargo
 	 * @throws CoException
 	 */
	 	public EdIndvEligibilityCargo[] getEligibleMAindv(Timestamp asOfDate, long caseNum,long indvId) throws CoException {
	 		Object[] result = null;
	 		EdEligibilityCargo cargo = new EdEligibilityCargo();
	 		cargo.setCaseNum(caseNum);
	 		cargo.setPaymentBegDt(asOfDate);
	 		cargo.setTargetPersonId(indvId);
	 		try {
	 			result = CoDAOFactory.select(
	 					"gov.state.nextgen.common.collection.custom", "EdIndvEligibility","findIndvMAeligible", cargo, null, conn);
	 		} catch (Exception e) {
	 			CoDebugger.debugException(e.getMessage(), e);
	 			throw new CoException("Select failed for EdEligibility",16908);
	 		}
	 		return result == null || result.length == 0 ? null: (EdIndvEligibilityCargo[]) result;
	 	}
	 	/**
	 	 * ND-98057
		 * This function gets records from EdCaseRecertDates based on caseNum and edgNum for Medicaid
		 * @author shreyasingh
		 * @param edgNum long
		 * @return
		 * @throws CoException
		 */	
		public Object[] getEdCaseRecertDatesRecertReviewDateMA(long caseNum, long edgNum)
				throws CoException {
			Object[] result = null;
			//start
			EdCaseRecertDatesCargo edCaseRecertDatesCargo= new EdCaseRecertDatesCargo();
			edCaseRecertDatesCargo.setCaseNum(caseNum);
			edCaseRecertDatesCargo.setEdgNum(edgNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdCaseRecertDates",
						"findRecertReviewDtByEdgNumMA",
						edCaseRecertDatesCargo,null,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for EdCaseRecertDatesCargo",
						16777);
			}
			return (EdCaseRecertDatesCargo[])result;
		}
		
		
		 /**
	     * Added for ND-97908
	     * @param  caseNumber
	     * @return EdEligibilityCargo[]
	     * @throws CoException
	     */
	    public EdEligibilityCargo[] getEdRecordsForSnapExpedite(long caseNumber) throws CoException {
	        Object[] result = null;
	        EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
	        edEligibilityCargo.setCaseNum(caseNumber);
	         try {
	             result = CoDAOFactory.select(
	                      "gov.state.nextgen.common.collection.custom",
	                      "EdEligibility", "getEdRecordsForSnapExpedite",
	                      edEligibilityCargo, null, conn);
	        } catch (Exception e) {
	             CoDebugger.debugException(e.getMessage(), e);
	             throw new CoException(
	                      "Select failed for EdEligibility--->getEdRecordsForSnapExpedite",
	                      16313);
	        }
	        return result == null ? null : (EdEligibilityCargo[]) result;
	    }
	    
		/**
		 * This function gets records from EdEligibility based on indvId and caseNum where program_cd = 'MA'
		 * @author shreyasingh
		 * @param indvId long
		 * @param caseNum long
		 * @return
		 * @throws CoException
		 */	
		public Object[] getEdEligibilityApprovedMA(long indvId, long caseNum)
				throws CoException {
			Object[] result = null;
			EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
			edEligibilityCargo.setTargetPersonId(indvId);
			edEligibilityCargo.setCaseNum(caseNum);
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility",
						"findIfApprovedMA",
						edEligibilityCargo,null,conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				CoDebugger.debugException("Exception  " + e.getMessage(), e);
				throw new CoException("Select failed for EdEligibilityCargo",
						16777);
			}
			return result;
		}
		
		/**
		 * The method to get data from DC_INDV_LIVING_ARNGMNTS based on INDV_ID who live in LTC
		 * ND-98057
		 * @author shreyasingh
		 * @param caseNum long
		 * @return DcCaseIndividualCargo
		 * @throws CoException
		 */
		public Object[] findByIndvHomeCom(long indvId, Timestamp date) throws CoException {
			Object[] result = null;
			DcIndvLivingArngmntsCargo dcIndvLivingArngmntsCargo = new DcIndvLivingArngmntsCargo();
			try {
				dcIndvLivingArngmntsCargo.setIndvId(indvId);
				dcIndvLivingArngmntsCargo.setEffBeginDt(date);
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcIndvLivingArngmnts", "findByIndvHomeCom",
						dcIndvLivingArngmntsCargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DC_INDV_LIVING_ARNGMNTS",
						16745);
			}
			return result;
		}
		
		/**
		 * ND-98196
		 * @return
		 * @throws CoException
		 */
		public DcIndvNonCooperationCargo[] findIfLostSanctionAppeal(DcIndvNonCooperationCargo dcIndvNonCooperationCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom","DcIndvNonCooperation", 
						"findIfStatusACfromHA",
						dcIndvNonCooperationCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Dc_Indv_Non_Cooperation", 16312);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		/**
	     * Added for ND-97521
	     * @param  edEligibilityCargo
	     * @return EdEligibilityCargo[]
	     * @throws CoException
	     */
	    public EdEligibilityCargo[] getEdRecordsForNDEBN111(
	    		EdEligibilityCargo edEligibilityCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "getEdRecordsForNDEBN111",
						edEligibilityCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException(
						"Select failed for EdEligibility--->getEdRecordsForNDEBN111",
						16313);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;
		}
	    
	    /**
	     * Added for ND-97521
	     * @param  edEligibilityCargo
	     * @return EdEligibilityCargo[]
	     * @throws CoException
	     */
		public EdEligibilityCargo[] findCancelledEdWithProgramCode(
				EdEligibilityCargo edEligibilityCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findCancelledEdWithProgramCode",
						edEligibilityCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException(
						"Select failed for EdEligibility--->findCancelledEdWithProgramCode",
						16313);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;
		}
		
		/**
		 * Added for ND-97521
		 * @param caseNum
		 * @param edgTraceIds
		 * @return
		 * @throws CoException
		 */
		public Object[] getTANFFBudgetDetails(long caseNum, String edgTraceIds )
				throws CoException {
			Object[] args = new Object[2];
			Object[] result = null;
			args[0]=edgTraceIds;
			args[1] = caseNum;	

			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligTanfBudget", "getTANFFBudgetDetails",
						null, args, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Ed ELIG TANF Budget",
						16327);
			}
			return result;
		}
		
		/**
	     * Added for ND-97521
	     * @param  edEligibilityCargo
	     * @return EdEligibilityCargo[]
	     * @throws CoException
	     */
		public EdEligibilityCargo[] findCancelledLiheapEd(
				EdEligibilityCargo edEligibilityCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findCancelledLiheapEd",
						edEligibilityCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException(
						"Select failed for EdEligibility--->findCancelledLiheapEd",
						16313);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;
		}
		
		/**
		 * ND-96489
		 * @return
		 * @throws CoException
		 */
		public DcIndvNonCooperationCargo[] getNDTANF078Sanctions(DcIndvNonCooperationCargo dcIndvNonCooperationCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom","DcIndvNonCooperation", 
						"getNDTANF078Sanctions",
						dcIndvNonCooperationCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Dc_Indv_Non_Cooperation", 16312);
			}
			return result == null ? null : (DcIndvNonCooperationCargo[]) result;
		}
		
		/* 
		 * @author ANATYAGI
		 * @param caseNum
		 *            sTRING	
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 */
		public Object[] getEdRecordsForComparision(String caseNumber,String noticeNum)
				throws CoException {
			Object[] result = null;	
			Object[] args = new Object[2];
			args[0] = caseNumber;
			args[1] = noticeNum;
			EdEligibilityCargo cargo=new EdEligibilityCargo();
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findRecordsForNOEUtility",cargo,args,conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getEdRecordsForComparision---->getEdRecordsForComparision", 16765);
			}

			return result;
		}
		
		/* 
		 * @author ANATYAGI
		 * @param caseNum
		 *            sTRING	
		 * @return Object[] Resultset from the DAO
		 * @throws CoException
		 */
		public Object[] findByCaseNumCaseForUtilityComparision(long caseNumber)
				throws CoException {
			Object[] result = null;	
			Object[] args = new Object[1];
			args[0] = caseNumber;
			DcCasesCargo cargo=new DcCasesCargo();
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"DcCases", "findByCaseNum",cargo,args,conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for findByCaseNumCaseForUtilityComparision---->findByCaseNumCaseForUtilityComparision", 16765);
			}

			return result;
		}
		
		/**
		 * 
		 * @param caseNum
		 * @param targetPersonId
		 * @return
		 * @throws CoException
		 */	
	
		public EdEligibilityCargo[] getEdEligibilityByTargetPersonId(
				EdEligibilityCargo edEligibilityCargo) throws CoException {
			Object[] result = null;
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "findEdRecordsByTargetPersonIdForUtility",
						edEligibilityCargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException(
						"Select failed for EdEligibility--->getEdEligibilityByTargetPersonId",
						16313);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;
		}
		
		/**ND-98872 Populating Map For Application Month+1 Fragments*/
		public EdEligibilityCargo[] getBenefitsPerMonth(long caseNum) throws CoException {
			Object[] result = null;
			Object[] obj = { caseNum };
			try {
				result = CoDAOFactory.select(
						"gov.state.nextgen.common.collection.custom",
						"EdEligibility", "getBenefitsPerMonth", null,
						obj, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for ED_ELIGIBILITY", 16796);
			}
			return result == null ? null : (EdEligibilityCargo[]) result;

		}
		/**
		 * @author akshayas
		 * @param claimIds
		 * @return
		 * @throws CoException
		 */
		public BvClaimRecoveryCargo[] getProviderClaimDetails(String claimIds,String programCd) throws CoException
		{
			BvClaimRecoveryCargo[] result = null;
			Object[] args=new Object[2];
			args[0]=claimIds;		
			args[1]=programCd;
			try
			{
				result =(BvClaimRecoveryCargo[]) CoDAOFactory.select("gov.state.nextgen.common.collection.custom", 
						"BvClaimRecovery", 
						"findByClaimIds", null, args, conn);
			}
			catch (Exception e)
			{

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for Bv_Claim_Recovery", 16357);
			}
			return result == null || result.length == 0 ? null : (BvClaimRecoveryCargo[]) result;
			
		}	

		/* 
		 * @author akshayas
		 * @param provider_id
		 * @throws CoException
		 */		
		public BvClaimHeaderCargo[] getProviderClaimIds(long provider_id) throws CoException { 
			Object[] result = null;
			BvClaimHeaderCargo cargo = new BvClaimHeaderCargo();
			cargo.setProviderId(provider_id);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "BvClaimHeader", "findByProviderId", cargo, null, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for getCaseNumFromClaimIds", 16751);
			}
			return result == null ? null : (BvClaimHeaderCargo[]) result;
		}
		
		/**
		 * This method is used to update attachments field in CO Request History 
		 * 
		 * @param coReqSeq long
		 * @return commitFlag int
		 * @throws CoException
		 * @author kschopra
		 */
		public boolean updateCoRequestAttachments(long coReqSeq,String attachment)
				throws CoException {
			int commitFlag = 0;
			boolean resultFlag = false;
			CoDebugger.debugInformation("Inside updateCoRequestAttachments");
			CoDebugger.debugInformation("attachment "+attachment);
			CoRequestHistoryCollection coReqHistoryCol  = new CoRequestHistoryCollection();
			CoRequestHistoryCargo coReqCargo = new CoRequestHistoryCargo();
			Object coReqHistoryObj = null;
			CoRequestHistoryCargo[] arrCoReqHistoryCargo = null;

			coReqCargo.setCoReqSeq(coReqSeq);
			coReqHistoryCol.setCargo(coReqCargo);
			
			try {
				openConnection();
				coReqHistoryObj = coReqHistoryCol.select("findByReqSeq");
				coReqHistoryCol.clear();
				CoDebugger.debugInformation("coReqHistoryObj "+coReqHistoryObj == null ? "coReqHistoryObj is null" : "coReqHistoryObj is not null");
				if (coReqHistoryObj != null && coReqHistoryObj instanceof CoRequestHistoryCargo[]) {
					CoDebugger.debugInformation("coReqHistoryObj is not null && coReqHistoryObj instanceof CoRequestHistoryCargo[]");
					CoDebugger.debugInformation("attachment "+attachment);
					CoDebugger.debugInformation("coReqSeq "+coReqCargo.getCoReqSeq());


					
					openConnection();
					arrCoReqHistoryCargo = (CoRequestHistoryCargo[])coReqHistoryObj;
					if (null!=arrCoReqHistoryCargo[0].getAttachments()){
						CoDebugger.debugInformation("arrCoReqHistoryCargo[0].getAttachments()"+ arrCoReqHistoryCargo[0].getAttachments());
					}else{
						CoDebugger.debugInformation("arrCoReqHistoryCargo[0].getAttachments() is null");

					}
					if((null!=attachment && null==arrCoReqHistoryCargo[0].getAttachments()) || (null==attachment && null!=arrCoReqHistoryCargo[0].getAttachments()) ||
							(null!=attachment && null!=arrCoReqHistoryCargo[0].getAttachments()) && !attachment.equalsIgnoreCase(arrCoReqHistoryCargo[0].getAttachments())){
						if('Y' == arrCoReqHistoryCargo[0].getManuallyGeneratedSw()){
						CoDebugger.debugInformation("Inside condition");
						arrCoReqHistoryCargo[0].setAttachments(attachment);				
						coReqHistoryCol.add(arrCoReqHistoryCargo[0]);
						resultFlag = coReqHistoryCol.update();
						}
						else{
							/** ND 101024 Start Fix for attachments not getting updated from ED flow*/
							CoDebugger.debugInformation("Inside condition for ManuallyGeneratedSw not Y ");
							CoDebugger.debugInformation("attachment "+attachment);
							CoDebugger.debugInformation("coReqSeq "+coReqCargo.getCoReqSeq());
							arrCoReqHistoryCargo[0].setAttachments(attachment);				
							coReqHistoryCol.add(arrCoReqHistoryCargo[0]);
							resultFlag = coReqHistoryCol.update();
							CoDebugger.debugInformation("resultFlag "+resultFlag);
	
							/**ND 101024 End */
						}
					}
				}
			} catch (ApplicationException e1) {
				commitFlag = -1;
				CoDebugger.debugException(
						"ApplicationException while updating CO_REQUEST_HISTORY", e1);
			} catch (FrameworkException e1) {
				commitFlag = -1;
				CoDebugger.debugException(
						"FrameworkException while updating CO_REQUEST_HISTORY", e1);
			} finally {
				closeConnection();
			}
			
			return resultFlag;
		}
		
	/**
	 * Method returns EdIndvEligibilityCargo
	 * 
	 * @param caseNum
	 *            long
	 * @param partWhereClause
	 *            String
	 * @return Object[] -- Resultset from the DAO
	 * @throws CoException
	 * @throws FrameworkException
	 * @throws ApplicationException
	 *             Added for ND-98976
	 */
	public EdIndvEligibilityCargo[] getEligChildforCaseNum(long caseNum)
			throws CoException, ApplicationException, FrameworkException {

		EdIndvEligibilityCargo edIndvEligCarg = new EdIndvEligibilityCargo();
		edIndvEligCarg.setCaseNum(caseNum);
		EdIndvEligibilityCollection edIndEligColl = new EdIndvEligibilityCollection();
		edIndEligColl.setCargo(edIndvEligCarg);
		EdIndvEligibilityCargo[] edIndivEligCarArr = null;
		edIndivEligCarArr = (EdIndvEligibilityCargo[]) edIndEligColl
				.select("findEligibleChildForCase");
		return edIndivEligCarArr;
	}
	
	/**
	 * getBvClaimRecoveryOutstandingAmount
	 * Added for ND-100012
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] getBvClaimRecoveryOutstandingAmount(
			long caseNum) throws CoException {
		Object[] result = null;
		BvClaimRecoveryCargo bvClaimRecoveryCargo = new BvClaimRecoveryCargo();
		bvClaimRecoveryCargo.setCaseNum(caseNum);

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BvClaimRecovery",
					"findOutstandingClaimAmount", bvClaimRecoveryCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BvClaimRecovery", 16908);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in BvClaimRecovery", 16037);
		}
		return result;
	}	

	private long getPrimaryIndividualIDFromCase(String caseNumber) throws CoException {
		long indvId = 0;
		try {
			DcHeadOfHouseholdCargo[] dcHeadOfHouseholdCargoArray = null;
			DcHeadOfHouseholdCollection dcHeadOfHouseholdCollection = new DcHeadOfHouseholdCollection();
			DcHeadOfHouseholdCargo dcHeadOfHouseholdCargo = new DcHeadOfHouseholdCargo();
			dcHeadOfHouseholdCargo.setCaseNum(Long.parseLong(caseNumber));
			dcHeadOfHouseholdCollection.setCargo(dcHeadOfHouseholdCargo);
			dcHeadOfHouseholdCargoArray = (DcHeadOfHouseholdCargo[]) dcHeadOfHouseholdCollection.select("findByHoH");
			if (dcHeadOfHouseholdCargoArray != null && dcHeadOfHouseholdCargoArray.length > 0) {
				indvId = dcHeadOfHouseholdCargoArray[0].getIndvId();												
			}
		} catch (Exception e) {
			log.log(CoConstants.CO_NAME,ILog.INFO ,"Exception in dcHeadOfHouseholdCollection.select :: " + e.getMessage());
			CoDebugger.debugException("Exception while getting HOH for caseNumber ---> "+caseNumber, e);
		}
		
		return indvId;
	}
	
	/* 
	 * @author akshayas
	 * @param indvId
	 * @throws CoException
	 * added as part of ND-100818
	 */		
	public DcHealthcareCovCargo[] getBeginDtForMSP(String indvId) throws CoException { 
		Object[] result = null;
		Object[] args=new Object[1];
		args[0]=indvId;		
			
		try {
			result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcHealthcareCov", "findByIndvIdAndCoverageCdAndBeginDt", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for getBeginDtForMSP", 16751);
		}
		return result == null ? null : (DcHealthcareCovCargo[]) result;
	}
		
	public DcIndvAbawdCargo[] findEtxdSNAPABAWDIndvDueForClosure(String IndvId) throws CoException {
        Object[] result = null;
        Object[] params = new Object[1];
        params[0] = IndvId;
        try {
              result = CoDAOFactory.select(
                        "gov.state.nextgen.common.collection.custom",
                           "DcIndvAbawd", "findEtxdSNAPABAWDIndvDueForClosure",
                           null, params, conn);
        } catch (Exception e) {
              CoDebugger.debugException(e.getMessage(), e);
              throw new CoException("Select failed for EdIndvEligibility", 16312);
        }
        return result == null ? null : (DcIndvAbawdCargo[]) result;
 }
 
 public DcIndvAbawdCargo[] findSNAPABAWDIndvDueForClosure(String IndvId) throws CoException {
        Object[] result = null;
        Object[] params = new Object[1];
        params[0] = IndvId;
        try {
              result = CoDAOFactory.select(
                        "gov.state.nextgen.common.collection.custom",
                           "DcIndvAbawd", "findSNAPABAWDIndvDueForClosure",
                           null, params, conn);
        } catch (Exception e) {
              CoDebugger.debugException(e.getMessage(), e);
              throw new CoException("Select failed for EdIndvEligibility", 16312);
        }
        return result == null ? null : (DcIndvAbawdCargo[]) result;
 }
 
 
 
 public Object[] getEDEligibiltyforEdgId(long caseNum , String edgetraceId )
              throws CoException {
        Object[] args = new Object[2];
        Object[] result = null;
        Object[] obj = { new Long(caseNum),edgetraceId};
        try {
              result = CoDAOFactory.select(
                        "gov.state.nextgen.common.collection.custom",
                           "EdEligibility", "findByCaseNumberEdgTraceIdforNDHCREN17",
                           null, obj, conn);
        } catch (Exception e) {
              CoDebugger.debugException("CoDAOServices - getEDEligibiltyforEdgId - exception - "+e.getMessage(), e);
              throw new CoException("CoDAOServices - getEDEligibiltyforEdgId - exception - Select failed for ED_ELIGIBILITY",
                           16342);
        }
        return result == null ? null : (EdEligibilityCargo[]) result;


}


/**
              * ND-60876
              * @author karraj
              * @param lCaseNum
              * @return
              * @throws NoDataFoundException
              * @throws CoException
              */
              public EdIndvEligibilityCargo[] findSNAPABAWDCaseDueForClosure(long caseNum, Timestamp date) throws CoException {
                     Object[] result = null;
                     Object[] params = new Object[2];
                     params[0] = caseNum;
                     params[1] = date;
                     try {
                           result = CoDAOFactory.select(
                                    "gov.state.nextgen.common.collection.custom",
                                       "EdIndvEligibility", "findSNAPABAWDCaseDueForClosure",
                                       null, params, conn);
                     } catch (Exception e) {
                           CoDebugger.debugException(e.getMessage(), e);
                           throw new CoException("Select failed for EdIndvEligibility", 16312);
                     }
                     return result == null ? null : (EdIndvEligibilityCargo[]) result;
              }
              
              /**
               * ND-60876
               * @author aayushtyagi
               * @param caseNum
               * @param indivId
               * @return
               * @throws NoDataFoundException
               * @throws CoException
               */
              public EdIndvEligibilityCargo[] findSNAPABAWDCaseDueNotForClosure(long caseNum, String indivId, Timestamp date) throws CoException {
                  Object[] result = null;
                  Object[] params = new Object[3];
                  params[0] = caseNum;
                  params[1] = indivId;
                  params[2] = date;
                  try {
                        result = CoDAOFactory.select(
                                 "gov.state.nextgen.common.collection.custom",
                                    "EdIndvEligibility", "findSNAPABAWDCaseDueNotForClosure",
                                    null, params, conn);
                  } catch (Exception e) {
                        CoDebugger.debugException(e.getMessage(), e);
                        throw new CoException("Select failed for EdIndvEligibility", 16312);
                  }
                  return result == null ? null : (EdIndvEligibilityCargo[]) result;
           }
              
              /**
               * ND-102419
               * @author akshayas
               * @param asOfDate
               * For CR 819
               * @throws CoException
               */            
 
          	
          	public Object[] getAllIndvDetails(String asOfDate) throws CoException{
          		Object[] result = null;
          		Object[] args=new Object[1];
          		args[0]=asOfDate;		

          		try {
          			result = CoDAOFactory.select(
          					"gov.state.nextgen.common.collection.custom", "EdIndvEligibility",
          					"findIndvDetailsProg", null, args, conn);
          		} catch (Exception e) {
          			CoDebugger.debugException(e.getMessage(), e);
          			throw new CoException("Select failed for getAllIndvDetails", 16908);
          		}
          		return result == null || result.length == 0 ? null
          				: (Object[]) result;
          	}
          	
          	
          	/**
             * ND-102419
             * @author akshayas
             * @param asOfDate
             * For CR 819
             * @throws CoException
             */            

        	
        	public Object[] getAllIndvDetails(String asOfDate,long caseNum) throws CoException{
        		Object[] result = null;
        		Object[] args=new Object[2];
        		args[0]=asOfDate;	
        		args[1]=caseNum;

        		try {
        			result = CoDAOFactory.select(
        					"gov.state.nextgen.common.collection.custom", "EdIndvEligibility",
        					"findIndvDetailsProg", null, args, conn);
        		} catch (Exception e) {
        			CoDebugger.debugException(e.getMessage(), e);
        			throw new CoException("Select failed for getAllIndvDetails", 16908);
        		}
        		return result == null || result.length == 0 ? null
        				: (Object[]) result;
        	}
        	/**
        	 * ND-102403
        	 * CR-821
        	 * This method picks up the data from Co_Relative_Decision Table based on co_req_seq and also Delete Sw = 'N'
        	 * @author shreyasingh
        	 * @param coReqSeq long
        	 * @return result CoRelativeDecisionCargo[]
        	 * @throws CoException
        	 */
        	  public CoRelativeDecisionCargo[] getRelativeDecisionDynaData(long coReqSeq) throws CoException {
  				CoDebugger.debugInformation("CoDaoServices - getRelativeDecisionDynaData - Start - co_req_seq "+coReqSeq);
        			Object[] result = null;
        			CoRelativeDecisionCargo coRelativeDecisionCargo = new CoRelativeDecisionCargo();
        			coRelativeDecisionCargo.setCoReqSeq(coReqSeq);
           			try {
        				result = CoDAOFactory.select(
        						"gov.state.nextgen.common.collection.custom",
        						"CoRelativeDecision", "findByDocIdAndSeqNum",
        						coRelativeDecisionCargo, null, conn);
        			} catch (Exception e) {
        				CoDebugger.debugException(e.getMessage(), e);
        				throw new CoException("Select failed for CoRelativeDecision", 16312);
        			}
      				CoDebugger.debugInformation("CoDaoServices - getRelativeDecisionDynaData - End");
        			return result == null ? null : (CoRelativeDecisionCargo[]) result;
        		}
        		
        	  public Object[] findForElementIdsForDocId(String elementIds, String docId) throws CoException {
      			long startTime =  new FwDate().getTimeInMillis(); 
      			log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - started - elementId = " + elementIds);
      			Object[] result = null;
      			Object[] objList = new Object[2];
      			objList[0] = elementIds;
      			objList[1] = docId;
      			/*FwDataElementListCargo fwDataElementListCargo = new FwDataElementListCargo();
      			fwDataElementListCargo.setDeElementId(elementId);*/
      			try {
      				result = CoDAOFactory.select(
      						"gov.state.nextgen.framework.business.entities",
      						"FwDataElementList", "findElementIdsForDocId",
      						null,objList, conn);
      			} catch (Exception e) {

      				CoDebugger.debugException("CoDAOServices - getManualFields - exception - "+e.getMessage(), e);
      				throw new CoException("CoDAOServices - getManualFields - exception - No data in FW_DATA_ELEMENT_LIST", 16092);
      			}
      			log.log(CoConstants.CO_NAME,ILog.INFO ,"CoDAOServices - getManualFields - timeTaken : " + (System.currentTimeMillis() - startTime));
      			return result == null ? new FwDataElementListCargo[0] : result;
      		}
        	  
        	  /**
          	 * ND-103231
          	 * CR-607
          	 * This method fetches the kids referred to SNAP Best 
          	 * @author akshayas
          	 * @param caseNum,generateDate
          	 * @throws CoException
          	 */
        	  
    		public Object[] getMembersDetails(long casenum,Timestamp generateDt) throws CoException {
    			Object[] result = null;
    			DcIndvCargo dcIndvCargo = new DcIndvCargo();
    			Object[] params = new Object[2];
    			params[0] = casenum;
    			params[1] = generateDt;
    			try {
    				result = CoDAOFactory.select(
    						"gov.state.nextgen.common.collection.custom",
    						"DcIndv", "findByCaseNumAndProgram", dcIndvCargo, params,
    						conn);
    			} catch (Exception e) {
    				CoDebugger.debugException("CoDAOServices - getDcIndividual - exception message"+e.getMessage(), e);
    				throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV", 16319);
    			}
    			return result;
    		}
    		
    		 /**
          	 * ND-103231
          	 * CR-607
          	 * This method fetches the kids referred to SNAP Work 
          	 * @author akshayas
          	 * @param caseNum,generateDate
          	 * @throws CoException
          	 */
    		
    		public Object[] getMembersDetailsforSnap(long casenum,Timestamp generateDt) throws CoException {
    			Object[] result = null;
    			DcIndvCargo dcIndvCargo = new DcIndvCargo();
    			Object[] params = new Object[2];
    			params[0] = casenum;
    			params[1] = generateDt;
    			try {
    				result = CoDAOFactory.select(
    						"gov.state.nextgen.common.collection.custom",
    						"DcIndv", "findByCaseNumForSnap", dcIndvCargo, params,
    						conn);
    			} catch (Exception e) {
    				CoDebugger.debugException("CoDAOServices - getDcIndividual - exception message"+e.getMessage(), e);
    				throw new CoException("CoDAOServices - getDcIndividual - exception - Select failed for DC_INDV", 16319);
    			}
    			return result;
    		}
    		
    		  /**
          	 * ND-103231
          	 * CR-607
          	 * This method will be called to cancel the trigger for NDFSN0055 notice 
          	 * @author akshayas
          	 * @param caseNum
          	 * @throws CoException
          	 */
    		
    		 public void cancelTrigger(long caseNum) throws CoException {
                 CoRequestHistoryCargo coRequestHistoryCargo = new CoRequestHistoryCargo();
                 coRequestHistoryCargo.setDocId(CoConstants.DOC_NDFSN0055);
                 coRequestHistoryCargo.setCaseNum(caseNum);
                 CoRequestHistoryCargo[] coRequestHistoryCargos=null;
                 try{
                        coRequestHistoryCargos = (CoRequestHistoryCargo[])CoDAOFactory.select(
                                     "gov.state.nextgen.common.collection.custom",
                                     "CoRequestHistory", "findIfTriggerExistsByGenerateDt", coRequestHistoryCargo, null, conn);
                 }catch(Exception e) {
                        CoDebugger.debugException(e.getMessage(), e);
                        throw new CoException("Select failed for findIfTriggerExistsByGenerateDt", 16751);
                 }
                 if(null!=coRequestHistoryCargos && coRequestHistoryCargos.length>0 && null!= coRequestHistoryCargos[0]){
                        for(CoRequestHistoryCargo coReqHistoryCargo:coRequestHistoryCargos){
                              DcIndvCargo[] dcIndvCargos =null;
                              try{
                              if(null!=coReqHistoryCargo && null!=coReqHistoryCargo.getMiscParms() && coReqHistoryCargo.getMiscParms().equalsIgnoreCase(CoConstants.BEST)){
                              dcIndvCargos = (DcIndvCargo[]) getMembersDetails(caseNum,coReqHistoryCargo.getGenerateDt());
                              }else if(null!=coReqHistoryCargo && null!=coReqHistoryCargo.getMiscParms() && coReqHistoryCargo.getMiscParms().equalsIgnoreCase(CoConstants.WORK_REGISTRANTS)){
                              dcIndvCargos = (DcIndvCargo[]) getMembersDetailsforSnap(caseNum,coReqHistoryCargo.getGenerateDt());
                              }
                              }catch(Exception e){
                                     CoDebugger.debugException(e.getMessage(), e);
                                     throw new CoException("Select failed for dcIndvCargos", 16751);
                              }
                              if(null==dcIndvCargos||(null!=dcIndvCargos && dcIndvCargos.length==0)){
                          		    CoRequestHistoryCollection coRequestHistoryCollection = new CoRequestHistoryCollection();
                          		    coRequestHistoryCollection.setEJBSupported(false);
                                     coReqHistoryCargo.setPendingTrigSw('C');                                                           				
                                     coRequestHistoryCollection.add(coReqHistoryCargo);
                                     try {
                             			if (coRequestHistoryCollection.size() > 0) {
                             				coRequestHistoryCollection.update();
                             			} else {
                             				CoDebugger
                             				.debugInformation("No records updated to C");
                             			}
                             		} catch (Exception e) {
                             			CoDebugger.debugException(e.getMessage(), e);
                             		} 
                              }
                        }
                 }
    		 }
    		 
	/**
	 * Added for CR 831 API to generate generateNDCCAP126Trigger
	 * 
	 * @param caseNum
	 * @param indvId
	 * @param program
	 * @throws CoException
	 */
	public void generateNDCCAP126Trigger(long providerId, String program,
			String create_user, String claimId) throws CoException {
		CoDebugger
				.debugMessage("Entering:: CoDAOservices.generateNDCCAP126Trigger(long,long,String,String)");
		CoDebugger.debugMessage("Provider Id:" + providerId);
		CoDebugger.debugMessage("Programs:" + program);
		CoDebugger.debugMessage("ClaimId:" + claimId);
		COCorrespondence correspondence = new COCorrespondence();
		correspondence.setAssistanceProgramCode(CoConstants.CCAP_PROG_CD);
		correspondence.setCaseAppFlag(CoConstants.RECIPIENT_SPACES_PROVIDER);
		correspondence.setProviderId(providerId);
		correspondence.setMiscParameters(claimId);
		correspondence.setDocType(CoConstants.CHAR_F);
		/** Change to CoConstants.DOC_ID_NDCCAP126
		correspondence.setDocId("NDCCAP126"); */
		correspondence.setRequestUserId(create_user);
		correspondence.setManualyGenerated(false);
		correspondence.setGenerateDate(new java.sql.Timestamp(CoDateFactory
				.getUtilDate().getTime()));

		try {
			if (!this.checkActiveTriggersForProviderIdClaimId(correspondence)) {
				this.generateCorrespondenceRequest(correspondence);
			} else if (this
					.checkActiveTriggersForProviderIdClaimId(correspondence)) {
				CoDebugger
						.debugMessage("CoDAOService.generateNDCCAP126Trigger-->Skipping this trigger. Active trigger for today already exist ");
			} else {
				CoDebugger
						.debugMessage("CoDAOService.generateNDCCAP126Trigger-->Unable to generate trigger. No CCAP trigger request ");
			}
		} catch (CoException e) {
			CoDebugger
					.debugException(
							"CoDAOService.generateNDCCAP126Trigger-->Error while checking the existence of the request in the co_request_details",
							e);
		}
		CoDebugger
				.debugMessage("Exiting:CoDAOservices.generateNDCCAP126Trigger(long,long,String,String)");
	}

	/**
	 * Added for CR 831
	 * 
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public boolean checkActiveTriggersForProviderIdClaimId(
			COCorrespondence aCoObj) throws CoException {
		Object[] result = null;
		CoRequestHistoryCargo cargo = new CoRequestHistoryCargo();
		cargo.setDocId(aCoObj.getDocId());
		cargo.setProviderId(aCoObj.getProviderId());
		cargo.setMiscParms(aCoObj.getMiscParameters());
		cargo.setCreateDt(aCoObj.getGenerateDate());

		CoDebugger.debugInformation("CO Request Generate Date is "
				+ aCoObj.getGenerateDate());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoRequestHistory", "findTriggersByDocIdProviderIdClaimId",
					cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for CoRequestHistory", 16099);
		}
		if (result != null && result.length > 0) {
			CoDebugger.debugInformation("Active triggers exist");
			return true;
		} else {
			CoDebugger.debugInformation("Active triggers do not exist");
			return false;
		}
	}

	/**
	 * Added for CR 831
	 * 
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public Object[] findClaimsForProviderByDateAndProviderID(
			BvClaimCargo bvClaimCargo) throws CoException {
		Object[] result = null;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "BvClaim",
					"findClaimsForProviderByDateAndProviderID", bvClaimCargo,
					null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for Bv_Claim", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in Bv_Claim", 16037);
		}

		return result;
	}

	/**
	 * Added for CR 831
	 * 
	 * @param aCoObj
	 * @return
	 * @throws CoException
	 */
	public Object[] getProviderCargoByProviderId(long providerId)
			throws CoException {
		Object[] result = null;
		PmCcapProvidersCargo cargo = new PmCcapProvidersCargo();
		cargo.setProviderId(((Long) providerId).intValue());
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmCcapProviders", "findEffBeginDate", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmCcapProviders", 16312);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in PmCcapProviders", 16037);
		}
		return result;
	}
	
	/**
	 * ND-100110
	 * CR-670
	 * This method picks up the data from Co_Notice_Of_Match Table based on co_req_seq
	 * @author amodkumar
	 * @param coReqSeq long
	 * @return result CoNoticeOfMatchCargo[]
	 * @throws CoException
	 */
	public CoNoticeOfMatchCargo[] getNoticeOfMatchDynaData(long coReqSeq) throws CoException {
	    CoDebugger.debugInformation("CoDaoServices - getNoticeOfMatchDynaData - Start - co_req_seq "+coReqSeq);
		Object[] result = null;
		CoNoticeOfMatchCargo coNoticeOfMatchCargo = new CoNoticeOfMatchCargo();
		coNoticeOfMatchCargo.setCoReqSeqNum(coReqSeq);
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"CoNoticeOfMatch", "findByDocIdAndSeqNum",
					coNoticeOfMatchCargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for coNoticeOfMatchCargo", 16312);
		}
		CoDebugger.debugInformation("CoDaoServices - getNoticeOfMatchDynaData - End");
		return result == null ? null : (CoNoticeOfMatchCargo[]) result;
	}
	
	/**
	 * Notice of Match Results - Start
	 * CR-670
	 * @author amodkumar
	 */
  public Object[] getDetailsByCaseNum(long caseNum) throws CoException {
		Object[] result = null;
		VDcCaseIndvDetailsCargo cargo = new VDcCaseIndvDetailsCargo();
		cargo.setCaseNum(caseNum);;
		try {
			result = CoDAOFactory
					.select("gov.state.nextgen.common.collection.custom",
							"VDcCaseIndvDetails", "findBycaseNumber", cargo,
							null, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for V_DC_CASE_INDV_DETAILS",
					16369);
		}
		if (result == null || result.length == 0) {
			throw new NoDataFoundException("No data in V_DC_CASE_INDV_DETAILS",
					16072);
		}
		return result;
	}
	/**
	 * Notice of Match Results - End
	 * CR-670
	 * @author amodkumar
	 */
  
  /**
	 * CR-911
	 * This method picks up the data from ED_ELIGIBILITY Table based on case_number
	 * @author Aninda
	 * @param case_number long
	 * @param case_number programCd
	 * @return result EdEligibilityCargo[]
	 * @throws CoException
	 */
	public EdEligibilityCargo[] findAllRecordsForProgram(long caseNum, String programCd) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] = programCd;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findAllRecordsForProgram", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - findSNAPNoIssuanceRecords - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - findSNAPNoIssuanceRecords - exception - Select failed for ED_ELIGIBILITY", 16335);
		}
		return result == null ? null : (EdEligibilityCargo[])result;
	}
	
	/**
	 * Method added for ND-93241
	 * @param edEligibilityCargo
	 * @param ssCategory
	 * @param ssType
	 * @return
	 * @throws CoException
	 */
	public BiSupportiveServicesCargo[] findEmergencyNeedsforEdgTraceId(long caseNum, String edgTraceIdList) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] = edgTraceIdList;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiSupportiveServices",
					"findByEdgTraceIdForEmergencyNeeds", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for BI_SUPPORTIVE_SERVICES",
					16346);
		}
		return result == null ? null : (BiSupportiveServicesCargo[]) result;
	}
	
	/**
	 * CR-911
	 * This method picks up the data from ED_ELIGIBILITY Table based on case_number and edg_trace_id
	 * @author Aninda
	 * @param case_number long
	 * @param edg_trace_id list String
	 * @return result EdEligibilityCargo[]
	 * @throws CoException
	 */
	public EdEligibilityCargo[] findByCaseNumEdgTraceIdList(long caseNum, String edgTraceIds) throws CoException {
		Object[] result = null;
		EdEligibilityCargo edEligibilityCargo = new EdEligibilityCargo();
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] = edgTraceIds;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "findByCaseNumEdgTraceIdList", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - findSNAPNoIssuanceRecords - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - findSNAPNoIssuanceRecords - exception - Select failed for ED_ELIGIBILITY", 16335);
		}
		return result == null ? null : (EdEligibilityCargo[])result;
	}
	
	/**
	 * Returns the data from DcIndv table.
	 * ADDED FOR ND-105406
	 * @param caseNum
	 *            Case Number
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public Object[] findIfSingleChildIsPI(long caseNum) throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = caseNum;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "DcIndv",
					"findIfSingleChildIsPI", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for DcIndv", 16849);
		}
		return result;
	}
	
	/**
	 * Added for ND-106011
	 * @param asOfDate
	 * @param caseNum
	 * @return
	 * @throws CoException
	 */
	public Object[] findIndvDetailsForSchoolVerificationForm(String asOfDate,long caseNum) throws CoException{
		Object[] result = null;
		Object[] args=new Object[2];
		args[0]=asOfDate;	
		args[1]=caseNum;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom", "EdIndvEligibility",
					"findIndvDetailsForSchoolVerificationForm", null, args, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for findIndvDetailsForSchoolVerificationForm", 16908);
		}
		return result == null || result.length == 0 ? null
				: (Object[]) result;
	}
	
	/**
	 * Added for CR 911
	 * @param long[] indvId
	 * @return
	 * @throws CoException
	 */
	public DcDisabilityCargo[] findDisabledIndividualsInCase(long[] indvId) throws CoException {
		Object[] result = null;
		Object [] params= new Object[1];
		params[0] = indvId;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcDisability", "findIndividualsInCase", null,
					params, conn);
		} catch (Exception e) {

			CoDebugger.debugException("CoDAOServices - findDisabledIndividualsInCase - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - findDisabledIndividualsInCase - exception - Select failed for DC_DISABILITY", 16335);
		}
		return (DcDisabilityCargo[]) (result == null ? null : result);
	}


	public DcChildAbsntDetailsCargo[] findChildWithAbsentParentByCaseNumAuto(long case_num,Timestamp generateDt) throws CoException {
			Object[] result = null;
			DcChildAbsntDetailsCargo cargo = new DcChildAbsntDetailsCargo();
			cargo.setCaseNum(case_num);
			cargo.setCreateDt(generateDt);
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcChildAbsntDetails", "findChildWithAbsentParentByCaseNumAuto", cargo, null, conn);
			} catch (Exception e) {

				CoDebugger.debugException(e.getMessage(), e);
				throw new CoException("Select failed for DcChildAbsntDetailsCargo > NDHCCTF79Assembler", 16751);
			}
			return result == null ? null : (DcChildAbsntDetailsCargo[]) result;
		}

	
	
	/**
	 * CR-932
	 * @author tdatta
	 * @param asOfDate
	 * @return
	 * @throws CoException
	 */
	public PmProviderChildAssocCargo[] getCCAPCertificateTriggersForVM(String asOfDate)throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = asOfDate;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "getTriggersForVM",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return (PmProviderChildAssocCargo[]) (result == null ? null :  result);
	}
	
	
	/**
	 * CR-932
	 * @author tdatta
	 * @param asOfDate
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getCCAPCertificateTriggersForED(String asOfDate)throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = asOfDate;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "getCCAPCertificateTriggersForED",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return (EdEligibilityCargo[]) (result == null ? null :  result);
	}

	
	/**
	 * CR-932
	 * @author tdatta
	 * Method to get Provider Child Assoc History Records
	 * @param updatedProviderChildAssocIds
	 * @return Object[] Resultset from the DAO
	 * @throws CoException
	 */
	public PmProviderChildAssocCargo[] getAssocHistoryRecords(long[] updatedProviderChildAssocIds, String asOfDate) throws CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = updatedProviderChildAssocIds;
		params[1] = asOfDate;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"PmProviderChildAssoc", "getAssocHistoryRecords", null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PM_CCAP_PROVIDERS: CCAP Certificates", 99664);
		}
		return (PmProviderChildAssocCargo[]) (result == null ? null :  result);
	}
	
	
	
	/**
	 * CR-932
	 * @author tdatta
	 * @param ispIds
	 * @param childIndvIds
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getCancelledEDRecordsForCCAPCerts(long[] ispIds)throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];
		params[0] = ispIds;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "getCancelledEDRecordsForCCAPCerts",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return (EdEligibilityCargo[]) (result == null ? null :  result);
	}

	
	/**
	 * Added for CR 831
	 * 
	 * @param providerId
	 * @return
	 * @throws CoException
	 */
	public DcCaseAddressesCargo[] findByProviderAssociatedCaseNum(
			Integer providerId) throws CoException {
		CoDebugger
				.debugMessage("CoDAOservices.findByProviderAssociatedCaseNum --> starts");
		DcCaseAddressesCargo[] result = null;
		Object[] args = new Object[1];
		args[0] = providerId.toString();
		try {
			result = (DcCaseAddressesCargo[]) CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"DcCaseAddresses", "findByProviderAssociatedCaseNum",
					null, args, conn);

		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Select failed for CoDAOServices---->findByProviderAssociatedCaseNum",
					16765);
		}
		if (result == null || result.length == 0) {
			CoDebugger
					.debugMessage("CoDAOservices.findByProviderAssociatedCaseNum --> No data in DcCaseAddresses");
			throw new NoDataFoundException("No data in DcCaseAddresses", 16037);
		}
		CoDebugger
				.debugMessage("CoDAOservices.findByProviderAssociatedCaseNum --> ends");

		return result;
	}
	
	
	

	 
	 public String getProgramPendForReview(EdCaseRecertDatesCargo[] edCaseRecertDatesCargos){
			CoDebugger.debugInformation("getProgramPendForReview --> Start");
			String progList= CoConstants.EMPTY_STRING;
			if(edCaseRecertDatesCargos==null || edCaseRecertDatesCargos.length==0){
				return progList;
			}else{
				for(int i=0;i<edCaseRecertDatesCargos.length;i++){
					if(progList.contains(edCaseRecertDatesCargos[i].getProgramCd())){
						continue;
					}else{
						if(null != edCaseRecertDatesCargos[i].getProgramCd() && !(CoConstants.EMPTY_STRING.equalsIgnoreCase(edCaseRecertDatesCargos[i].getProgramCd().trim()))){
							if(progList.isEmpty()){
								progList+=edCaseRecertDatesCargos[i].getProgramCd();
							}else{
								progList+=CoConstants.COMMA+edCaseRecertDatesCargos[i].getProgramCd();
							}
						}
						
					}
				}
			}
			return progList;
		}
	 

		/**
		 * This method picks up the data from Dc_Unearned_Pay_Expenses Table based on indv_id, unearned_seq_num and also FINAL_PAYMENT_SW != 'Y'
		 * ND-108568
		 * CR-939
		 * @author shreyasingh
		 * @param coReqSeq long
		 * @return result CoRelativeDecisionCargo[]
		 * @throws CoException
		 */
		  public DcUnearnedPayExpensesCargo[] getExistingIncomesbySeqNum(Object[] unearnedSeqNumList) throws CoException {
				CoDebugger.debugInformation("CoDaoServices - getExistingIncomesbySeqNum - Start - unearnedSeqNum "+unearnedSeqNumList);
				Object[] result = null;
				Object[] params = new Object[1];
				params[0] = unearnedSeqNumList;
	   			try {
					result = CoDAOFactory.select(
							"gov.state.nextgen.common.collection.custom",
							"DcUnearnedPayExpenses", "findExistingIncomesbySeqNum",
							null, params, conn);
				} catch (Exception e) {
					CoDebugger.debugException(e.getMessage(), e);
					throw new CoException("Select failed for getExistingIncomesbySeqNum", 16312);
				}
					CoDebugger.debugInformation("CoDaoServices - getExistingIncomesbySeqNum - End");
				return result == null ? null : (DcUnearnedPayExpensesCargo[]) result;
			}

			  /**
			   * This method is used to find all the incomes from Dc_Unearned_Income whose end date is not populated or end date is a future date for all the individuals in a case which is passed as a parameter
			   * ND-108568
			   * CR-939
			   * @author shreyasingh
			   * @param indvIdList
			   * @param generateDt
			   * @return DcUnearnedIncomeCargo[]
			   * @throws CoException
			   */
				public DcUnearnedIncomeCargo[] getUnearnedIncomeCargoforAllIndv(Object[] indvIdList, String generateDt) throws CoException {
					CoDebugger.debugInformation("CoDaoServices - getUnearnedIncomeCargoforAllIndv - Start - indvIdList "+indvIdList);
					Object[] result = null;
					Object[] params = new Object[2];
					params[0] = indvIdList;
					params[1] = generateDt;
					try{
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcUnearnedIncome",
								"findUnearnedIncomeCargoforAllIndv", null, params, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcUnearnedIncome for getUnearnedIncomeCargoforAllIndv", 16312);
					}
					CoDebugger.debugInformation("CoDaoServices - getUnearnedIncomeCargoforAllIndv - End");
					return result == null ? null : (DcUnearnedIncomeCargo[]) result;
				}
				
				/**
				 * This method is used to get the income from Dc_Self_Emp_Income of all the indivs passed as parameters based on the date
				 * ND-108568
				 * CR-939
				 * @author shreyasingh
				 * @param indvId
				 * @param generateDt
				 * @return DcSelfEmpIncomeCargo[]
				 * @throws CoException
				 */
				public DcSelfEmpIncomeCargo[] getSelfEmpIncomeforAllIndv(Object[] indvId, String generateDt) throws CoException {
					CoDebugger.debugInformation("CoDaoServices - getSelfEmpIncomeforAllIndv - Start - indvIdList "+indvId);
					Object[] result = null;
					Object [] params= new Object[2];
					params[0] = indvId;
					params[1] = generateDt;
					try{
						result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom", "DcSelfEmpIncome",
								"findSelfEmpIncomeforAllIndv", null, params, conn);
					} catch (Exception e) {
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DcSelfEmpIncome", 16312);
					}
					CoDebugger.debugInformation("CoDaoServices - getSelfEmpIncomeforAllIndv - End");
					return result == null ? null : (DcSelfEmpIncomeCargo[]) result;
				}
				
				// CR 934
				public Object[] getDcEmpPaymentExpensesDatesCargo(DcEmploymentCargo cargo) throws CoException {
					Object[] result = null;
					DcEmpPaymentExpensesCargo cb = new DcEmpPaymentExpensesCargo();
					
					try {
						cb.setEmpSeqNum(cargo.getEmpSeqNum());
						cb.setPaymentExpenseDt(cargo.getWrksheetEndDt());
						cb.setPaymentExpenseFrequencyCd(cargo.getPaymentFrequencyCd());
						result = CoDAOFactory.select(
								"gov.state.nextgen.common.collection.custom",
								"DcEmpPaymentExpenses", "findByEmpSeqNum", cb, null , conn);
					} catch (Exception e) {

						CoDebugger.debugException(e.getMessage(), e);
						CoDebugger.debugInformation(e.toString());
						CoDebugger.debugException(e.getMessage(), e);
						throw new CoException("Select failed for DC_CASES", 16313);
					}
					return result;
				}
				
	
		
		
		public DcDemographicsCargo[] getIndivDemographicData(Long[] indvIds){
			Object[] result = null;
			Object[] args = new Object[1];
			args[0] = indvIds;
	
			try {
				result = CoDAOFactory.select("gov.state.nextgen.common.collection.custom",
						"DcDemographics","findByIndividualsInCaseEffectiveEndDate", null, args, conn);
			} catch (Exception e) {
				CoDebugger.debugException(e.getMessage(), e);
			}
			return result == null ? null : (DcDemographicsCargo[]) result;
			
		}
		

	public BiSupportiveServicesCargo[] findSupportiveServicesByCaseNumber(long caseNum) throws CoException {
	    CoDebugger.debugInformation("CoDaoServices: findSupportiveServicesByCaseNumber for case: "+caseNum);

		Object[] result = null;
		
		BiSupportiveServicesCargo cargo = new BiSupportiveServicesCargo();
		cargo.setCaseNum(caseNum);
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"BiSupportiveServices",
					"findSSByCaseNumber", cargo, null, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed in findSupportiveServicesByCaseNumber for case: "+caseNum, 16346);
		}
		
		return result == null ? null : (BiSupportiveServicesCargo[]) result;
	}

	/**
	 * This method is used to fetch data from Mo_Offices based on the county code passed
	 * @author shreyasingh
	 * @param countyCd String 
	 * @return result MoOfficesCargo
	 * @throws CoException
	 */
	public Object[] getMoOfficesFromCountyCd(String countyCd) throws CoException {
		CoDebugger.debugInformation("CoDaoServices - getMoOfficesFromCountyCd - Start - countyCd "+countyCd);
		Object[] result = null;
		Object params[] = new Object[1];
		params[0]=countyCd;
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"MoOffices", "findDistinctOfficeByCountyNum", null, params,
					conn);
		} catch (Exception e) {
			CoDebugger.debugException("CoDAOServices - getMoOfficesFromCountyCd - exception - "+e.getMessage(), e);
			throw new CoException("CoDAOServices - getMoOfficesFromCountyCd - exception - Select failed for MO_OFFICES", 16358);
		}
		CoDebugger.debugInformation("CoDaoServices - getMoOfficesFromCountyCd - Start - countyCd "+countyCd);
		return result == null ? null : (MoOfficesCargo[]) result;
	}

	public EdDcIndvDisqPenaltiesCargo[] getPenaltyByCaseAndProgram(long caseNum,String programCd) throws CoException {
		Object[] result = null;
		Object [] params= new Object[2];
		params[0] = caseNum;
		params[1] = programCd;

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdDcIndvDisqPenalties",
					"findPenaltyCargosByprogramCd", null,
					params, conn);
		}  catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for EdDcIndvDisqPenalties", 16900);
		}
		return result == null ? null : (EdDcIndvDisqPenaltiesCargo[]) result;
	}
	
	/**
	 * Added for ND-110228- returns indv_ids of children marked out of household for entire authorization period
	 * @author tdatta
	 * @param asOfDate
	 * @throws CoException
	 */
	public Object[] getChildrenExcludedInAuthPeriod(String asOfDate) throws CoException {
		Object[] result = null;
		Object[] params = new Object[1];

		params[0]=asOfDate;
		
		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"VEdEligibilityIndv", "getChildrenExcludedInAuthPeriod",
					null, params, conn);
		} catch (Exception e) {

			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException(
					"Exception in getLevelofCarePartstatus", 16431);
		}
		return result == null || result.length == 0 ? null: result;
	}
	
	/**
	 * ND-110228
	 * @author tdatta
	 * @param asOfDate
	 * @return
	 * @throws CoException
	 */
	public EdEligibilityCargo[] getCCAPCertificateTriggersWithoutAssocsForED(String asOfDate, Long[] activeCaseNumbersWithAssocList)throws CoException {
		Object[] result = null;
		Object[] params = new Object[2];
		params[0] = asOfDate;
		if (activeCaseNumbersWithAssocList==null){
			params[1] = new Long[1];
		}else{
			params[1] = activeCaseNumbersWithAssocList;

		}

		try {
			result = CoDAOFactory.select(
					"gov.state.nextgen.common.collection.custom",
					"EdEligibility", "getCCAPCertificateTriggersWithoutAssocsForED",
					null, params, conn);
		} catch (Exception e) {
			CoDebugger.debugException(e.getMessage(), e);
			throw new CoException("Select failed for PmProviderChildAssoc", 16312);
		}
		return (EdEligibilityCargo[]) (result == null ? null :  result);
	}

	

	

}	


